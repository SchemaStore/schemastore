{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "allOf": [
    {
      "$ref": "#/definitions/compilerOptionsDefinition"
    },
    {
      "$ref": "#/definitions/compileOnSaveDefinition"
    },
    {
      "$ref": "#/definitions/typeAcquisitionDefinition"
    },
    {
      "$ref": "#/definitions/extendsDefinition"
    },
    {
      "$ref": "#/definitions/watchOptionsDefinition"
    },
    {
      "$ref": "#/definitions/buildOptionsDefinition"
    },
    {
      "anyOf": [
        {
          "$ref": "#/definitions/filesDefinition"
        },
        {
          "$ref": "#/definitions/excludeDefinition"
        },
        {
          "$ref": "#/definitions/includeDefinition"
        },
        {
          "$ref": "#/definitions/referencesDefinition"
        }
      ]
    }
  ],
  "definitions": {
    "//": {
      "explainer": "https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#overview",
      "reference": "https://www.typescriptlang.org/tsconfig",
      "reference metadata": "https://github.com/microsoft/TypeScript-Website/blob/v2/packages/tsconfig-reference/scripts/tsconfigRules.ts"
    },
    "buildOptionsDefinition": {
      "properties": {
        "buildOptions": {
          "properties": {
            "assumeChangesOnlyAffectDirectDependencies": {
              "default": false,
              "description": "Have recompiles in projects that use `incremental` and `watch` mode assume that changes within a file will only affect files directly depending on it.",
              "markdownDescription": "Have recompiles in projects that use `incremental` and `watch` mode assume that changes within a file will only affect files directly depending on it.\n\nSee more: https://www.typescriptlang.org/tsconfig#assumeChangesOnlyAffectDirectDependencies",
              "type": "boolean"
            },
            "dry": {
              "default": false,
              "description": "~",
              "type": "boolean"
            },
            "force": {
              "default": false,
              "description": "Build all projects, including those that appear to be up to date",
              "markdownDescription": "Build all projects, including those that appear to be up to date\n\nSee more: https://www.typescriptlang.org/tsconfig#force",
              "type": "boolean"
            },
            "incremental": {
              "default": false,
              "description": "Save .tsbuildinfo files to allow for incremental compilation of projects.",
              "markdownDescription": "Save .tsbuildinfo files to allow for incremental compilation of projects.\n\nSee more: https://www.typescriptlang.org/tsconfig#incremental",
              "type": "boolean"
            },
            "traceResolution": {
              "default": false,
              "description": "Log paths used during the `moduleResolution` process.",
              "markdownDescription": "Log paths used during the `moduleResolution` process.\n\nSee more: https://www.typescriptlang.org/tsconfig#traceResolution",
              "type": "boolean"
            },
            "verbose": {
              "default": false,
              "description": "Enable verbose logging",
              "markdownDescription": "Enable verbose logging\n\nSee more: https://www.typescriptlang.org/tsconfig#verbose",
              "type": "boolean"
            }
          }
        }
      }
    },
    "compileOnSaveDefinition": {
      "properties": {
        "compileOnSave": {
          "description": "Enable Compile-on-Save for this project.",
          "type": "boolean"
        }
      }
    },
    "compilerOptionsDefinition": {
      "properties": {
        "compilerOptions": {
          "description": "Instructs the TypeScript compiler how to compile .ts files.",
          "properties": {
            "allowJs": {
              "default": false,
              "description": "Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files.",
              "markdownDescription": "Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowJs",
              "type": "boolean"
            },
            "allowSyntheticDefaultImports": {
              "description": "Allow 'import x from y' when a module doesn't have a default export.",
              "markdownDescription": "Allow 'import x from y' when a module doesn't have a default export.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports",
              "type": "boolean"
            },
            "allowUmdGlobalAccess": {
              "default": false,
              "description": "Allow accessing UMD globals from modules.",
              "markdownDescription": "Allow accessing UMD globals from modules.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowUmdGlobalAccess",
              "type": "boolean"
            },
            "allowUnreachableCode": {
              "description": "Disable error reporting for unreachable code.",
              "markdownDescription": "Disable error reporting for unreachable code.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowUnreachableCode",
              "type": "boolean"
            },
            "allowUnusedLabels": {
              "description": "Disable error reporting for unused labels.",
              "markdownDescription": "Disable error reporting for unused labels.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowUnusedLabels",
              "type": "boolean"
            },
            "alwaysStrict": {
              "description": "Ensure 'use strict' is always emitted.",
              "markdownDescription": "Ensure 'use strict' is always emitted.\n\nSee more: https://www.typescriptlang.org/tsconfig#alwaysStrict",
              "type": "boolean"
            },
            "assumeChangesOnlyAffectDirectDependencies": {
              "description": "Have recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it. Requires TypeScript version 3.8 or later.",
              "type": "boolean"
            },
            "baseUrl": {
              "description": "Specify the base directory to resolve non-relative module names.",
              "markdownDescription": "Specify the base directory to resolve non-relative module names.\n\nSee more: https://www.typescriptlang.org/tsconfig#baseUrl",
              "type": "string"
            },
            "charset": {
              "description": "No longer supported. In early versions, manually set the text encoding for reading files.",
              "markdownDescription": "No longer supported. In early versions, manually set the text encoding for reading files.\n\nSee more: https://www.typescriptlang.org/tsconfig#charset",
              "type": "string"
            },
            "checkJs": {
              "default": false,
              "description": "Enable error reporting in type-checked JavaScript files.",
              "markdownDescription": "Enable error reporting in type-checked JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#checkJs",
              "type": "boolean"
            },
            "composite": {
              "default": true,
              "description": "Enable constraints that allow a TypeScript project to be used with project references.",
              "markdownDescription": "Enable constraints that allow a TypeScript project to be used with project references.\n\nSee more: https://www.typescriptlang.org/tsconfig#composite",
              "type": "boolean"
            },
            "declaration": {
              "default": false,
              "description": "Generate .d.ts files from TypeScript and JavaScript files in your project.",
              "markdownDescription": "Generate .d.ts files from TypeScript and JavaScript files in your project.\n\nSee more: https://www.typescriptlang.org/tsconfig#declaration",
              "type": "boolean"
            },
            "declarationDir": {
              "description": "Specify the output directory for generated declaration files.",
              "markdownDescription": "Specify the output directory for generated declaration files.\n\nSee more: https://www.typescriptlang.org/tsconfig#declarationDir",
              "type": ["string", "null"]
            },
            "declarationMap": {
              "default": false,
              "description": "Create sourcemaps for d.ts files.",
              "markdownDescription": "Create sourcemaps for d.ts files.\n\nSee more: https://www.typescriptlang.org/tsconfig#declarationMap",
              "type": "boolean"
            },
            "diagnostics": {
              "description": "Output compiler performance information after building.",
              "markdownDescription": "Output compiler performance information after building.\n\nSee more: https://www.typescriptlang.org/tsconfig#diagnostics",
              "type": "boolean"
            },
            "disableReferencedProjectLoad": {
              "description": "Reduce the number of projects loaded automatically by TypeScript.",
              "markdownDescription": "Reduce the number of projects loaded automatically by TypeScript.\n\nSee more: https://www.typescriptlang.org/tsconfig#disableReferencedProjectLoad",
              "type": "boolean"
            },
            "disableSizeLimit": {
              "default": false,
              "description": "Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server.",
              "markdownDescription": "Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server.\n\nSee more: https://www.typescriptlang.org/tsconfig#disableSizeLimit",
              "type": "boolean"
            },
            "disableSolutionSearching": {
              "description": "Opt a project out of multi-project reference checking when editing.",
              "markdownDescription": "Opt a project out of multi-project reference checking when editing.\n\nSee more: https://www.typescriptlang.org/tsconfig#disableSolutionSearching",
              "type": "boolean"
            },
            "disableSourceOfProjectReferenceRedirect": {
              "description": "Disable preferring source files instead of declaration files when referencing composite projects",
              "markdownDescription": "Disable preferring source files instead of declaration files when referencing composite projects\n\nSee more: https://www.typescriptlang.org/tsconfig#disableSourceOfProjectReferenceRedirect",
              "type": "boolean"
            },
            "downlevelIteration": {
              "default": false,
              "description": "Emit more compliant, but verbose and less performant JavaScript for iteration.",
              "markdownDescription": "Emit more compliant, but verbose and less performant JavaScript for iteration.\n\nSee more: https://www.typescriptlang.org/tsconfig#downlevelIteration",
              "type": "boolean"
            },
            "emitBOM": {
              "default": false,
              "description": "Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.",
              "markdownDescription": "Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.\n\nSee more: https://www.typescriptlang.org/tsconfig#emitBOM",
              "type": "boolean"
            },
            "emitDeclarationOnly": {
              "default": false,
              "description": "Only output d.ts files and not JavaScript files.",
              "markdownDescription": "Only output d.ts files and not JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#emitDeclarationOnly",
              "type": "boolean"
            },
            "emitDecoratorMetadata": {
              "description": "Emit design-type metadata for decorated declarations in source files.",
              "markdownDescription": "Emit design-type metadata for decorated declarations in source files.\n\nSee more: https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata",
              "type": "boolean"
            },
            "esModuleInterop": {
              "default": false,
              "description": "Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility.",
              "markdownDescription": "Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility.\n\nSee more: https://www.typescriptlang.org/tsconfig#esModuleInterop",
              "type": "boolean"
            },
            "exactOptionalPropertyTypes": {
              "default": false,
              "description": "Differentiate between undefined and not present when type checking",
              "markdownDescription": "Differentiate between undefined and not present when type checking\n\nSee more: https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes",
              "type": "boolean"
            },
            "experimentalDecorators": {
              "description": "Enable experimental support for TC39 stage 2 draft decorators.",
              "markdownDescription": "Enable experimental support for TC39 stage 2 draft decorators.\n\nSee more: https://www.typescriptlang.org/tsconfig#experimentalDecorators",
              "type": "boolean"
            },
            "extendedDiagnostics": {
              "default": false,
              "description": "Output more detailed compiler performance information after building.",
              "markdownDescription": "Output more detailed compiler performance information after building.\n\nSee more: https://www.typescriptlang.org/tsconfig#extendedDiagnostics",
              "type": "boolean"
            },
            "fallbackPolling": {
              "description": "Specify the polling strategy to use when the system runs out of or doesn't support native file watchers. Requires TypeScript version 3.8 or later.",
              "enum": [
                "fixedPollingInterval",
                "priorityPollingInterval",
                "dynamicPriorityPolling",
                "fixedInterval",
                "priorityInterval",
                "dynamicPriority",
                "fixedChunkSize"
              ]
            },
            "forceConsistentCasingInFileNames": {
              "default": false,
              "description": "Ensure that casing is correct in imports.",
              "markdownDescription": "Ensure that casing is correct in imports.\n\nSee more: https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames",
              "type": "boolean"
            },
            "generateCpuProfile": {
              "default": "profile.cpuprofile",
              "description": "Emit a v8 CPU profile of the compiler run for debugging.",
              "markdownDescription": "Emit a v8 CPU profile of the compiler run for debugging.\n\nSee more: https://www.typescriptlang.org/tsconfig#generateCpuProfile",
              "type": "string"
            },
            "importHelpers": {
              "default": false,
              "description": "Allow importing helper functions from tslib once per project, instead of including them per-file.",
              "markdownDescription": "Allow importing helper functions from tslib once per project, instead of including them per-file.\n\nSee more: https://www.typescriptlang.org/tsconfig#importHelpers",
              "type": "boolean"
            },
            "importsNotUsedAsValues": {
              "default": "remove",
              "description": "Specify emit/checking behavior for imports that are only used for types.",
              "enum": ["remove", "preserve", "error"]
            },
            "incremental": {
              "description": "Enable incremental compilation. Requires TypeScript version 3.4 or later.",
              "type": "boolean"
            },
            "inlineSourceMap": {
              "default": false,
              "description": "Include sourcemap files inside the emitted JavaScript.",
              "markdownDescription": "Include sourcemap files inside the emitted JavaScript.\n\nSee more: https://www.typescriptlang.org/tsconfig#inlineSourceMap",
              "type": "boolean"
            },
            "inlineSources": {
              "default": false,
              "description": "Include source code in the sourcemaps inside the emitted JavaScript.",
              "markdownDescription": "Include source code in the sourcemaps inside the emitted JavaScript.\n\nSee more: https://www.typescriptlang.org/tsconfig#inlineSources",
              "type": "boolean"
            },
            "isolatedModules": {
              "default": false,
              "description": "Ensure that each file can be safely transpiled without relying on other imports.",
              "markdownDescription": "Ensure that each file can be safely transpiled without relying on other imports.\n\nSee more: https://www.typescriptlang.org/tsconfig#isolatedModules",
              "type": "boolean"
            },
            "jsx": {
              "description": "Specify what JSX code is generated.",
              "enum": [
                "preserve",
                "react",
                "react-jsx",
                "react-jsxdev",
                "react-native"
              ]
            },
            "jsxFactory": {
              "default": "React.createElement",
              "description": "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'",
              "markdownDescription": "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'\n\nSee more: https://www.typescriptlang.org/tsconfig#jsxFactory",
              "type": "string"
            },
            "jsxFragmentFactory": {
              "default": "React.Fragment",
              "description": "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.",
              "markdownDescription": "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.\n\nSee more: https://www.typescriptlang.org/tsconfig#jsxFragmentFactory",
              "type": "string"
            },
            "jsxImportSource": {
              "default": "react",
              "description": "Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx`.",
              "markdownDescription": "Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx`.\n\nSee more: https://www.typescriptlang.org/tsconfig#jsxImportSource",
              "type": "string"
            },
            "keyofStringsOnly": {
              "default": false,
              "description": "Make keyof only return strings instead of string, numbers or symbols. Legacy option.",
              "markdownDescription": "Make keyof only return strings instead of string, numbers or symbols. Legacy option.\n\nSee more: https://www.typescriptlang.org/tsconfig#keyofStringsOnly",
              "type": "boolean"
            },
            "lib": {
              "description": "Specify a set of bundled library declaration files that describe the target runtime environment.",
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "ES5",
                      "ES6",
                      "ES2015",
                      "ES2015.Collection",
                      "ES2015.Core",
                      "ES2015.Generator",
                      "ES2015.Iterable",
                      "ES2015.Promise",
                      "ES2015.Proxy",
                      "ES2015.Reflect",
                      "ES2015.Symbol.WellKnown",
                      "ES2015.Symbol",
                      "ES2016",
                      "ES2016.Array.Include",
                      "ES2017",
                      "ES2017.Intl",
                      "ES2017.Object",
                      "ES2017.SharedMemory",
                      "ES2017.String",
                      "ES2017.TypedArrays",
                      "ES2018",
                      "ES2018.AsyncGenerator",
                      "ES2018.AsyncIterable",
                      "ES2018.Intl",
                      "ES2018.Promise",
                      "ES2018.Regexp",
                      "ES2019",
                      "ES2019.Array",
                      "ES2019.Object",
                      "ES2019.String",
                      "ES2019.Symbol",
                      "ES2020",
                      "ES2020.BigInt",
                      "ES2020.Promise",
                      "ES2020.String",
                      "ES2020.Symbol.WellKnown",
                      "ESNext",
                      "ESNext.Array",
                      "ESNext.AsyncIterable",
                      "ESNext.BigInt",
                      "ESNext.Intl",
                      "ESNext.Promise",
                      "ESNext.String",
                      "ESNext.Symbol",
                      "DOM",
                      "DOM.Iterable",
                      "ScriptHost",
                      "WebWorker",
                      "WebWorker.ImportScripts",
                      "Webworker.Iterable",
                      "ES7",
                      "ES2021",
                      "ES2020.SharedMemory",
                      "ES2020.Intl",
                      "ES2021.Promise",
                      "ES2021.String",
                      "ES2021.WeakRef",
                      "ESNext.WeakRef",
                      "es2021.intl",
                      "ES2022",
                      "ES2022.Array",
                      "ES2022.Error",
                      "ES2022.Intl",
                      "ES2022.Object",
                      "ES2022.String"
                    ]
                  },
                  {
                    "pattern": "^[Ee][Ss]5|[Ee][Ss]6|[Ee][Ss]7$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2015(\\.([Cc][Oo][Ll][Ll][Ee][Cc][Tt][Ii][Oo][Nn]|[Cc][Oo][Rr][Ee]|[Gg][Ee][Nn][Ee][Rr][Aa][Tt][Oo][Rr]|[Ii][Tt][Ee][Rr][Aa][Bb][Ll][Ee]|[Pp][Rr][Oo][Mm][Ii][Ss][Ee]|[Pp][Rr][Oo][Xx][Yy]|[Rr][Ee][Ff][Ll][Ee][Cc][Tt]|[Ss][Yy][Mm][Bb][Oo][Ll].[Ww][Ee][Ll][Ll][Kk][Nn][Oo][Ww][Nn]|[Ss][Yy][Mm][Bb][Oo][Ll]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2016(\\.[Aa][Rr][Rr][Aa][Yy].[Ii][Nn][Cc][Ll][Uu][Dd][Ee])?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2017(\\.([Ii][Nn][Tt][Ll]|[Oo][Bb][Jj][Ee][Cc][Tt]|[Ss][Hh][Aa][Rr][Ee][Dd][Mm][Ee][Mm][Oo][Rr][Yy]|[Ss][Tt][Rr][Ii][Nn][Gg]|[Tt][Yy][Pp][Ee][Dd][Aa][Rr][Rr][Aa][Yy][Ss]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2018(\\.([Aa][Ss][Yy][Nn][Cc][Ii][Tt][Ee][Rr][Aa][Bb][Ll][Ee]|[Ii][Nn][Tt][Ll]|[Pp][Rr][Oo][Mm][Ii][Ss][Ee]|[Rr][Ee][Gg][Ee][Xx][Pp]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2019(\\.([Aa][Rr][Rr][Aa][Yy]|[Oo][Bb][Jj][Ee][Cc][Tt]|[Ss][Tt][Rr][Ii][Nn][Gg]|[Ss][Yy][Mm][Bb][Oo][Ll]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2020(\\.([Bb][Ii][Gg][Ii][Nn][Tt]|[Pp][Rr][Oo][Mm][Ii][Ss][Ee]|[Ss][Tt][Rr][Ii][Nn][Gg]|[Ss][Yy][Mm][Bb][Oo][Ll].[Ww][Ee][Ll][Ll][Kk][Nn][Oo][Ww][Nn]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2021(\\.([Ii][Nn][Tt][Ll]|[Pp][Rr][Oo][Mm][Ii][Ss][Ee]|[Ss][Tt][Rr][Ii][Nn][Gg]|[Ww][Ee][Aa][Kk][Rr][Ee][Ff]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2022(\\.([Aa][Rr][Rr][Aa][Yy]|[Ee][Rr][Rr][Oo][Rr]|[Ii][Nn][Tt][Ll]|[Oo][Bb][Jj][Ee][Cc][Tt]|[Ss][Tt][Rr][Ii][Nn][Gg]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss][Nn][Ee][Xx][Tt](\\.([Aa][Rr][Rr][Aa][Yy]|[Aa][Ss][Yy][Nn][Cc][Ii][Tt][Ee][Rr][Aa][Bb][Ll][Ee]|[Bb][Ii][Gg][Ii][Nn][Tt]|[Ii][Nn][Tt][Ll]|[Pp][Rr][Oo][Mm][Ii][Ss][Ee]|[Ss][Tt][Rr][Ii][Nn][Gg]|[Ss][Yy][Mm][Bb][Oo][Ll]|[Ww][Ee][Aa][Kk][Rr][Ee][Ff]))?$"
                  },
                  {
                    "pattern": "^[Dd][Oo][Mm](\\.[Ii][Tt][Ee][Rr][Aa][Bb][Ll][Ee])?$"
                  },
                  {
                    "pattern": "^[Ss][Cc][Rr][Ii][Pp][Tt][Hh][Oo][Ss][Tt]$"
                  },
                  {
                    "pattern": "^[Ww][Ee][Bb][Ww][Oo][Rr][Kk][Ee][Rr](\\.[Ii][Mm][Pp][Oo][Rr][Tt][Ss][Cc][Rr][Ii][Pp][Tt][Ss])?$"
                  }
                ],
                "type": "string"
              },
              "markdownDescription": "Specify a set of bundled library declaration files that describe the target runtime environment.\n\nSee more: https://www.typescriptlang.org/tsconfig#lib",
              "type": "array",
              "uniqueItems": true
            },
            "listEmittedFiles": {
              "default": false,
              "description": "Print the names of emitted files after a compilation.",
              "markdownDescription": "Print the names of emitted files after a compilation.\n\nSee more: https://www.typescriptlang.org/tsconfig#listEmittedFiles",
              "type": "boolean"
            },
            "listFiles": {
              "default": false,
              "description": "Print all of the files read during the compilation.",
              "markdownDescription": "Print all of the files read during the compilation.\n\nSee more: https://www.typescriptlang.org/tsconfig#listFiles",
              "type": "boolean"
            },
            "listFilesOnly": {
              "description": "Print names of files that are part of the compilation and then stop processing.",
              "type": "boolean"
            },
            "mapRoot": {
              "description": "Specify the location where debugger should locate map files instead of generated locations.",
              "markdownDescription": "Specify the location where debugger should locate map files instead of generated locations.\n\nSee more: https://www.typescriptlang.org/tsconfig#mapRoot",
              "type": "string"
            },
            "maxNodeModuleJsDepth": {
              "default": 0,
              "description": "Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`.",
              "markdownDescription": "Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`.\n\nSee more: https://www.typescriptlang.org/tsconfig#maxNodeModuleJsDepth",
              "type": "number"
            },
            "module": {
              "anyOf": [
                {
                  "enum": [
                    "CommonJS",
                    "AMD",
                    "System",
                    "UMD",
                    "ES6",
                    "ES2015",
                    "ES2020",
                    "ESNext",
                    "None",
                    "ES2022",
                    "Node16",
                    "NodeNext"
                  ]
                },
                {
                  "pattern": "^([Cc][Oo][Mm][Mm][Oo][Nn][Jj][Ss]|[AaUu][Mm][Dd]|[Ss][Yy][Ss][Tt][Ee][Mm]|[Ee][Ss]([356]|20(1[567]|2[02])|[Nn][Ee][Xx][Tt])|[Nn][Oo][dD][Ee]16|[Nn][Oo][Dd][Ed][Nn][Ee][Xx][Tt]|[Nn][Oo][Nn][Ee])$"
                }
              ],
              "description": "Specify what module code is generated.",
              "markdownDescription": "Specify what module code is generated.\n\nSee more: https://www.typescriptlang.org/tsconfig#module",
              "type": "string"
            },
            "moduleResolution": {
              "anyOf": [
                {
                  "enum": ["Classic", "Node", "Node16", "NodeNext"]
                },
                {
                  "pattern": "^(([Nn]ode)|([Nn]ode16)|([Nn]ode[Nn]ext)|([Cc]lassic))$"
                }
              ],
              "default": "classic",
              "description": "Specify how TypeScript looks up a file from a given module specifier.",
              "markdownDescription": "Specify how TypeScript looks up a file from a given module specifier.\n\nSee more: https://www.typescriptlang.org/tsconfig#moduleResolution",
              "type": "string"
            },
            "newLine": {
              "anyOf": [
                {
                  "enum": ["crlf", "lf"]
                },
                {
                  "pattern": "^(CRLF|LF|crlf|lf)$"
                }
              ],
              "description": "Set the newline character for emitting files.",
              "markdownDescription": "Set the newline character for emitting files.\n\nSee more: https://www.typescriptlang.org/tsconfig#newLine",
              "type": "string"
            },
            "noEmit": {
              "default": false,
              "description": "Disable emitting file from a compilation.",
              "markdownDescription": "Disable emitting file from a compilation.\n\nSee more: https://www.typescriptlang.org/tsconfig#noEmit",
              "type": "boolean"
            },
            "noEmitHelpers": {
              "default": false,
              "description": "Disable generating custom helper functions like `__extends` in compiled output.",
              "markdownDescription": "Disable generating custom helper functions like `__extends` in compiled output.\n\nSee more: https://www.typescriptlang.org/tsconfig#noEmitHelpers",
              "type": "boolean"
            },
            "noEmitOnError": {
              "default": false,
              "description": "Disable emitting files if any type checking errors are reported.",
              "markdownDescription": "Disable emitting files if any type checking errors are reported.\n\nSee more: https://www.typescriptlang.org/tsconfig#noEmitOnError",
              "type": "boolean"
            },
            "noErrorTruncation": {
              "default": false,
              "description": "Disable truncating types in error messages.",
              "markdownDescription": "Disable truncating types in error messages.\n\nSee more: https://www.typescriptlang.org/tsconfig#noErrorTruncation",
              "type": "boolean"
            },
            "noFallthroughCasesInSwitch": {
              "default": false,
              "description": "Enable error reporting for fallthrough cases in switch statements.",
              "markdownDescription": "Enable error reporting for fallthrough cases in switch statements.\n\nSee more: https://www.typescriptlang.org/tsconfig#noFallthroughCasesInSwitch",
              "type": "boolean"
            },
            "noImplicitAny": {
              "description": "Enable error reporting for expressions and declarations with an implied `any` type..",
              "markdownDescription": "Enable error reporting for expressions and declarations with an implied `any` type..\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitAny",
              "type": "boolean"
            },
            "noImplicitOverride": {
              "default": false,
              "description": "Ensure overriding members in derived classes are marked with an override modifier.",
              "markdownDescription": "Ensure overriding members in derived classes are marked with an override modifier.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitOverride",
              "type": "boolean"
            },
            "noImplicitReturns": {
              "default": false,
              "description": "Enable error reporting for codepaths that do not explicitly return in a function.",
              "markdownDescription": "Enable error reporting for codepaths that do not explicitly return in a function.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitReturns",
              "type": "boolean"
            },
            "noImplicitThis": {
              "description": "Enable error reporting when `this` is given the type `any`.",
              "markdownDescription": "Enable error reporting when `this` is given the type `any`.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitThis",
              "type": "boolean"
            },
            "noImplicitUseStrict": {
              "default": false,
              "description": "Disable adding 'use strict' directives in emitted JavaScript files.",
              "markdownDescription": "Disable adding 'use strict' directives in emitted JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitUseStrict",
              "type": "boolean"
            },
            "noLib": {
              "default": false,
              "description": "Disable including any library files, including the default lib.d.ts.",
              "markdownDescription": "Disable including any library files, including the default lib.d.ts.\n\nSee more: https://www.typescriptlang.org/tsconfig#noLib",
              "type": "boolean"
            },
            "noPropertyAccessFromIndexSignature": {
              "description": "Enforces using indexed accessors for keys declared using an indexed type",
              "markdownDescription": "Enforces using indexed accessors for keys declared using an indexed type\n\nSee more: https://www.typescriptlang.org/tsconfig#noPropertyAccessFromIndexSignature",
              "type": "boolean"
            },
            "noResolve": {
              "default": false,
              "description": "Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project.",
              "markdownDescription": "Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project.\n\nSee more: https://www.typescriptlang.org/tsconfig#noResolve",
              "type": "boolean"
            },
            "noStrictGenericChecks": {
              "default": false,
              "description": "Disable strict checking of generic signatures in function types.",
              "markdownDescription": "Disable strict checking of generic signatures in function types.\n\nSee more: https://www.typescriptlang.org/tsconfig#noStrictGenericChecks",
              "type": "boolean"
            },
            "noUncheckedIndexedAccess": {
              "description": "Add `undefined` to a type when accessed using an index.",
              "markdownDescription": "Add `undefined` to a type when accessed using an index.\n\nSee more: https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess",
              "type": "boolean"
            },
            "noUnusedLocals": {
              "default": false,
              "description": "Enable error reporting when a local variables aren't read.",
              "markdownDescription": "Enable error reporting when a local variables aren't read.\n\nSee more: https://www.typescriptlang.org/tsconfig#noUnusedLocals",
              "type": "boolean"
            },
            "noUnusedParameters": {
              "default": false,
              "description": "Raise an error when a function parameter isn't read",
              "markdownDescription": "Raise an error when a function parameter isn't read\n\nSee more: https://www.typescriptlang.org/tsconfig#noUnusedParameters",
              "type": "boolean"
            },
            "outDir": {
              "description": "Specify an output folder for all emitted files.",
              "markdownDescription": "Specify an output folder for all emitted files.\n\nSee more: https://www.typescriptlang.org/tsconfig#outDir",
              "type": "string"
            },
            "outFile": {
              "description": "Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output.",
              "markdownDescription": "Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output.\n\nSee more: https://www.typescriptlang.org/tsconfig#outFile",
              "type": "string"
            },
            "paths": {
              "additionalProperties": {
                "items": {
                  "description": "Path mapping to be computed relative to baseUrl option.",
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "description": "Specify a set of entries that re-map imports to additional lookup locations.",
              "markdownDescription": "Specify a set of entries that re-map imports to additional lookup locations.\n\nSee more: https://www.typescriptlang.org/tsconfig#paths",
              "type": "object"
            },
            "plugins": {
              "description": "Specify a list of language service plugins to include.",
              "items": {
                "properties": {
                  "name": {
                    "description": "Plugin name.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "markdownDescription": "Specify a list of language service plugins to include.\n\nSee more: https://www.typescriptlang.org/tsconfig#plugins",
              "type": "array"
            },
            "preserveConstEnums": {
              "default": false,
              "description": "Disable erasing `const enum` declarations in generated code.",
              "markdownDescription": "Disable erasing `const enum` declarations in generated code.\n\nSee more: https://www.typescriptlang.org/tsconfig#preserveConstEnums",
              "type": "boolean"
            },
            "preserveSymlinks": {
              "default": false,
              "description": "Disable resolving symlinks to their realpath. This correlates to the same flag in node.",
              "markdownDescription": "Disable resolving symlinks to their realpath. This correlates to the same flag in node.\n\nSee more: https://www.typescriptlang.org/tsconfig#preserveSymlinks",
              "type": "boolean"
            },
            "preserveValueImports": {
              "default": false,
              "description": "Preserve unused imported values in the JavaScript output that would otherwise be removed",
              "markdownDescription": "Preserve unused imported values in the JavaScript output that would otherwise be removed\n\nSee more: https://www.typescriptlang.org/tsconfig#preserveValueImports",
              "type": "boolean"
            },
            "preserveWatchOutput": {
              "description": "Disable wiping the console in watch mode",
              "markdownDescription": "Disable wiping the console in watch mode\n\nSee more: https://www.typescriptlang.org/tsconfig#preserveWatchOutput",
              "type": "boolean"
            },
            "pretty": {
              "default": true,
              "description": "Enable color and formatting in output to make compiler errors easier to read",
              "markdownDescription": "Enable color and formatting in output to make compiler errors easier to read\n\nSee more: https://www.typescriptlang.org/tsconfig#pretty",
              "type": "boolean"
            },
            "reactNamespace": {
              "default": "React",
              "description": "Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit.",
              "markdownDescription": "Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit.\n\nSee more: https://www.typescriptlang.org/tsconfig#reactNamespace",
              "type": "string"
            },
            "removeComments": {
              "default": false,
              "description": "Disable emitting comments.",
              "markdownDescription": "Disable emitting comments.\n\nSee more: https://www.typescriptlang.org/tsconfig#removeComments",
              "type": "boolean"
            },
            "resolveJsonModule": {
              "default": false,
              "description": "Enable importing .json files",
              "markdownDescription": "Enable importing .json files\n\nSee more: https://www.typescriptlang.org/tsconfig#resolveJsonModule",
              "type": "boolean"
            },
            "rootDir": {
              "description": "Specify the root folder within your source files.",
              "markdownDescription": "Specify the root folder within your source files.\n\nSee more: https://www.typescriptlang.org/tsconfig#rootDir",
              "type": "string"
            },
            "rootDirs": {
              "description": "Allow multiple folders to be treated as one when resolving modules.",
              "items": {
                "type": "string"
              },
              "markdownDescription": "Allow multiple folders to be treated as one when resolving modules.\n\nSee more: https://www.typescriptlang.org/tsconfig#rootDirs",
              "type": "array",
              "uniqueItems": true
            },
            "skipDefaultLibCheck": {
              "default": false,
              "description": "Skip type checking .d.ts files that are included with TypeScript.",
              "markdownDescription": "Skip type checking .d.ts files that are included with TypeScript.\n\nSee more: https://www.typescriptlang.org/tsconfig#skipDefaultLibCheck",
              "type": "boolean"
            },
            "skipLibCheck": {
              "default": false,
              "description": "Skip type checking all .d.ts files.",
              "markdownDescription": "Skip type checking all .d.ts files.\n\nSee more: https://www.typescriptlang.org/tsconfig#skipLibCheck",
              "type": "boolean"
            },
            "sourceMap": {
              "default": false,
              "description": "Create source map files for emitted JavaScript files.",
              "markdownDescription": "Create source map files for emitted JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#sourceMap",
              "type": "boolean"
            },
            "sourceRoot": {
              "description": "Specify the root path for debuggers to find the reference source code.",
              "markdownDescription": "Specify the root path for debuggers to find the reference source code.\n\nSee more: https://www.typescriptlang.org/tsconfig#sourceRoot",
              "type": "string"
            },
            "strict": {
              "default": false,
              "description": "Enable all strict type checking options.",
              "markdownDescription": "Enable all strict type checking options.\n\nSee more: https://www.typescriptlang.org/tsconfig#strict",
              "type": "boolean"
            },
            "strictBindCallApply": {
              "default": false,
              "description": "Check that the arguments for `bind`, `call`, and `apply` methods match the original function.",
              "markdownDescription": "Check that the arguments for `bind`, `call`, and `apply` methods match the original function.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictBindCallApply",
              "type": "boolean"
            },
            "strictFunctionTypes": {
              "default": false,
              "description": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.",
              "markdownDescription": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictFunctionTypes",
              "type": "boolean"
            },
            "strictNullChecks": {
              "default": false,
              "description": "When type checking, take into account `null` and `undefined`.",
              "markdownDescription": "When type checking, take into account `null` and `undefined`.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictNullChecks",
              "type": "boolean"
            },
            "strictPropertyInitialization": {
              "default": false,
              "description": "Check for class properties that are declared but not set in the constructor.",
              "markdownDescription": "Check for class properties that are declared but not set in the constructor.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictPropertyInitialization",
              "type": "boolean"
            },
            "stripInternal": {
              "description": "Disable emitting declarations that have `@internal` in their JSDoc comments.",
              "markdownDescription": "Disable emitting declarations that have `@internal` in their JSDoc comments.\n\nSee more: https://www.typescriptlang.org/tsconfig#stripInternal",
              "type": "boolean"
            },
            "suppressExcessPropertyErrors": {
              "default": false,
              "description": "Disable reporting of excess property errors during the creation of object literals.",
              "markdownDescription": "Disable reporting of excess property errors during the creation of object literals.\n\nSee more: https://www.typescriptlang.org/tsconfig#suppressExcessPropertyErrors",
              "type": "boolean"
            },
            "suppressImplicitAnyIndexErrors": {
              "default": false,
              "description": "Suppress `noImplicitAny` errors when indexing objects that lack index signatures.",
              "markdownDescription": "Suppress `noImplicitAny` errors when indexing objects that lack index signatures.\n\nSee more: https://www.typescriptlang.org/tsconfig#suppressImplicitAnyIndexErrors",
              "type": "boolean"
            },
            "target": {
              "anyOf": [
                {
                  "enum": [
                    "ES3",
                    "ES5",
                    "ES6",
                    "ES2015",
                    "ES2016",
                    "ES2017",
                    "ES2018",
                    "ES2019",
                    "ES2020",
                    "ES2021",
                    "ES2022",
                    "ESNext"
                  ]
                },
                {
                  "pattern": "^([Ee][Ss]([356]|(20(1[56789]|2[012]))|[Nn][Ee][Xx][Tt]))$"
                }
              ],
              "default": "ES3",
              "description": "Set the JavaScript language version for emitted JavaScript and include compatible library declarations.",
              "markdownDescription": "Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\n\nSee more: https://www.typescriptlang.org/tsconfig#target",
              "type": "string"
            },
            "traceResolution": {
              "default": false,
              "description": "Enable tracing of the name resolution process. Requires TypeScript version 2.0 or later.",
              "type": "boolean"
            },
            "tsBuildInfoFile": {
              "default": ".tsbuildinfo",
              "description": "Specify the folder for .tsbuildinfo incremental compilation files.",
              "markdownDescription": "Specify the folder for .tsbuildinfo incremental compilation files.\n\nSee more: https://www.typescriptlang.org/tsconfig#tsBuildInfoFile",
              "type": "string"
            },
            "typeRoots": {
              "description": "Specify multiple folders that act like `./node_modules/@types`.",
              "items": {
                "type": "string"
              },
              "markdownDescription": "Specify multiple folders that act like `./node_modules/@types`.\n\nSee more: https://www.typescriptlang.org/tsconfig#typeRoots",
              "type": "array",
              "uniqueItems": true
            },
            "types": {
              "description": "Specify type package names to be included without being referenced in a source file.",
              "items": {
                "type": "string"
              },
              "markdownDescription": "Specify type package names to be included without being referenced in a source file.\n\nSee more: https://www.typescriptlang.org/tsconfig#types",
              "type": "array",
              "uniqueItems": true
            },
            "useDefineForClassFields": {
              "default": false,
              "description": "Emit ECMAScript-standard-compliant class fields.",
              "markdownDescription": "Emit ECMAScript-standard-compliant class fields.\n\nSee more: https://www.typescriptlang.org/tsconfig#useDefineForClassFields",
              "type": "boolean"
            },
            "useUnknownInCatchVariables": {
              "default": false,
              "description": "Default catch clause variables as `unknown` instead of `any`.",
              "markdownDescription": "Default catch clause variables as `unknown` instead of `any`.\n\nSee more: https://www.typescriptlang.org/tsconfig#useUnknownInCatchVariables",
              "type": "boolean"
            },
            "watch": {
              "description": "Watch input files.",
              "type": "boolean"
            },
            "watchDirectory": {
              "default": "useFsEvents",
              "description": "Specify the strategy for watching directories under systems that lack recursive file-watching functionality. Requires TypeScript version 3.8 or later.",
              "enum": [
                "useFsEvents",
                "fixedPollingInterval",
                "dynamicPriorityPolling",
                "fixedChunkSizePolling"
              ]
            },
            "watchFile": {
              "default": "useFsEvents",
              "description": "Specify the strategy for watching individual files. Requires TypeScript version 3.8 or later.",
              "enum": [
                "fixedPollingInterval",
                "priorityPollingInterval",
                "dynamicPriorityPolling",
                "useFsEvents",
                "useFsEventsOnParentDirectory",
                "fixedChunkSizePolling"
              ]
            }
          },
          "type": "object"
        }
      }
    },
    "excludeDefinition": {
      "properties": {
        "exclude": {
          "description": "Specifies a list of files to be excluded from compilation. The 'exclude' property only affects the files included via the 'include' property and not the 'files' property. Glob patterns require TypeScript version 2.0 or later.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "extendsDefinition": {
      "properties": {
        "extends": {
          "description": "Path to base configuration file to inherit from. Requires TypeScript version 2.1 or later.",
          "type": "string"
        }
      }
    },
    "filesDefinition": {
      "properties": {
        "files": {
          "description": "If no 'files' or 'include' property is present in a tsconfig.json, the compiler defaults to including all files in the containing directory and subdirectories except those specified by 'exclude'. When a 'files' property is specified, only those files and those specified by 'include' are included.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "includeDefinition": {
      "properties": {
        "include": {
          "description": "Specifies a list of glob patterns that match files to be included in compilation. If no 'files' or 'include' property is present in a tsconfig.json, the compiler defaults to including all files in the containing directory and subdirectories except those specified by 'exclude'. Requires TypeScript version 2.0 or later.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "referencesDefinition": {
      "properties": {
        "references": {
          "description": "Referenced projects. Requires TypeScript version 3.0 or later.",
          "items": {
            "description": "Project reference.",
            "properties": {
              "path": {
                "description": "Path to referenced tsconfig or to folder containing tsconfig.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "typeAcquisitionDefinition": {
      "properties": {
        "typeAcquisition": {
          "description": "Auto type (.d.ts) acquisition options for this project. Requires TypeScript version 2.1 or later.",
          "properties": {
            "enable": {
              "default": false,
              "description": "Enable auto type acquisition",
              "type": "boolean"
            },
            "exclude": {
              "description": "Specifies a list of type declarations to be excluded from auto type acquisition. Ex. [\"jquery\", \"lodash\"]",
              "items": {
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "include": {
              "description": "Specifies a list of type declarations to be included in auto type acquisition. Ex. [\"jquery\", \"lodash\"]",
              "items": {
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            }
          },
          "type": "object"
        }
      }
    },
    "watchOptionsDefinition": {
      "properties": {
        "watchOptions": {
          "description": "Settings for the watch mode in TypeScript.",
          "properties": {
            "excludeDirectories": {
              "description": "Remove a list of directories from the watch process.",
              "items": {
                "type": "string"
              },
              "markdownDescription": "Remove a list of directories from the watch process.\n\nSee more: https://www.typescriptlang.org/tsconfig#excludeDirectories",
              "type": "array",
              "uniqueItems": true
            },
            "excludeFiles": {
              "description": "Remove a list of files from the watch mode's processing.",
              "items": {
                "type": "string"
              },
              "markdownDescription": "Remove a list of files from the watch mode's processing.\n\nSee more: https://www.typescriptlang.org/tsconfig#excludeFiles",
              "type": "array",
              "uniqueItems": true
            },
            "fallbackPolling": {
              "description": "Specify what approach the watcher should use if the system runs out of native file watchers.",
              "markdownDescription": "Specify what approach the watcher should use if the system runs out of native file watchers.\n\nSee more: https://www.typescriptlang.org/tsconfig#fallbackPolling",
              "type": "string"
            },
            "force": {
              "description": "~",
              "type": "string"
            },
            "synchronousWatchDirectory": {
              "description": "Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.",
              "markdownDescription": "Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.\n\nSee more: https://www.typescriptlang.org/tsconfig#synchronousWatchDirectory",
              "type": "boolean"
            },
            "watchDirectory": {
              "description": "Specify how directories are watched on systems that lack recursive file-watching functionality.",
              "markdownDescription": "Specify how directories are watched on systems that lack recursive file-watching functionality.\n\nSee more: https://www.typescriptlang.org/tsconfig#watchDirectory",
              "type": "string"
            },
            "watchFile": {
              "description": "Specify how the TypeScript watch mode works.",
              "markdownDescription": "Specify how the TypeScript watch mode works.\n\nSee more: https://www.typescriptlang.org/tsconfig#watchFile",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    }
  },
  "title": "JSON schema for a JavaScript project using TypeScript tooling",
  "type": "object"
}
