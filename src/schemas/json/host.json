{
  "title": "JSON schema for Azure Functions host.json files",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",

  "definitions": {

    "aggregator": {
      "description": "Configuration settings for the function result aggregator.",
      "type": "object",
      "properties": {
        "batchSize": {
          "description": "The maximum batch size for aggregations. If this value is reached before the 'flushTimeout', all values will be flushed.",
          "type": "integer",
          "default": 1000
        },
        "flushTimeout": {
          "description": "The aggregation duration. The aggregator will flush periodically based on this value.",
          "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$",
          "default": "00:00:30"
        }
      },
      "additionalProperties": false
    },

    "functions": {
      "description": "The list of functions the host should load.",
      "type": "array",
      "items": {
        "type": "string",
        "uniqueItems": true
      }
    },

    "functionTimeout": {
      "description": "Value indicating the timeout duration for all functions.",
      "oneOf": [
        {
          "type": "string",
          "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$"
        },
        { "enum": [ null ] }
      ]
    },

    "watchDirectories": {
      "description": "Set of shared code directories that should be monitored for changes to ensure that when code in these directories is changed, it is picked up by your functions",
      "type": "array",
      "items": {
        "type": "string",
        "minLength": 1,
        "uniqueItems": true
      }
    },

    "singleton": {
      "description": "Configuration settings for Singleton lock behavior.",
      "type": "object",
      "properties": {
        "lockPeriod": {
          "description": "The period that function level locks are taken for (they will auto renew).",
          "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$",
          "default": "00:00:15"
        },
        "listenerLockPeriod": {
          "description": "The period that listener locks are taken for.",
          "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$",
          "default": "00:01:00"
        },
        "listenerLockRecoveryPollingInterval": {
          "description": "The time interval used for listener lock recovery if a listener lock couldn't be acquired on startup.",
          "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$",
          "default": "00:01:00"
        },
        "lockAcquisitionTimeout": {
          "description": "The maximum amount of time the runtime will try to acquire a lock.",
          "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$",
          "default": "00:01:00"
        },
        "lockAcquisitionPollingInterval": {
          "description": "The interval between lock acquisition attempts.",
          "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$"
        }
      },
      "additionalProperties": false
    },

    "healthMonitor": {
      "description": "Configuration settings for the Functions host health monitor",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Specifies whether the feature is enabled.",
          "type": "boolean",
          "default": true
        },
        "healthCheckInterval": {
          "description": "The time interval between the periodic background health checks",
          "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$",
          "default": "00:00:10"
        },
        "healthCheckWindow": {
          "description": "A sliding time window used in conjunction with the healthCheckThreshold setting.",
          "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$",
          "default": "00:02:00"
        },
        "healthCheckThreshold": {
          "description": "Maximum number of times the health check can fail before a host recycle is initiated.",
          "type": "integer",
          "default": 6
        },
        "counterThreshold": {
          "description": "The threshold at which a performance counter will be considered unhealthy.",
          "type": "number",
          "default": 0.80
        }
      },
      "additionalProperties": false
    },

    "http-extension": {
      "type": "object",
      "description": "Configuration settings for 'http' triggers.",
      "required": [ "routePrefix" ],
      "properties": {
        "routePrefix": {
          "description": "Defines the default route prefix that applies to all routes. Use an empty string to remove the prefix.",
          "type": "string",
          "default": "api"
        },
        "maxConcurrentRequests": {
          "description": "Defines the the maximum number of http functions that will execute in parallel.",
          "type": "integer",
          "default": -1
        },
        "maxOutstandingRequests": {
          "description": "Defines the maximum number of oustanding requests that will be held at any given time.",
          "type": "integer",
          "default": -1
        },
        "dynamicThrottlesEnabled": {
          "description": "Indicates whether dynamic host counter checks should be enabled.",
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false
    },

    "queues-extension": {
      "description": "Configuration settings for 'queue' triggers.",
      "type": "object",
      "properties": {
        "maxPollingInterval": {
          "description": "The maximum interval in milliseconds between queue polls.",
          "type": "integer",
          "default": 1000
        },
        "batchSize": {
          "description": "The number of queue messages to retrieve and process in parallel (per job function).",
          "type": "integer",
          "maximum": 32,
          "minimum": 1,
          "default": 16
        },
        "maxDequeueCount": {
          "description": "The number of times to try processing a message before moving it to the poison queue",
          "type": "integer",
          "default": 5
        },
        "newBatchThreshold": {
          "description": "The threshold at which a new batch of messages will be fetched. The default is batchSize/2.",
          "type": "integer"
        },
        "visibilityTimeout": {
          "description": "The visibility timeout that will be applied to messages that fail processing.",
          "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$",
          "default": "00:00:00"
        }
      },
      "additionalProperties": false
    },
    
    "queues-extension-v2": {
      "description": "Configuration settings for 'queue' triggers.",
      "type": "object",
      "properties": {
        "maxPollingInterval": {
          "type": "string",
          "pattern": "^[0-9][0-9]:[0-9][0-9]:[0-9][0-9](?:\\.[0-9]+)?$",
          "default": "00:00:02",
          "description": "The maximum interval between queue polls. Minimum is 00:00:00.100 (100 ms)."
        },
        "visibilityTimeout": {
          "type": "string",
          "pattern": "^[0-9][0-9]:[0-9][0-9]:[0-9][0-9](?:\\.[0-9]+)?$",
          "default": "00:00:00",
          "description": "The time interval between retries when processing of a message fails."
        },
        "batchSize": {
          "description": "The number of queue messages that the Functions runtime retrieves simultaneously and processes in parallel. When the number being processed gets down to the `newBatchThreshold`, the runtime gets another batch and starts processing those messages. So the maximum number of concurrent messages being processed per function is `batchSize` plus `newBatchThreshold`. This limit applies separately to each queue-triggered function. ",
          "type": "integer",
          "maximum": 32,
          "minimum": 1,
          "default": 16
        },
        "maxDequeueCount": {
          "description": "The number of times to try processing a message before moving it to the poison queue",
          "type": "integer",
          "default": 5
        },
        "newBatchThreshold": {
          "description": "The threshold at which a new batch of messages will be fetched. The default is batchSize/2.",
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    
    "durableTask-extension": {
      "description": "Configuration settings for 'orchestration'/'activity' triggers.",
      "type": "object",
      "properties": {
        "hubName": {
          "description": "The logical container for Azure Storage resources that are used for orchestrations.",
          "type": "string",
          "default": "DurableFunctionsHub"
        },
        "azureStorageConnectionStringName": {
          "description": "An app setting (or environment variable) with the storage connection string to be used by the orchestration/activity trigger.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },

    "cosmosDB-extension": {
      "description": "Configuration settings for Azure Cosmos DB bindings and triggers.",
      "type": "object",
      "properties": {
        "connectionMode": {
          "description": "ConnectionMode to be used on the DocumentClients.",
          "enum": [ "Gateway", "Direct" ],
          "default": "Gateway"
        },
        "protocol": {
          "description": "Protocol to be used on the DocumentClients.",
          "enum": [ "Https", "Tcp" ],
          "default": "Https"
        }
      },
      "additionalProperties": false
    },

    "version-1": {
      "type": "object",
      "properties": {
        "aggregator": { "$ref": "#/definitions/aggregator" },
        "applicationInsights": {
          "description": "Configuration settings for Application Insights logging.",
          "type": "object",
          "properties": {
            "sampling": {
              "description": "Configuration settings for Application Insights client-side adaptive sampling.",
              "type": "object",
              "properties": {
                "isEnabled": {
                  "description": "If true, client-side adaptive sampling is enabled.",
                  "type": "boolean",
                  "default": true
                },
                "maxTelemetryItemsPerSecond": {
                  "description": "The target rate that the adaptive algorithm aims for on each instance",
                  "type": "integer",
                  "default": 5
                }
              }
            }
          },
          "additionalProperties": false
        },
        "functions": { "$ref": "#/definitions/functions" },
        "functionTimeout": { "$ref": "#/definitions/functionTimeout" },
        "healthMonitor": { "$ref": "#/definitions/healthMonitor" },
        "id": {
          "description": "The unique ID for this job host. Can be a lower case GUID with dashes removed",
          "type": "string",
          "minLength": 1
        },
        "logger": {
          "description": "Configuration settings for logging.",
          "type": "object",
          "properties": {
            "defaultLevel": {
              "description": "The default level for logging. If a category level is not specified, this value is used.",
              "enum": [ "Critical", "Debug", "Error", "Information", "None", "Trace", "Warning" ],
              "default": "Information"
            },
            "categoryLevels": {
              "description": "Log levels for specific categories.",
              "type": "object",
              "additionalProperties": {
                "enum": [ "Critical", "Debug", "Error", "Information", "None", "Trace", "Warning" ]
              }
            }
          }
        },
        "singleton": { "$ref": "#/definitions/singleton" },
        "watchDirectories": { "$ref": "#/definitions/watchDirectories" },
        "tracing": {
          "description": "Configuration settings for logging/tracing behavior.",
          "type": "object",
          "properties": {
            "consoleLevel": {
              "description": "The tracing level used for console logging.",
              "enum": [ "off", "error", "warning", "info", "verbose" ],
              "default": "verbose"
            },
            "fileLoggingMode": {
              "description": "Value determining what level of file logging is enabled.",
              "enum": [ "never", "always", "debugOnly" ],
              "default": "debugOnly"
            }
          },
          "additionalProperties": false
        },
        "http": { "$ref": "#/definitions/http-extension" },
        "queues": { "$ref": "#/definitions/queues-extension" },
        "serviceBus": {
          "description": "Configuration settings for 'serviceBus' triggers.",
          "type": "object",
          "properties": {
            "maxConcurrentCalls": {
              "description": "The maximum number of concurrent calls to the callback the message pump should initiate.",
              "type": "integer",
              "default": 16
            },
            "prefetchCount": {
              "description": "The default PrefetchCount that will be used by the underlying MessageReceiver.",
              "type": "integer"
            },
            "autoRenewTimeout": {
              "description": "The maximum duration within which the Service Bus message lock will be renewed automatically.",
              "type": "string",
              "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$",
              "default": "00:05:00"
            },
            "autoComplete": {
              "description": "Specifies whether messages should be automatically completed after successful processing.",
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        },
        "eventHub": { 
          "description": "Configuration settings for 'eventHub' triggers.",
          "type": "object",
          "properties": {
            "maxBatchSize": {
              "description": "The maximum event count received per receive loop.",
              "type": "integer"
            },
            "prefetchCount": {
              "description": "The default PrefetchCount that will be used by the underlying EventProcessorHost.",
              "type": "integer"
            },
            "batchCheckpointFrequency": {
              "description": "The number of batches to process before creating an EventHub cursor checkpoint",
              "type": "integer",
              "default": 1
            }
          },
          "additionalProperties": false },
        "durableTask": { "$ref": "#/definitions/durableTask-extension" },
        "documentDB": { "$ref": "#/definitions/cosmosDB-extension" }
      },
      "additionalProperties": false
    },

    "version-2": {
      "type": "object",
      "properties": {
        "extensionBundle" : {
          "description": "Configuration settings for extension bundle",
          "type": "object",
          "properties": {
            "id": {
              "description": "The id of the extension bundle",
              "type": "string"
            },
            "version": {
              "description": "The version of the extension bundle.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "http": {
          "description": "Configuration settings for customizing the response to http requests",
          "type": "object",
          "hsts": {
            "description": "Configuration settings for Strict-Transport-Security",
            "type": "object",
            "properties": {
              "isEnabled": {
                "description": "Indicates whether the hsts configuration should be applied",
                "type": "boolean"
              },
              "excludedHosts": {
                "description": "Defines the list of host names that will not add the HSTS header.",
                "type": "array",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                }
              },
              "includeSubDomains": {
                "description": "Indicates whether the includeSubDomain parameter of the Strict-Transport-Security header should be enabled.",
                "type": "boolean"
              },
              "maxAge": {
                "description": "Defines the max-age parameter of the Strict-Transport-Security header.",
                "type": "string"
              },
              "preload": {
                "description": "Indicates whether the preload parameter of the Strict-Transport-Security header should be enabled.",
                "type": "boolean"
              }
            },
            "additionalProperties": false
          },
          "customHeaders": {
            "description": "Configuration settings for adding custom http headers.",
            "type": "object"
          },
          "additionalProperties": false
        },
        "aggregator": { "$ref": "#/definitions/aggregator" },
        "functions": { "$ref": "#/definitions/functions" },
        "functionTimeout": { "$ref": "#/definitions/functionTimeout" },
        "healthMonitor": { "$ref": "#/definitions/healthMonitor" },
        "languageWorker": {
          "description": "Configuration settings for Language Workers.",
          "type": "object",
          "properties": {
            "workersDirectory": {
              "description": "Specifies full path of the directory for language workers",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "logging": {
          "description": "Configuration settings for logging.",
          "type": "object",
          "properties": {
            "logLevel": {
              "description": "Log levels for specific categories.",
              "type": "object",
              "properties": {
                "default": {
                  "description": "The default level for logging. If a category level is not specified, this value is used.",
                  "enum": [ "Critical", "Debug", "Error", "Information", "None", "Trace", "Warning" ],
                  "default": "Information"
                }
              },
              "additionalProperties": {
                "enum": [ "Critical", "Debug", "Error", "Information", "None", "Trace", "Warning" ]
              }
            },
            "applicationInsights": {
              "description": "Configuration settings for Application Insights logging.",
              "type": "object",
              "properties": {
                "samplingSettings": {
                  "description": "Configuration settings for Application Insights client-side adaptive sampling.",
                  "type": "object",
                  "properties": {
                    "isEnabled": {
                      "description": "If true, client-side adaptive sampling is enabled.",
                      "type": "boolean",
                      "default": true
                    },
                    "maxTelemetryItemsPerSecond": {
                      "description": "The target rate that the adaptive algorithm aims for on each instance",
                      "type": "integer",
                      "default": 5
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            "fileLoggingMode": {
              "description": "Value determining what level of file logging is enabled.",
              "enum": [ "never", "always", "debugOnly" ],
              "default": "debugOnly"
            }
          }
        },
        "singleton": { "$ref": "#/definitions/singleton" },
        "watchDirectories": { "$ref": "#/definitions/watchDirectories" },
        "version": {
          "description": "The version of the function application.",
          "enum": [ "2.0" ]
        },
        "extensions": {
          "type": "object",
          "properties": {
            "http": { "$ref": "#/definitions/http-extension" },
            "queues": { "$ref": "#/definitions/queues-extension-v2" },
            "serviceBus": {
              "description": "Configuration settings for 'serviceBus' triggers.",
              "type": "object",
              "properties": {
                "prefetchCount": {
                  "description": "The default PrefetchCount that will be used by the underlying MessageReceiver.",
                  "type": "integer"
                },
                "messageHandlerOptions": {
                  "description": "The options that will be used for the message handler registered with the MessageReceiver.",
                  "type": "object",
                  "properties": {
                    "maxConcurrentCalls": {
                      "description": "The maximum number of concurrent calls to the callback the message pump should initiate.",
                      "type": "integer",
                      "default": 16
                    },
                    "maxAutoRenewDuration": {
                      "description": "The maximum duration within which the Service Bus message lock will be renewed automatically.",
                      "type": "string",
                      "pattern": "^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$",
                      "default": "00:05:00"
                    },
                    "autoComplete": {
                      "description": "Value determining whether messages will be completed automatically, or whether the function will take responsibility message completion.",
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }                
              },
              "additionalProperties": false
            },
            "eventHubs": {
              "description": "Configuration settings for 'eventHub' triggers.",
              "type": "object",
              "properties": {
                "eventProcessorOptions": {
                  "type": "object",
                  "description": "Configuration on processing event hub events.",
                  "properties": {
                    "maxBatchSize": {
                      "description": "The maximum event count received per receive loop.",
                      "type": "integer"
                    },
                    "receiveTimeout": {
                      "description": "the timespan in which the user is willing to wait when the event processor is performing a receive operation.",
                      "type": "string",
                      "pattern": "^\\d\\d:\\d\\d:\\d\\d$",
                      "default": "00:01:00"
                    },
                    "enableReceiverRuntimeMetric": {
                      "description": "Value indicating whether the runtime metric of a receiver is enabled.",
                      "type": "boolean"
                    },
                    "prefetchCount": {
                      "description": "The default PrefetchCount that will be used by the underlying EventProcessorHost.",
                      "type": "integer"
                    },
                    "invokeProcessorAfterReceiveTimeout": {
                      "description": "Value indicating whether the processor should be invoked after every ReceiveTimeout when there are no more messages in the stream for a partition.",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },                
                "batchCheckpointFrequency": {
                  "description": "The number of batches to process before creating an EventHub cursor checkpoint",
                  "type": "integer",
                  "default": 1
                }
              },
              "additionalProperties": false
            },
            "durableTask": { "$ref": "#/definitions/durableTask-extension" },
            "cosmosDB": { "$ref": "#/definitions/cosmosDB-extension" }
          }
        }
      },
      "required": [ "version" ],
      "additionalProperties": false
    }
  },

  "oneOf": [
    { "$ref": "#/definitions/version-1" },
    { "$ref": "#/definitions/version-2" }
  ]
}
