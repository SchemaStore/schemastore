{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "https://json.schemastore.org/jshintrc",
  "properties": {
    "asi": {
      "default": false,
      "description": "Suppresses warnings about missing semicolons",
      "type": "boolean"
    },
    "bitwise": {
      "default": false,
      "description": "Prohibit the use of bitwise operators (&, |, ^, etc.)",
      "type": "boolean"
    },
    "boss": {
      "default": false,
      "description": "Suppresses warnings about the use of assignments in cases where comparisons are expected",
      "type": "boolean"
    },
    "browser": {
      "default": false,
      "description": "[Environment] Web Browser (window, document, etc)",
      "type": "boolean"
    },
    "browserify": {
      "default": false,
      "description": "[Environment] Browserify",
      "type": "boolean"
    },
    "couch": {
      "default": false,
      "description": "[Environment] CouchDB",
      "type": "boolean"
    },
    "curly": {
      "default": false,
      "description": "Requires you to always put curly braces around blocks in loops and conditionals",
      "type": "boolean"
    },
    "debug": {
      "default": false,
      "description": "Suppresses warnings about the `debugger` statements in your code",
      "type": "boolean"
    },
    "devel": {
      "default": false,
      "description": "[Environment] Development/debugging (alert, confirm, etc)",
      "type": "boolean"
    },
    "dojo": {
      "default": false,
      "description": "[Environment] Dojo Toolkit",
      "type": "boolean"
    },
    "elision": {
      "default": false,
      "description": "Tells JSHint that your code uses ES3 array elision elements, or empty elements",
      "type": "boolean"
    },
    "eqeqeq": {
      "default": false,
      "description": "Prohibits the use of `==` and `!=` in favor of `===` and `!==`",
      "type": "boolean"
    },
    "eqnull": {
      "default": false,
      "description": "Suppresses warnings about `== null` comparisons",
      "type": "boolean"
    },
    "esversion": {
      "default": 5,
      "description": "The ECMAScript version to which the code must adhere",
      "enum": [3, 5, 6, 7, 8, 9, 10, 11],
      "type": "integer"
    },
    "evil": {
      "default": false,
      "description": "Suppresses warnings about the use of `eval`",
      "type": "boolean"
    },
    "expr": {
      "default": false,
      "description": "Suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls",
      "type": "boolean"
    },
    "extends": {
      "description": "Specify the path to another configuration file to use as a base, relative to the current file",
      "type": "string"
    },
    "forin": {
      "default": false,
      "description": "Requires all `for in` loops to filter object's items with obj.hasOwnProperty()",
      "type": "boolean"
    },
    "freeze": {
      "default": false,
      "description": "Prohibits overwriting prototypes of native objects such as Array, Date and so on",
      "type": "boolean"
    },
    "funcscope": {
      "default": false,
      "description": "Suppresses warnings about declaring variables inside of control structures while accessing them later from the outside",
      "type": "boolean"
    },
    "futurehostile": {
      "default": false,
      "description": "Enables warnings about the use of identifiers which are defined in future versions of JavaScript",
      "type": "boolean"
    },
    "globals": {
      "additionalProperties": {
        "description": "Name of the global. Set to `true` for read/write, `false` for read-only.",
        "type": "boolean"
      },
      "description": "Specify a white list of global variables that are not formally defined in the source code",
      "type": "object"
    },
    "iterator": {
      "default": false,
      "description": "Suppresses warnings about the __iterator__ property.",
      "type": "boolean"
    },
    "jasmine": {
      "default": false,
      "description": "[Environment] Jasmine unit testing framework",
      "type": "boolean"
    },
    "jquery": {
      "default": false,
      "description": "[Environment] jQuery",
      "type": "boolean"
    },
    "lastsemic": {
      "default": false,
      "description": "Suppresses warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block",
      "type": "boolean"
    },
    "latedef": {
      "default": false,
      "description": "Prohibits the use of a variable before it was defined",
      "enum": [true, false, "nofunc"]
    },
    "leanswitch": {
      "default": false,
      "description": "Prohibits unnecessary clauses within `switch` statements",
      "type": "boolean"
    },
    "loopfunc": {
      "default": false,
      "description": "Suppresses warnings about functions inside of loops",
      "type": "boolean"
    },
    "maxcomplexity": {
      "default": false,
      "description": "Max cyclomatic complexity per function",
      "type": ["boolean", "integer"]
    },
    "maxdepth": {
      "default": false,
      "description": "Max depth of nested blocks",
      "type": ["boolean", "integer"]
    },
    "maxerr": {
      "default": 50,
      "description": "Maximum amount of warnings JSHint will produce before giving up",
      "type": "integer"
    },
    "maxparams": {
      "description": "Max number of formal parameters allowed per function",
      "type": ["boolean", "integer"]
    },
    "maxstatements": {
      "default": false,
      "description": "Max number statements per function",
      "type": ["boolean", "integer"]
    },
    "mocha": {
      "default": false,
      "description": "[Environment] Mocha unit testing framework",
      "type": "boolean"
    },
    "module": {
      "default": false,
      "description": "[Environment] ES6 module",
      "type": "boolean"
    },
    "mootools": {
      "default": false,
      "description": "[Environment] MooTools",
      "type": "boolean"
    },
    "moz": {
      "default": false,
      "description": "Tells JSHint that your code uses Mozilla JavaScript extensions",
      "type": "boolean"
    },
    "noarg": {
      "default": false,
      "description": "Prohibits the use of `arguments.caller` and `arguments.callee`",
      "type": "boolean"
    },
    "nocomma": {
      "default": false,
      "description": "Prohibits the use of the comma operator",
      "type": "boolean"
    },
    "node": {
      "default": false,
      "description": "[Environment] Node.js",
      "type": "boolean"
    },
    "nonbsp": {
      "default": false,
      "description": "Warns about `non-breaking whitespace` characters",
      "type": "boolean"
    },
    "nonew": {
      "default": false,
      "description": "Prohibits the use of constructors for side-effects (without assignment)",
      "type": "boolean"
    },
    "nonstandard": {
      "default": false,
      "description": "[Environment] Widely adopted globals (escape, unescape, etc)",
      "type": "boolean"
    },
    "noreturnawait": {
      "default": false,
      "description": "Async functions resolve on their return value. In most cases, this makes returning the result of an AwaitExpression (which is itself a Promise instance) unnecessary",
      "type": "boolean"
    },
    "notypeof": {
      "default": false,
      "description": "Suppresses warnings about invalid `typeof`operator values",
      "type": "boolean"
    },
    "noyield": {
      "default": false,
      "description": "Suppresses warnings about generator functions with no `yield` statement in them",
      "type": "boolean"
    },
    "overrides": {
      "additionalProperties": {
        "description": "The path pattern to apply the given options to",
        "type": "object"
      },
      "description": "Specify the options that should only be applied to files matching a given path pattern",
      "type": "object"
    },
    "phantom": {
      "default": false,
      "description": "[Environment] PhantomJS runtime environment",
      "type": "boolean"
    },
    "plusplus": {
      "default": false,
      "description": "Prohibits the use of `++` and `--`",
      "type": "boolean"
    },
    "proto": {
      "default": false,
      "description": "Suppresses warnings about the `__proto__` property",
      "type": "boolean"
    },
    "prototypejs": {
      "default": false,
      "description": "[Environment] Prototype JavaScript framework",
      "type": "boolean"
    },
    "regexpu": {
      "default": false,
      "description": "Enables warnings for regular expressions which do not include the 'u' flag",
      "type": "boolean"
    },
    "rhino": {
      "default": false,
      "description": "[Environment] Rhino",
      "type": "boolean"
    },
    "scripturl": {
      "default": false,
      "description": "Suppresses warnings about the use of script-targeted URLs",
      "type": "boolean"
    },
    "shadow": {
      "default": false,
      "description": "Suppresses warnings about variable shadowing. i.e. declaring a variable that had been already declared somewhere in the outer scope",
      "enum": [true, false, "inner", "outer"],
      "type": ["boolean", "string"]
    },
    "shelljs": {
      "default": false,
      "description": "[Environment] Defines globals exposed by the ShellJS library",
      "type": "boolean"
    },
    "singleGroups": {
      "default": false,
      "description": "Prohibits the use of the grouping operator when it is not strictly required.",
      "type": "boolean"
    },
    "strict": {
      "default": false,
      "description": "Requires all code to run in ES5 strict mode",
      "enum": [true, false, "implied", "global", "func"],
      "type": ["boolean", "string"]
    },
    "supernew": {
      "default": false,
      "description": "Suppresses warnings about constructions like `new function () { ... };` and `new Object;`",
      "type": "boolean"
    },
    "trailingcomma": {
      "default": false,
      "description": "Warns when a comma is not placed after the last element in an array or object literal",
      "type": "boolean"
    },
    "typed": {
      "default": false,
      "description": "[Environment] Defines globals for typed array constructors",
      "type": "boolean"
    },
    "undef": {
      "default": false,
      "description": "Prohibits the use of explicitly undeclared variables",
      "type": "boolean"
    },
    "unused": {
      "default": false,
      "description": "Warns when you define and never use your variables",
      "enum": [true, false, "vars", "strict"],
      "type": ["boolean", "string"]
    },
    "validthis": {
      "default": false,
      "description": "Suppresses warnings about possible strict violations when the code is running in strict mode and you use `this` in a non-constructor function",
      "type": "boolean"
    },
    "varstmt": {
      "default": false,
      "description": "Forbids the use of VariableStatements (`var`) in favor of `let` and `const`",
      "type": "boolean"
    },
    "withstmt": {
      "default": false,
      "description": "Suppresses warnings about the use of the `with` statement",
      "type": "boolean"
    },
    "worker": {
      "default": false,
      "description": "[Environment] Web Workers",
      "type": "boolean"
    },
    "wsh": {
      "default": false,
      "description": "[Environment] Windows Scripting Host",
      "type": "boolean"
    },
    "yui": {
      "default": false,
      "description": "[Environment] Yahoo User Interface",
      "type": "boolean"
    }
  },
  "title": "JSON schema for JSHint configuration files",
  "type": "object"
}
