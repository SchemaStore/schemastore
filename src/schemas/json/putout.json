{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {
    "rule": {
      "oneOf": [
        {
          "description": "üêäPutout rule\n\n\"off\" means rule is off\n\"on\" means it is a on\n",
          "enum": ["on", "off"]
        },
        {
          "type": "array",
          "items": [
            {
              "enum": ["on", "off"]
            },
            {
              "type": "object"
            }
          ],
          "minItems": 2,
          "additionalItems": false
        },
        {
          "type": "array",
          "items": [
            {
              "enum": ["on", "off"]
            },
            {
              "type": "string"
            },
            {
              "type": "object"
            }
          ],
          "minItems": 3,
          "additionalItems": false
        },
        {
          "type": "array",
          "items": [
            {
              "enum": ["on", "off"]
            },
            {
              "type": "string"
            }
          ],
          "minItems": 2,
          "additionalItems": false
        }
      ]
    },
    "rules": {
      "description": "üêäPutout comes with a large number of rules. You can modify which rules your project uses.",
      "type": "object",
      "properties": {
        "add-return-await": {
          "$ref": "#/definitions/rule"
        },
        "apply-array-at": {
          "$ref": "#/definitions/rule"
        },
        "apply-await-import": {
          "$ref": "#/definitions/rule"
        },
        "apply-destructuring": {
          "$ref": "#/definitions/rule"
        },
        "apply-early-return": {
          "$ref": "#/definitions/rule"
        },
        "apply-if-condition": {
          "$ref": "#/definitions/rule"
        },
        "apply-is-array": {
          "$ref": "#/definitions/rule"
        },
        "apply-montag": {
          "$ref": "#/definitions/rule"
        },
        "apply-nullish-coalescing": {
          "$ref": "#/definitions/rule"
        },
        "apply-numeric-separators": {
          "$ref": "#/definitions/rule"
        },
        "apply-optional-chaining": {
          "$ref": "#/definitions/rule"
        },
        "apply-shorthand-properties": {
          "$ref": "#/definitions/rule"
        },
        "apply-try-catch": {
          "$ref": "#/definitions/rule"
        },
        "apply-utility-types": {
          "$ref": "#/definitions/rule"
        },
        "browserlist": {
          "$ref": "#/definitions/rule"
        },
        "cloudcmd": {
          "$ref": "#/definitions/rule"
        },
        "convert-apply-to-spread": {
          "$ref": "#/definitions/rule"
        },
        "convert-arguments-to-rest": {
          "$ref": "#/definitions/rule"
        },
        "convert-array-copy-to-slice": {
          "$ref": "#/definitions/rule"
        },
        "convert-assignment-to-arrow-function": {
          "$ref": "#/definitions/rule"
        },
        "convert-assignment-to-comparison": {
          "$ref": "#/definitions/rule"
        },
        "convert-bitwise-to-logical": {
          "$ref": "#/definitions/rule"
        },
        "convert-commonjs-to-esm": {
          "$ref": "#/definitions/rule"
        },
        "convert-comparison-to-boolean": {
          "$ref": "#/definitions/rule"
        },
        "convert-concat-to-flat": {
          "$ref": "#/definitions/rule"
        },
        "convert-equal-to-strict-equal": {
          "$ref": "#/definitions/rule"
        },
        "convert-esm-to-commonjs": {
          "$ref": "#/definitions/rule"
        },
        "convert-for-each-to-for-of": {
          "$ref": "#/definitions/rule"
        },
        "convert-for-in-to-for-of": {
          "$ref": "#/definitions/rule"
        },
        "convert-for-to-for-of": {
          "$ref": "#/definitions/rule"
        },
        "convert-index-of-to-includes": {
          "$ref": "#/definitions/rule"
        },
        "convert-is-nan-to-number-is-nan": {
          "$ref": "#/definitions/rule"
        },
        "convert-map-to-for-of": {
          "$ref": "#/definitions/rule"
        },
        "convert-math-pow": {
          "$ref": "#/definitions/rule"
        },
        "convert-mock-require-to-mock-import": {
          "$ref": "#/definitions/rule"
        },
        "convert-object-assign-to-merge-spread": {
          "$ref": "#/definitions/rule"
        },
        "convert-quotes-to-backticks": {
          "$ref": "#/definitions/rule"
        },
        "convert-spread-to-array-from": {
          "$ref": "#/definitions/rule"
        },
        "convert-template-to-string": {
          "$ref": "#/definitions/rule"
        },
        "convert-throw": {
          "$ref": "#/definitions/rule"
        },
        "convert-to-arrow-function": {
          "$ref": "#/definitions/rule"
        },
        "convert-typeof-to-is-type": {
          "$ref": "#/definitions/rule"
        },
        "declare-undefined-variables": {
          "$ref": "#/definitions/rule"
        },
        "eslint": {
          "$ref": "#/definitions/rule"
        },
        "extract-object-properties": {
          "$ref": "#/definitions/rule"
        },
        "extract-sequence-expressions": {
          "$ref": "#/definitions/rule"
        },
        "github": {
          "$ref": "#/definitions/rule"
        },
        "gitignore": {
          "$ref": "#/definitions/rule"
        },
        "jest": {
          "$ref": "#/definitions/rule"
        },
        "madrun": {
          "$ref": "#/definitions/rule"
        },
        "merge-destructuring-properties": {
          "$ref": "#/definitions/rule"
        },
        "merge-duplicate-imports": {
          "$ref": "#/definitions/rule"
        },
        "merge-if-statements": {
          "$ref": "#/definitions/rule"
        },
        "nodejs": {
          "$ref": "#/definitions/rule"
        },
        "nodejs/convert-dirname-to-url": {
          "$ref": "#/definitions/rule"
        },
        "nodejs/convert-fs-promises": {
          "$ref": "#/definitions/rule"
        },
        "nodejs/convert-promisify-to-fs-promises": {
          "$ref": "#/definitions/rule"
        },
        "nodejs/convert-top-level-return": {
          "$ref": "#/definitions/rule"
        },
        "nodejs/remove-process-exit": {
          "$ref": "#/definitions/rule"
        },
        "npmignore": {
          "$ref": "#/definitions/rule"
        },
        "package-json": {
          "$ref": "#/definitions/rule"
        },
        "postcss": {
          "$ref": "#/definitions/rule"
        },
        "promises": {
          "$ref": "#/definitions/rule"
        },
        "promises/add-missing-await": {
          "$ref": "#/definitions/rule"
        },
        "promises/apply-top-level-await": {
          "$ref": "#/definitions/rule"
        },
        "promises/convert-new-promise-to-async": {
          "$ref": "#/definitions/rule"
        },
        "promises/convert-reject-to-throw": {
          "$ref": "#/definitions/rule"
        },
        "promises/remove-useless-async": {
          "$ref": "#/definitions/rule"
        },
        "promises/remove-useless-await": {
          "$ref": "#/definitions/rule"
        },
        "promises/remove-useless-resolve": {
          "$ref": "#/definitions/rule"
        },
        "putout": {
          "$ref": "#/definitions/rule"
        },
        "putout-config": {
          "$ref": "#/definitions/rule"
        },
        "react-hooks": {
          "$ref": "#/definitions/rule"
        },
        "regexp": {
          "$ref": "#/definitions/rule"
        },
        "remove-boolean-from-assertions": {
          "$ref": "#/definitions/rule"
        },
        "remove-boolean-from-logical-expressions": {
          "$ref": "#/definitions/rule"
        },
        "remove-console": {
          "$ref": "#/definitions/rule"
        },
        "remove-constant-conditions": {
          "$ref": "#/definitions/rule"
        },
        "remove-debugger": {
          "$ref": "#/definitions/rule"
        },
        "remove-double-negations": {
          "$ref": "#/definitions/rule"
        },
        "remove-duplicate-case": {
          "$ref": "#/definitions/rule"
        },
        "remove-duplicate-interface-keys": {
          "$ref": "#/definitions/rule"
        },
        "remove-duplicate-keys": {
          "$ref": "#/definitions/rule"
        },
        "remove-duplicates-from-logical-expressions": {
          "$ref": "#/definitions/rule"
        },
        "remove-duplicates-from-union": {
          "$ref": "#/definitions/rule"
        },
        "remove-empty": {
          "$ref": "#/definitions/rule"
        },
        "remove-empty/argument": {
          "$ref": "#/definitions/rule"
        },
        "remove-empty/block": {
          "$ref": "#/definitions/rule"
        },
        "remove-empty/export": {
          "$ref": "#/definitions/rule"
        },
        "remove-empty/import": {
          "$ref": "#/definitions/rule"
        },
        "remove-empty/pattern": {
          "$ref": "#/definitions/rule"
        },
        "remove-iife": {
          "$ref": "#/definitions/rule"
        },
        "remove-nested-blocks": {
          "$ref": "#/definitions/rule"
        },
        "remove-only": {
          "$ref": "#/definitions/rule"
        },
        "remove-process-exit": {
          "$ref": "#/definitions/rule"
        },
        "remove-skip": {
          "$ref": "#/definitions/rule"
        },
        "remove-unreachable-code": {
          "$ref": "#/definitions/rule"
        },
        "remove-unreferenced-variables": {
          "$ref": "#/definitions/rule"
        },
        "remove-unused-expressions": {
          "$ref": "#/definitions/rule"
        },
        "remove-unused-for-of-variables": {
          "$ref": "#/definitions/rule"
        },
        "remove-unused-private-fields": {
          "$ref": "#/definitions/rule"
        },
        "remove-unused-types": {
          "$ref": "#/definitions/rule"
        },
        "remove-unused-variables": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-arguments": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-array-constructor": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-array-entries": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-array-from": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-conditions": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-constructor": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-continue": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-escape": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-for-of": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-functions": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-map": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-new": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-operand": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-return": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-spread": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-template-expressions": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-templates": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-type-conversion": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-typeof": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-types-from-constants": {
          "$ref": "#/definitions/rule"
        },
        "remove-useless-variables": {
          "$ref": "#/definitions/rule"
        },
        "reuse-duplicate-init": {
          "$ref": "#/definitions/rule"
        },
        "simplify-assignment": {
          "$ref": "#/definitions/rule"
        },
        "simplify-logical-expressions": {
          "$ref": "#/definitions/rule"
        },
        "simplify-ternary": {
          "$ref": "#/definitions/rule"
        },
        "split-nested-destructuring": {
          "$ref": "#/definitions/rule"
        },
        "split-variable-declarations": {
          "$ref": "#/definitions/rule"
        },
        "strict-mode": {
          "$ref": "#/definitions/rule"
        },
        "tape": {
          "$ref": "#/definitions/rule"
        },
        "travis": {
          "$ref": "#/definitions/rule"
        },
        "typescript": {
          "$ref": "#/definitions/rule"
        },
        "typescript/apply-as-type-assertion": {
          "$ref": "#/definitions/rule"
        },
        "typescript/apply-utility-types": {
          "$ref": "#/definitions/rule"
        },
        "typescript/convert-generic-to-shorthand": {
          "$ref": "#/definitions/rule"
        },
        "typescript/remove-duplicate-interface-keys": {
          "$ref": "#/definitions/rule"
        },
        "typescript/remove-duplicates-from-union": {
          "$ref": "#/definitions/rule"
        },
        "typescript/remove-unused-types": {
          "$ref": "#/definitions/rule"
        },
        "typescript/remove-useless-mapped-types": {
          "$ref": "#/definitions/rule"
        },
        "typescript/remove-useless-mapping-modifiers": {
          "$ref": "#/definitions/rule"
        },
        "typescript/remove-useless-types": {
          "$ref": "#/definitions/rule"
        },
        "typescript/remove-useless-types-from-constants": {
          "$ref": "#/definitions/rule"
        },
        "webpack": {
          "$ref": "#/definitions/rule"
        }
      }
    }
  },
  "properties": {
    "parser": {
      "description": "Tell üêäPutout which parser to use",
      "type": "string"
    },
    "formatter": {
      "description": "Choose the way to show information about errors found",
      "type": ["string", "array"]
    },
    "processors": {
      "description": "Tell üêäPutout which processors to use to support file types other then JavaScript",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "ignore": {
      "description": "Tell üêäPutout to ignore specific files and directories.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "match": {
      "description": "Allows to match rules for files and folders, specified by glob patterns.",
      "type": "object",
      "patternProperties": {
        "^.*$": {
          "$ref": "#/definitions/rules"
        },
        "additionalProperties": false
      }
    },
    "plugins": {
      "description": "Tell üêäPutout which plugins to load",
      "type": "array",
      "uniqueItems": true
    },
    "rules": {
      "$ref": "#/definitions/rules"
    }
  },
  "type": "object"
}
