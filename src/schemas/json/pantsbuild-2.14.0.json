{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "additionalProperties": true,
  "description": "Pants configuration file schema: https://www.pantsbuild.org/",
  "properties": {
    "GLOBAL": {
      "description": "Options to control the overall behavior of Pants.",
      "properties": {
        "backend_packages": {
          "default": [],
          "description": "Register functionality from these backends.\n\nThe backend packages must be present on the PYTHONPATH, typically because they are in the Pants core dist, in a plugin dist, or available as sources in the repo.",
          "type": "array"
        },
        "build_file_prelude_globs": {
          "default": [],
          "description": "Python files to evaluate and whose symbols should be exposed to all BUILD files. See https://www.pantsbuild.org/v2.14/docs/macros.",
          "type": "array"
        },
        "build_ignore": {
          "default": [],
          "description": "Path globs or literals to ignore when identifying BUILD files.\n\nThis does not affect any other filesystem operations; use `--pants-ignore` for that instead.",
          "type": "array"
        },
        "build_patterns": {
          "default": ["BUILD", "BUILD.*"],
          "description": "The naming scheme for BUILD files, i.e. where you define targets.\n\nThis only sets the naming scheme, not the directory paths to look for. To add ignore patterns, use the option `[GLOBAL].build_ignore`.\n\nYou may also need to update the option `[tailor].build_file_name` so that it is compatible with this option.",
          "type": "array"
        },
        "ca_certs_path": {
          "default": null,
          "description": "Path to a file containing PEM-format CA certificates used for verifying secure connections when downloading files required by a build.",
          "type": "string"
        },
        "cache_content_behavior": {
          "default": "fetch",
          "description": "Controls how the content of cache entries is handled during process execution.\n\nWhen using a remote cache, the `fetch` behavior will fetch remote cache content from the remote store before considering the cache lookup a hit, while the `validate` behavior will only validate (for either a local or remote cache) that the content exists, without fetching it.\n\nThe `defer` behavior, on the other hand, will neither fetch nor validate the cache content before calling a cache hit a hit. This \"defers\" actually fetching the cache entry until Pants needs it (which may be never).\n\nThe `defer` mode is the most network efficient (because it will completely skip network requests in many cases), followed by the `validate` mode (since it can still skip fetching the content if no consumer ends up needing it). But both the `validate` and `defer` modes rely on an experimental feature called \"backtracking\" to attempt to recover if content later turns out to be missing (`validate` has a much narrower window for backtracking though, since content would need to disappear between validation and consumption: generally, within one `pantsd` session).",
          "enum": ["fetch", "validate", "defer"]
        },
        "colors": {
          "default": false,
          "description": "Whether Pants should use colors in output or not. This may also impact whether some tools Pants runs use color.\n\nWhen unset, this value defaults based on whether the output destination supports color.",
          "type": "boolean"
        },
        "concurrent": {
          "default": false,
          "description": "Enable concurrent runs of Pants. Without this enabled, Pants will start up all concurrent invocations (e.g. in other terminals) without pantsd. Enabling this option requires parallel Pants invocations to block on the first.",
          "type": "boolean"
        },
        "dynamic_ui": {
          "default": true,
          "description": "Display a dynamically-updating console UI as Pants runs. This is true by default if Pants detects a TTY and there is no 'CI' environment variable indicating that Pants is running in a continuous integration environment.",
          "type": "boolean"
        },
        "dynamic_ui_renderer": {
          "default": "indicatif-spinner",
          "description": "If `--dynamic-ui` is enabled, selects the renderer.",
          "enum": ["indicatif-spinner", "experimental-prodash"]
        },
        "engine_visualize_to": {
          "default": null,
          "description": "A directory to write execution and rule graphs to as `dot` files. The contents of the directory will be overwritten if any filenames collide."
        },
        "ignore_warnings": {
          "default": [],
          "description": "Ignore logs and warnings matching these strings.\n\nNormally, Pants will look for literal matches from the start of the log/warning message, but you can prefix the ignore with `$regex$` for Pants to instead treat your string as a regex pattern. For example:\n\n    ignore_warnings = [\n        \"DEPRECATED: option 'config' in scope 'flake8' will be removed\",\n        '$regex$:No files\\s*'\n    ]",
          "type": "array"
        },
        "keep_sandboxes": {
          "default": "never",
          "description": "Controls whether Pants will clean up local directories used as chroots for running processes.\n\nPants will log their location so that you can inspect the chroot, and run the `__run.sh` script to recreate the process using the same argv and environment variables used by Pants. This option is useful for debugging.",
          "enum": ["always", "on_failure", "never"]
        },
        "level": {
          "default": "info",
          "description": "Set the logging level.",
          "enum": ["trace", "debug", "info", "warn", "error"]
        },
        "local_cache": {
          "default": true,
          "description": "Whether to cache process executions in a local cache persisted to disk at `--local-store-dir`.",
          "type": "boolean"
        },
        "local_execution_root_dir": {
          "default": "<tmp_dir>",
          "description": "Directory to use for local process execution sandboxing.\n\nThe path may be absolute or relative. If the directory is within the build root, be sure to include it in `--pants-ignore`.",
          "type": "string"
        },
        "local_store_dir": {
          "default": "/home/alexey.tereshenkov/.cache/pants/lmdb_store",
          "description": "Directory to use for the local file store, which stores the results of subprocesses run by Pants.\n\nThe path may be absolute or relative. If the directory is within the build root, be sure to include it in `--pants-ignore`.",
          "type": "string"
        },
        "local_store_directories_max_size_bytes": {
          "default": 16000000000,
          "description": "The maximum size in bytes of the local store containing directories. Stored below `--local-store-dir`.",
          "type": "number"
        },
        "local_store_files_max_size_bytes": {
          "default": 256000000000,
          "description": "The maximum size in bytes of the local store containing files. Stored below `--local-store-dir`.\n\nNB: This size value bounds the total size of all files, but (due to sharding of the store on disk) it also bounds the per-file size to (VALUE / `--local-store-shard-count`).\n\nThis value doesn't reflect space allocated on disk, or RAM allocated (it may be reflected in VIRT but not RSS). However, the default is lower than you might otherwise choose because macOS creates core dumps that include MMAP'd pages, and setting this too high might cause core dumps to use an unreasonable amount of disk if they are enabled.",
          "type": "number"
        },
        "local_store_processes_max_size_bytes": {
          "default": 16000000000,
          "description": "The maximum size in bytes of the local store containing process cache entries. Stored below `--local-store-dir`.",
          "type": "number"
        },
        "local_store_shard_count": {
          "default": 16,
          "description": "The number of LMDB shards created for the local store. This setting also impacts the maximum size of stored files: see `--local-store-files-max-size-bytes` for more information.\n\nBecause LMDB allows only one simultaneous writer per database, the store is split into multiple shards to allow for more concurrent writers. The faster your disks are, the fewer shards you are likely to need for performance.\n\nNB: After changing this value, you will likely want to manually clear the `--local-store-dir` directory to clear the space used by old shard layouts.",
          "type": "number"
        },
        "log_levels_by_target": {
          "default": {},
          "description": "Set a more specific logging level for one or more logging targets. The names of logging targets are specified in log strings when the --show-log-target option is set. The logging levels are one of: \"error\", \"warn\", \"info\", \"debug\", \"trace\". All logging targets not specified here use the global log level set with --level. For example, you can set `--log-levels-by-target='{\"workunit_store\": \"info\", \"pants.engine.rules\": \"warn\"}'`.",
          "type": "object"
        },
        "log_show_rust_3rdparty": {
          "default": false,
          "description": "Whether to show/hide logging done by 3rdparty Rust crates used by the Pants engine.",
          "type": "boolean"
        },
        "logdir": {
          "default": null,
          "description": "Write logs to files under this directory.",
          "type": "string"
        },
        "loop": {
          "default": false,
          "description": "Run goals continuously as file changes are detected.",
          "type": "boolean"
        },
        "loop_max": {
          "default": 4294967296,
          "description": "The maximum number of times to loop when `--loop` is specified.",
          "type": "number"
        },
        "named_caches_dir": {
          "default": "/home/alexey.tereshenkov/.cache/pants/named_caches",
          "description": "Directory to use for named global caches for tools and processes with trusted, concurrency-safe caches.\n\nThe path may be absolute or relative. If the directory is within the build root, be sure to include it in `--pants-ignore`.",
          "type": "string"
        },
        "pants_bin_name": {
          "default": "./pants",
          "description": "The name of the script or binary used to invoke Pants. Useful when printing help messages.",
          "type": "string"
        },
        "pants_config_files": {
          "default": ["/home/alexey.tereshenkov/code/pants/pants.toml"],
          "description": "Paths to Pants config files. This may only be set through the environment variable `PANTS_CONFIG_FILES` and the command line argument `--pants-config-files`; it will be ignored if in a config file like `pants.toml`.",
          "type": "array"
        },
        "pants_distdir": {
          "default": "/home/alexey.tereshenkov/code/pants/dist",
          "description": "Write end products, such as the results of `./pants package`, to this dir.",
          "type": "string"
        },
        "pants_ignore": {
          "default": [".*/", "/dist/", "__pycache__"],
          "description": "Paths to ignore for all filesystem operations performed by pants (e.g. BUILD file scanning, glob matching, etc). Patterns use the gitignore syntax (https://git-scm.com/docs/gitignore). The `pants_distdir` and `pants_workdir` locations are automatically ignored. `pants_ignore` can be used in tandem with `pants_ignore_use_gitignore`; any rules specified here are applied after rules specified in a .gitignore file.",
          "type": "array"
        },
        "pants_ignore_use_gitignore": {
          "default": true,
          "description": "Make use of a root .gitignore file when determining whether to ignore filesystem operations performed by Pants. If used together with `--pants-ignore`, any exclude/include patterns specified there apply after .gitignore rules.",
          "type": "boolean"
        },
        "pants_physical_workdir_base": {
          "default": null,
          "description": "When set, a base directory in which to store `--pants-workdir` contents. If this option is a set, the workdir will be created as symlink into a per-workspace subdirectory.",
          "type": "string"
        },
        "pants_subprocessdir": {
          "default": "/home/alexey.tereshenkov/code/pants/.pids",
          "description": "The directory to use for tracking subprocess metadata. This should live outside of the dir used by `pants_workdir` to allow for tracking subprocesses that outlive the workdir data.",
          "type": "string"
        },
        "pants_version": {
          "default": "<pants_version>",
          "description": "Use this Pants version. Note that Pants only uses this to verify that you are using the requested version, as Pants cannot dynamically change the version it is using once the program is already running.\n\nIf you use the `./pants` script from https://www.pantsbuild.org/v2.14/docs/installation, however, changing the value in your `pants.toml` will cause the new version to be installed and run automatically.\n\nRun `./pants --version` to check what is being used.",
          "type": "string"
        },
        "pants_workdir": {
          "default": "/home/alexey.tereshenkov/code/pants/.pants.d",
          "description": "Write intermediate logs and output files to this dir.",
          "type": "string"
        },
        "pantsd": {
          "default": true,
          "description": "Enables use of the Pants daemon (pantsd). pantsd can significantly improve runtime performance by lowering per-run startup cost, and by memoizing filesystem operations and rule execution.",
          "type": "boolean"
        },
        "pantsd_invalidation_globs": {
          "default": [],
          "description": "Filesystem events matching any of these globs will trigger a daemon restart. Pants's own code, plugins, and `--pants-config-files` are inherently invalidated.",
          "type": "array"
        },
        "pantsd_max_memory_usage": {
          "default": "1GiB",
          "description": "The maximum memory usage of the pantsd process.\n\nWhen the maximum memory is exceeded, the daemon will restart gracefully, although all previous in-memory caching will be lost. Setting too low means that you may miss out on some caching, whereas setting too high may over-consume resources and may result in the operating system killing Pantsd due to memory overconsumption (e.g. via the OOM killer).\n\nYou can suffix with `GiB`, `MiB`, `KiB`, or `B` to indicate the unit, e.g. `2GiB` or `2.12GiB`. A bare number will be in bytes.\n\nThere is at most one pantsd process per workspace."
        },
        "pantsd_pailgun_port": {
          "default": 0,
          "description": "The port to bind the Pants nailgun server to. Defaults to a random port.",
          "type": "number"
        },
        "pantsd_timeout_when_multiple_invocations": {
          "default": 60.0,
          "description": "The maximum amount of time to wait for the invocation to start until raising a timeout exception. Because pantsd currently does not support parallel runs, any prior running Pants command must be finished for the current one to start. To never timeout, use the value -1.",
          "type": "number"
        },
        "pantsrc": {
          "default": true,
          "description": "Use pantsrc files located at the paths specified in the global option `pantsrc_files`.",
          "type": "boolean"
        },
        "pantsrc_files": {
          "default": ["/etc/pantsrc", "~/.pants.rc", ".pants.rc"],
          "description": "Override config with values from these files, using syntax matching that of `--pants-config-files`.",
          "type": "array"
        },
        "plugins": {
          "default": [],
          "description": "Allow backends to be loaded from these plugins (usually released through PyPI). The default backends for each plugin will be loaded automatically. Other backends in a plugin can be loaded by listing them in `backend_packages` in the `[GLOBAL]` scope.",
          "type": "array"
        },
        "plugins_force_resolve": {
          "default": false,
          "description": "Re-resolve plugins, even if previously resolved.",
          "type": "boolean"
        },
        "print_stacktrace": {
          "default": false,
          "description": "Print the full exception stack trace for any errors.",
          "type": "boolean"
        },
        "process_cleanup": {
          "default": true,
          "description": "If false, Pants will not clean up local directories used as chroots for running processes. Pants will log their location so that you can inspect the chroot, and run the `__run.sh` script to recreate the process using the same argv and environment variables used by Pants. This option is useful for debugging.",
          "type": "boolean"
        },
        "process_execution_cache_namespace": {
          "default": null,
          "description": "The cache namespace for process execution. Change this value to invalidate every artifact's execution, or to prevent process cache entries from being (re)used for different usecases or users.",
          "type": "string"
        },
        "process_execution_graceful_shutdown_timeout": {
          "default": 3,
          "description": "The time in seconds to wait when gracefully shutting down an interactive process (such as one opened using `./pants run`) before killing it.",
          "type": "number"
        },
        "process_execution_local_enable_nailgun": {
          "default": true,
          "description": "Whether or not to use nailgun to run JVM requests that are marked as supporting nailgun.",
          "type": "boolean"
        },
        "process_execution_local_parallelism": {
          "default": "#cores",
          "description": "Number of concurrent processes that may be executed locally.\n\nThis value is independent of the number of threads that may be used to execute the logic in `@rules` (controlled by `--rule-threads-core`).",
          "type": "number"
        },
        "process_execution_remote_parallelism": {
          "default": 128,
          "description": "Number of concurrent processes that may be executed remotely.",
          "type": "number"
        },
        "process_per_child_memory_usage": {
          "default": "512MiB",
          "description": "The default memory usage for a single \"pooled\" child process.\n\nCheck the documentation for the `--process-total-child-memory-usage` for advice on how to choose an appropriate value for this option.\n\nYou can suffix with `GiB`, `MiB`, `KiB`, or `B` to indicate the unit, e.g. `2GiB` or `2.12GiB`. A bare number will be in bytes."
        },
        "process_total_child_memory_usage": {
          "default": null,
          "description": "The maximum memory usage for all \"pooled\" child processes.\n\nWhen set, this value participates in precomputing the pool size of child processes used by Pants (pooling is currently used only for the JVM). When not set, Pants will default to spawning `2 * --process-execution-local-parallelism` pooled processes.\n\nA high value would result in a high number of child processes spawned, potentially overconsuming your resources and triggering the OS' OOM killer. A low value would mean a low number of child processes launched and therefore less parallelism for the tasks that need those processes.\n\nIf setting this value, consider also adjusting the value of the `--process-per-child-memory-usage` option.\n\nYou can suffix with `GiB`, `MiB`, `KiB`, or `B` to indicate the unit, e.g. `2GiB` or `2.12GiB`. A bare number will be in bytes."
        },
        "pythonpath": {
          "default": [],
          "description": "Add these directories to PYTHONPATH to search for plugins. This does not impact the PYTHONPATH used by Pants when running your Python code.",
          "type": "array"
        },
        "remote_auth_plugin": {
          "default": null,
          "description": "Path to a plugin to dynamically configure remote caching and execution options.\n\nFormat: `path.to.module:my_func`. Pants will import your module and run your function. Update the `--pythonpath` option to ensure your file is loadable.\n\nThe function should take the kwargs `initial_store_headers: dict[str, str]`, `initial_execution_headers: dict[str, str]`, `options: Options` (from pants.option.options), `env: dict[str, str]`, and `prior_result: AuthPluginResult | None`. It should return an instance of `AuthPluginResult` from `pants.option.global_options`.\n\nPants will replace the headers it would normally use with whatever your plugin returns; usually, you should include the `initial_store_headers` and `initial_execution_headers` in your result so that options like `[GLOBAL].remote_store_headers` still work.\n\nIf you return `instance_name`, Pants will replace `[GLOBAL].remote_instance_name` with this value.\n\nIf the returned auth state is `AuthPluginState.UNAVAILABLE`, Pants will disable remote caching and execution.\n\nIf Pantsd is in use, `prior_result` will be the previous `AuthPluginResult` returned by your plugin, which allows you to reuse the result. Otherwise, if Pantsd has been restarted or is not used, the `prior_result` will be `None`.",
          "type": "string"
        },
        "remote_ca_certs_path": {
          "default": null,
          "description": "Path to a PEM file containing CA certificates used for verifying secure connections to `[GLOBAL].remote_execution_address` and `[GLOBAL].remote_store_address`.\n\nIf unspecified, Pants will attempt to auto-discover root CA certificates when TLS is enabled with remote execution and caching.",
          "type": "string"
        },
        "remote_cache_read": {
          "default": false,
          "description": "Whether to enable reading from a remote cache.\n\nThis cannot be used at the same time as `[GLOBAL].remote_execution`.",
          "type": "boolean"
        },
        "remote_cache_read_timeout_millis": {
          "default": 1500,
          "description": "Timeout value for remote cache lookups in milliseconds.",
          "type": "number"
        },
        "remote_cache_rpc_concurrency": {
          "default": 128,
          "description": "The number of concurrent requests allowed to the remote cache service.",
          "type": "number"
        },
        "remote_cache_warnings": {
          "default": "backoff",
          "description": "How frequently to log remote cache failures at the `warn` log level.\n\nAll errors not logged at the `warn` level will instead be logged at the `debug` level.",
          "enum": ["ignore", "first_only", "backoff"]
        },
        "remote_cache_write": {
          "default": false,
          "description": "Whether to enable writing results to a remote cache.\n\nThis cannot be used at the same time as `[GLOBAL].remote_execution`.",
          "type": "boolean"
        },
        "remote_execution": {
          "default": false,
          "description": "Enables remote workers for increased parallelism. (Alpha)\n\nAlternatively, you can use `[GLOBAL].remote_cache_read` and `[GLOBAL].remote_cache_write` to still run everything locally, but to use a remote cache.",
          "type": "boolean"
        },
        "remote_execution_address": {
          "default": null,
          "description": "The URI of a server used as a remote execution scheduler.\n\nFormat: `scheme://host:port`. The supported schemes are `grpc` and `grpcs`, i.e. gRPC with TLS enabled. If `grpc` is used, TLS will be disabled.\n\nYou must also set `[GLOBAL].remote_store_address`, which will often be the same value.",
          "type": "string"
        },
        "remote_execution_extra_platform_properties": {
          "default": [],
          "description": "Platform properties to set on remote execution requests. Format: property=value. Multiple values should be specified as multiple occurrences of this flag. Pants itself may add additional platform properties.",
          "type": "array"
        },
        "remote_execution_headers": {
          "default": "{'user-agent': 'pants/<pants_version>'}",
          "description": "Headers to set on remote execution requests. Format: header=value. Pants may add additional headers.\n\nSee `[GLOBAL].remote_store_headers` as well.",
          "type": "object"
        },
        "remote_execution_overall_deadline_secs": {
          "default": 3600,
          "description": "Overall timeout in seconds for each remote execution request from time of submission",
          "type": "number"
        },
        "remote_execution_rpc_concurrency": {
          "default": 128,
          "description": "The number of concurrent requests allowed to the remote execution service.",
          "type": "number"
        },
        "remote_instance_name": {
          "default": null,
          "description": "Name of the remote instance to use by remote caching and remote execution.\n\nThis is used by some remote servers for routing. Consult your remote server for whether this should be set.\n\nYou can also use `[GLOBAL].remote_auth_plugin` to provide a plugin to dynamically set this value.",
          "type": "string"
        },
        "remote_oauth_bearer_token_path": {
          "default": null,
          "description": "Path to a file containing an oauth token to use for gGRPC connections to `[GLOBAL].remote_execution_address` and `[GLOBAL].remote_store_address`.\n\nIf specified, Pants will add a header in the format `authorization: Bearer <token>`. You can also manually add this header via `[GLOBAL].remote_execution_headers` and `[GLOBAL].remote_store_headers`, or use `[GLOBAL].remote_auth_plugin` to provide a plugin to dynamically set the relevant headers. Otherwise, no authorization will be performed.",
          "type": "string"
        },
        "remote_store_address": {
          "default": null,
          "description": "The URI of a server used for the remote file store.\n\nFormat: `scheme://host:port`. The supported schemes are `grpc` and `grpcs`, i.e. gRPC with TLS enabled. If `grpc` is used, TLS will be disabled.",
          "type": "string"
        },
        "remote_store_batch_api_size_limit": {
          "default": 4194304,
          "description": "The maximum total size of blobs allowed to be sent in a single batch API call to the remote store.",
          "type": "number"
        },
        "remote_store_chunk_bytes": {
          "default": 1048576,
          "description": "Size in bytes of chunks transferred to/from the remote file store.",
          "type": "number"
        },
        "remote_store_chunk_upload_timeout_seconds": {
          "default": 60,
          "description": "Timeout (in seconds) for uploads of individual chunks to the remote file store.",
          "type": "number"
        },
        "remote_store_headers": {
          "default": "{'user-agent': 'pants/<pants_version>'}",
          "description": "Headers to set on remote store requests.\n\nFormat: header=value. Pants may add additional headers.\n\nSee `[GLOBAL].remote_execution_headers` as well.",
          "type": "object"
        },
        "remote_store_rpc_concurrency": {
          "default": 128,
          "description": "The number of concurrent requests allowed to the remote store service.",
          "type": "number"
        },
        "remote_store_rpc_retries": {
          "default": 2,
          "description": "Number of times to retry any RPC to the remote store before giving up.",
          "type": "number"
        },
        "rule_threads_core": {
          "default": "max(2, #cores/2)",
          "description": "The number of threads to keep active and ready to execute `@rule` logic (see also: `--rule-threads-max`).\n\nValues less than 2 are not currently supported.\n\nThis value is independent of the number of processes that may be spawned in parallel locally (controlled by `--process-execution-local-parallelism`).",
          "type": "number"
        },
        "rule_threads_max": {
          "default": null,
          "description": "The maximum number of threads to use to execute `@rule` logic. Defaults to a small multiple of `--rule-threads-core`.",
          "type": "number"
        },
        "show_log_target": {
          "default": false,
          "description": "Display the target where a log message originates in that log message's output. This can be helpful when paired with --log-levels-by-target.",
          "type": "boolean"
        },
        "spec_files": {
          "default": [],
          "description": "Read additional specs (target addresses, files, and/or globs), one per line, from these files.",
          "type": "array"
        },
        "stats_record_option_scopes": {
          "default": ["*"],
          "description": "Option scopes to record in stats on run completion. Options may be selected by joining the scope and the option with a ^ character, i.e. to get option `pantsd` in the GLOBAL scope, you'd pass `GLOBAL^pantsd`. Add a '*' to the list to capture all known scopes.",
          "type": "array"
        },
        "streaming_workunits_complete_async": {
          "default": true,
          "description": "True if stats recording should be allowed to complete asynchronously when `pantsd` is enabled. When `pantsd` is disabled, stats recording is always synchronous. To reduce data loss, this flag defaults to false inside of containers, such as when run with Docker.",
          "type": "boolean"
        },
        "streaming_workunits_level": {
          "default": "debug",
          "description": "The level of workunits that will be reported to streaming workunit event receivers.\n\nWorkunits form a tree, and even when workunits are filtered out by this setting, the workunit tree structure will be preserved (by adjusting the parent pointers of the remaining workunits).",
          "enum": ["trace", "debug", "info", "warn", "error"]
        },
        "streaming_workunits_report_interval": {
          "default": 1.0,
          "description": "Interval in seconds between when streaming workunit event receivers will be polled.",
          "type": "number"
        },
        "subproject_roots": {
          "default": [],
          "description": "Paths that correspond with build roots for any subproject that this project depends on.",
          "type": "array"
        },
        "tag": {
          "default": [],
          "description": "Include only targets with these tags (optional '+' prefix) or without these tags ('-' prefix). See https://www.pantsbuild.org/v2.14/docs/advanced-target-selection.",
          "type": "array"
        },
        "unmatched_build_file_globs": {
          "default": "warn",
          "description": "What to do when files and globs specified in BUILD files, such as in the `sources` field, cannot be found.\n\nThis usually happens when the files do not exist on your machine. It can also happen if they are ignored by the `[GLOBAL].pants_ignore` option, which causes the files to be invisible to Pants.",
          "enum": ["warn", "error"]
        },
        "unmatched_cli_globs": {
          "default": "error",
          "description": "What to do when command line arguments, e.g. files and globs like `dir::`, cannot be found.\n\nThis usually happens when the files do not exist on your machine. It can also happen if they are ignored by the `[GLOBAL].pants_ignore` option, which causes the files to be invisible to Pants.",
          "enum": ["ignore", "warn", "error"]
        },
        "verify_config": {
          "default": true,
          "description": "Verify that all config file values correspond to known options.",
          "type": "boolean"
        },
        "watch_filesystem": {
          "default": true,
          "description": "Set to False if Pants should not watch the filesystem for changes. `pantsd` or `loop` may not be enabled.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "anonymous-telemetry": {
      "description": "Options related to sending anonymous stats to the Pants project, to aid development.",
      "properties": {
        "enabled": {
          "default": false,
          "description": "Whether to send anonymous telemetry to the Pants project.\n\nTelemetry is sent asynchronously, with silent failure, and does not impact build times or outcomes.\n\nSee https://www.pantsbuild.org/v2.14/docs/anonymous-telemetry for details.",
          "type": "boolean"
        },
        "repo_id": {
          "default": null,
          "description": "An anonymized ID representing this repo.\n\nFor private repos, you likely want the ID to not be derived from, or algorithmically convertible to, anything identifying the repo.\n\nFor public repos the ID may be visible in that repo's config file, so anonymity of the repo is not guaranteed (although user anonymity is always guaranteed).\n\nSee https://www.pantsbuild.org/v2.14/docs/anonymous-telemetry for details.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "auth": {
      "description": "Set up for authenticating with Toolchain.",
      "properties": {
        "auth_file": {
          "default": ".pants.d/toolchain_auth/auth_token.json",
          "description": "Path (relative to the repo root) at which to store and read the auth token.",
          "type": "string"
        },
        "ci_env_variables": {
          "default": [],
          "description": "Environment variables in CI used to identify the build (used for restricted tokens)",
          "type": "array"
        },
        "from_env_var": {
          "default": null,
          "description": "Load the access token from this environment variable",
          "type": "string"
        },
        "org": {
          "default": null,
          "description": "Organization slug for public repo PRs.",
          "type": "string"
        },
        "restricted_token_matches": {
          "default": {},
          "description": "A mapping of environment variable name to a regex that must match that variable's value in order for the plugin to request a restricted access token.",
          "type": "object"
        },
        "token_expiration_threshold": {
          "default": 30,
          "description": "Threshold (in minutes) for token TTL before plugin asks for a new token.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "auth-acquire": {
      "description": "Acquire access tokens for the Toolchain service.",
      "properties": {
        "description": {
          "default": null,
          "description": "Token description",
          "type": "string"
        },
        "for_ci": {
          "default": false,
          "description": "Generate a token with impersonation permissions that can be used in CI. Limited to org owners/admins. Implies `--auth-acquire-output=console`.",
          "type": "boolean"
        },
        "headless": {
          "default": false,
          "description": "Don't open a browser when acquiring the access token",
          "type": "boolean"
        },
        "local_port": {
          "default": null,
          "description": "Local web server port",
          "type": "number"
        },
        "output": {
          "default": "file",
          "description": "Output method for the access token. Outputting to the console is useful if the token needs to be provided to CI.",
          "enum": ["file", "console"]
        },
        "remote_execution": {
          "default": false,
          "description": "[Limited Beta] Asks for a token with remote execution permissions. This will only work for Toolchain customers that have this feature enabled.",
          "type": "boolean"
        },
        "test_page": {
          "default": "na",
          "description": "Helper to test success and error pages without triggering the auth flow.",
          "enum": ["na", "success", "error"]
        }
      },
      "type": "object"
    },
    "auth-token-check": {
      "description": "Check if the Toolchain auth token has expired or if it is about to expire",
      "properties": {
        "threshold": {
          "default": 14,
          "description": "Threshold in days to fail the check before the token expiration",
          "type": "number"
        }
      },
      "type": "object"
    },
    "auth-token-info": {
      "description": "Show information about the current auth token used to access the Toolchain service",
      "properties": {
        "json": {
          "default": false,
          "description": "Show JWT claims in JSON format (implies `verbose`).",
          "type": "boolean"
        },
        "verbose": {
          "default": false,
          "description": "Show all JWT claims for the current auth token",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "autoflake": {
      "description": "The Autoflake Python code formatter (https://github.com/myint/autoflake).",
      "properties": {
        "args": {
          "default": ["--remove-all-unused-imports"],
          "description": "Arguments to pass directly to Autoflake, e.g. `--autoflake-args='--remove-all-unused-imports --target-version=py37 --quiet'`.",
          "type": "array"
        },
        "console_script": {
          "default": "autoflake",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "export": {
          "default": true,
          "description": "If true, export a virtual environment with Autoflake when running `./pants export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "type": "boolean"
        },
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/lint/autoflake/autoflake.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=autoflake`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use Autoflake when running `./pants fmt` and `./pants lint`.",
          "type": "boolean"
        },
        "version": {
          "default": "autoflake==1.4",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "black": {
      "description": "The Black Python code formatter (https://black.readthedocs.io/).",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to Black, e.g. `--black-args='--target-version=py37 --quiet'`.",
          "type": "array"
        },
        "config": {
          "default": null,
          "description": "Path to a TOML config file understood by Black (https://github.com/psf/black#configuration-format).\n\nSetting this option will disable `[black].config_discovery`. Use this option if the config is located in a non-standard location."
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include any relevant pyproject.toml config files during runs.\n\nUse `[black].config` instead if your config is in a non-standard location.",
          "type": "boolean"
        },
        "console_script": {
          "default": "black",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "export": {
          "default": true,
          "description": "If true, export a virtual environment with Black when running `./pants export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "type": "boolean"
        },
        "extra_requirements": {
          "default": ["typing-extensions>=3.10.0.0; python_version < \"3.10\""],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/lint/black/black.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=black`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use Black when running `./pants fmt` and `./pants lint`.",
          "type": "boolean"
        },
        "version": {
          "default": "black==22.6.0",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "buildsense": {
      "description": "Configuration for Toolchain's BuildSense reporting.",
      "properties": {
        "ci_env_scrub_terms": {
          "default": ["ACCESS", "TOKEN", "SECRET", "JWT"],
          "description": "patterns for environment variables to exclude from uploaded CI env variables.",
          "type": "array"
        },
        "ci_env_var_pattern": {
          "default": null,
          "description": "CI Environment variables regex pattern.",
          "type": "string"
        },
        "collect_platform_data": {
          "default": false,
          "description": "Should BuildSense collect and upload platform platform information (os version, platform architecture, python version, etc...).",
          "type": "boolean"
        },
        "dry_run": {
          "default": false,
          "description": "Go thru the motions w/o making network calls",
          "type": "boolean"
        },
        "enable": {
          "default": true,
          "description": "Enables the BuildSense reporter plugin.",
          "type": "boolean"
        },
        "local_build_store": {
          "default": true,
          "description": "Store failed uploads and try to upload later.",
          "type": "boolean"
        },
        "local_store_base": {
          "default": ".pants.d/toolchain/buildsense/",
          "description": "Base directory for storing buildsense data locally.",
          "type": "string"
        },
        "log_final_upload_latency": {
          "default": false,
          "description": "Should BuildSense log the time it took to upload data at the end of the run.",
          "type": "boolean"
        },
        "log_upload": {
          "default": true,
          "description": "Upload pants logs to buildsense",
          "type": "boolean"
        },
        "max_batch_size_mb": {
          "default": 20,
          "description": "Maximum batch size to try and upload (uncompressed).",
          "type": "number"
        },
        "show_link": {
          "default": true,
          "description": "Show link to the pants run in BuildSense Web UI.",
          "type": "boolean"
        },
        "timeout": {
          "default": 10,
          "description": "Wait at most this many seconds for network calls to complete.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "changed": {
      "description": "Tell Pants to detect what files and targets have changed from Git.\n\nSee https://www.pantsbuild.org/v2.14/docs/advanced-target-selection.",
      "properties": {
        "dependees": {
          "default": "none",
          "description": "Include direct or transitive dependees of changed targets.",
          "enum": ["none", "direct", "transitive"]
        },
        "diffspec": {
          "default": null,
          "description": "Calculate changes contained within a given Git spec (commit range/SHA/ref).",
          "type": "string"
        },
        "since": {
          "default": null,
          "description": "Calculate changes since this Git spec (commit range/SHA/ref).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "check": {
      "description": "Run type checking or the lightest variant of compilation available for a language.",
      "properties": {
        "only": {
          "default": [],
          "description": "Only run these checkerss and skip all others.\n\nThe checkers names are outputted at the final summary of running this goal, e.g. `mypy` and `javac`. You can also run `check --only=fake` to get a list of all activated checkerss.\n\nYou can repeat this option, e.g. `check --only=mypy --only=javac` or `check --only=['mypy', 'javac']`.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "check-default-tools": {
      "description": "Options for checking that external tool default locations are correctly typed.",
      "properties": {},
      "type": "object"
    },
    "cli": {
      "description": "Options for configuring CLI behavior, such as command line aliases.",
      "properties": {
        "alias": {
          "default": {},
          "description": "Register command line aliases.\n\nExample:\n\n    [cli.alias]\n    green = \"fmt lint check\"\n    all-changed = \"--changed-since=HEAD --changed-dependees=transitive\"\n\nThis would allow you to run `./pants green all-changed`, which is shorthand for `./pants fmt lint check --changed-since=HEAD --changed-dependees=transitive`.\n\nNotice: this option must be placed in a config file (e.g. `pants.toml` or `pantsrc`) to have any effect.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "count-loc": {
      "description": "Count lines of code.",
      "properties": {},
      "type": "object"
    },
    "coursier": {
      "description": "A dependency resolver for the Maven ecosystem. (https://get-coursier.io/)",
      "properties": {
        "known_versions": {
          "default": [
            "v2.1.0-M5-18-gfebf9838c|linux_arm64 |d4ad15ba711228041ad8a46d848c83c8fbc421d7b01c415d8022074dd609760f|19264005",
            "v2.1.0-M5-18-gfebf9838c|linux_x86_64|3e1a1ad1010d5582e9e43c5a26b273b0147baee5ebd27d3ac1ab61964041c90b|19551533",
            "v2.1.0-M5-18-gfebf9838c|macos_arm64 |d13812c5a5ef4c9b3e25cc046d18addd09bacd149f95b20a14e4d2a73e358ecf|18826510",
            "v2.1.0-M5-18-gfebf9838c|macos_x86_64|d13812c5a5ef4c9b3e25cc046d18addd09bacd149f95b20a14e4d2a73e358ecf|18826510",
            "v2.0.16-169-g194ebc55c|linux_arm64 |da38c97d55967505b8454c20a90370c518044829398b9bce8b637d194d79abb3|18114472",
            "v2.0.16-169-g194ebc55c|linux_x86_64|4c61a634c4bd2773b4543fe0fc32210afd343692891121cddb447204b48672e8|18486946",
            "v2.0.16-169-g194ebc55c|macos_arm64 |15bce235d223ef1d022da30b67b4c64e9228d236b876c834b64e029bbe824c6f|17957182",
            "v2.0.16-169-g194ebc55c|macos_x86_64|15bce235d223ef1d022da30b67b4c64e9228d236b876c834b64e029bbe824c6f|17957182"
          ],
          "description": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "type": "array"
        },
        "repos": {
          "default": [
            "https://maven-central.storage-download.googleapis.com/maven2",
            "https://repo1.maven.org/maven2"
          ],
          "description": "Maven style repositories to resolve artifacts from.\n\nCoursier will resolve these repositories in the order in which they are specifed, and re-ordering repositories will cause artifacts to be re-downloaded. This can result in artifacts in lockfiles becoming invalid.",
          "type": "array"
        },
        "url_platform_mapping": {
          "default": {
            "linux_arm64": "aarch64-pc-linux",
            "linux_x86_64": "x86_64-pc-linux",
            "macos_arm64": "x86_64-apple-darwin",
            "macos_x86_64": "x86_64-apple-darwin"
          },
          "description": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "type": "object"
        },
        "url_template": {
          "default": "https://github.com/coursier/coursier/releases/download/{version}/cs-{platform}.gz",
          "description": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.14/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "type": "string"
        },
        "use_unsupported_version": {
          "default": "error",
          "description": "\nWhat action to take in case the requested version of coursier is not supported.\n\nSupported coursier versions: unspecified\n",
          "enum": ["error", "warning"]
        },
        "version": {
          "default": "v2.1.0-M5-18-gfebf9838c",
          "description": "Use this version of coursier.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "coverage-py": {
      "description": "Configuration for Python test coverage measurement.",
      "properties": {
        "config": {
          "default": null,
          "description": "Path to an INI or TOML config file understood by coverage.py (https://coverage.readthedocs.io/en/stable/config.html).\n\nSetting this option will disable `[coverage-py].config_discovery`. Use this option if the config is located in a non-standard location."
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include any relevant config files during runs (`.coveragerc`, `setup.cfg`, `tox.ini`, and `pyproject.toml`).\n\nUse `[coverage-py].config` instead if your config is in a non-standard location.",
          "type": "boolean"
        },
        "console_script": {
          "default": "coverage",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "fail_under": {
          "default": null,
          "description": "Fail if the total combined coverage percentage for all tests is less than this number.\n\nUse this instead of setting fail_under in a coverage.py config file, as the config will apply to each test separately, while you typically want this to apply to the combined coverage for all tests run.\n\nNote that you must generate at least one (non-raw) coverage report for this check to trigger.\n\nNote also that if you specify a non-integral value, you must also set [report] precision properly in the coverage.py config file to make use of the decimal places. See https://coverage.readthedocs.io/en/latest/config.html.",
          "type": "number"
        },
        "filter": {
          "default": [],
          "description": "A list of Python modules or filesystem paths to use in the coverage report, e.g. `['helloworld_test', 'helloworld/util/dirutil'].\n\nBoth modules and directory paths are recursive: any submodules or child paths, respectively, will be included.\n\nIf you leave this off, the coverage report will include every file in the transitive closure of the address/file arguments; for example, `test ::` will include every Python file in your project, whereas `test project/app_test.py` will include `app_test.py` and any of its transitive dependencies.",
          "type": "array"
        },
        "global_report": {
          "default": false,
          "description": "If true, Pants will generate a global coverage report.\n\nThe global report will include all Python source files in the workspace and not just those depended on by the tests that were run.",
          "type": "boolean"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/subsystems/coverage_py.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=coverage-py`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "output_dir": {
          "default": "{distdir}/coverage/python",
          "description": "Path to write the Pytest Coverage report to. Must be relative to the build root.",
          "type": "string"
        },
        "report": {
          "default": ["console"],
          "description": "Which coverage report type(s) to emit.",
          "enum": ["console", "xml", "html", "raw", "json"]
        },
        "version": {
          "default": "coverage[toml]>=5.5,<5.6",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "debug-adapter": {
      "description": "Options used to configure and launch a Debug Adapter server.\n\nSee https://microsoft.github.io/debug-adapter-protocol/ for more information.",
      "properties": {
        "host": {
          "default": "127.0.0.1",
          "description": "The hostname to use when launching the server.",
          "type": "string"
        },
        "port": {
          "default": 5678,
          "description": "The port to use when launching the server.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "debugpy": {
      "description": "An implementation of the Debug Adapter Protocol for Python (https://github.com/microsoft/debugpy).",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to debugpy, e.g. `--debugpy-args='--log-to-stderr'`.",
          "type": "array"
        },
        "console_script": {
          "default": null,
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": "debugpy",
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<3.11"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/subsystems/debugpy.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=debugpy`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "version": {
          "default": "debugpy==1.6.0",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dependees": {
      "description": "List all targets that depend on any of the input files/targets.",
      "properties": {
        "closed": {
          "default": false,
          "description": "Include the input targets in the output, along with the dependees.",
          "type": "boolean"
        },
        "output_file": {
          "default": null,
          "description": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "type": "string"
        },
        "sep": {
          "default": "\\n",
          "description": "String to use to separate lines in line-oriented output.",
          "type": "string"
        },
        "transitive": {
          "default": false,
          "description": "List all transitive dependees. If unspecified, list direct dependees only.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "dependencies": {
      "description": "List the dependencies of the input files/targets.",
      "properties": {
        "closed": {
          "default": false,
          "description": "Include the input targets in the output, along with the dependencies.",
          "type": "boolean"
        },
        "output_file": {
          "default": null,
          "description": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "type": "string"
        },
        "sep": {
          "default": "\\n",
          "description": "String to use to separate lines in line-oriented output.",
          "type": "string"
        },
        "transitive": {
          "default": false,
          "description": "List all transitive dependencies. If unspecified, list direct dependencies only.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "docformatter": {
      "description": "The Python docformatter tool (https://github.com/myint/docformatter).",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to docformatter, e.g. `--docformatter-args='--wrap-summaries=100 --pre-summary-newline'`.",
          "type": "array"
        },
        "console_script": {
          "default": "docformatter",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "export": {
          "default": true,
          "description": "If true, export a virtual environment with docformatter when running `./pants export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "type": "boolean"
        },
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/lint/docformatter/docformatter.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=docformatter`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use docformatter when running `./pants fmt` and `./pants lint`.",
          "type": "boolean"
        },
        "version": {
          "default": "docformatter>=1.4,<1.5",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "docker": {
      "description": "Options for interacting with Docker.",
      "properties": {
        "build_args": {
          "default": [],
          "description": "Global build arguments (for Docker `--build-arg` options) to use for all `docker build` invocations.\n\nEntries are either strings in the form `ARG_NAME=value` to set an explicit value; or just `ARG_NAME` to copy the value from Pants's own environment.\n\nExample:\n\n    [docker]\n    build_args = [\"VAR1=value\", \"VAR2\"]\n\nUse the `extra_build_args` field on a `docker_image` target for additional image specific build arguments.",
          "type": "array"
        },
        "build_target_stage": {
          "default": null,
          "description": "Global default value for `target_stage` on `docker_image` targets, overriding the field value on the targets, if there is a matching stage in the `Dockerfile`.\n\nThis is useful to provide from the command line, to specify the target stage to build for at execution time.",
          "type": "string"
        },
        "build_verbose": {
          "default": false,
          "description": "Whether to log the Docker output to the console. If false, only the image ID is logged.",
          "type": "boolean"
        },
        "default_context_root": {
          "default": "",
          "description": "Provide a default Docker build context root path for `docker_image` targets that does not specify their own `context_root` field.\n\nThe context root is relative to the build root by default, but may be prefixed with `./` to be relative to the directory of the BUILD file of the `docker_image`.\n\nExamples:\n\n    --default-context-root=src/docker\n    --default-context-root=./relative_to_the_build_file"
        },
        "default_repository": {
          "default": "{name}",
          "description": "Configure the default repository name used in the Docker image tag.\n\nThe value is formatted and may reference these variables (in addition to the normal placeheolders derived from the Dockerfile and build args etc):\n\n  * name\n  * directory\n  * parent_directory\n  * target_repository\n\nExample: `--default-repository=\"{directory}/{name}\"`.\n\nThe `name` variable is the `docker_image`'s target name, `directory` and `parent_directory` are the name of the directory in which the BUILD file is for the target, and its parent directory respectively.\n\nUse the `repository` field to set this value directly on a `docker_image` target.\n\nRegistries may override the repository value for a specific registry.\n\nAny registries or tags are added to the image name as required, and should not be part of the repository name.",
          "type": "string"
        },
        "env_vars": {
          "default": [],
          "description": "Environment variables to set for `docker` invocations.\n\nEntries are either strings in the form `ENV_VAR=value` to set an explicit value; or just `ENV_VAR` to copy the value from Pants's own environment.",
          "type": "array"
        },
        "executable_search_paths": {
          "default": ["<PATH>"],
          "description": "The PATH value that will be used to find the Docker client and any tools required.\n\nThe special string `\"<PATH>\"` will expand to the contents of the PATH env var.",
          "type": "array"
        },
        "registries": {
          "default": {},
          "description": "Configure Docker registries. The schema for a registry entry is as follows:\n\n    {\n        \"registry-alias\": {\n            \"address\": \"registry-domain:port\",\n            \"default\": bool,\n            \"extra_image_tags\": [],\n            \"skip_push\": bool,\n            \"repository\": str,\n        },\n        ...\n    }\n\nIf no registries are provided in a `docker_image` target, then all default addresses will be used, if any.\n\nThe `docker_image.registries` may be provided with a list of registry addresses and registry aliases prefixed with `@` to be used instead of the defaults.\n\nA configured registry is marked as default either by setting `default = true` or with an alias of `\"default\"`.\n\nA `docker_image` may be pushed to a subset of registries using the per registry `skip_push` option rather then the all or nothing toggle of the field option `skip_push` on the `docker_image` target.\n\nAny image tags that should only be added for specific registries may be provided as the `extra_image_tags` option. The tags may use value formatting the same as for the `image_tags` field of the `docker_image` target.\n\nWhen a registry provides a `repository` value, it will be used instead of the `docker_image.repository` or the default repository. Using the placeholders `{target_repository}` or `{default_repository}` those overridden values may be incorporated into the registry specific repository value.",
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ]
        },
        "run_args": {
          "default": [],
          "description": "Additional arguments to use for `docker run` invocations.\n\nExample:\n\n    $ ./pants run --docker-run-args=\"-p 127.0.0.1:80:8080/tcp --name demo\" src/example:image -- [image entrypoint args]\n\nTo provide the top-level options to the `docker` client, use `[docker].env_vars` to configure the [Environment variables](https://docs.docker.com/engine/reference/commandline/cli/#environment-variables) as appropriate.\n\nThe arguments for the image entrypoint may be passed on the command line after a double dash (`--`), or using the `--run-args` option.\n\nDefaults to `--interactive --tty` when stdout is connected to a terminal.",
          "type": "array"
        },
        "tailor": {
          "default": true,
          "description": "If true, add `docker_image` targets with the `tailor` goal.",
          "type": "boolean"
        },
        "tools": {
          "default": [],
          "description": "List any additional executable tools required for Docker to work. The paths to these tools will be included in the PATH used in the execution sandbox, so that they may be used by the Docker client.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "dockerfile-parser": {
      "description": "Used to parse Dockerfile build specs to infer their dependencies.",
      "properties": {
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/docker/subsystems/dockerfile.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=dockerfile-parser`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "version": {
          "default": "dockerfile==3.2.0",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "experimental-bsp": {
      "description": "Setup repository for Build Server Protocol (https://build-server-protocol.github.io/).",
      "properties": {
        "groups_config_files": {
          "default": [],
          "description": "A list of config files that define groups of Pants targets to expose to IDEs via Build Server Protocol.\n\nPants generally uses fine-grained targets to define the components of a build (in many cases on a file-by-file basis). Many IDEs, however, favor coarse-grained targets that contain large numbers of source files. To accommodate this distinction, the Pants BSP server will compute a set of BSP build targets to use from the groups specified in the config files set for this option. Each group will become one or more BSP build targets.\n\nEach config file is a TOML file with a `groups` dictionary with the following format for an entry:\n\n    # The dictionary key is used to identify the group. It must be unique.\n    [groups.ID1]:\n    # One or more Pants address specs defining what targets to include in the group.\n    addresses = [\n      \"src/jvm::\",\n      \"tests/jvm::\",\n    ]\n    # Filter targets to a specific resolve. Targets in a group must be from a single resolve.\n    # Format of filter is `TYPE:RESOLVE_NAME`. The only supported TYPE is `jvm`. RESOLVE_NAME must be\n    # a valid resolve name.\n    resolve = \"jvm:jvm-default\"\n    display_name = \"Display Name\" # (Optional) Name shown to the user in the IDE.\n    base_directory = \"path/from/build/root\" # (Optional) Hint to the IDE for where the build target should \"live.\"\n\nPants will merge the contents of the config files together. If the same ID is used for a group definition, in multiple config files, the definition in the latter config file will take effect.",
          "type": "array"
        },
        "runner_env_vars": {
          "default": ["PATH"],
          "description": "Environment variables to set in the BSP runner script when setting up BSP in a repository. Entries are either strings in the form `ENV_VAR=value` to set an explicit value; or just `ENV_VAR` to copy the value from Pants' own environment when the experimental-bsp goal was run.\n\nThis option only takes effect when the BSP runner script is written. If the option changes, you must run `./pants experimental-bsp` again to write a new copy of the BSP runner script.\n\nNote: The environment variables passed to the Pants BSP server will be those set for your IDE and not your shell. For example, on macOS, the IDE is generally launched by `launchd` after clicking on a Dock icon, and not from the shell. Thus, any environment variables set for your shell will likely not be seen by the Pants BSP server. At the very least, on macOS consider writing an explicit PATH into the BSP runner script via this option.",
          "type": "array"
        },
        "server": {
          "default": false,
          "description": "Run the Build Server Protocol server. Pants will receive BSP RPC requests via the console. This should only ever be invoked via the IDE.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "experimental-deploy": {
      "description": "Perform a deployment process.",
      "properties": {},
      "type": "object"
    },
    "experimental-explorer": {
      "description": "Run the Pants Explorer Web UI server.",
      "properties": {
        "address": {
          "default": "localhost",
          "description": "Server address to bind to.",
          "type": "string"
        },
        "port": {
          "default": 8000,
          "description": "Server port to bind to.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "export": {
      "description": "Export Pants data for use in other tools, such as IDEs.",
      "properties": {},
      "type": "object"
    },
    "export-codegen": {
      "description": "Write generated files to `dist/codegen` for use outside of Pants.",
      "properties": {},
      "type": "object"
    },
    "filedeps": {
      "description": "List all source and BUILD files a target depends on.",
      "properties": {
        "absolute": {
          "default": false,
          "description": "If True, output with absolute path. If unspecified, output with path relative to the build root.",
          "type": "boolean"
        },
        "globs": {
          "default": false,
          "description": "Instead of outputting filenames, output the original globs used in the BUILD file. This will not include exclude globs (i.e. globs that start with `!`).",
          "type": "boolean"
        },
        "output_file": {
          "default": null,
          "description": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "type": "string"
        },
        "sep": {
          "default": "\\n",
          "description": "String to use to separate lines in line-oriented output.",
          "type": "string"
        },
        "transitive": {
          "default": false,
          "description": "If True, list files from all dependencies, including transitive dependencies. If unspecified, only list files from the target.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "filter": {
      "description": "Filter the input targets based on various criteria.\n\nMost of the filtering options below are comma-separated lists of filtering criteria, with an implied logical OR between them, so that a target passes the filter if it matches any of the criteria in the list. A '-' prefix inverts the sense of the entire comma-separated list, so that a target passes the filter only if it matches none of the criteria in the list.\n\nEach of the filtering options may be specified multiple times, with an implied logical AND between them.",
      "properties": {
        "address_regex": {
          "default": [],
          "description": "Filter on target addresses matching these regexes.",
          "type": "array"
        },
        "granularity": {
          "default": "all",
          "description": "Filter to rendering only targets declared in BUILD files, only file-level targets, or all targets.",
          "enum": ["all", "file", "BUILD"]
        },
        "output_file": {
          "default": null,
          "description": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "type": "string"
        },
        "sep": {
          "default": "\\n",
          "description": "String to use to separate lines in line-oriented output.",
          "type": "string"
        },
        "tag_regex": {
          "default": [],
          "description": "Filter on targets with tags matching these regexes.",
          "type": "array"
        },
        "target_type": {
          "default": [],
          "description": "Filter on these target types, e.g. `resources` or `python_sources`.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "flake8": {
      "description": "The Flake8 Python linter (https://flake8.pycqa.org/).",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to Flake8, e.g. `--flake8-args='--ignore E123,W456 --enable-extensions H111'`.",
          "type": "array"
        },
        "config": {
          "default": null,
          "description": "Path to an INI config file understood by Flake8 (https://flake8.pycqa.org/en/latest/user/configuration.html).\n\nSetting this option will disable `[flake8].config_discovery`. Use this option if the config is located in a non-standard location."
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include any relevant config files during runs (`.flake8`, `flake8`, `setup.cfg`, and `tox.ini`).\n\nUse `[flake8].config` instead if your config is in a non-standard location.",
          "type": "boolean"
        },
        "console_script": {
          "default": "flake8",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "export": {
          "default": true,
          "description": "If true, export a virtual environment with Flake8 when running `./pants export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "type": "boolean"
        },
        "extra_files": {
          "default": [],
          "description": "Paths to extra files to include in the sandbox. This can be useful for Flake8 plugins,\n            like including config files for the `flake8-bandit` plugin.",
          "type": "array"
        },
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/lint/flake8/flake8.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=flake8`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use Flake8 when running `./pants lint`.",
          "type": "boolean"
        },
        "source_plugins": {
          "default": [],
          "description": "An optional list of `python_sources` target addresses to load first-party plugins.\n\nYou must set the plugin's parent directory as a source root. For example, if your plugin is at `build-support/flake8/custom_plugin.py`, add 'build-support/flake8' to `[source].root_patterns` in `pants.toml`. This is necessary for Pants to know how to tell Flake8 to discover your plugin. See https://www.pantsbuild.org/v2.14/docs/source-roots\n\nYou must also set `[flake8:local-plugins]` in your Flake8 config file.\n\nFor example:\n\n    ```\n    [flake8:local-plugins]\n        extension =\n            CUSTOMCODE = custom_plugin:MyChecker\n    ```\n\nWhile your plugin's code can depend on other first-party code and third-party requirements, all first-party dependencies of the plugin must live in the same directory or a subdirectory.\n\nTo instead load third-party plugins, set the option `[flake8].extra_requirements`.\n\nTip: it's often helpful to define a dedicated 'resolve' via `[python].resolves` for your Flake8 plugins such as 'flake8-plugins' so that the third-party requirements used by your plugin, like `flake8`, do not mix with the rest of your project. Read that option's help message for more info on resolves.",
          "type": "array"
        },
        "version": {
          "default": "flake8>=3.9.2,<4.0",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "fmt": {
      "description": "Autoformat source code.",
      "properties": {
        "batch_size": {
          "default": 128,
          "description": "The target number of files to be included in each formatter batch.\n\nFormatter processes are batched for a few reasons:\n\n1. to avoid OS argument length limits (in processes which don't support argument files)\n2. to support more stable cache keys than would be possible if all files were operated on in a single batch.\n3. to allow for parallelism in formatter processes which don't have internal parallelism, or -- if they do support internal parallelism -- to improve scheduling behavior when multiple processes are competing for cores and so internal parallelism cannot be used perfectly.\n\nIn order to improve cache hit rates (see 2.), batches are created at stable boundaries, and so this value is only a \"target\" batch size (rather than an exact value).",
          "type": "number"
        },
        "only": {
          "default": [],
          "description": "Only run these formatters and skip all others.\n\nThe formatter names are outputted at the final summary of running this goal, e.g. `isort` and `shfmt`. You can also run `fmt --only=fake` to get a list of all activated formatters.\n\nYou can repeat this option, e.g. `fmt --only=isort --only=shfmt` or `fmt --only=['isort', 'shfmt']`.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "generate-lockfiles": {
      "description": "Generate lockfiles for Python third-party dependencies.",
      "properties": {
        "custom_command": {
          "default": null,
          "description": "If set, lockfile headers will say to run this command to regenerate the lockfile, rather than running `./pants generate-lockfiles --resolve=<name>` like normal.",
          "type": "string"
        },
        "resolve": {
          "default": [],
          "description": "Only generate lockfiles for the specified resolve(s).\n\nResolves are the logical names for the different lockfiles used in your project. For your own code's dependencies, these come from the option `[python].resolves`. For tool lockfiles, resolve names are the options scope for that tool such as `black`, `pytest`, and `mypy-protobuf`.\n\nFor example, you can run `./pants generate-lockfiles --resolve=black --resolve=pytest --resolve=data-science` to only generate lockfiles for those two tools and your resolve named `data-science`.\n\nIf you specify an invalid resolve name, like 'fake', Pants will output all possible values.\n\nIf not specified, Pants will generate lockfiles for all resolves.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "go-test": {
      "description": "Options for Go tests.",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to Go test binary, e.g. `--go-test-args='-run TestFoo -v'`.\n\nKnown Go test options will be transformed into the form expected by the test binary, e.g. `-v` becomes `-test.v`. Run `go help testflag` from the Go SDK to learn more about the options supported by Go test binaries.",
          "type": "array"
        },
        "cover_mode": {
          "default": "set",
          "description": "Coverage mode to use when running Go tests with coverage analysis enabled via --test-use-coverage. Valid values are `set`, `count`, and `atomic`:\n\n* `set`: bool: does this statement run?\n\n* `count`: int: how many times does this statement run?\n\n* `atomic`: int: count, but correct in multithreaded tests; significantly more expensive.",
          "enum": ["set", "count", "atomic"]
        },
        "coverage_output_dir": {
          "default": "{distdir}/coverage/go/{import_path_escaped}",
          "description": "Path to write the Go coverage reports to. Must be relative to the build root. `{distdir}` is replaced with the Pants `distdir`, and `{import_path_escaped}` is replaced with the applicable package's import path but with slashes converted to underscores.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "gofmt": {
      "description": "Gofmt-specific options.",
      "properties": {
        "skip": {
          "default": false,
          "description": "If true, don't use gofmt when running `./pants fmt` and `./pants lint`.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "golang": {
      "description": "Options for Golang support.",
      "properties": {
        "asdf_bin_relpath": {
          "default": "bin",
          "description": "The path relative to an ASDF install directory to use to find the `bin` directory within an installed Go distribution. The default value for this option works for the `go-sdk` ASDF plugin. Other ASDF plugins that install Go may have a different relative path to use.",
          "type": "string"
        },
        "asdf_tool_name": {
          "default": "go-sdk",
          "description": "The ASDF tool name to use when searching for installed Go distributions using the ASDF tool manager (https://asdf-vm.com/). The default value for this option is for the `go-sdk` ASDF plugin (https://github.com/yacchi/asdf-go-sdk.git). There are other plugins. If you wish to use one of them, then set this option to the ASDF tool name under which that other plugin was installed into ASDF.",
          "type": "string"
        },
        "go_search_paths": {
          "default": ["<PATH>"],
          "description": "A list of paths to search for Go.\n\nSpecify absolute paths to directories with the `go` binary, e.g. `/usr/bin`. Earlier entries will be searched first.\n\nThe following special strings are supported:\n\n  * `<PATH>`, the contents of the PATH environment variable\n  * `<ASDF>`, all Go versions currently configured by ASDF `(asdf shell, ${HOME}/.tool-versions)`, with a fallback to all installed versions\n  * `<ASDF_LOCAL>`, the ASDF interpreter with the version in BUILD_ROOT/.tool-versions",
          "type": "array"
        },
        "minimum_expected_version": {
          "default": "1.17",
          "description": "The minimum Go version the distribution discovered by Pants must support.\n\nFor example, if you set `'1.17'`, then Pants will look for a Go binary that is 1.17+, e.g. 1.17 or 1.18.\n\nYou should still set the Go version for each module in your `go.mod` with the `go` directive.\n\nDo not include the patch version.",
          "type": "string"
        },
        "subprocess_env_vars": {
          "default": ["LANG", "LC_CTYPE", "LC_ALL", "PATH"],
          "description": "Environment variables to set when invoking the `go` tool. Entries are either strings in the form `ENV_VAR=value` to set an explicit value; or just `ENV_VAR` to copy the value from Pants's own environment.",
          "type": "array"
        },
        "tailor_binary_targets": {
          "default": true,
          "description": "If true, add a `go_binary` target with the `tailor` goal in every directory with a `.go` file with `package main`.",
          "type": "boolean"
        },
        "tailor_go_mod_targets": {
          "default": true,
          "description": "If true, add a `go_mod` target with the `tailor` goal wherever there is a `go.mod` file.",
          "type": "boolean"
        },
        "tailor_package_targets": {
          "default": true,
          "description": "If true, add a `go_package` target with the `tailor` goal in every directory with a `.go` file.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "google-java-format": {
      "description": "Google Java Format (https://github.com/google/google-java-format)",
      "properties": {
        "aosp": {
          "default": false,
          "description": "Use AOSP style instead of Google Style (4-space indentation). (\"AOSP\" is the Android Open Source Project.)",
          "type": "boolean"
        },
        "artifacts": {
          "default": [
            "com.google.googlejavaformat:google-java-format:{version}"
          ],
          "description": "Artifact requirements for this tool using specified as either the address of a `jvm_artifact` target or, alternatively, as a colon-separated Maven coordinates (e.g., group:name:version). For Maven coordinates, the string `{version}` version will be substituted with the value of the `[google-java-format].version` option.",
          "type": "array"
        },
        "jvm_options": {
          "default": [],
          "description": "List of JVM options to pass to `google-java-format` JVM processes.\n\nOptions set here will be added to those set in `[jvm].global_options`. Please check the documentation for the `jvm` subsystem to see what values are accepted here.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` option. See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/java/lint/google_java_format/google_java_format.default.lockfile.txt for the default lockfile contents.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants jvm-generate-lockfiles --resolve=google-java-format`.",
          "type": "string"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use Google Java Format when running `./pants fmt` and `./pants lint`.",
          "type": "boolean"
        },
        "version": {
          "default": "1.13.0",
          "description": "Version string for the tool. This is available for substitution in the `[google-java-format].artifacts` option by including the string `{version}`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "graphql": {
      "description": "Options for the explorer GraphQL API.",
      "properties": {
        "open_graphiql": {
          "default": false,
          "description": "Open a new web browser tab with GraphiQL.\n\nGraphiQL is an in-browser tool for writing, validating, and testing GraphQL queries.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "hadolint": {
      "description": "A linter for Dockerfiles.",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to Hadolint, e.g. `--hadolint-args='--format json'`.",
          "type": "array"
        },
        "config": {
          "default": null,
          "description": "Path to an YAML config file understood by Hadolint (https://github.com/hadolint/hadolint#configure).\n\nSetting this option will disable `[hadolint].config_discovery`. Use this option if the config is located in a non-standard location."
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include all relevant config files during runs (`.hadolint.yaml` and `.hadolint.yml`).\n\nUse `[hadolint].config` instead if your config is in a non-standard location.",
          "type": "boolean"
        },
        "known_versions": {
          "default": [
            "v2.10.0|macos_x86_64|59f0523069a857ae918b8ac0774230013f7bcc00c1ea28119c2311353120867a|2514960",
            "v2.10.0|macos_arm64 |59f0523069a857ae918b8ac0774230013f7bcc00c1ea28119c2311353120867a|2514960",
            "v2.10.0|linux_x86_64|8ee6ff537341681f9e91bae2d5da451b15c575691e33980893732d866d3cefc4|2301804",
            "v2.10.0|linux_arm64 |b53d5ab10707a585c9e72375d51b7357522300b5329cfa3f91e482687176e128|27954520"
          ],
          "description": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "type": "array"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use Hadolint when running `./pants lint`.",
          "type": "boolean"
        },
        "url_platform_mapping": {
          "default": {
            "linux_arm64": "Linux-arm64",
            "linux_x86_64": "Linux-x86_64",
            "macos_arm64": "Darwin-x86_64",
            "macos_x86_64": "Darwin-x86_64"
          },
          "description": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "type": "object"
        },
        "url_template": {
          "default": "https://github.com/hadolint/hadolint/releases/download/{version}/hadolint-{platform}",
          "description": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.14/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "type": "string"
        },
        "use_unsupported_version": {
          "default": "error",
          "description": "\nWhat action to take in case the requested version of Hadolint is not supported.\n\nSupported Hadolint versions: unspecified\n",
          "enum": ["error", "warning"]
        },
        "version": {
          "default": "v2.10.0",
          "description": "Use this version of Hadolint.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "help": {
      "description": "Display usage message.",
      "properties": {},
      "type": "object"
    },
    "help-advanced": {
      "description": "Help for advanced options.",
      "properties": {},
      "type": "object"
    },
    "help-all": {
      "description": "Print a JSON object containing all help info.",
      "properties": {},
      "type": "object"
    },
    "internal-generate-test-lockfile-fixtures": {
      "description": "[Internal] Generate test lockfile fixtures for Pants tests.",
      "properties": {},
      "type": "object"
    },
    "ipython": {
      "description": "The IPython enhanced REPL (https://ipython.org/).",
      "properties": {
        "console_script": {
          "default": "ipython",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "ignore_cwd": {
          "default": true,
          "description": "Whether to tell IPython not to put the CWD on the import path.\n\nNormally you want this to be True, so that imports come from the hermetic environment Pants creates.\n\nHowever IPython<7.13.0 doesn't support this option, so if you're using an earlier version (e.g., because you have Python 2.7 code) then you will need to set this to False, and you may have issues with imports from your CWD shading the hermetic environment.",
          "type": "boolean"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/subsystems/ipython.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=ipython`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "version": {
          "default": "ipython>=7.34,<8",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "isort": {
      "description": "The Python import sorter tool (https://pycqa.github.io/isort/).",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to isort, e.g. `--isort-args='--case-sensitive --trailing-comma'`.",
          "type": "array"
        },
        "config": {
          "default": [],
          "description": "Path to config file understood by isort (https://pycqa.github.io/isort/docs/configuration/config_files/).\n\nSetting this option will disable `[isort].config_discovery`. Use this option if the config is located in a non-standard location.\n\nIf using isort 5+ and you specify only 1 config file, Pants will configure isort's argv to point to your config file.",
          "type": "array"
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include any relevant config files during runs (`.isort.cfg`, `pyproject.toml`, `setup.cfg`, `tox.ini` and `.editorconfig`).\n\nUse `[isort].config` instead if your config is in a non-standard location.",
          "type": "boolean"
        },
        "console_script": {
          "default": "isort",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "export": {
          "default": true,
          "description": "If true, export a virtual environment with isort when running `./pants export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "type": "boolean"
        },
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/lint/isort/isort.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=isort`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use isort when running `./pants fmt` and `./pants lint`.",
          "type": "boolean"
        },
        "version": {
          "default": "isort[pyproject,colors]>=5.9.3,<6.0",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "java-dump-source-analysis": {
      "description": "Dump source analysis for java_source[s] targets.",
      "properties": {},
      "type": "object"
    },
    "java-infer": {
      "description": "Options controlling which dependencies will be inferred for Java targets.",
      "properties": {
        "consumed_types": {
          "default": true,
          "description": "Infer a target's dependencies by parsing consumed types from sources.",
          "type": "boolean"
        },
        "imports": {
          "default": true,
          "description": "Infer a target's dependencies by parsing import statements from sources.",
          "type": "boolean"
        },
        "third_party_import_mapping": {
          "default": {},
          "description": "A dictionary mapping a Java package path to a JVM artifact coordinate (GROUP:ARTIFACT) without the version.\n\nSee `jvm_artifact` for more information on the mapping syntax.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "javac": {
      "description": "The javac Java source compiler.",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to javac, e.g. `--javac-args='-g -deprecation'`.",
          "type": "array"
        },
        "tailor_source_targets": {
          "default": true,
          "description": "If true, add `java_sources` and `java_tests` targets with the `tailor` goal.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "junit": {
      "description": "The JUnit test framework (https://junit.org)",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to JUnit, e.g. `--junit-args='--disable-ansi-colors'`.",
          "type": "array"
        },
        "artifacts": {
          "default": [
            "org.junit.platform:junit-platform-console:1.7.2",
            "org.junit.jupiter:junit-jupiter-engine:{version}",
            "org.junit.vintage:junit-vintage-engine:{version}"
          ],
          "description": "Artifact requirements for this tool using specified as either the address of a `jvm_artifact` target or, alternatively, as a colon-separated Maven coordinates (e.g., group:name:version). For Maven coordinates, the string `{version}` version will be substituted with the value of the `[junit].version` option.",
          "type": "array"
        },
        "jvm_options": {
          "default": [],
          "description": "List of JVM options to pass to `junit` JVM processes.\n\nOptions set here will be added to those set in `[jvm].global_options`. Please check the documentation for the `jvm` subsystem to see what values are accepted here.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` option. See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/jvm/test/junit.default.lockfile.txt for the default lockfile contents.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants jvm-generate-lockfiles --resolve=junit`.",
          "type": "string"
        },
        "version": {
          "default": "5.7.2",
          "description": "Version string for the tool. This is available for substitution in the `[junit].artifacts` option by including the string `{version}`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "jvm": {
      "description": "Options for general JVM functionality.\n\nJDK strings will be passed directly to Coursier's `--jvm` parameter. Run `cs java --available` to see a list of available JVM versions on your platform.\n\nIf the string 'system' is passed, Coursier's `--system-jvm` option will be used instead, but note that this can lead to inconsistent behavior since the JVM version will be whatever happens to be found first on the system's PATH.",
      "properties": {
        "debug_args": {
          "default": [],
          "description": "Extra JVM arguments to use when running tests in debug mode.\n\nFor example, if you want to attach a remote debugger, use something like ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']",
          "type": "array"
        },
        "default_resolve": {
          "default": "jvm-default",
          "description": "The default value used for the `resolve` and `compatible_resolves` fields.\n\nThe name must be defined as a resolve in `[jvm].resolves`.",
          "type": "string"
        },
        "global_options": {
          "default": [],
          "description": "List of JVM options to pass to all JVM processes.\n\nOptions set here will be used by any JVM processes required by Pants, with the exception of heap memory settings like `-Xmx`, which need to be set using `[GLOBAL].process_total_child_memory_usage` and `[GLOBAL].process_per_child_memory_usage`.",
          "type": "array"
        },
        "jdk": {
          "default": "temurin:1.11",
          "description": "The JDK to use.\n\nThis string will be passed directly to Coursier's `--jvm` parameter. Run `cs java --available` to see a list of available JVM versions on your platform.\n\nIf the string 'system' is passed, Coursier's `--system-jvm` option will be used instead, but note that this can lead to inconsistent behavior since the JVM version will be whatever happens to be found first on the system's PATH.",
          "type": "string"
        },
        "nailgun_remote_cache_speculation_delay": {
          "default": 1000,
          "description": "The time in milliseconds to delay speculation of nailgun processes while reading from the remote cache.\n\nWhen speculating, a remote cache hit will cancel the local copy of a process. But because nailgun does not natively support cancellation, that requires killing a nailgun server, which will mean that future processes take longer to warm up.\n\nThis setting allows for trading off waiting for potentially slow cache entries against potentially having to warm up a new nailgun server.",
          "type": "number"
        },
        "reproducible_jars": {
          "default": false,
          "description": "When enabled, JAR files produced by JVM tools will have timestamps stripped.\n\nBecause some compilers do not support this step as a native operation, it can have a performance cost, and is not enabled by default.",
          "type": "boolean"
        },
        "resolves": {
          "default": {
            "jvm-default": "3rdparty/jvm/default.lock"
          },
          "description": "A dictionary mapping resolve names to the path of their lockfile.",
          "type": "object"
        },
        "tool_jdk": {
          "default": "temurin:1.11",
          "description": "The JDK to use when building and running Pants' internal JVM support code and other non-compiler tools. See `jvm` help for supported values.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "jvm-symbol-map": {
      "description": "Dump the JVM dependency inference symbol mapping.",
      "properties": {},
      "type": "object"
    },
    "lint": {
      "description": "Run all linters and/or formatters in check mode.",
      "properties": {
        "batch_size": {
          "default": 128,
          "description": "The target number of files to be included in each linter batch.\n\nLinter processes are batched for a few reasons:\n\n1. to avoid OS argument length limits (in processes which don't support argument files)\n2. to support more stable cache keys than would be possible if all files were operated on in a single batch.\n3. to allow for parallelism in linter processes which don't have internal parallelism, or -- if they do support internal parallelism -- to improve scheduling behavior when multiple processes are competing for cores and so internal parallelism cannot be used perfectly.\n\nIn order to improve cache hit rates (see 2.), batches are created at stable boundaries, and so this value is only a \"target\" batch size (rather than an exact value).",
          "type": "number"
        },
        "only": {
          "default": [],
          "description": "Only run these linters and skip all others.\n\nThe linter names are outputted at the final summary of running this goal, e.g. `flake8` and `shellcheck`. You can also run `lint --only=fake` to get a list of all activated linters.\n\nYou can repeat this option, e.g. `lint --only=flake8 --only=shellcheck` or `lint --only=['flake8', 'shellcheck']`.",
          "type": "array"
        },
        "skip_formatters": {
          "default": false,
          "description": "If true, skip running all formatters in check-only mode.\n\nFYI: when running `./pants fmt lint ::`, there should be little performance benefit to using this flag. Pants will reuse the results from `fmt` when running `lint`.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "list": {
      "description": "Lists all targets matching the file or target arguments.",
      "properties": {
        "documented": {
          "default": false,
          "description": "Print only targets that are documented with a description.",
          "type": "boolean"
        },
        "output_file": {
          "default": null,
          "description": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "type": "string"
        },
        "sep": {
          "default": "\\n",
          "description": "String to use to separate lines in line-oriented output.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "mypy": {
      "description": "The MyPy Python type checker (http://mypy-lang.org/).",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to MyPy, e.g. `--mypy-args='--python-version 3.7 --disallow-any-expr'`.",
          "type": "array"
        },
        "config": {
          "default": null,
          "description": "Path to a config file understood by MyPy (https://mypy.readthedocs.io/en/stable/config_file.html).\n\nSetting this option will disable `[mypy].config_discovery`. Use this option if the config is located in a non-standard location."
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include any relevant config files during runs (`mypy.ini`, `.mypy.ini`, and `setup.cfg`).\n\nUse `[mypy].config` instead if your config is in a non-standard location.",
          "type": "boolean"
        },
        "console_script": {
          "default": "mypy",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "export": {
          "default": true,
          "description": "If true, export a virtual environment with MyPy when running `./pants export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "type": "boolean"
        },
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "extra_type_stubs": {
          "default": [],
          "description": "Extra type stub requirements to install when running MyPy.\n\nNormally, type stubs can be installed as typical requirements, such as putting them in `requirements.txt` or using a `python_requirement` target. Alternatively, you can use this option so that the dependencies are solely used when running MyPy and are not runtime dependencies.\n\nExpects a list of pip-style requirement strings, like `['types-requests==2.25.9']`.\n\nWe recommend also enabling `[mypy].extra_type_stubs_lockfile` for a more reproducible build and less supply-chain security risk.",
          "type": "array"
        },
        "extra_type_stubs_lockfile": {
          "default": "<none>",
          "description": "Path to a lockfile for the option `[mypy].extra_type_stubs`.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this if you use `[mypy].extra_type_stubs`, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=mypy-extra-type-stubs`.",
          "type": "string"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/typecheck/mypy/mypy.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=mypy`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use MyPy when running `./pants check`.",
          "type": "boolean"
        },
        "source_plugins": {
          "default": [],
          "description": "An optional list of `python_sources` target addresses to load first-party plugins.\n\nYou must also set `plugins = path.to.module` in your `mypy.ini`, and set the `[mypy].config` option in your `pants.toml`.\n\nTo instead load third-party plugins, set the option `[mypy].extra_requirements` and set the `plugins` option in `mypy.ini`. Tip: it's often helpful to define a dedicated 'resolve' via `[python].resolves` for your MyPy plugins such as 'mypy-plugins' so that the third-party requirements used by your plugin, like `mypy`, do not mix with the rest of your project. Read that option's help message for more info on resolves.",
          "type": "array"
        },
        "version": {
          "default": "mypy==0.961",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "package": {
      "description": "Create a distributable package.",
      "properties": {},
      "type": "object"
    },
    "pants-releases": {
      "description": "Options for Pants's release process.",
      "properties": {
        "release_notes": {
          "default": {},
          "description": "A dict from branch name to release notes rst-file location.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "paths": {
      "description": "List the paths between two addresses.",
      "properties": {
        "from": {
          "default": null,
          "description": "The path starting address",
          "type": "string"
        },
        "output_file": {
          "default": null,
          "description": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "type": "string"
        },
        "to": {
          "default": null,
          "description": "The path end address",
          "type": "string"
        }
      },
      "type": "object"
    },
    "peek": {
      "description": "Display BUILD target info",
      "properties": {
        "exclude_defaults": {
          "default": false,
          "description": "Whether to leave off values that match the target-defined default values.",
          "type": "boolean"
        },
        "output_file": {
          "default": null,
          "description": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "pex": {
      "description": "How Pants uses Pex to run Python subprocesses.",
      "properties": {
        "executable_search_paths": {
          "default": ["<PATH>"],
          "description": "The PATH value that will be used by the PEX subprocess and any subprocesses it spawns.\n\nThe special string `\"<PATH>\"` will expand to the contents of the PATH env var.",
          "type": "array"
        },
        "venv_use_symlinks": {
          "default": false,
          "description": "When possible, use venvs whose site-packages directories are populated with symlinks.\n\nEnabling this can save space in the `--named-caches-dir` directory and lead to slightly faster execution times for Pants Python goals. Some distributions do not work with symlinked venvs though, so you may not be able to enable this optimization as a result.",
          "type": "boolean"
        },
        "verbosity": {
          "default": 0,
          "description": "Set the verbosity level of PEX logging, from 0 (no logging) up to 9 (max logging).",
          "type": "number"
        }
      },
      "type": "object"
    },
    "pex-binary-defaults": {
      "description": "Default settings for creating PEX executables.",
      "properties": {
        "emit_warnings": {
          "default": true,
          "description": "Whether built PEX binaries should emit PEX warnings at runtime by default.\n\nCan be overridden by specifying the `emit_warnings` parameter of individual `pex_binary` targets",
          "type": "boolean"
        },
        "resolve_local_platforms": {
          "default": false,
          "description": "For each of the `platforms` specified for a `pex_binary` target, attempt to find a local interpreter that matches.\n\nIf a matching interpreter is found, use the interpreter to resolve distributions and build any that are only available in source distribution form. If no matching interpreter is found (or if this option is `False`), resolve for the platform by accepting only pre-built binary distributions (wheels).",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "pex-cli": {
      "description": "The PEX (Python EXecutable) tool (https://github.com/pantsbuild/pex).",
      "properties": {
        "known_versions": {
          "default": [
            "v2.1.108|macos_arm64|21d7803ef39203a6b2ae9f9e2678636e3c38ba17226ea33d6305f0683ab72e84|3848678",
            "v2.1.108|macos_x86_64|21d7803ef39203a6b2ae9f9e2678636e3c38ba17226ea33d6305f0683ab72e84|3848678",
            "v2.1.108|linux_x86_64|21d7803ef39203a6b2ae9f9e2678636e3c38ba17226ea33d6305f0683ab72e84|3848678",
            "v2.1.108|linux_arm64|21d7803ef39203a6b2ae9f9e2678636e3c38ba17226ea33d6305f0683ab72e84|3848678"
          ],
          "description": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "type": "array"
        },
        "url_platform_mapping": {
          "default": {},
          "description": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "type": "object"
        },
        "url_template": {
          "default": "https://github.com/pantsbuild/pex/releases/download/{version}/pex",
          "description": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.14/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "type": "string"
        },
        "use_unsupported_version": {
          "default": "error",
          "description": "\nWhat action to take in case the requested version of pex is not supported.\n\nSupported pex versions: >=2.1.108,<3.0\n",
          "enum": ["error", "warning"]
        },
        "version": {
          "default": "v2.1.108",
          "description": "Use this version of pex.\n\nSupported pex versions: >=2.1.108,<3.0",
          "type": "string"
        }
      },
      "type": "object"
    },
    "poetry": {
      "description": "Used to generate lockfiles for third-party Python dependencies (deprecated).",
      "properties": {
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/subsystems/poetry.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=poetry`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "version": {
          "default": "poetry==1.1.14",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "publish": {
      "description": "Publish deliverables (assets, distributions, images, etc).",
      "properties": {
        "output": {
          "default": null,
          "description": "Filename for JSON structured publish information.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "py-constraints": {
      "description": "Determine what Python interpreter constraints are used by files/targets.",
      "properties": {
        "output_file": {
          "default": null,
          "description": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "type": "string"
        },
        "summary": {
          "default": false,
          "description": "Output a CSV summary of interpreter constraints for your whole repository. The headers are `Target`, `Constraints`, `Transitive Constraints`, `# Dependencies`, and `# Dependees`.\n\nThis information can be useful when prioritizing a migration from one Python version to another (e.g. to Python 3). Use `# Dependencies` and `# Dependees` to help prioritize which targets are easiest to port (low # dependencies) and highest impact to port (high # dependees).\n\nUse a tool like Pandas or Excel to process the CSV. Use the option `--py-constraints-output-file=summary.csv` to write directly to a file.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "pyoxidizer": {
      "description": "The PyOxidizer utility for packaging Python code in a Rust binary (https://pyoxidizer.readthedocs.io/en/stable/pyoxidizer.html).\n\nUsed with the `pyoxidizer_binary` target.",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to PyOxidizer, e.g. `--pyoxidizer-args='--release'`.",
          "type": "array"
        },
        "console_script": {
          "default": "pyoxidizer",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.8,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/packaging/pyoxidizer/pyoxidizer.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=pyoxidizer`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "version": {
          "default": "pyoxidizer==0.18.0",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "pytest": {
      "description": "The pytest Python test framework (https://docs.pytest.org/).",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to Pytest, e.g. `--pytest-args='-k test_foo --quiet'`.",
          "type": "array"
        },
        "config": {
          "default": null,
          "description": "Path to a config file understood by Pytest (https://docs.pytest.org/en/latest/reference/customize.html#configuration-file-formats). Setting this option will disable `[pytest].config_discovery`. Use this option if the config is located in a non-standard location."
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include all relevant Pytest config files (e.g. `pytest.ini`) during runs. See https://docs.pytest.org/en/stable/customize.html#finding-the-rootdir for where config files should be located for Pytest to discover them.\n\nUse `[pytest].config` instead if your config is in a non-standard location.",
          "type": "boolean"
        },
        "console_script": {
          "default": "pytest",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "execution_slot_var": {
          "default": null,
          "description": "If a non-empty string, the process execution slot id (an integer) will be exposed to tests under this environment variable name.",
          "type": "string"
        },
        "export": {
          "default": true,
          "description": "If true, export a virtual environment with Pytest when running `./pants export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "type": "boolean"
        },
        "extra_requirements": {
          "default": ["pytest-cov>=2.12,!=2.12.1,<3.1", "pytest-xdist>=2.5,<3"],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "junit_family": {
          "default": "xunit2",
          "description": "The format of generated junit XML files. See https://docs.pytest.org/en/latest/reference.html#confval-junit_family.",
          "type": "string"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/subsystems/pytest.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=pytest`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "version": {
          "default": "pytest==7.0.1",
          "description": "Requirement string for the tool.",
          "type": "string"
        },
        "xdist_enabled": {
          "default": false,
          "description": "If true, Pants will use `pytest-xdist` (https://pytest-xdist.readthedocs.io/en/latest/) to parallelize tests within each `python_test` target.\n\nNOTE: Enabling `pytest-xdist` can cause high-level scoped fixtures (for example `session`) to execute more than once. See the `pytest-xdist` docs for more info: https://pypi.org/project/pytest-xdist/#making-session-scoped-fixtures-execute-only-once",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "python": {
      "description": "Options for Pants's Python backend.",
      "properties": {
        "default_resolve": {
          "default": "python-default",
          "description": "The default value used for the `resolve` field.\n\nThe name must be defined as a resolve in `[python].resolves`.",
          "type": "string"
        },
        "default_run_goal_use_sandbox": {
          "default": true,
          "description": "The default value used for the `run_goal_use_sandbox` field of Python targets. See the relevant field for more details.",
          "type": "boolean"
        },
        "enable_resolves": {
          "default": false,
          "description": "Set to true to enable lockfiles for user code. See `[python].resolves` for an explanation of this feature.\n\nWarning: the `generate-lockfiles` goal does not yet work if you have local requirements, regardless of using Pex vs. Poetry for the lockfile generator. Support is coming in a future Pants release. In the meantime, the workaround is to host the files in a custom repository with `[python-repos]` (https://www.pantsbuild.org/v2.14/docs/python-third-party-dependencies#custom-repositories).\n\nYou may also run into issues generating lockfiles when using Poetry as the generator, rather than Pex. See the option `[python].lockfile_generator` for more information.\n\nThis option is mutually exclusive with `[python].requirement_constraints`. We strongly recommend using this option because it:\n\n  1. Uses `--hash` to validate that all downloaded files are expected, which reduces the risk of supply chain attacks.\n  2. Enforces that all transitive dependencies are in the lockfile, whereas constraints allow you to leave off dependencies. This ensures your build is more stable and reduces the risk of supply chain attacks.\n  3. Allows you to have multiple lockfiles in your repository.",
          "type": "boolean"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "The Python interpreters your codebase is compatible with.\n\nThese constraints are used as the default value for the `interpreter_constraints` field of Python targets.\n\nSpecify with requirement syntax, e.g. 'CPython>=2.7,<3' (A CPython interpreter with version >=2.7 AND version <3) or 'PyPy' (A pypy interpreter of any version). Multiple constraint strings will be ORed together.",
          "type": "array"
        },
        "interpreter_versions_universe": {
          "default": ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10", "3.11"],
          "description": "All known Python major/minor interpreter versions that may be used by either your code or tools used by your code.\n\nThis is used by Pants to robustly handle interpreter constraints, such as knowing when generating lockfiles which Python versions to check if your code is using.\n\nThis does not control which interpreter your code will use. Instead, to set your interpreter constraints, update `[python].interpreter_constraints`, the `interpreter_constraints` field, and relevant tool options like `[isort].interpreter_constraints` to tell Pants which interpreters your code actually uses. See https://www.pantsbuild.org/v2.14/docs/python-interpreter-compatibility.\n\nAll elements must be the minor and major Python version, e.g. '2.7' or '3.10'. Do not include the patch version.",
          "type": "array"
        },
        "invalid_lockfile_behavior": {
          "default": "error",
          "description": "The behavior when a lockfile has requirements or interpreter constraints that are not compatible with what the current build is using.\n\nWe recommend keeping the default of `error` for CI builds.\n\nNote that `warn` will still expect a Pants lockfile header, it only won't error if the lockfile is stale and should be regenerated.\n\nUse `ignore` to avoid needing a lockfile header at all, e.g. if you are manually managing lockfiles rather than using the `generate-lockfiles` goal.",
          "enum": ["error", "ignore", "warn"]
        },
        "macos_big_sur_compatibility": {
          "default": false,
          "description": "If set, and if running on MacOS Big Sur, use macosx_10_16 as the platform when building wheels. Otherwise, the default of macosx_11_0 will be used. This may be required for pip to be able to install the resulting distribution on Big Sur.",
          "type": "boolean"
        },
        "resolver_manylinux": {
          "default": "manylinux2014",
          "description": "Whether to allow resolution of manylinux wheels when resolving requirements for foreign linux platforms. The value should be a manylinux platform upper bound, e.g.: 'manylinux2010', or else the string 'no' to disallow.",
          "type": "string"
        },
        "resolves": {
          "default": {
            "python-default": "3rdparty/python/default.lock"
          },
          "description": "A mapping of logical names to lockfile paths used in your project.\n\nMany organizations only need a single resolve for their whole project, which is a good default and often the simplest thing to do. However, you may need multiple resolves, such as if you use two conflicting versions of a requirement in your repository.\n\nIf you only need a single resolve, run `./pants generate-lockfiles` to generate the lockfile.\n\nIf you need multiple resolves:\n\n  1. Via this option, define multiple resolve names and their lockfile paths. The names should be meaningful to your repository, such as `data-science` or `pants-plugins`.\n  2. Set the default with `[python].default_resolve`.\n  3. Update your `python_requirement` targets with the `resolve` field to declare which resolve they should be available in. They default to `[python].default_resolve`, so you only need to update targets that you want in non-default resolves. (Often you'll set this via the `python_requirements` or `poetry_requirements` target generators)\n  4. Run `./pants generate-lockfiles` to generate the lockfiles. If the results aren't what you'd expect, adjust the prior step.\n  5. Update any targets like `python_source` / `python_sources`, `python_test` / `python_tests`, and `pex_binary` which need to set a non-default resolve with the `resolve` field.\n\nIf a target can work with multiple resolves, you can either use the `parametrize` mechanism or manually create a distinct target per resolve. See https://www.pantsbuild.org/v2.14/docs/targets for information about `parametrize`.\n\nFor example:\n\n    python_sources(\n        resolve=parametrize(\"data-science\", \"web-app\"),\n    )\n\nYou can name the lockfile paths what you would like; Pants does not expect a certain file extension or location.\n\nOnly applies if `[python].enable_resolves` is true.",
          "type": "object"
        },
        "resolves_generate_lockfiles": {
          "default": true,
          "description": "If False, Pants will not attempt to generate lockfiles for `[python].resolves` when running the `generate-lockfiles` goal.\n\nThis is intended to allow you to manually generate lockfiles for your own code, rather than using Pex lockfiles. For example, when adopting Pants in a project already using Poetry, you can use `poetry export --dev` to create a requirements.txt-style lockfile understood by Pants, then point `[python].resolves` to the file.\n\nIf you set this to False, Pants will not attempt to validate the metadata headers for your user lockfiles. This is useful so that you can keep `[python].invalid_lockfile_behavior` to `error` or `warn` if you'd like so that tool lockfiles continue to be validated, while user lockfiles are skipped.\n\nWarning: it will likely be slower to install manually generated user lockfiles than Pex ones because Pants cannot as efficiently extract the subset of requirements used for a particular task. See the option `[python].run_against_entire_lockfile`.",
          "type": "boolean"
        },
        "resolves_to_constraints_file": {
          "default": {},
          "description": "When generating a resolve's lockfile, use a constraints file to pin the version of certain requirements. This is particularly useful to pin the versions of transitive dependencies of your direct requirements.\n\nSee https://pip.pypa.io/en/stable/user_guide/#constraints-files for more information on the format of constraint files and how constraints are applied in Pex and pip.\n\nExpects a dictionary of resolve names from `[python].resolves` and Python tools (e.g. `black` and `pytest`) to file paths for constraints files. For example, `{'data-science': '3rdparty/data-science-constraints.txt'}`. If a resolve is not set in the dictionary, it will not use a constraints file.\n\nYou can use the key `__default__` to set a default value for all resolves.\n\nNote: Only takes effect if you use Pex lockfiles. Use the default `[python].lockfile_generator = \"pex\"` and run the `generate-lockfiles` goal.",
          "type": "object"
        },
        "resolves_to_interpreter_constraints": {
          "default": {},
          "description": "Override the interpreter constraints to use when generating a resolve's lockfile with the `generate-lockfiles` goal.\n\nBy default, each resolve from `[python].resolves` will use your global interpreter constraints set in `[python].interpreter_constraints`. With this option, you can override each resolve to use certain interpreter constraints, such as `{'data-science': ['==3.8.*']}`.\n\nWarning: this does NOT impact the interpreter constraints used by targets within the resolve, which is instead set by the option `[python.interpreter_constraints` and the `interpreter_constraints` field. It only impacts how the lockfile is generated.\n\nPants will validate that the interpreter constraints of your code using a resolve are compatible with that resolve's own constraints. For example, if your code is set to use ['==3.9.*'] via the `interpreter_constraints` field, but it's using a resolve whose interpreter constraints are set to ['==3.7.*'], then Pants will error explaining the incompatibility.\n\nThe keys must be defined as resolves in `[python].resolves`. To change the interpreter constraints for tool lockfiles, change `[tool].interpreter_constraints`, e.g. `[black].interpreter_constraints`; if the tool does not have that option, it determines its interpreter constraints from your user code.",
          "type": "object"
        },
        "resolves_to_no_binary": {
          "default": {},
          "description": "When generating a resolve's lockfile, do not use binary packages (i.e. wheels) for these 3rdparty project names.\n\nExpects a dictionary of resolve names from `[python].resolves` and Python tools (e.g. `black` and `pytest`) to lists of project names. For example, `{'data-science': ['requests', 'numpy']}`. If a resolve is not set in the dictionary, it will have no restrictions on binary packages.\n\nYou can use the key `__default__` to set a default value for all resolves.\n\nFor each resolve's value, you can use the value `:all:` to disable all binary packages.\n\nNote that some packages are tricky to compile and may fail to install when this option is used on them. See https://pip.pypa.io/en/stable/cli/pip_install/#install-no-binary for details.\n\nNote: Only takes effect if you use Pex lockfiles. Use the default `[python].lockfile_generator = \"pex\"` and run the `generate-lockfiles` goal.",
          "type": "object"
        },
        "resolves_to_only_binary": {
          "default": {},
          "description": "When generating a resolve's lockfile, do not use source packages (i.e. sdists) for these 3rdparty project names, e.g `['django', 'requests']`.\n\nExpects a dictionary of resolve names from `[python].resolves` and Python tools (e.g. `black` and `pytest`) to lists of project names. For example, `{'data-science': ['requests', 'numpy']}`. If a resolve is not set in the dictionary, it will have no restrictions on source packages.\n\nYou can use the key `__default__` to set a default value for all resolves.\n\nFor each resolve's value, you can use the value `:all:` to disable all source packages.\n\nPackages without binary distributions will fail to install when this option is used on them. See https://pip.pypa.io/en/stable/cli/pip_install/#install-only-binary for details.\n\nNote: Only takes effect if you use Pex lockfiles. Use the default `[python].lockfile_generator = \"pex\"` and run the `generate-lockfiles` goal.",
          "type": "object"
        },
        "run_against_entire_lockfile": {
          "default": false,
          "description": "If enabled, when running binaries, tests, and repls, Pants will use the entire lockfile file instead of just the relevant subset.\n\nIf you are using Pex lockfiles, we generally do not recommend this. You will already get similar performance benefits to this option, without the downsides.\n\nOtherwise, this option can improve performance and reduce cache size. But it has two consequences: 1) All cached test results will be invalidated if any requirement in the lockfile changes, rather than just those that depend on the changed requirement. 2) Requirements unneeded by a test/run/repl will be present on the sys.path, which might in rare cases cause their behavior to change.\n\nThis option does not affect packaging deployable artifacts, such as PEX files, wheels and cloud functions, which will still use just the exact subset of requirements needed.",
          "type": "boolean"
        },
        "tailor_ignore_empty_init_files": {
          "default": true,
          "description": "If true, don't add `python_sources` targets for `__init__.py` files that are both empty and where there are no other Python files in the directory.\n\nEmpty and solitary `__init__.py` files usually exist as import scaffolding rather than true library code, so it can be noisy to add BUILD files.\n\nEven if this option is set to true, Pants will still ensure the empty `__init__.py` files are included in the sandbox when running processes.\n\nIf you set to false, you may also want to set `[python-infer].init_files = \"always\"`.",
          "type": "boolean"
        },
        "tailor_pex_binary_targets": {
          "default": false,
          "description": "If true, add `pex_binary` targets for Python files named `__main__.py` or with a `__main__` clause with the `tailor` goal.",
          "type": "boolean"
        },
        "tailor_requirements_targets": {
          "default": true,
          "description": "If true, add `python_requirements`, `poetry_requirements`, and `pipenv_requirements` target generators with the `tailor` goal.\n\n`python_requirements` targets are added for any file that matches the pattern `*requirements*.txt`. You will need to manually add `python_requirements` for different file names like `reqs.txt`.\n\n`poetry_requirements` targets are added for `pyproject.toml` files with `[tool.poetry` in them.",
          "type": "boolean"
        },
        "tailor_source_targets": {
          "default": true,
          "description": "If true, add `python_sources`, `python_tests`, and `python_test_utils` targets with the `tailor` goal.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "python-bootstrap": {
      "description": "Options used to locate Python interpreters used by all Pants backends.\n\nThis subsystem controls where and how Pants will locate Python, but beyond that it does not control which Python interpreter versions are actually used for your code: see the `python` subsystem for that.",
      "properties": {
        "names": {
          "default": ["python", "python3"],
          "description": "The names of Python binaries to search for. See the `--search-path` option to influence where interpreters are searched for.\n\nThis does not impact which Python interpreter is used to run your code, only what is used to run internal tools.",
          "type": "array"
        },
        "search_path": {
          "default": ["<PYENV>", "<PATH>"],
          "description": "A list of paths to search for Python interpreters.\n\nWhich interpeters are actually used from these paths is context-specific: the Python backend selects interpreters using options on the `python` subsystem, in particular, the `[python].interpreter_constraints` option.\n\nYou can specify absolute paths to interpreter binaries and/or to directories containing interpreter binaries. The order of entries does not matter.\n\nThe following special strings are supported:\n\n  * `<PATH>`, the contents of the PATH env var\n  * `<ASDF>`, all Python versions currently configured by ASDF `(asdf shell, ${HOME}/.tool-versions)`, with a fallback to all installed versions\n  * `<ASDF_LOCAL>`, the ASDF interpreter with the version in BUILD_ROOT/.tool-versions\n  * `<PYENV>`, all Python versions under $(pyenv root)/versions\n  * `<PYENV_LOCAL>`, the Pyenv interpreter with the version in BUILD_ROOT/.python-version\n  * `<PEXRC>`, paths in the PEX_PYTHON_PATH variable in /etc/pexrc or ~/.pexrc",
          "type": "array"
        }
      },
      "type": "object"
    },
    "python-infer": {
      "description": "Options controlling which dependencies will be inferred for Python targets.",
      "properties": {
        "assets": {
          "default": false,
          "description": "Infer a target's asset dependencies based on strings that look like Posix filepaths, such as those given to `open` or `pkgutil.get_data`.\n\nTo ignore a false positive, you can either put `# pants: no-infer-dep` on the line of the string or put `!{bad_address}` in the `dependencies` field of your target.",
          "type": "boolean"
        },
        "assets_min_slashes": {
          "default": 1,
          "description": "If --assets is True, treat valid-looking strings with at least this many forward slash characters as potential assets. E.g. `'data/databases/prod.db'` will be treated as a potential candidate if this option is set to 2 but not to 3.",
          "type": "number"
        },
        "conftests": {
          "default": true,
          "description": "Infer a test target's dependencies on any conftest.py files in the current directory and ancestor directories.",
          "type": "boolean"
        },
        "entry_points": {
          "default": true,
          "description": "Infer dependencies on targets' entry points, e.g. `pex_binary`'s `entry_point` field, `python_awslambda`'s `handler` field and `python_distribution`'s `entry_points` field.",
          "type": "boolean"
        },
        "imports": {
          "default": true,
          "description": "Infer a target's imported dependencies by parsing import statements from sources.\n\nTo ignore a false positive, you can either put `# pants: no-infer-dep` on the line of the import or put `!{bad_address}` in the `dependencies` field of your target.",
          "type": "boolean"
        },
        "init_files": {
          "default": "content_only",
          "description": "Infer a target's dependencies on any `__init__.py` files in the packages it is located in (recursively upward in the directory structure).\n\nEven if this is set to `never` or `content_only`, Pants will still always include any ancestor `__init__.py` files in the sandbox. Only, they will not be \"proper\" dependencies, e.g. they will not show up in `./pants dependencies` and their own dependencies will not be used.\n\nBy default, Pants only adds a \"proper\" dependency if there is content in the `__init__.py` file. This makes sure that dependencies are added when likely necessary to build, while also avoiding adding unnecessary dependencies. While accurate, those unnecessary dependencies can complicate setting metadata like the `interpreter_constraints` and `resolve` fields.",
          "enum": ["always", "content_only", "never"]
        },
        "string_imports": {
          "default": false,
          "description": "Infer a target's dependencies based on strings that look like dynamic dependencies, such as Django settings files expressing dependencies as strings.\n\nTo ignore a false positive, you can either put `# pants: no-infer-dep` on the line of the string or put `!{bad_address}` in the `dependencies` field of your target.",
          "type": "boolean"
        },
        "string_imports_min_dots": {
          "default": 2,
          "description": "If --string-imports is True, treat valid-looking strings with at least this many dots in them as potential dynamic dependencies. E.g., `'foo.bar.Baz'` will be treated as a potential dependency if this option is set to 2 but not if set to 3.",
          "type": "number"
        },
        "unowned_dependency_behavior": {
          "default": "warning",
          "description": "How to handle imports that don't have an inferrable owner.\n\nUsually when an import cannot be inferred, it represents an issue like Pants not being properly configured, e.g. targets not set up. Often, missing dependencies will result in confusing runtime errors like `ModuleNotFoundError`, so this option can be helpful to error more eagerly.\n\nTo ignore any false positives, either add `# pants: no-infer-dep` to the line of the import or put the import inside a `try: except ImportError:` block.",
          "enum": ["error", "warning", "ignore"]
        }
      },
      "type": "object"
    },
    "python-native-code": {
      "description": "Options for building native code using Python, e.g. when resolving distributions.",
      "properties": {
        "cpp_flags": {
          "default": [],
          "description": "Override the `CPPFLAGS` environment variable for any forked subprocesses.",
          "type": "array"
        },
        "ld_flags": {
          "default": [],
          "description": "Override the `LDFLAGS` environment variable for any forked subprocesses.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "python-repos": {
      "description": "External Python code repositories, such as PyPI.\n\nThese options may be used to point to custom package indexes when resolving requirements.",
      "properties": {
        "find_links": {
          "default": [],
          "description": "URLs and/or file paths corresponding to pip's `--find-links` option.\n\nPer [pip's documentation](https://pip.pypa.io/en/stable/cli/pip_wheel/?highlight=find%20links#cmdoption-f), URLs should be to HTML files with links to `.whl` and/or sdist files. Local paths must be absolute, and can either be to an HTML file with links or to a directory with `.whl` and/or sdist files, e.g. `file:///Users/pantsbuild/prebuilt_wheels`.\n\nFor local paths, you may want to use the option `[python-repos].path_mappings`.",
          "type": "array"
        },
        "indexes": {
          "default": ["https://pypi.org/simple/"],
          "description": "URLs of [PEP-503 compatible](https://peps.python.org/pep-0503/) code repository indexes to look for requirements.\n\nIf set to an empty list, then Pex will use no indexes (meaning it will not use PyPI).",
          "type": "array"
        },
        "path_mappings": {
          "default": [],
          "description": "Mappings to facilitate using local Python requirements when the absolute file paths are different on different users' machines. For example, the path `file:///Users/pantsbuild/prebuilt_wheels/django-3.1.1-py3-none-any.whl` could become `file://${WHEELS_DIR}/django-3.1.1-py3-none-any.whl`, where each user can configure what WHEELS_DIR points to on their machine.\n\nExpects values in the form `NAME|PATH`, e.g. `WHEELS_DIR|/Users/pantsbuild/prebuilt_wheels`. You can specify multiple entries in the list.\n\nThis feature is intended to be used with `[python-repos].find_links`, rather than PEP 440 direct reference requirements (see https://www.pantsbuild.org/v2.14/docs/python-third-party-dependencies#local-requirements. `[python-repos].find_links` must be configured to a valid absolute path for the current machine.\n\nTip: you can avoid each user needing to manually configure this option and `[python-repos].find_links` by using a common file location, along with Pants's interpolation support (https://www.pantsbuild.org/v2.14/docs/options#config-file-interpolation. For example, in `pants.toml`, you could set both options to `%(buildroot)s/python_wheels` to point to the directory `python_wheels` in the root of your repository; or, use the path `%(env.HOME)s/pants_wheels` for the path `~/pants_wheels`. If you are not able to use a common path like this, then we recommend setting that each user set these options via a `.pants.rc` file (https://www.pantsbuild.org/v2.14/docs/options#pantsrc-file.\n\nNote: Only takes effect if you use Pex lockfiles. Use the default `[python].lockfile_generator = \"pex\"` and run the `generate-lockfiles` goal.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "regex-lint": {
      "description": "Lint your code using regex patterns, e.g. to check for copyright headers.\n\nTo activate this with the `lint` goal, you must set `[regex-lint].config`.\n\nUnlike other linters, this can run on files not owned by targets, such as BUILD files.",
      "properties": {
        "config": {
          "default": {},
          "description": "Config schema is as follows:\n\n    ```\n    {\n    'required_matches': {\n        'path_pattern1': [content_pattern1, content_pattern2],\n        'path_pattern2': [content_pattern1, content_pattern3],\n        ...\n    },\n    'path_patterns': [\n        {\n        'name': path_pattern1',\n        'pattern': <path regex pattern>,\n        'inverted': True|False (defaults to False),\n        'content_encoding': <encoding> (defaults to utf8)\n        },\n        ...\n    ],\n    'content_patterns': [\n        {\n        'name': 'content_pattern1',\n        'pattern': <content regex pattern>,\n        'inverted': True|False (defaults to False)\n        }\n        ...\n    ]\n    }\n    ```\n\nMeaning: if a file matches some path pattern, its content must match all the corresponding content patterns.\n\nIt's often helpful to load this config from a JSON or YAML file. To do that, set `[regex-lint].config = '@path/to/config.yaml'`, for example.",
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ]
        },
        "detail_level": {
          "default": "nonmatching",
          "description": "How much detail to include in the result.",
          "enum": ["none", "summary", "nonmatching", "names", "all"]
        }
      },
      "type": "object"
    },
    "repl": {
      "description": "Open a REPL with the specified code loadable.",
      "properties": {
        "restartable": {
          "default": false,
          "description": "True if the REPL should be restarted if its inputs have changed.",
          "type": "boolean"
        },
        "shell": {
          "default": null,
          "description": "Override the automatically-detected REPL program for the target(s) specified.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "roots": {
      "description": "List the repo's registered source roots.",
      "properties": {
        "output_file": {
          "default": null,
          "description": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "type": "string"
        },
        "sep": {
          "default": "\\n",
          "description": "String to use to separate lines in line-oriented output.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "run": {
      "description": "Runs a binary target.\n\nThis goal propagates the return code of the underlying executable.\n\nIf your application can safely be restarted while it is running, you can pass `restartable=True` on your binary target (for supported types), and the `run` goal will automatically restart them as all relevant files change. This can be particularly useful for server applications.",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to the executed target, e.g. `--run-args='val1 val2 --debug'`.",
          "type": "array"
        },
        "cleanup": {
          "default": true,
          "description": "Whether to clean up the temporary directory in which the binary is chrooted. Set this to false to retain the directory, e.g., for debugging.\n\nNote that setting the global --keep-sandboxes option may also conserve this directory, along with those of all other processes that Pants executes. This option is more selective and controls just the target binary's directory.",
          "type": "boolean"
        },
        "debug_adapter": {
          "default": false,
          "description": "Run the interactive process using a Debug Adapter (https://microsoft.github.io/debug-adapter-protocol/) for the language if supported.\n\nThe interactive process used will be immediately blocked waiting for a client before continuing.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "scala": {
      "description": "Scala programming language",
      "properties": {
        "tailor_source_targets": {
          "default": true,
          "description": "If true, add `scala_sources`, `scala_junit_tests`, and `scalatest_tests` targets with the `tailor` goal.",
          "type": "boolean"
        },
        "version_for_resolve": {
          "default": {},
          "description": "A dictionary mapping the name of a resolve to the Scala version to use for all Scala targets consuming that resolve.\n\nAll Scala-compiled jars on a resolve's classpath must be \"compatible\" with one another and with all Scala-compiled first-party sources from `scala_sources` (and other Scala target types) using that resolve. The option sets the Scala version that will be used to compile all first-party sources using the resolve. This ensures that the compatibility property is maintained for a resolve. To support multiple Scala versions, use multiple resolves.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "scala-dump-source-analysis": {
      "description": "Dump source analysis for scala_source targets.",
      "properties": {},
      "type": "object"
    },
    "scala-infer": {
      "description": "Options controlling which dependencies will be inferred for Scala targets.",
      "properties": {
        "consumed_types": {
          "default": true,
          "description": "Infer a target's dependencies by parsing consumed types from sources.",
          "type": "boolean"
        },
        "force_add_siblings_as_dependencies": {
          "default": false,
          "description": "If true, add a dependency on all scala_source targets generated by the same scala_sources target generator. If false, the dependencies will only be added if [scala-infer].imports is also set to false.\n\nSetting this option to true reduces the precision of dependency information. That means that you may end up compiling more than is necessary for a particular task, and that compilation will be invalidated more frequently than actually necessary. However, setting to true may be helpful if compilation fails due to missing dependencies.",
          "type": "boolean"
        },
        "imports": {
          "default": true,
          "description": "Infer a target's dependencies by parsing import statements from sources.",
          "type": "boolean"
        },
        "package_objects": {
          "default": true,
          "description": "Add dependency on the package object to every target.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "scalac": {
      "description": "The Scala compiler.",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to scalac, e.g. `--scalac-args='-encoding UTF-8'`.",
          "type": "array"
        },
        "plugins_for_resolve": {
          "default": {},
          "description": "A dictionary, whose keys are the names of each JVM resolve that requires default `scalac` plugins, and the value is a comma-separated string consisting of scalac plugin names. Each specified plugin must have a corresponding `scalac_plugin` target that specifies that name in either its `plugin_name` field or is the same as its target name.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "scalafmt": {
      "description": "scalafmt (https://scalameta.org/scalafmt/)",
      "properties": {
        "artifacts": {
          "default": ["org.scalameta:scalafmt-cli_2.13:{version}"],
          "description": "Artifact requirements for this tool using specified as either the address of a `jvm_artifact` target or, alternatively, as a colon-separated Maven coordinates (e.g., group:name:version). For Maven coordinates, the string `{version}` version will be substituted with the value of the `[scalafmt].version` option.",
          "type": "array"
        },
        "jvm_options": {
          "default": [],
          "description": "List of JVM options to pass to `scalafmt` JVM processes.\n\nOptions set here will be added to those set in `[jvm].global_options`. Please check the documentation for the `jvm` subsystem to see what values are accepted here.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` option. See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/scala/lint/scalafmt/scalafmt.default.lockfile.txt for the default lockfile contents.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants jvm-generate-lockfiles --resolve=scalafmt`.",
          "type": "string"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use scalafmt when running `./pants fmt` and `./pants lint`.",
          "type": "boolean"
        },
        "version": {
          "default": "3.2.1",
          "description": "Version string for the tool. This is available for substitution in the `[scalafmt].artifacts` option by including the string `{version}`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "scalatest": {
      "description": "The Scalatest test framework (https://www.scalatest.org/)",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to Scalatest, e.g. `--scalatest-args='-t $testname'`.\n\nSee https://www.scalatest.org/user_guide/using_the_runner for supported arguments.",
          "type": "array"
        },
        "artifacts": {
          "default": ["org.scalatest:scalatest_2.13:{version}"],
          "description": "Artifact requirements for this tool using specified as either the address of a `jvm_artifact` target or, alternatively, as a colon-separated Maven coordinates (e.g., group:name:version). For Maven coordinates, the string `{version}` version will be substituted with the value of the `[scalatest].version` option.",
          "type": "array"
        },
        "jvm_options": {
          "default": [],
          "description": "List of JVM options to pass to `scalatest` JVM processes.\n\nOptions set here will be added to those set in `[jvm].global_options`. Please check the documentation for the `jvm` subsystem to see what values are accepted here.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` option. See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/scala/subsystems/scalatest.default.lockfile.txt for the default lockfile contents.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants jvm-generate-lockfiles --resolve=scalatest`.",
          "type": "string"
        },
        "version": {
          "default": "3.2.10",
          "description": "Version string for the tool. This is available for substitution in the `[scalatest].artifacts` option by including the string `{version}`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "scc": {
      "description": "The Succinct Code Counter, aka `scc` (https://github.com/boyter/scc).",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to SCC, e.g. `--scc-args='--no-cocomo'`.\n\nRefer to to https://github.com/boyter/scc.",
          "type": "array"
        },
        "known_versions": {
          "default": [
            "3.0.0|macos_arm64 |846cb1b25025a0794d455719bc17cfb3f588576a58af1d95036f6c654e294f98|2006145",
            "3.0.0|macos_x86_64|9c3064e477ab36e16204ad34f649372034bca4df669615eff5de4aa05b2ddf1a|2048134",
            "3.0.0|linux_arm64 |04f9e797b70a678833e49df5e744f95080dfb7f963c0cd34f5b5d4712d290f33|1768037",
            "3.0.0|linux_x86_64|13ca47ce00b5bd032f97f3af7aa8eb3c717b8972b404b155a378b09110e4aa0c|1948341"
          ],
          "description": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "type": "array"
        },
        "url_platform_mapping": {
          "default": {
            "linux_arm64": "arm64-unknown-linux",
            "linux_x86_64": "x86_64-unknown-linux",
            "macos_arm64": "arm64-apple-darwin",
            "macos_x86_64": "x86_64-apple-darwin"
          },
          "description": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "type": "object"
        },
        "url_template": {
          "default": "https://github.com/boyter/scc/releases/download/v{version}/scc-{version}-{platform}.zip",
          "description": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.14/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "type": "string"
        },
        "use_unsupported_version": {
          "default": "error",
          "description": "\nWhat action to take in case the requested version of SCC is not supported.\n\nSupported SCC versions: unspecified\n",
          "enum": ["error", "warning"]
        },
        "version": {
          "default": "3.0.0",
          "description": "Use this version of SCC.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "setup-py-generation": {
      "description": "Options to control how setup.py is generated from a `python_distribution` target.",
      "properties": {
        "first_party_dependency_version_scheme": {
          "default": "exact",
          "description": "What version to set in `install_requires` when a `python_distribution` depends on other `python_distribution`s. If `exact`, will use `==`. If `compatible`, will use `~=`. If `any`, will leave off the version. See https://www.python.org/dev/peps/pep-0440/#version-specifiers.",
          "enum": ["exact", "compatible", "any"]
        },
        "generate_setup_default": {
          "default": true,
          "description": "The default value for the `generate_setup` field on `python_distribution` targets. Can be overridden per-target by setting that field explicitly. Set this to False if you mostly rely on handwritten setup files (setup.py, setup.cfg and similar). Leave as True if you mostly rely on Pants generating setup files for you.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "setuptools": {
      "description": "Python setuptools, used to package `python_distribution` targets.",
      "properties": {
        "extra_requirements": {
          "default": ["wheel>=0.35.1,<0.38"],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/subsystems/setuptools.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=setuptools`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "version": {
          "default": "setuptools>=63.1.0,<64.0",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "setuptools-scm": {
      "description": "A tool for generating versions from VCS metadata (https://github.com/pypa/setuptools_scm).",
      "properties": {
        "console_script": {
          "default": null,
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": "setuptools_scm",
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "extra_requirements": {
          "default": [],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/subsystems/setuptools_scm.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=setuptools-scm`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "version": {
          "default": "setuptools-scm==6.4.2",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "shell-setup": {
      "description": "Options for Pants's Shell support.",
      "properties": {
        "dependency_inference": {
          "default": true,
          "description": "Infer Shell dependencies on other Shell files by analyzing `source` statements.",
          "type": "boolean"
        },
        "executable_search_path": {
          "default": ["<PATH>"],
          "description": "The PATH value that will be used to find shells and to run certain processes like the shunit2 test runner.\n\nThe special string `\"<PATH>\"` will expand to the contents of the PATH env var.",
          "type": "array"
        },
        "tailor": {
          "default": true,
          "description": "If true, add `shell_sources` and `shunit2_tests` targets with the `tailor` goal.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "shellcheck": {
      "description": "A linter for shell scripts.",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to Shellcheck, e.g. `--shellcheck-args='-e SC20529'`.",
          "type": "array"
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include all relevant `.shellcheckrc` and `shellcheckrc` files during runs. See https://www.mankier.com/1/shellcheck#RC_Files for where these can be located.",
          "type": "boolean"
        },
        "known_versions": {
          "default": [
            "v0.8.0|macos_arm64 |e065d4afb2620cc8c1d420a9b3e6243c84ff1a693c1ff0e38f279c8f31e86634|4049756",
            "v0.8.0|macos_x86_64|e065d4afb2620cc8c1d420a9b3e6243c84ff1a693c1ff0e38f279c8f31e86634|4049756",
            "v0.8.0|linux_arm64 |9f47bbff5624babfa712eb9d64ece14c6c46327122d0c54983f627ae3a30a4ac|2996468",
            "v0.8.0|linux_x86_64|ab6ee1b178f014d1b86d1e24da20d1139656c8b0ed34d2867fbb834dad02bf0a|1403852"
          ],
          "description": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "type": "array"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use Shellcheck when running `./pants lint`.",
          "type": "boolean"
        },
        "url_platform_mapping": {
          "default": {
            "linux_arm64": "linux.aarch64",
            "linux_x86_64": "linux.x86_64",
            "macos_arm64": "darwin.x86_64",
            "macos_x86_64": "darwin.x86_64"
          },
          "description": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "type": "object"
        },
        "url_template": {
          "default": "https://github.com/koalaman/shellcheck/releases/download/{version}/shellcheck-{version}.{platform}.tar.xz",
          "description": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.14/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "type": "string"
        },
        "use_unsupported_version": {
          "default": "error",
          "description": "\nWhat action to take in case the requested version of Shellcheck is not supported.\n\nSupported Shellcheck versions: unspecified\n",
          "enum": ["error", "warning"]
        },
        "version": {
          "default": "v0.8.0",
          "description": "Use this version of Shellcheck.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "shfmt": {
      "description": "An autoformatter for shell scripts (https://github.com/mvdan/sh).",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to shfmt, e.g. `--shfmt-args='-i 2'`.",
          "type": "array"
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include all relevant `.editorconfig` files during runs. See https://editorconfig.org.",
          "type": "boolean"
        },
        "known_versions": {
          "default": [
            "v3.2.4|macos_arm64 |e70fc42e69debe3e400347d4f918630cdf4bf2537277d672bbc43490387508ec|2998546",
            "v3.2.4|macos_x86_64|43a0461a1b54070ddc04fbbf1b78f7861ee39a65a61f5466d15a39c4aba4f917|2980208",
            "v3.2.4|linux_arm64 |6474d9cc08a1c9fe2ef4be7a004951998e3067d46cf55a011ddd5ff7bfab3de6|2752512",
            "v3.2.4|linux_x86_64|3f5a47f8fec27fae3e06d611559a2063f5d27e4b9501171dde9959b8c60a3538|2797568"
          ],
          "description": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "type": "array"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use shfmt when running `./pants fmt` and `./pants lint`.",
          "type": "boolean"
        },
        "url_platform_mapping": {
          "default": {
            "linux_arm64": "linux_arm64",
            "linux_x86_64": "linux_amd64",
            "macos_arm64": "darwin_arm64",
            "macos_x86_64": "darwin_amd64"
          },
          "description": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "type": "object"
        },
        "url_template": {
          "default": "https://github.com/mvdan/sh/releases/download/{version}/shfmt_{version}_{platform}",
          "description": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.14/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "type": "string"
        },
        "use_unsupported_version": {
          "default": "error",
          "description": "\nWhat action to take in case the requested version of shfmt is not supported.\n\nSupported shfmt versions: unspecified\n",
          "enum": ["error", "warning"]
        },
        "version": {
          "default": "v3.2.4",
          "description": "Use this version of shfmt.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "source": {
      "description": "Configuration for roots of source trees.",
      "properties": {
        "marker_filenames": {
          "default": [],
          "description": "The presence of a file of this name in a directory indicates that the directory is a source root. The content of the file doesn't matter, and may be empty. Useful when you can't or don't wish to centrally enumerate source roots via `root_patterns`.",
          "type": "array"
        },
        "root_patterns": {
          "default": [
            "/",
            "src",
            "src/python",
            "src/py",
            "src/thrift",
            "src/protobuf",
            "src/protos",
            "src/scala",
            "src/java"
          ],
          "description": "A list of source root suffixes. A directory with this suffix will be considered a potential source root. E.g., `src/python` will match `<buildroot>/src/python`, `<buildroot>/project1/src/python` etc. Prepend a `/` to anchor the match at the buildroot. E.g., `/src/python` will match `<buildroot>/src/python` but not `<buildroot>/project1/src/python`. A `*` wildcard will match a single path segment, e.g., `src/*` will match `<buildroot>/src/python` and `<buildroot>/src/rust`. Use `/` to signify that the buildroot itself is a source root. See https://www.pantsbuild.org/v2.14/docs/source-roots.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "stats": {
      "description": "An aggregator for Pants stats, such as cache metrics.",
      "properties": {
        "log": {
          "default": false,
          "description": "At the end of the Pants run, log all counter metrics and summaries of observation histograms, e.g. the number of cache hits and the time saved by caching.\n\nFor histogram summaries to work, you must add `hdrhistogram` to `[GLOBAL].plugins`.",
          "type": "boolean"
        },
        "memory_summary": {
          "default": false,
          "description": "At the end of the Pants run, report a summary of memory usage.\n\nKeys are the total size in bytes, the count, and the name. Note that the total size is for all instances added together, so you can use total_size // count to get the average size.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "subprocess-environment": {
      "description": "Environment settings for forked subprocesses.",
      "properties": {
        "env_vars": {
          "default": [
            "LANG",
            "LC_CTYPE",
            "LC_ALL",
            "SSL_CERT_FILE",
            "SSL_CERT_DIR"
          ],
          "description": "Environment variables to set for process invocations.\n\nEntries are either strings in the form `ENV_VAR=value` to set an explicit value; or just `ENV_VAR` to copy the value from Pants's own environment.\n\nSee https://www.pantsbuild.org/v2.14/docs/options#addremove-semantics for how to add and remove Pants's default for this option.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "tailor": {
      "description": "Auto-generate BUILD file targets for new source files.\n\nEach specific `tailor` implementation may be disabled through language-specific options, e.g. `[python].tailor_pex_binary_targets` and `[shell-setup].tailor`.",
      "properties": {
        "alias_mapping": {
          "default": {},
          "description": "A mapping from standard target type to custom type to use instead. The custom type can be a custom target type or a macro that offers compatible functionality to the one it replaces (see https://www.pantsbuild.org/v2.14/docs/macros).",
          "type": "object"
        },
        "build_file_header": {
          "default": null,
          "description": "A header, e.g., a copyright notice, to add to the content of created BUILD files.",
          "type": "string"
        },
        "build_file_indent": {
          "default": "    ",
          "description": "The indent to use when auto-editing BUILD files.",
          "type": "string"
        },
        "build_file_name": {
          "default": "BUILD",
          "description": "The name to use for generated BUILD files.\n\nThis must be compatible with `[GLOBAL].build_patterns`.",
          "type": "string"
        },
        "check": {
          "default": false,
          "description": "Do not write changes to disk, only write back what would change. Return code 0 means there would be no changes, and 1 means that there would be.",
          "type": "boolean"
        },
        "ignore_adding_targets": {
          "default": [],
          "description": "Do not add these target definitions.\n\nExpects a list of target addresses that would normally be added by `tailor`, e.g. `['project:tgt']`. To find these names, you can run `tailor --check`, then combine the BUILD file path with the target's name. For example, if `tailor` would add the target `bin` to `project/BUILD`, then the address would be `project:bin`. If the BUILD file is at the root of your repository, use `//` for the path, e.g. `//:bin`.\n\nDoes not work with macros.",
          "type": "array"
        },
        "ignore_paths": {
          "default": [],
          "description": "Do not edit or create BUILD files at these paths.\n\nCan use literal file names and/or globs, e.g. `['project/BUILD, 'ignore_me/**']`.\n\nThis augments the option `[GLOBAL].build_ignore`, which tells Pants to also not _read_ BUILD files at certain paths. In contrast, this option only tells Pants to not edit/create BUILD files at the specified paths.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "test": {
      "description": "Run tests.",
      "properties": {
        "debug": {
          "default": false,
          "description": "Run tests sequentially in an interactive process. This is necessary, for example, when you add breakpoints to your code.",
          "type": "boolean"
        },
        "debug_adapter": {
          "default": false,
          "description": "Run tests sequentially in an interactive process, using a Debug Adapter (https://microsoft.github.io/debug-adapter-protocol/) for the language if supported.\n\nThe interactive process used will be immediately blocked waiting for a client before continuing.\n\nThis option implies --debug.",
          "type": "boolean"
        },
        "extra_env_vars": {
          "default": [],
          "description": "Additional environment variables to include in test processes. Entries are strings in the form `ENV_VAR=value` to use explicitly; or just `ENV_VAR` to copy the value of a variable in Pants's own environment.",
          "type": "array"
        },
        "force": {
          "default": false,
          "description": "Force the tests to run, even if they could be satisfied from cache.",
          "type": "boolean"
        },
        "open_coverage": {
          "default": false,
          "description": "If a coverage report file is generated, open it on the local system if the system supports this.",
          "type": "boolean"
        },
        "output": {
          "default": "failed",
          "description": "Show stdout/stderr for these tests.",
          "enum": ["all", "failed", "none"]
        },
        "report": {
          "default": false,
          "description": "Write test reports to --report-dir.",
          "type": "boolean"
        },
        "report_dir": {
          "default": "{distdir}/test/reports",
          "description": "Path to write test reports to. Must be relative to the build root.",
          "type": "string"
        },
        "shard": {
          "default": "",
          "description": "A shard specification of the form \"k/N\", where N is a positive integer and k is a non-negative integer less than N.\n\nIf set, the request input targets will be deterministically partitioned into N disjoint subsets of roughly equal size, and only the k'th subset will be used, with all others discarded.\n\nUseful for splitting large numbers of test files across multiple machines in CI. For example, you can run three shards with --shard=0/3, --shard=1/3, --shard=2/3.\n\nNote that the shards are roughly equal in size as measured by number of files. No attempt is made to consider the size of different files, the time they have taken to run in the past, or other such sophisticated measures.",
          "type": "string"
        },
        "timeout_default": {
          "default": null,
          "description": "The default timeout (in seconds) for a test target if the `timeout` field is not set on the target.",
          "type": "number"
        },
        "timeout_maximum": {
          "default": null,
          "description": "The maximum timeout (in seconds) that may be used on a test target.",
          "type": "number"
        },
        "timeouts": {
          "default": true,
          "description": "Enable test target timeouts. If timeouts are enabled then test targets with a `timeout=` parameter set on their target will time out after the given number of seconds if not completed. If no timeout is set, then either the default timeout is used or no timeout is configured.",
          "type": "boolean"
        },
        "use_coverage": {
          "default": false,
          "description": "Generate a coverage report if the test runner supports it.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "toolchain-setup": {
      "description": "Setup specific to the Toolchain codebase.",
      "properties": {
        "base_url": {
          "default": "https://app.toolchain.com",
          "description": "Toolchain base url",
          "type": "string"
        },
        "org": {
          "default": null,
          "description": "The organization name on your Toolchain account (typically the same as the org name in GitHub)",
          "type": "string"
        },
        "repo": {
          "default": null,
          "description": "The name of this repo (typically its name in GitHub)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "twine": {
      "description": "The utility for publishing Python distributions to PyPI and other Python repositories.",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to Twine, e.g. `--twine-args='--skip-existing'`.",
          "type": "array"
        },
        "ca_certs_path": {
          "default": "<inherit>",
          "description": "Path to a file containing PEM-format CA certificates used for verifying secure connections when publishing python distributions.\n\nUses the value from `[GLOBAL].ca_certs_path` by default. Set to `\"<none>\"` to not use the default CA certificate.",
          "type": "string"
        },
        "config": {
          "default": null,
          "description": "Path to a .pypirc config file to use. (https://packaging.python.org/specifications/pypirc/)\n\nSetting this option will disable `[twine].config_discovery`. Use this option if the config is located in a non-standard location."
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include all relevant config files during runs (`.pypirc`).\n\nUse `[twine].config` instead if your config is in a non-standard location.",
          "type": "boolean"
        },
        "console_script": {
          "default": "twine",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "extra_requirements": {
          "default": ["colorama>=0.4.3"],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/subsystems/twine.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=twine`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use Twine when running `./pants publish`.",
          "type": "boolean"
        },
        "version": {
          "default": "twine>=3.7.1,<3.8",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "update-build-files": {
      "description": "Format and fix safe deprecations in BUILD files.\n\nThis does not handle the full Pants upgrade. You must still manually change `pants_version` in `pants.toml` and you may need to manually address some deprecations. See https://www.pantsbuild.org/v2.14/docs/upgrade-tips for upgrade tips.\n\nThis goal is run without arguments. It will run over all BUILD files in your project.",
      "properties": {
        "check": {
          "default": false,
          "description": "Do not write changes to disk, only write back what would change. Return code 0 means there would be no changes, and 1 means that there would be.",
          "type": "boolean"
        },
        "fix_safe_deprecations": {
          "default": true,
          "description": "Automatically fix deprecations, such as target type renames, that are safe because they do not change semantics.",
          "type": "boolean"
        },
        "fmt": {
          "default": true,
          "description": "Format BUILD files using Black or Yapf.\n\nSet `[black].args` / `[yapf].args`, `[black].config` / `[yapf].config` , and `[black].config_discovery` / `[yapf].config_discovery` to change Black's or Yapf's behavior. Set `[black].interpreter_constraints` / `[yapf].interpreter_constraints` and `[python].interpreter_search_path` to change which interpreter is used to run the formatter.",
          "type": "boolean"
        },
        "formatter": {
          "default": "black",
          "description": "Which formatter Pants should use to format BUILD files.",
          "enum": ["yapf", "black"]
        }
      },
      "type": "object"
    },
    "version": {
      "description": "Display Pants version.",
      "properties": {},
      "type": "object"
    },
    "yapf": {
      "description": "A formatter for Python files (https://github.com/google/yapf).",
      "properties": {
        "args": {
          "default": [],
          "description": "Arguments to pass directly to yapf, e.g. `--yapf-args='--no-local-style'`.\n\nCertain arguments, specifically `--recursive`, `--in-place`, and `--parallel`, will be ignored because Pants takes care of finding all the relevant files and running the formatting in parallel.",
          "type": "array"
        },
        "config": {
          "default": null,
          "description": "Path to style file understood by yapf (https://github.com/google/yapf#formatting-style/).\n\nSetting this option will disable `[yapf].config_discovery`. Use this option if the config is located in a non-standard location."
        },
        "config_discovery": {
          "default": true,
          "description": "If true, Pants will include any relevant config files during runs (`.style.yapf`, `pyproject.toml`, and `setup.cfg`).\n\nUse `[yapf].config` instead if your config is in a non-standard location.",
          "type": "boolean"
        },
        "console_script": {
          "default": "yapf",
          "description": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "entry_point": {
          "default": null,
          "description": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "type": "string"
        },
        "export": {
          "default": true,
          "description": "If true, export a virtual environment with yapf when running `./pants export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "type": "boolean"
        },
        "extra_requirements": {
          "default": ["toml"],
          "description": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "type": "array"
        },
        "interpreter_constraints": {
          "default": ["CPython>=3.7,<4"],
          "description": "Python interpreter constraints for this tool.",
          "type": "array"
        },
        "lockfile": {
          "default": "<default>",
          "description": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.14.0/src/python/pants/backend/python/lint/yapf/yapf.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds and supply-chain security.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=yapf`.\n\nAlternatively, you can set this option to the path to a custom lockfile using pip's requirements.txt-style, ideally with `--hash`. Set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "type": "string"
        },
        "skip": {
          "default": false,
          "description": "If true, don't use yapf when running `./pants fmt` and `./pants lint`.",
          "type": "boolean"
        },
        "version": {
          "default": "yapf==0.32.0",
          "description": "Requirement string for the tool.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "type": "object"
}
