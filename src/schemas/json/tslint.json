{
	"title": "JSON schema for the TSLint configuration files",
	"$schema": "http://json-schema.org/draft-04/schema#",

	"type": "object",
	"additionalProperties": true,

	"definitions": {
		"ruledefinitions": {
			"properties": {
				"adjacent-overload-signatures": {
					"description": "Enforces function overloads to be consecutive",
					"type": "boolean"
				},
				"align": {
					"description": "Enforces vertical alignment for parameters, arguments and/or statements",
					"type": [ "array" ],
					"items": {
						"enum": [ true, false, "parameters", "arguments", "statements", "members", "elements" ]
					}
				},
				"array-type": {
					"description": "Requires using either 'T[]' or 'Array<T>' for arrays",
					"type": [ "array" ],
					"items": {
						"enum": [ true, false, "array", "array-simple", "generic" ]
					}
				},
				"arrow-parens": {
					"description": "Requires parentheses around the parameters of arrow function definitions",
					"type": [ "boolean", "array" ],
					"items": {
						"enum": [ true, false, "ban-single-arg-parens" ]
					}
				},
				"arrow-return-shorthand": {
					"description": "Suggests to convert `() => { return x; }` to `() => x`.",
					"type": ["boolean", "array"],
					"items": {
						"enum": [ true, false, "multiline" ]
					}
				},
				"await-promise": {
					"description": "Warns for an awaited value that is not a Promise.",
					"type": [ "boolean", "array" ],
					"items": {
						"type": [ "boolean", "string"]
					}
				},
				"ban": {
					"description": "Bans the use of specific functions or global methods",
					"type": [ "boolean", "array" ],
					"items": {
						"type": [ "boolean", "array" ]
					}
				},
				"ban-types": {
					"description": "Bans specific types from being used. Does not ban the corresponding runtime objects from being used.",
					"type": [ "boolean", "array" ],
					"items": {
						"type": [ "boolean", "array"]
					}
				},
				"binary-expression-operand-order": {
					"description": "In a binary expression, a literal should always be on the right-hand side if possible. For example, prefer 'x + 1' over '1 + x'.",
					"type": "boolean"
				},
				"callable-types": {
					"description": "An interface or literal type with just a call signature can be written as a function type.",
					"type": "boolean"
				},
				"class-name": {
					"description": "Enforces PascalCased class and interface names",
					"type": "boolean"
				},
				"comment-format": {
					"description": "Enforces rules for single-line comments",
					"type": "array",
					"minItems": 1,
					"maxItems": 4,
					"items": {
						"anyOf": [
							{
								"type": [ "boolean", "string" ],
								"enum": [ true, false, "check-space", "check-lowercase", "check-uppercase" ]
							},
							{
								"type": "object",
								"minProperties": 1,
								"maxProperties": 1,
								"additionalProperties": false,
								"properties": {
									"ignore-words": {
										"description": "Words that will be ignored at the beginning of comment",
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"ignore-pattern": {
										"description": "RegExp pattern that will be ignored at the beginning of comment",
										"type": "string"
									}
								}
							}
						]
					}
				},
				"completed-docs": {
					"description": "Enforces documentation for important items be filled out",
					"type": "array",
					"items": {
						"enum": [
							true,
							false,
							"classes",
							"enums",
							"enum-members",
							"functions",
							"interfaces",
							"methods",
							"namespaces",
							"properties",
							"types",
							"variables"
						]
					}
				},
				"curly": {
					"description": "Enforces braces for if/for/do/while statements",
					"type": [ "boolean", "array" ],
					"items": {
						"enum": [ true, false, "ignore-same-line", "as-needed" ]
					}
				},
				"cyclomatic-complexity": {
					"description": "Enforces a threshold of cyclomatic complexity",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"deprecation": {
					"description": "Warns when deprecated APIs are used.",
					"type": "boolean"
				},
				"encoding": {
					"description": "Enforces UTF-8 file encoding.",
					"type": "boolean"
				},
				"eofline": {
					"description": "Enforces the file to end with a newline",
					"type": "boolean"
				},
				"file-header": {
					"description": "Enforces a certain header comment for all files, matched by a regular expression",
					"type": "array",
					"items": {
						"type": [ "boolean", "string" ]
					}
				},
				"forin": {
					"description": "Enforces a for...in statement to be filtered with an if statement",
					"type": "boolean"
				},
				"import-blacklist": {
					"definition": "Disallows importing the specified modules directly via import and require.",
					"type": [ "boolean", "array" ],
					"items": {
						"type": [ "boolean", "string" ]
					}
				},
				"import-spacing": {
					"definition": "Ensures proper spacing between import statement keywords.",
					"type": "boolean"
				},
				"indent": {
					"description": "Enforces consistent indentation levels",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer", "string" ]
					}
				},
				"interface-name": {
					"description": "Enforces the rule that interface names must or must not begin with a capital 'I'",
					"type": "array",
					"items": {
						"enum": [ true, false, "always-prefix", "never-prefix" ]
					}
				},
				"interface-over-type-literal": {
					"description": "Prefer an interface declaration over a type literal (`type T = { ... }`)",
					"type": "boolean"
				},
				"jsdoc-format": {
					"description": "Enforces basic format rules for jsdoc comments",
					"type": "boolean"
				},
				"label-position": {
					"description": "Enforces labels only on sensible statements",
					"type": "boolean"
				},
				"linebreak-style": {
					"description": "Enforces a consistent linebreak style.",
					"type": "array",
					"items": {
						"enum": [ true, false, "CRLF", "LF" ]
					}
				},
				"match-default-export-name": {
					"description": "Requires that a default import have the same name as the declaration it imports. Does nothing for anonymous default exports.",
					"type": "boolean"
				},
				"max-classes-per-file": {
					"description": "A file may not contain more than the specified number of classes",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"max-file-line-count": {
					"description": "Requires files to remain under a certain number of lines",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"max-line-length": {
					"description": "Sets the maximum length of a line",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"member-access": {
					"description": "Enforces using explicit visibility on class members",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "check-accessor", "check-constructor", "no-public" ]
					}
				},
				"member-ordering": {
					"description": "Enforces chosen member ordering",
					"type": "array",
					"items": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"order": {
									"oneOf": [
										{
											"type": "string",
											"enum": [
												"fields-first",
												"instance-sandwich",
												"statics-first"
											]
										},
										{
											"type": "array",
											"items": {
												"oneOf": [
													{
														"type": "string",
														"enum": [
															"static-field",
															"public-static-field",
															"private-static-field",
															"protected-static-field",
															"static-method",
															"private-static-method",
															"public-static-method",
															"protected-static-method",
															"instance-field",
															"public-instance-field",
															"protected-instance-field",
															"private-instance-field",
															"constructor",
															"public-constructor",
															"protected-constructor",
															"private-constructor",
															"instance-method",
															"public-instance-method",
															"protected-instance-method",
															"private-instance-method"
														]
													},
													{
														"type": "object",
														"properties": {
															"name": {
																"type": "string"
															},
															"kinds": {
																"type": "array",
																"items": {
																	"type": "string",
																	"enum": [
																		"static-field",
																		"public-static-field",
																		"private-static-field",
																		"protected-static-field",
																		"static-method",
																		"private-static-method",
																		"public-static-method",
																		"protected-static-method",
																		"instance-field",
																		"public-instance-field",
																		"protected-instance-field",
																		"private-instance-field",
																		"constructor",
																		"public-constructor",
																		"protected-constructor",
																		"private-constructor",
																		"instance-method",
																		"public-instance-method",
																		"protected-instance-method",
																		"private-instance-method"
																	]
																},
																"maxLength": 15
															}
														},
														"additionalProperties": false
													}
												]
											},
											"maxLength": 15
										}
									]
								}
							},
							"additionalProperties": false
						}
					]
				},
				"newline-before-return": {
					"description": "Enforces blank line before return when not the only line in the block.",
					"type": "boolean"
				},
				"new-parens": {
					"description": "Requires parentheses when invoking a constructor via the `new` keyword",
					"type": "boolean"
				},
				"no-angle-bracket-type-assertion": {
					"description": "Requires the use of `as Type` for type assertions instead of `<Type>`",
					"type": "boolean"
				},
				"no-any": {
					"description": "Disallows usages of any as a type decoration",
					"type": "boolean"
				},
				"no-arg": {
					"description": "Disallows access to arguments.callee",
					"type": "boolean"
				},
				"no-bitwise": {
					"description": "Disallows bitwise operators",
					"type": "boolean"
				},
				"no-boolean-literal-compare": {
					"description": "Warns on comparison to a boolean literal, as in `x === true`.",
					"type": "boolean"
				},
				"no-conditional-assignment": {
					"description": "Disallows any type of assignment in any conditionals; this applies to do-while, for, if, and while statements",
					"type": "boolean"
				},
				"no-consecutive-blank-lines": {
					"description": "Disallows one or more blank lines in a row",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "array",
							"items": {
								"type": [ "boolean", "integer" ]
							}
						}
					]
				},
				"no-console": {
					"description": "Disallows access to the specified functions on console",
					"type": "array",
					"items": {
						"type": ["boolean", "string"]
					}
				},
				"no-construct": {
					"description": "Disallows access to the constructors of String, Number and Boolean",
					"type": "boolean"
				},
				"no-debugger": {
					"description": "Disallows debugger statements",
					"type": "boolean"
				},
				"no-default-export": {
					"description": "Disallows default exports in ES6-style modules",
					"type": "boolean"
				},
				"no-duplicate-imports": {
					"definition": "Disallows multiple import statements from the same module.",
					"type": "boolean"
				},
				"no-duplicate-super": {
					"description": "Warns if 'super()' appears twice in a constructor.",
					"type": "boolean"
				},
				"no-duplicate-variable": {
					"description": "Disallows duplicate variable declarations in the same block scope",
					"type": "boolean"
				},
				"no-empty": {
					"description": "Disallows empty blocks",
					"type": "boolean"
				},
				"no-empty-interface": {
					"description": "Forbids empty interfaces.",
					"type": "boolean"
				},
				"no-eval": {
					"description": "Disallows `eval` function invocations",
					"type": "boolean"
				},
				"no-import-side-effect": {
					"description": "Avoid import statements with side-effect.",
					"type": [ "boolean", "array"],
					"items": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"ignore-module": {
									"type": "string"
								}
							},
							"additionalProperties": false
						}
					]
				},
				"no-floating-promises": {
					"description": "Promises returned by functions must be handled appropriately.",
					"type": "boolean"
				},
				"no-for-in-array": {
					"description": "Disallows iterating over an array with a for-in loop",
					"type": "boolean"
				},
				"no-inferrable-types": {
					"description": "Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "array",
							"items": {
								"enum": [ true, false, "ignore-params", "ignore-properties" ]
							}
						}
					]
				},
				"no-inferred-empty-object-type": {
					"description": "Disallow type inference of {} (empty object type) at function and constructor call sites",
					"type": "boolean"
				},
				"no-internal-module": {
					"description": "Disallows internal module, use namespace instead",
					"type": "boolean"
				},
				"no-invalid-template-strings": {
					"description": "Warns on use of `${` in non-template strings.",
					"type": "boolean"
				},
				"no-invalid-this": {
					"description": "Disallows using the `this` keyword outside of classes",
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "check-function-in-method" ]
					}
				},
				"no-irregular-whitespace": {
					"description": "Disallow irregular whitespace outside of strings and comments",
					"type": "boolean"
				},
				"no-magic-numbers": {
					"description": "Disallows the use constant number values outside of variable assignments. When no list of allowed values is specified, -1, 0 and 1 are allowed by default.",
					"type": "array",
					"items": {
						"type": ["boolean", "number"]
					}
				},
				"no-mergeable-namespace": {
					"description": "Disallows mergeable namespaces in the same file",
					"type": "boolean"
				},
				"no-misused-new": {
					"description": "Warns on apparent attempts to define constructors for interfaces or `new` for classes.",
					"type": "boolean"
				},
				"no-namespace": {
					"description": "Disallows use of internal `module`s and `namespace`s",
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "allow-declarations" ]
					}
				},
				"no-non-null-assertion": {
					"description": "Disallows non-null assertions.",
					"type": "boolean"
				},
				"no-null-keyword": {
					"description": "Disallows use of the `null` keyword literal",
					"type": "boolean"
				},
				"no-object-literal-type-assertion": {
					"description": "Forbids an object literal to appear in a type assertion expression. Casting to `any` is still allowed.",
					"type": "boolean"
				},
				"no-parameter-properties": {
					"description": "Disallows parameter properties in class constructors",
					"type": "boolean"
				},
				"no-parameter-reassignment": {
					"definition": "Disallows reassigning parameters.",
					"type": "boolean"
				},
				"no-reference": {
					"description": "Disallows `/// <reference path=>` imports (use ES6-style imports instead)",
					"type": "boolean"
				},
				"no-reference-import": {
					"description": "Don't `<reference types=\"foo\" />` if you import `foo` anyway.",
					"type": "boolean"
				},
				"no-require-imports": {
					"description": "Disallows require() style imports",
					"type": "boolean"
				},
				"no-shadowed-variable": {
					"description": "Disallows shadowing variable declarations",
					"type": "boolean"
				},
				"no-sparse-arrays": {
					"description": "Forbids array literals to contain missing elements.",
					"type": "boolean"
				},
				"no-string-literal": {
					"description": "Disallows object access via string literals",
					"type": "boolean"
				},
				"no-string-throw": {
					"description": "Flags throwing plain strings or concatenations of strings because only Errors produce proper stack traces.",
					"type": "boolean"
				},
				"no-submodule-imports": {
					"description": "Disallows importing any submodule.",
					"type": "boolean"
				},
				"no-switch-case-fall-through": {
					"description": "Disallows falling through case statements",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"class": {"type": "boolean"},
								"enum": {"type": "boolean"},
								"function": {"type": "boolean"},
								"import": {"type": "boolean"},
								"interface": {"type": "boolean"},
								"namespace": {"type": "boolean"},
								"typeAlias": {"type": "boolean"},
								"typeParameter": {"type": "boolean"}
							}
						}
					]
				},
				"no-this-assignment": {
					"description": "Disallows unnecessary references to this.",
					"type": [ "boolean", "array"],
					"items": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"allow-destructuring": {
									"type": "boolean"
								},
								"allowed-names": {
									"type": "string"
								}
							},
							"additionalProperties": false
						}
					]
				},
				"no-trailing-whitespace": {
					"description": "Disallows trailing whitespace at the end of a line",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "ignore-comments", "ignore-jsdoc", "ignore-template-strings" ]
					}
				},
				"no-unbound-method": {
					"description": "Warns when a method is used as outside of a method call.",
					"type": "boolean"
				},
				"no-unnecessary-callback-wrapper": {
					"description": "Replaces `x => f(x)` with just `f` To catch more cases, enable `only-arrow-functions` and `arrow-return-shorthand` too.",
					"type": "boolean"
				},
				"no-unnecessary-initializer": {
					"description": "Forbids a 'var'/'let' statement or destructuring initializer to be initialized to 'undefined'.",
					"type": "boolean"
				},
				"no-unnecessary-qualifier": {
					"description": "Warns when a namespace qualifier (`A.x`) is unnecessary.",
					"type": "boolean"
				},
				"no-unnecessary-type-assertion": {
					"description": "Warns if a type assertion does not change the type of an expression.",
					"type": "boolean"
				},
				"no-unsafe-any": {
					"description": "Warns when using an expression of type 'any' in a dynamic way. Uses are only allowed if they would work for `{} | null | undefined`. Type casts and tests are allowed. Expressions that work on all values (such as `\"\" + x`) are allowed.",
					"type": "boolean"
				},
				"no-unsafe-finally": {
					"description": "Disallows control flow statements, such as `return`, `continue`, `break` and `throws` in finally blocks",
					"type": "boolean"
				},
				"no-unused-expression": {
					"description": "Disallows unused expression statements",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "allow-fast-null-checks", "allow-new", "allow-tagged-template" ]
					}
				},
				"no-unused-new": {
					"description": "Disallows unused 'new' expression statements",
					"type": "boolean"
				},
				"no-unused-variable": {
					"description": "Disallows unused imports, variables, functions and private class members",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string", "object" ]
					}
				},
				"no-use-before-declare": {
					"description": "Disallows usage of variables before their declaration",
					"type": "boolean"
				},
				"no-var-keyword": {
					"description": "Disallows usage of the var keyword, use let or const instead",
					"type": "boolean"
				},
				"no-var-requires": {
					"description": "Disallows the use of require statements except in import statements",
					"type": "boolean"
				},
				"no-void-expression": {
					"description": "Requires expressions of type `void` to appear in statement position.",
					"type": "boolean"
				},
				"number-literal-format": {
					"description": "Checks that decimal literals should begin with '0.' instead of just '.', and should not end with a trailing '0'.",
					"type": "boolean"
				},
				"object-literal-key-quotes": {
					"description": "Enforces consistent object literal property quote style",
					"type": "array",
					"items": {
						"enum": [ true, false, "always", "as-needed", "consistent", "consistent-as-needed" ]
					}
				},
				"object-literal-shorthand": {
					"description": "Enforces use of ES6 object literal shorthand when possible",
					"type": "boolean"
				},
				"object-literal-sort-keys": {
					"description": "Requires keys in object literals to be sorted alphabetically",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "ignore-case" ]
					}
				},
				"one-line": {
					"description": "Enforces the specified tokens to be on the same line as the expression preceding it",
					"type": "array",
					"items": {
						"enum": [ true, false, "check-open-brace", "check-catch", "check-finally", "check-else", "check-whitespace" ]
					}
				},
				"one-variable-per-declaration": {
					"description": "Disallows multiple variable definitions in the same declaration statement",
					"type": "array",
					"items": {
						"enum": [ true, false, "ignore-for-loop" ]
					}
				},
				"only-arrow-functions": {
					"description": "Disallows traditional (non-arrow) function expressions",
					"type": "array",
					"items": {
						"enum": [ true, false, "allow-declarations", "allow-named-functions" ]
					}
				},
				"ordered-imports": {
					"description": "Requires that import statements be alphabetized",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "array",
							"items": {
								"allOf": [
									{
										"type": "boolean"
									},
									{
										"type": "object",
										"properties": {
											"import-sources-order": {
												"type": "string",
												"enum": [
													"case-insensitive",
													"lowercase-first",
													"lowercase-last",
													"any"
												]
											},
											"named-imports-order": {
												"type": "string",
												"enum": [
													"case-insensitive",
													"lowercase-first",
													"lowercase-last",
													"any"
												]
											}
										},
										"additionalProperties": false
									}
								]
							}
						}
					]
				},
				"prefer-conditional-expression": {
					"description": "Recommends to use a conditional expression instead of assigning to the same thing in each branch of an if statement.",
					"type": [ "boolean", "array" ],
					"items": {
						"enum": [ true, false, "check-else-if" ]
					}
				},
				"prefer-const": {
					"description": "Requires that variable declarations use `const` instead of `let` and `var` if possible.",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "array",
							"items": {
								"allOf": [
									{
										"type": "boolean"
									},
									{
										"type": "object",
										"properties": {
											"destructuring": {
												"type": "string",
												"enum": [ "any", "all" ]
											}
										},
										"additionalProperties": false
									}
								]
							}
						}
					]
				},
				"prefer-for-of": {
					"description": "Recommends a 'for-of' loop over a standard 'for' loop if the index is only used to access the array being iterated",
					"type": "boolean"
				},
				"prefer-function-over-method": {
					"description": "Warns for class methods that do not use 'this'.",
					"type": [ "boolean", "array"],
					"items": {
						"enum": [ true, false, "allow-public", "allow-protected" ]
					}
				},
				"prefer-method-signature": {
					"description": "Prefer `foo(): void` over `foo: () => void` in interfaces and types.",
					"type": "boolean"
				},
				"prefer-object-spread": {
					"description": "Enforces the use of the ES2015 object spread operator over `Object.assign()` where appropriate.",
					"type": "boolean"
				},
				"prefer-switch": {
					"description": "Prefer a `switch` statement to an `if` statement with simple `===` comparisons.",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "array",
							"items": {
								"allOf": [
									{
										"type": "boolean"
									},
									{
										"type": "object",
										"properties": {
											"min-cases": {
												"type": "number"
											}
										},
										"additionalProperties": false
									}
								]
							}
						}
					]
				},
				"prefer-template": {
					"description": "Prefer a template expression over string literal concatenation.",
					"type": [ "boolean", "array"],
					"items": {
						"enum": [ true, false, "allow-single-concat" ]
					}
				},
				"promise-function-async": {
					"description": "Requires any function or method that returns a promise to be marked async.",
					"type": "boolean"
				},
				"quotemark": {
					"description": "Enforces consistent single or double quoted string literals",
					"type": "array",
					"items": {
						"enum": [ true, false, "double", "single", "jsx-double", "jsx-single", "avoid-template", "avoid-escape" ]
					}
				},
				"radix": {
					"description": "Enforces the radix parameter of parseInt",
					"type": "boolean"
				},
				"restrict-plus-operands": {
					"description": "When adding two variables, operands must both be of type number or of type string",
					"type": "boolean"
				},
				"return-undefined": {
					"description": "Prefer `return;` in void functions and `return undefined;` in value-returning functions.",
					"type": "boolean"
				},
				"semicolon": {
					"description": "Enforces semicolons at the end of every statement",
					"type": "array",
					"items": {
						"enum": [ true, false, "always", "never", "ignore-bound-class-methods", "ignore-interfaces" ]
					}
				},
				"space-before-function-paren": {
					"description": "Require or disallow a space before function parenthesis.",
					"type": [ "boolean", "array" ],
					"items": [
						{
							"type": "boolean"
						},
						{
							"type": "string",
							"enum": [ "always", "never" ]
						},
						{
							"type": "object",
							"properties": {
								"anonymous": {
									"type": "string",
									"enum": [ "always", "never" ]
								},
								"asyncArrow": {
									"type": "string",
									"enum": [ "always", "never" ]
								},
								"constructor": {
									"type": "string",
									"enum": [ "always", "never" ]
								},
								"method": {
									"type": "string",
									"enum": [ "always", "never" ]
								},
								"named": {
									"type": "string",
									"enum": [ "always", "never" ]
								}
							},
							"additionalProperties": false
						}
					]
				},
				"space-within-parens": {
					"description": "Enforces spaces within parentheses or disallow them.",
					"type": [ "boolean", "array" ],
					"items": {
						"type": [ "boolean", "number" ]
					}
				},
				"strict-boolean-expressions": {
					"description": "Restricts the types allowed in boolean expressions. By default only booleans are allowed.",
					"type": [ "boolean", "array" ],
					"items": {
						"enum": [
							true,
							false,
							"allow-null-union",
							"allow-undefined-union",
							"allow-string",
							"allow-number",
							"allow-boolean-or-undefined"
						]
					},
					"minLength": 0,
					"maxLength": 5
				},
				"strict-type-predicates": {
					"description": "Warns for type predicates that are always true or always false.",
					"type": "boolean"
				},
				"switch-default": {
					"description": "Enforces a default case in switch statements",
					"type": "boolean"
				},
				"switch-final-break": {
					"description": "Checks whether the final clause of a switch statement ends in 'break;'.",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "always" ]
					}
				},
				"trailing-comma": {
					"description": "Requires or disallows trailing commas in array and object literals, destructuring assignments, function and tuple typings, named imports and function parameters",
					"type": "array",
					"items": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"multiline": {
									"anyOf": [
										{
											"type": "string",
											"enum": [
												"always",
												"never"
											]
										},
										{
											"type": "object",
											"properties": {
												"arrays": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												},
												"exports": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												},
												"functions": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												},
												"imports": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												},
												"objects": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												},
												"typeLiterals": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												}
											}
										}
									]
								},
								"singleline": {
									"anyOf": [
										{
											"type": "string",
											"enum": [
												"always",
												"never"
											]
										},
										{
											"type": "object",
											"properties": {
												"arrays": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												},
												"exports": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												},
												"functions": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												},
												"imports": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												},
												"objects": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												},
												"typeLiterals": {
													"type": "string",
													"enum": [ "always", "never", "ignore" ]
												}
											}
										}
									]
								}
							},
							"additionalProperties": false
						}					]
				},
				"triple-equals": {
					"description": "Enforces === and !== in favor of == and !=",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "allow-null-check", "allow-undefined-check" ]
					}
				},
				"typedef": {
					"description": "Enforces type definitions to exist",
					"type": "array",
					"items": {
						"enum": [
							true,
							false,
							"call-signature",
							"arrow-call-signature",
							"parameter",
							"arrow-parameter",
							"property-declaration",
							"variable-declaration",
							"member-variable-declaration",
							"object-destructuring",
							"array-destructuring"
						]
					}
				},
				"typedef-whitespace": {
					"description": "Enforces spacing whitespace for type definitions",
					"type": "array",
					"items": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"call-signature": {
									"type": "string",
									"enum": [
										"nospace",
										"onespace",
										"space"
									]
								},
								"index-signature": {
									"type": "string",
									"enum": [
										"nospace",
										"onespace",
										"space"
									]
								},
								"parameter": {
									"type": "string",
									"enum": [
										"nospace",
										"onespace",
										"space"
									]
								},
								"property-declaration": {
									"type": "string",
									"enum": [
										"nospace",
										"onespace",
										"space"
									]
								},
								"variable-declaration": {
									"type": "string",
									"enum": [
										"nospace",
										"onespace",
										"space"
									]
								}
							},
							"additionalProperties": false
						},
						{
							"type": "object",
							"properties": {
								"call-signature": {
									"type": "string",
									"enum": [
										"nospace",
										"onespace",
										"space"
									]
								},
								"index-signature": {
									"type": "string",
									"enum": [
										"nospace",
										"onespace",
										"space"
									]
								},
								"parameter": {
									"type": "string",
									"enum": [
										"nospace",
										"onespace",
										"space"
									]
								},
								"property-declaration": {
									"type": "string",
									"enum": [
										"nospace",
										"onespace",
										"space"
									]
								},
								"variable-declaration": {
									"type": "string",
									"enum": [
										"nospace",
										"onespace",
										"space"
									]
								}
							},
							"additionalProperties": false
						}
					]
				},
				"type-literal-delimiter": {
					"description": "Checks that type literal members are separated by semicolons. Enforces a trailing semicolon for multiline type literals.",
					"type": "boolean"
				},

				"typeof-compare": {
					"description": "Makes sure result of `typeof` is compared to correct string values",
					"type": "boolean"
				},
				"unified-signatures": {
					"description": "Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter.",
					"type": "boolean"
				},
				"use-default-type-parameter": {
					"description": "Warns if an explicitly specified type argument is the default for that type parameter.",
					"type": "boolean"
				},

				"use-isnan": {
					"description": "Enforces use of the `isNaN()` function to check for NaN references instead of a comparison to the `NaN` constant",
					"type": "boolean"
				},
				"variable-name": {
					"description": "Allows only camelCased or UPPER_CASED variable names",
					"type": [ "array", "boolean" ],
					"items": {
						"enum": [ true, false, "check-format", "allow-leading-underscore", "allow-trailing-underscore", "allow-pascal-case", "allow-snake-case", "ban-keywords" ]
					}
				},
				"whitespace": {
					"description": "Enforces spacing whitespace",
					"type": "array",
					"items": {
						"enum": [ true, false, "check-branch", "check-decl", "check-operator", "check-module", "check-separator",
							"check-rest-spread", "check-type", "check-typecast", "check-type-operator", "check-preblock" ]
					}
				}
			},
			"type": "object"
		},
		"jsruledefinitions": {
			"properties": {
				"align": {
					"description": "Enforces vertical alignment for parameters, arguments and/or statements",
					"type": [ "array" ],
					"items": {
						"enum": [ true, false, "parameters", "arguments", "statements" ]
					}
				},
				"arrow-parens": {
					"description": "Requires parentheses around the parameters of arrow function definitions",
					"type": "boolean"
				},
				"arrow-return-shorthand": {
					"description": "Suggests to convert `() => { return x; }` to `() => x`.",
					"type": ["boolean", "array"],
					"items": {
						"enum": [ true, false, "multiline" ]
					}
				},
				"ban": {
					"description": "Bans the use of specific functions or global methods",
					"type": [ "boolean", "array" ],
					"items": {
						"type": [ "boolean", "array" ]
					}
				},
				"binary-expression-operand-order": {
					"description": "In a binary expression, a literal should always be on the right-hand side if possible. For example, prefer 'x + 1' over '1 + x'.",
					"type": "boolean"
				},
				"class-name": {
					"description": "Enforces PascalCased class and interface names",
					"type": "boolean"
				},
				"comment-format": {
					"description": "Enforces rules for single-line comments",
					"type": "array",
					"items": {
						"enum": [ true, false, "check-space", "check-lowercase", "check-uppercase" ]
					}
				},
				"completed-docs": {
					"description": "Enforces documentation for important items be filled out",
					"type": "array",
					"items": {
						"enum": [ true, false, "classes", "functions", "methods", "properties" ]
					}
				},
				"curly": {
					"description": "Enforces braces for if/for/do/while statements",
					"type": [ "boolean", "array" ],
					"items": {
						"enum": [ true, false, "ignore-same-line", "as-needed" ]
					}
				},
				"cyclomatic-complexity": {
					"description": "Enforces a threshold of cyclomatic complexity",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"deprecation": {
					"description": "Warns when deprecated APIs are used.",
					"type": "boolean"
				},
				"encoding": {
					"description": "Enforces UTF-8 file encoding.",
					"type": "boolean"
				},
				"eofline": {
					"description": "Enforces the file to end with a newline",
					"type": "boolean"
				},
				"import-blacklist": {
					"definition": "Disallows importing the specified modules directly via import and require.",
					"type": [ "boolean", "array" ],
					"items": {
						"type": [ "boolean", "string" ]
					}
				},
				"import-spacing": {
					"definition": "Ensures proper spacing between import statement keywords.",
					"type": "boolean"
				},
				"file-header": {
					"description": "Enforces a certain header comment for all files, matched by a regular expression",
					"type": "array",
					"items": {
						"type": [ "boolean", "string" ]
					}
				},
				"forin": {
					"description": "Enforces a for...in statement to be filtered with an if statement",
					"type": "boolean"
				},
				"indent": {
					"description": "Enforces consistent indentation levels",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer", "string" ]
					}
				},
				"jsdoc-format": {
					"description": "Enforces basic format rules for jsdoc comments",
					"type": "boolean"
				},
				"label-position": {
					"description": "Enforces labels only on sensible statements",
					"type": "boolean"
				},
				"linebreak-style": {
					"description": "Enforces a consistent linebreak styl",
					"type": "array",
					"items": {
						"enum": [ true, false, "CRLF", "LF" ]
					}
				},
				"max-classes-per-file": {
					"description": "A file may not contain more than the specified number of classes",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"max-file-line-count": {
					"description": "Requires files to remain under a certain number of lines",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"max-line-length": {
					"description": "Sets the maximum length of a line",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"member-ordering": {
					"description": "Enforces chosen member ordering",
					"type": "array",
					"items": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"order": {
									"oneOf": [
										{
											"type": "string",
											"enum": [
												"fields-first",
												"instance-sandwich",
												"statics-first"
											]
										},
										{
											"type": "array",
											"items": {
												"oneOf": [
													{
														"type": "string",
														"enum": [
															"static-field",
															"public-static-field",
															"private-static-field",
															"protected-static-field",
															"static-method",
															"private-static-method",
															"public-static-method",
															"protected-static-method",
															"instance-field",
															"public-instance-field",
															"protected-instance-field",
															"private-instance-field",
															"constructor",
															"public-constructor",
															"protected-constructor",
															"private-constructor",
															"instance-method",
															"public-instance-method",
															"protected-instance-method",
															"private-instance-method"
														]
													},
													{
														"type": "object",
														"properties": {
															"name": {
																"type": "string"
															},
															"kinds": {
																"type": "array",
																"items": {
																	"type": "string",
																	"enum": [
																		"static-field",
																		"public-static-field",
																		"private-static-field",
																		"protected-static-field",
																		"static-method",
																		"private-static-method",
																		"public-static-method",
																		"protected-static-method",
																		"instance-field",
																		"public-instance-field",
																		"protected-instance-field",
																		"private-instance-field",
																		"constructor",
																		"public-constructor",
																		"protected-constructor",
																		"private-constructor",
																		"instance-method",
																		"public-instance-method",
																		"protected-instance-method",
																		"private-instance-method"
																	]
																},
																"maxLength": 15
															}
														},
														"additionalProperties": false
													}
												]
											},
											"maxLength": 15
										}
									]
								}
							},
							"additionalProperties": false
						}
					]
				},
				"newline-before-return": {
					"description": "Enforces blank line before return when not the only line in the block.",
					"type": "boolean"
				},
				"new-parens": {
					"description": "Requires parentheses when invoking a constructor via the `new` keyword",
					"type": "boolean"
				},
				"no-arg": {
					"description": "Disallows access to arguments.callee",
					"type": "boolean"
				},
				"no-bitwise": {
					"description": "Disallows bitwise operators",
					"type": "boolean"
				},
				"no-conditional-assignment": {
					"description": "Disallows any type of assignment in any conditionals; this applies to do-while, for, if, and while statements",
					"type": "boolean"
				},
				"no-consecutive-blank-lines": {
					"description": "Disallows one or more blank lines in a row",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"no-console": {
					"description": "Disallows access to the specified functions on console",
					"type": "array",
					"items": {
						"enum": [
							true,
							false,
							"assert",
							"count",
							"debug",
							"dir",
							"dirxml",
							"error",
							"group",
							"groupCollapsed",
							"groupEnd",
							"info",
							"log",
							"profile",
							"profileEnd",
							"table",
							"time",
							"timeEnd",
							"timeStamp",
							"trace",
							"warn"
						]
					}
				},
				"no-construct": {
					"description": "Disallows access to the constructors of String, Number and Boolean",
					"type": "boolean"
				},
				"no-debugger": {
					"description": "Disallows debugger statements",
					"type": "boolean"
				},
				"no-default-export": {
					"description": "Disallows default exports in ES6-style modules",
					"type": "boolean"
				},
				"no-duplicate-imports": {
					"definition": "Disallows multiple import statements from the same module.",
					"type": "boolean"
				},
				"no-duplicate-super": {
					"description": "Warns if 'super()' appears twice in a constructor.",
					"type": "boolean"
				},
				"no-duplicate-variable": {
					"description": "Disallows duplicate variable declarations in the same block scope",
					"type": "boolean"
				},
				"no-empty": {
					"description": "Disallows empty blocks",
					"type": "boolean"
				},
				"no-eval": {
					"description": "Disallows `eval` function invocations",
					"type": "boolean"
				},
				"no-for-in-array": {
					"description": "Disallows iterating over an array with a for-in loop",
					"type": "boolean"
				},
				"no-import-side-effect": {
					"description": "Avoid import statements with side-effect.",
					"type": [ "boolean", "array"],
					"items": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"ignore-module": {
									"type": "string"
								}
							},
							"additionalProperties": false
						}
					]
				},
				"no-invalid-template-strings": {
					"description": "Warns on use of `${` in non-template strings.",
					"type": "boolean"
				},
				"no-invalid-this": {
					"description": "Disallows using the `this` keyword outside of classes",
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "check-function-in-method" ]
					}
				},
				"no-irregular-whitespace": {
					"description": "Disallow irregular whitespace outside of strings and comments",
					"type": "boolean"
				},
				"no-magic-numbers": {
					"description": "Disallows the use constant number values outside of variable assignments. When no list of allowed values is specified, -1, 0 and 1 are allowed by default.",
					"type": "array",
					"items": {
						"type": ["boolean", "number"]
					}
				},
				"no-null-keyword": {
					"description": "Disallows use of the `null` keyword literal",
					"type": "boolean"
				},
				"no-parameter-reassignment": {
					"definition": "Disallows reassigning parameters.",
					"type": "boolean"
				},
				"no-reference": {
					"description": "Disallows `/// <reference path=>` imports (use ES6-style imports instead)",
					"type": "boolean"
				},
				"no-require-imports": {
					"description": "Disallows require() style imports",
					"type": "boolean"
				},
				"no-shadowed-variable": {
					"description": "Disallows shadowing variable declarations",
					"type": "boolean"
				},
				"no-sparse-arrays": {
					"description": "Forbids array literals to contain missing elements.",
					"type": "boolean"
				},
				"no-string-literal": {
					"description": "Disallows object access via string literals",
					"type": "boolean"
				},
				"no-string-throw": {
					"description": "Flags throwing plain strings or concatenations of strings because only Errors produce proper stack traces.",
					"type": "boolean"
				},
				"no-submodule-imports": {
					"description": "Disallows importing any submodule.",
					"type": "boolean"
				},
				"no-switch-case-fall-through": {
					"description": "Disallows falling through case statements",
					"type": "boolean"
				},
				"no-trailing-whitespace": {
					"description": "Disallows trailing whitespace at the end of a line",
					"type": "boolean"
				},
				"no-unnecessary-callback-wrapper": {
					"description": "Replaces `x => f(x)` with just `f` To catch more cases, enable `only-arrow-functions` and `arrow-return-shorthand` too.",
					"type": "boolean"
				},
				"no-unnecessary-initializer": {
					"description": "Forbids a 'var'/'let' statement or destructuring initializer to be initialized to 'undefined'.",
					"type": "boolean"
				},
				"no-unsafe-finally": {
					"description": "Disallows control flow statements, such as `return`, `continue`, `break` and `throws` in finally blocks",
					"type": "boolean"
				},
				"no-unused-expression": {
					"description": "Disallows unused expression statements",
					"type": "boolean"
				},
				"no-use-before-declare": {
					"description": "Disallows usage of variables before their declaration",
					"type": "boolean"
				},
				"no-var-keyword": {
					"description": "Disallows usage of the var keyword, use let or const instead",
					"type": "boolean"
				},
				"no-void-expression": {
					"description": "Requires expressions of type `void` to appear in statement position.",
					"type": "boolean"
				},
				"number-literal-format": {
					"description": "Checks that decimal literals should begin with '0.' instead of just '.', and should not end with a trailing '0'.",
					"type": "boolean"
				},
				"object-literal-key-quotes": {
					"description": "Enforces consistent object literal property quote style",
					"type": "array",
					"items": {
						"enum": [ true, false, "always", "as-needed" ]
					}
				},
				"object-literal-shorthand": {
					"description": "Enforces use of ES6 object literal shorthand when possible",
					"type": "boolean"
				},
				"object-literal-sort-keys": {
					"description": "Requires keys in object literals to be sorted alphabetically",
					"type": "boolean"
				},
				"one-line": {
					"description": "Enforces the specified tokens to be on the same line as the expression preceding it",
					"type": "array",
					"items": {
						"enum": [ true, false, "check-open-brace", "check-catch", "check-finally", "check-else", "check-whitespace" ]
					}
				},
				"one-variable-per-declaration": {
					"description": "Disallows multiple variable definitions in the same declaration statement",
					"type": "array",
					"items": {
						"enum": [ true, false, "ignore-for-loop" ]
					}
				},
				"only-arrow-functions": {
					"description": "Disallows traditional (non-arrow) function expressions",
					"type": "array",
					"items": {
						"enum": [ true, false, "allow-declarations" ]
					}
				},
				"ordered-imports": {
					"description": "Requires that import statements be alphabetized",
					"type": "array",
					"items": {
						"type": [ "object", "boolean", "string" ]
					}
				},
				"prefer-conditional-expression": {
					"description": "Recommends to use a conditional expression instead of assigning to the same thing in each branch of an if statement.",
					"type": [ "boolean", "array" ],
					"items": {
						"enum": [ true, false, "check-else-if" ]
					}
				},
				"prefer-const": {
					"description": "Requires that variable declarations use `const` instead of `let` and `var` if possible.",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "array",
							"items": {
								"allOf": [
									{
										"type": "boolean"
									},
									{
										"type": "object",
										"properties": {
											"destructuring": {
												"type": "string",
												"enum": [ "any", "all" ]
											}
										},
										"additionalProperties": false
									}
								]
							}
						}
					]
				},
				"prefer-for-of": {
					"description": "Recommends a 'for-of' loop over a standard 'for' loop if the index is only used to access the array being iterated",
					"type": "boolean"
				},
				"prefer-function-over-method": {
					"description": "Warns for class methods that do not use 'this'.",
					"type": [ "boolean", "array"],
					"items": {
						"enum": [ true, false, "allow-public", "allow-protected" ]
					}
				},
				"prefer-method-signature": {
					"description": "Prefer `foo(): void` over `foo: () => void` in interfaces and types.",
					"type": "boolean"
				},
				"prefer-object-spread": {
					"description": "Enforces the use of the ES2015 object spread operator over `Object.assign()` where appropriate.",
					"type": "boolean"
				},
				"prefer-switch": {
					"description": "Prefer a `switch` statement to an `if` statement with simple `===` comparisons.",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "array",
							"items": {
								"allOf": [
									{
										"type": "boolean"
									},
									{
										"type": "object",
										"properties": {
											"min-cases": {
												"type": "number"
											}
										},
										"additionalProperties": false
									}
								]
							}
						}
					]
				},
				"prefer-template": {
					"description": "Prefer a template expression over string literal concatenation.",
					"type": [ "boolean", "array"],
					"items": {
						"enum": [ true, false, "allow-single-concat" ]
					}
				},
				"promise-function-async": {
					"description": "Requires any function or method that returns a promise to be marked async.",
					"type": "boolean"
				},
				"quotemark": {
					"description": "Enforces consistent single or double quoted string literals",
					"type": "array",
					"items": {
						"enum": [ true, false, "double", "single", "jsx-double", "jsx-single", "avoid-escape" ]
					}
				},
				"radix": {
					"description": "Enforces the radix parameter of parseInt",
					"type": "boolean"
				},
				"restrict-plus-operands": {
					"description": "When adding two variables, operands must both be of type number or of type string",
					"type": "boolean"
				},
				"return-undefined": {
					"description": "Prefer `return;` in void functions and `return undefined;` in value-returning functions.",
					"type": "boolean"
				},
				"semicolon": {
					"description": "Enforces semicolons at the end of every statement",
					"type": "array",
					"items": {
						"enum": [ true, false, "always", "never", "ignore-bound-class-methods", "ignore-interfaces" ]
					}
				},
				"space-before-function-paren": {
					"description": "Require or disallow a space before function parenthesis.",
					"type": [ "boolean", "array" ],
					"items": [
						{
							"type": "boolean"
						},
						{
							"type": "string",
							"enum": [ "always", "never" ]
						},
						{
							"type": "object",
							"properties": {
								"anonymous": {
									"type": "string",
									"enum": [ "always", "never" ]
								},
								"asyncArrow": {
									"type": "string",
									"enum": [ "always", "never" ]
								},
								"constructor": {
									"type": "string",
									"enum": [ "always", "never" ]
								},
								"method": {
									"type": "string",
									"enum": [ "always", "never" ]
								},
								"named": {
									"type": "string",
									"enum": [ "always", "never" ]
								}
							},
							"additionalProperties": false
						}
					]
				},
				"space-within-parens": {
					"description": "Enforces spaces within parentheses or disallow them.",
					"type": [ "boolean", "array" ],
					"items": {
						"type": [ "boolean", "number" ]
					}
				},
				"switch-default": {
					"description": "Enforces a default case in switch statements",
					"type": "boolean"
				},
				"switch-final-break": {
					"description": "Checks whether the final clause of a switch statement ends in 'break;'.",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "always" ]
					}
				},
				"trailing-comma": {
					"description": "Requires or disallows trailing commas in array and object literals, destructuring assignments, function and tuple typings, named imports and function parameters",
					"type": "array",
					"items": {
						"type": [ "object", "boolean", "string" ]
					}
				},
				"triple-equals": {
					"description": "Enforces === and !== in favor of == and !=",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "allow-null-check", "allow-undefined-check" ]
					}
				},
				"typeof-compare": {
					"description": "Makes sure result of `typeof` is compared to correct string values",
					"type": "boolean"
				},
				"use-isnan": {
					"description": "Enforces use of the `isNaN()` function to check for NaN references instead of a comparison to the `NaN` constant",
					"type": "boolean"
				},
				"variable-name": {
					"description": "Allows only camelCased or UPPER_CASED variable names",
					"type": [ "array", "boolean" ],
					"items": {
						"enum": [ true, false, "check-format", "allow-leading-underscore", "allow-trailing-underscore", "allow-pascal-case", "ban-keywords" ]
					}
				},
				"whitespace": {
					"description": "Enforces spacing whitespace",
					"type": "array",
					"items": {
						"enum": [ true, false, "check-branch", "check-decl", "check-operator", "check-module", "check-separator", "check-type", "check-typecast" ]
					}
				}
			},
			"type": "object"
		}
	},

	"properties": {
		"rulesDirectory": {
			"description": "The directory where the codelytics rules live",
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"rules": {
			"$ref": "#/definitions/ruledefinitions"
		},
		"jsRules": {
			"$ref": "#/definitions/jsruledefinitions"
		},
		"extends": {
			"description": "Extend another configuration (built in config OR a node resolvable .json file) ",
			"type": [ "array", "string" ],
			"items": {
				"type": "string"
			}
		},
		"defaultSeverity": {
			"type": "string",
			"enum": [ "error", "warning", "off" ],
			"default": "error"
		}
	}
}
