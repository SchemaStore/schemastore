{
	"title": "JSON schema for the TSLint configuration files",
	"$schema": "http://json-schema.org/draft-04/schema#",

	"type": "object",
	"additionalProperties": true,

	"definitions": {
		"ruledefinitions": {
			"properties": {
				"adjacent-overload-signatures": {
					"description": "Enforces function overloads to be consecutive",
					"type": "boolean"
				},
				"align": {
					"description": "Enforces vertical alignment for parameters, arguments and/or statements",
					"type": [ "array" ],
					"items": {
						"enum": [ true, false, "parameters", "arguments", "statements" ]
					}
				},
				"array-type": {
					"description": "Requires using either 'T[]' or 'Array<T>' for arrays",
					"type": [ "array" ],
					"items": {
						"enum": [ true, false, "array", "array-simple", "generic" ]
					}
				},
				"arrow-parens": {
					"description": "Requires parentheses around the parameters of arrow function definitions",
					"type": [ "boolean", "array" ],
					"items": {
						"enum": [ true, false, "ban-single-arg-parens" ]
					}
				},
				"ban": {
					"description": "Bans the use of specific functions or global methods",
					"type": [ "boolean", "array" ],
					"items": {
						"type": [ "boolean", "array" ]
					}
				},
				"class-name": {
					"description": "Enforces PascalCased class and interface names",
					"type": "boolean"
				},
				"comment-format": {
					"description": "Enforces rules for single-line comments",
					"type": "array",
					"minItems": 1,
					"maxItems": 4,
					"items": {
						"anyOf": [
							{
								"type": [ "boolean", "string" ],
								"enum": [ true, false, "check-space", "check-lowercase", "check-uppercase" ]
							},
							{
								"type": "object",
								"minProperties": 1,
								"maxProperties": 1,
								"additionalProperties": false,
								"properties": {
									"ignore-words": {
										"description": "Words that will be ignored at the beginning of comment",
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"ignore-pattern": {
										"description": "RegExp pattern that will be ignored at the beginning of comment",
										"type": "string"
									}
								}
							}
						]
					}
				},
				"completed-docs": {
					"description": "Enforces documentation for important items be filled out",
					"type": "array",
					"items": {
						"enum": [ true, false, "classes", "functions", "methods", "properties" ]
					}
				},
				"component-class-suffix": {
					"description": "Enforces all components having the suffix of 'Component'",
					"type": "boolean"
				},
				"component-selector-name": {
					"description": "Enforces naming conventions for components",
					"type": "array",
					"items": {
						"enum": [ true, false, "camelCase", "kebab-case" ]
					}
				},
				"component-selector-prefix": {
					"description": "Enforces all components to have a uniform prefix",
					"type": "array",
					"items": {
						"type": [ "boolean", "string" ]
					}
				},
				"component-selector-type": {
					"description": "Enforces the type of a component",
					"type": "array",
					"items": {
						"enum": [ true, false, "attribute", "element" ]
					}
				},
				"curly": {
					"description": "Enforces braces for if/for/do/while statements",
					"type": "boolean"
				},
				"cyclomatic-complexity": {
					"description": "Enforces a threshold of cyclomatic complexity",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"directive-class-suffix": {
					"description": "Enforces all components having the suffix of 'Directive'",
					"type": "boolean"
				},
				"directive-selector-name": {
					"description": "Enforces naming conventions for directives",
					"type": "array",
					"items": {
						"enum": [ true, false, "camelCase", "kebab-case" ]
					}
				},
				"directive-selector-prefix": {
					"description": "Enforces all directives to have a uniform prefix",
					"type": "array",
					"items": {
						"type": [ "boolean", "string" ]
					}
				},
				"directive-selector-type": {
					"description": "Enforces the type of a directive",
					"type": "array",
					"items": {
						"enum": [ true, false, "attribute", "element" ]
					}
				},
				"eofline": {
					"description": "Enforces the file to end with a newline",
					"type": "boolean"
				},
				"file-header": {
					"description": "Enforces a certain header comment for all files, matched by a regular expression",
					"type": "array",
					"items": {
						"type": [ "boolean", "string" ]
					}
				},
				"forin": {
					"description": "Enforces a for...in statement to be filtered with an if statement",
					"type": "boolean"
				},
				"indent": {
					"description": "Enforces consistent indentation levels",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer", "string" ]
					}
				},
				"interface-name": {
					"description": "Enforces the rule that interface names must or must not begin with a capital 'I'",
					"type": "array",
					"items": {
						"enum": [ true, false, "always-prefix", "never-prefix" ]
					}
				},
				"jsdoc-format": {
					"description": "Enforces basic format rules for jsdoc comments",
					"type": "boolean"
				},
				"label-position": {
					"description": "Enforces labels only on sensible statements",
					"type": "boolean"
				},
				"linebreak-style": {
					"description": "Enforces a consistent linebreak styl",
					"type": "array",
					"items": {
						"enum": [ true, false, "CRLF", "LF" ]
					}
				},
				"max-classes-per-file": {
					"description": "A file may not contain more than the specified number of classes",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"max-file-line-count": {
					"description": "Requires files to remain under a certain number of lines",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"max-line-length": {
					"description": "Sets the maximum length of a line",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"member-access": {
					"description": "Enforces using explicit visibility on class members",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "check-accessor", "check-constructor" ]
					}
				},
				"member-ordering": {
					"description": "Enforces chosen member ordering",
					"type": "array",
					"items": {
						"type": [ "object", "boolean", "string" ]
					}
				},
				"new-parens": {
					"description": "Requires parentheses when invoking a constructor via the `new` keyword",
					"type": "boolean"
				},
				"no-angle-bracket-type-assertion": {
					"description": "Requires the use of `as Type` for type assertions instead of `<Type>`",
					"type": "boolean"
				},
				"no-any": {
					"description": "Disallows usages of any as a type decoration",
					"type": "boolean"
				},
				"no-arg": {
					"description": "Disallows access to arguments.callee",
					"type": "boolean"
				},
				"no-bitwise": {
					"description": "Disallows bitwise operators",
					"type": "boolean"
				},
				"no-conditional-assignment": {
					"description": "Disallows any type of assignment in any conditionals; this applies to do-while, for, if, and while statements",
					"type": "boolean"
				},
				"no-consecutive-blank-lines": {
					"description": "Disallows one or more blank lines in a row",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"no-console": {
					"description": "Disallows access to the specified functions on console",
					"type": "array",
					"items": {
						"enum": [
							true,
							false,
							"assert",
							"count",
							"debug",
							"dir",
							"dirxml",
							"error",
							"group",
							"groupCollapsed",
							"groupEnd",
							"info",
							"log",
							"profile",
							"profileEnd",
							"table",
							"time",
							"timeEnd",
							"timeStamp",
							"trace",
							"warn"
						]
					}
				},
				"no-construct": {
					"description": "Disallows access to the constructors of String, Number and Boolean",
					"type": "boolean"
				},
				"no-debugger": {
					"description": "Disallows debugger statements",
					"type": "boolean"
				},
				"no-default-export": {
					"description": "Disallows default exports in ES6-style modules",
					"type": "boolean"
				},
				"no-duplicate-variable": {
					"description": "Disallows duplicate variable declarations in the same block scope",
					"type": "boolean"
				},
				"no-empty": {
					"description": "Disallows empty blocks",
					"type": "boolean"
				},
				"no-eval": {
					"description": "Disallows `eval` function invocations",
					"type": "boolean"
				},
				"no-for-in-array": {
					"description": "Disallows iterating over an array with a for-in loop",
					"type": "boolean"
				},
				"no-inferrable-types": {
					"description": "Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean",
					"type": "array",
					"items": {
						"enum": [ true, false, "ignore-params" ]
					}
				},
				"no-internal-module": {
					"description": "Disallows internal module, use namespace instead",
					"type": "boolean"
				},
				"no-invalid-this": {
					"description": "Disallows using the `this` keyword outside of classes",
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "check-function-in-method" ]
					}
				},
				"no-mergeable-namespace": {
					"description": "Disallows mergeable namespaces in the same file",
					"type": "boolean"
				},
				"no-namespace": {
					"description": "Disallows use of internal `module`s and `namespace`s",
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "allow-declarations" ]
					}
				},
				"no-null-keyword": {
					"description": "Disallows use of the `null` keyword literal",
					"type": "boolean"
				},
				"no-parameter-properties": {
					"description": "Disallows parameter properties in class constructors",
					"type": "boolean"
				},
				"no-reference": {
					"description": "Disallows `/// <reference path=>` imports (use ES6-style imports instead)",
					"type": "boolean"
				},
				"no-require-imports": {
					"description": "Disallows require() style imports",
					"type": "boolean"
				},
				"no-shadowed-variable": {
					"description": "Disallows shadowing variable declarations",
					"type": "boolean"
				},
				"no-string-literal": {
					"description": "Disallows object access via string literals",
					"type": "boolean"
				},
				"no-switch-case-fall-through": {
					"description": "Disallows falling through case statements",
					"type": "boolean"
				},
				"no-trailing-whitespace": {
					"description": "Disallows trailing whitespace at the end of a line",
					"type": "boolean"
				},
				"no-unsafe-finally": {
					"description": "Disallows control flow statements, such as `return`, `continue`, `break` and `throws` in finally blocks",
					"type": "boolean"
				},
				"no-unused-expression": {
					"description": "Disallows unused expression statements",
					"type": "boolean"
				},
				"no-unused-new": {
					"description": "Disallows unused 'new' expression statements",
					"type": "boolean"
				},
				"no-unused-variable": {
					"description": "Disallows unused imports, variables, functions and private class members",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string", "object" ]
					}
				},
				"no-use-before-declare": {
					"description": "Disallows usage of variables before their declaration",
					"type": "boolean"
				},
				"no-var-keyword": {
					"description": "Disallows usage of the var keyword, use let or const instead",
					"type": "boolean"
				},
				"no-var-requires": {
					"description": "Disallows the use of require statements except in import statements",
					"type": "boolean"
				},
				"object-literal-key-quotes": {
					"description": "Enforces consistent object literal property quote style",
					"type": "array",
					"items": {
						"enum": [ true, false, "always", "as-needed", "consistent", "consistent-as-needed" ]
					}
				},
				"object-literal-shorthand": {
					"description": "Enforces use of ES6 object literal shorthand when possible",
					"type": "boolean"
				},
				"object-literal-sort-keys": {
					"description": "Requires keys in object literals to be sorted alphabetically",
					"type": "boolean"
				},
				"one-line": {
					"description": "Enforces the specified tokens to be on the same line as the expression preceding it",
					"type": "array",
					"items": {
						"enum": [ true, false, "check-open-brace", "check-catch", "check-finally", "check-else", "check-whitespace" ]
					}
				},
				"one-variable-per-declaration": {
					"description": "Disallows multiple variable definitions in the same declaration statement",
					"type": "array",
					"items": {
						"enum": [ true, false, "ignore-for-loop" ]
					}
				},
				"only-arrow-functions": {
					"description": "Disallows traditional (non-arrow) function expressions",
					"type": "array",
					"items": {
						"enum": [ true, false, "allow-declarations", "allow-named-functions" ]
					}
				},
				"ordered-imports": {
					"description": "Requires that import statements be alphabetized",
					"type": "array",
					"items": {
						"type": [ "object", "boolean", "string" ]
					}
				},
				"prefer-for-of": {
					"description": "Recommends a 'for-of' loop over a standard 'for' loop if the index is only used to access the array being iterated",
					"type": "boolean"
				},
				"quotemark": {
					"description": "Enforces consistent single or double quoted string literals",
					"type": "array",
					"items": {
						"enum": [ true, false, "double", "single", "jsx-double", "jsx-single", "avoid-escape" ]
					}
				},
				"radix": {
					"description": "Enforces the radix parameter of parseInt",
					"type": "boolean"
				},
				"restrict-plus-operands": {
					"description": "When adding two variables, operands must both be of type number or of type string",
					"type": "boolean"
				},
				"semicolon": {
					"description": "Enforces semicolons at the end of every statement",
          			"type": "array",
          			"items": {
            			"enum": [ true, false, "always", "never", "ignore-bound-class-methods", "ignore-interfaces"]
          			}
				},
				"switch-default": {
					"description": "Enforces a default case in switch statements",
					"type": "boolean"
				},
				"trailing-comma": {
					"description": "Requires or disallows trailing commas in array and object literals, destructuring assignments, function and tuple typings, named imports and function parameters",
					"type": "array",
					"items": {
						"type": [ "object", "boolean", "string" ]
					}
				},
				"triple-equals": {
					"description": "Enforces === and !== in favor of == and !=",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "allow-null-check", "allow-undefined-check" ]
					}
				},
				"typedef": {
					"description": "Enforces type definitions to exist",
					"type": "array",
					"items": {
						"enum": [
						  true,
						  false,
						  "call-signature",
              			  "parameter",
              			  "arrow-parameter",
              			  "property-declaration",
              			  "variable-declaration",
              			  "member-variable-declaration"
						]
					}
				},
				"typedef-whitespace": {
					"description": "Enforces spacing whitespace for type definitions",
					"type": "array",
					"items": {
						"type": [ "object", "boolean" ]
					}
				},
				"use-isnan": {
					"description": "Enforces use of the `isNaN()` function to check for NaN references instead of a comparison to the `NaN` constant",
					"type": "boolean"
				},
				"variable-name": {
					"description": "Allows only camelCased or UPPER_CASED variable names",
					"type": [ "array", "boolean" ],
					"items": {
						"enum": [ true, false, "check-format", "allow-leading-underscore", "allow-trailing-underscore", "allow-pascal-case", "ban-keywords" ]
					}
				},
				"whitespace": {
					"description": "Enforces spacing whitespace",
					"type": "array",
					"items": {
						"enum": [ true, false, "check-branch", "check-decl", "check-operator", "check-module", "check-separator", "check-type", "check-typecast" ]
					}
				}
			},
			"type": "object"
		},
		"jsruledefinitions": {
			"properties": {
				"align": {
					"description": "Enforces vertical alignment for parameters, arguments and/or statements",
					"type": [ "array" ],
					"items": {
						"enum": [ true, false, "parameters", "arguments", "statements" ]
					}
				},
				"arrow-parens": {
					"description": "Requires parentheses around the parameters of arrow function definitions",
					"type": "boolean"
				},
				"ban": {
					"description": "Bans the use of specific functions or global methods",
					"type": [ "boolean", "array" ],
					"items": {
						"type": [ "boolean", "array" ]
					}
				},
				"class-name": {
					"description": "Enforces PascalCased class and interface names",
					"type": "boolean"
				},
				"comment-format": {
					"description": "Enforces rules for single-line comments",
					"type": "array",
					"items": {
						"enum": [ true, false, "check-space", "check-lowercase", "check-uppercase" ]
					}
				},
				"completed-docs": {
					"description": "Enforces documentation for important items be filled out",
					"type": "array",
					"items": {
						"enum": [ true, false, "classes", "functions", "methods", "properties" ]
					}
				},
				"component-class-suffix": {
					"description": "Enforces all components having the suffix of 'Component'",
					"type": "boolean"
				},
				"component-selector-name": {
					"description": "Enforces naming conventions for components",
					"type": "array",
					"items": {
						"enum": [ true, false, "camelCase", "kebab-case" ]
					}
				},
				"component-selector-prefix": {
					"description": "Enforces all components to have a uniform prefix",
					"type": "array",
					"items": {
						"type": [ "boolean", "string" ]
					}
				},
				"component-selector-type": {
					"description": "Enforces the type of a component",
					"type": "array",
					"items": {
						"enum": [ true, false, "attribute", "element" ]
					}
				},
				"curly": {
					"description": "Enforces braces for if/for/do/while statements",
					"type": "boolean"
				},
				"cyclomatic-complexity": {
					"description": "Enforces a threshold of cyclomatic complexity",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"directive-class-suffix": {
					"description": "Enforces all components having the suffix of 'Directive'",
					"type": "boolean"
				},
				"directive-selector-name": {
					"description": "Enforces naming conventions for directives",
					"type": "array",
					"items": {
						"enum": [ true, false, "camelCase", "kebab-case" ]
					}
				},
				"directive-selector-prefix": {
					"description": "Enforces all directives to have a uniform prefix",
					"type": "array",
					"items": {
						"type": [ "boolean", "string" ]
					}
				},
				"directive-selector-type": {
					"description": "Enforces the type of a directive",
					"type": "array",
					"items": {
						"enum": [ true, false, "attribute", "element" ]
					}
				},
				"eofline": {
					"description": "Enforces the file to end with a newline",
					"type": "boolean"
				},
				"file-header": {
					"description": "Enforces a certain header comment for all files, matched by a regular expression",
					"type": "array",
					"items": {
						"type": [ "boolean", "string" ]
					}
				},
				"forin": {
					"description": "Enforces a for...in statement to be filtered with an if statement",
					"type": "boolean"
				},
				"indent": {
					"description": "Enforces consistent indentation levels",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer", "string" ]
					}
				},
				"jsdoc-format": {
					"description": "Enforces basic format rules for jsdoc comments",
					"type": "boolean"
				},
				"label-position": {
					"description": "Enforces labels only on sensible statements",
					"type": "boolean"
				},
				"linebreak-style": {
					"description": "Enforces a consistent linebreak styl",
					"type": "array",
					"items": {
						"enum": [ true, false, "CRLF", "LF" ]
					}
				},
				"max-classes-per-file": {
					"description": "A file may not contain more than the specified number of classes",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"max-file-line-count": {
					"description": "Requires files to remain under a certain number of lines",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"max-line-length": {
					"description": "Sets the maximum length of a line",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"new-parens": {
					"description": "Requires parentheses when invoking a constructor via the `new` keyword",
					"type": "boolean"
				},
				"no-arg": {
					"description": "Disallows access to arguments.callee",
					"type": "boolean"
				},
				"no-bitwise": {
					"description": "Disallows bitwise operators",
					"type": "boolean"
				},
				"no-conditional-assignment": {
					"description": "Disallows any type of assignment in any conditionals; this applies to do-while, for, if, and while statements",
					"type": "boolean"
				},
				"no-consecutive-blank-lines": {
					"description": "Disallows one or more blank lines in a row",
					"type": "array",
					"items": {
						"type": [ "boolean", "integer" ]
					}
				},
				"no-console": {
					"description": "Disallows access to the specified functions on console",
					"type": "array",
					"items": {
						"enum": [
							true,
							false,
							"assert",
							"count",
							"debug",
							"dir",
							"dirxml",
							"error",
							"group",
							"groupCollapsed",
							"groupEnd",
							"info",
							"log",
							"profile",
							"profileEnd",
							"table",
							"time",
							"timeEnd",
							"timeStamp",
							"trace",
							"warn"
						]
					}
				},
				"no-construct": {
					"description": "Disallows access to the constructors of String, Number and Boolean",
					"type": "boolean"
				},
				"no-debugger": {
					"description": "Disallows debugger statements",
					"type": "boolean"
				},
				"no-default-export": {
					"description": "Disallows default exports in ES6-style modules",
					"type": "boolean"
				},
				"no-duplicate-variable": {
					"description": "Disallows duplicate variable declarations in the same block scope",
					"type": "boolean"
				},
				"no-empty": {
					"description": "Disallows empty blocks",
					"type": "boolean"
				},
				"no-eval": {
					"description": "Disallows `eval` function invocations",
					"type": "boolean"
				},
				"no-for-in-array": {
					"description": "Disallows iterating over an array with a for-in loop",
					"type": "boolean"
				},
				"no-invalid-this": {
					"description": "Disallows using the `this` keyword outside of classes",
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "check-function-in-method" ]
					}
				},
				"no-null-keyword": {
					"description": "Disallows use of the `null` keyword literal",
					"type": "boolean"
				},
				"no-reference": {
					"description": "Disallows `/// <reference path=>` imports (use ES6-style imports instead)",
					"type": "boolean"
				},
				"no-require-imports": {
					"description": "Disallows require() style imports",
					"type": "boolean"
				},
				"no-shadowed-variable": {
					"description": "Disallows shadowing variable declarations",
					"type": "boolean"
				},
				"no-string-literal": {
					"description": "Disallows object access via string literals",
					"type": "boolean"
				},
				"no-switch-case-fall-through": {
					"description": "Disallows falling through case statements",
					"type": "boolean"
				},
				"no-trailing-whitespace": {
					"description": "Disallows trailing whitespace at the end of a line",
					"type": "boolean"
				},
				"no-unsafe-finally": {
					"description": "Disallows control flow statements, such as `return`, `continue`, `break` and `throws` in finally blocks",
					"type": "boolean"
				},
				"no-unused-expression": {
					"description": "Disallows unused expression statements",
					"type": "boolean"
				},
				"no-unused-new": {
					"description": "Disallows unused 'new' expression statements",
					"type": "boolean"
				},
				"no-use-before-declare": {
					"description": "Disallows usage of variables before their declaration",
					"type": "boolean"
				},
				"no-var-keyword": {
					"description": "Disallows usage of the var keyword, use let or const instead",
					"type": "boolean"
				},
				"object-literal-key-quotes": {
					"description": "Enforces consistent object literal property quote style",
					"type": "array",
					"items": {
						"enum": [ true, false, "always", "as-needed" ]
					}
				},
				"object-literal-shorthand": {
					"description": "Enforces use of ES6 object literal shorthand when possible",
					"type": "boolean"
				},
				"object-literal-sort-keys": {
					"description": "Requires keys in object literals to be sorted alphabetically",
					"type": "boolean"
				},
				"one-line": {
					"description": "Enforces the specified tokens to be on the same line as the expression preceding it",
					"type": "array",
					"items": {
						"enum": [ true, false, "check-open-brace", "check-catch", "check-finally", "check-else", "check-whitespace" ]
					}
				},
				"one-variable-per-declaration": {
					"description": "Disallows multiple variable definitions in the same declaration statement",
					"type": "array",
					"items": {
						"enum": [ true, false, "ignore-for-loop" ]
					}
				},
				"only-arrow-functions": {
					"description": "Disallows traditional (non-arrow) function expressions",
					"type": "array",
					"items": {
						"enum": [ true, false, "allow-declarations" ]
					}
				},
				"ordered-imports": {
					"description": "Requires that import statements be alphabetized",
					"type": "array",
					"items": {
						"type": [ "object", "boolean", "string" ]
					}
				},
				"prefer-for-of": {
					"description": "Recommends a 'for-of' loop over a standard 'for' loop if the index is only used to access the array being iterated",
					"type": "boolean"
				},
				"quotemark": {
					"description": "Enforces consistent single or double quoted string literals",
					"type": "array",
					"items": {
						"enum": [ true, false, "double", "single", "jsx-double", "jsx-single", "avoid-escape" ]
					}
				},
				"radix": {
					"description": "Enforces the radix parameter of parseInt",
					"type": "boolean"
				},
				"restrict-plus-operands": {
					"description": "When adding two variables, operands must both be of type number or of type string",
					"type": "boolean"
				},
				"semicolon": {
					"description": "Enforces semicolons at the end of every statement",
          			"type": "array",
          			"items": {
            			"enum": [ true, false, "always", "never", "ignore-bound-class-methods", "ignore-interfaces"]
          			}
				},
				"switch-default": {
					"description": "Enforces a default case in switch statements",
					"type": "boolean"
				},
				"trailing-comma": {
					"description": "Requires or disallows trailing commas in array and object literals, destructuring assignments, function and tuple typings, named imports and function parameters",
					"type": "array",
					"items": {
						"type": [ "object", "boolean", "string" ]
					}
				},
				"triple-equals": {
					"description": "Enforces === and !== in favor of == and !=",
					"type": [ "array", "boolean" ],
					"items": {
						"type": [ "boolean", "string" ],
						"enum": [ true, false, "allow-null-check", "allow-undefined-check" ]
					}
				},
				"use-isnan": {
					"description": "Enforces use of the `isNaN()` function to check for NaN references instead of a comparison to the `NaN` constant",
					"type": "boolean"
				},
				"variable-name": {
					"description": "Allows only camelCased or UPPER_CASED variable names",
					"type": [ "array", "boolean" ],
					"items": {
						"enum": [ true, false, "check-format", "allow-leading-underscore", "allow-trailing-underscore", "allow-pascal-case", "ban-keywords" ]
					}
				},
				"whitespace": {
					"description": "Enforces spacing whitespace",
					"type": "array",
					"items": {
						"enum": [ true, false, "check-branch", "check-decl", "check-operator", "check-module", "check-separator", "check-type", "check-typecast" ]
					}
				}
			},
			"type": "object"
		}
	},

	"properties": {
		"rulesDirectory": {
			"description": "The directory where the codelytics rules live",
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"rules": {
			"$ref": "#/definitions/ruledefinitions"
		},
		"jsRules": {
			"$ref": "#/definitions/jsruledefinitions"
		},
		"extends": {
			"description": "Extend another configuration (built in config OR a node resolvable .json file) ",
			"type": [ "array", "string" ],
			"items": {
				"type": "string"
			}
		}
	}
}
