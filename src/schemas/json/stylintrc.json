{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "properties": {
    "blocks": {
      "default": false,
      "description": "Expect the @block keyword when defining block variables.",
      "enum": [false, "never", "always"],
      "title": "@block keyword preference",
      "type": ["string", "boolean"]
    },
    "brackets": {
      "default": "never",
      "description": "Expect {} when declaring a selector.",
      "enum": [false, "never", "always"],
      "title": "Brackets preference",
      "type": ["string", "boolean"]
    },
    "colons": {
      "default": "always",
      "description": "Expect : when declaring a property.",
      "enum": [false, "never", "always"],
      "title": "Colon preference",
      "type": ["string", "boolean"]
    },
    "colors": {
      "default": "always",
      "description": "Enforce variables when defining hex values",
      "enum": [false, "always"],
      "title": "Colors preference",
      "type": ["string", "boolean"]
    },
    "commaSpace": {
      "default": "always",
      "description": "Enforce or disallow spaces after commas.",
      "enum": [false, "never", "always"],
      "title": "CommaSpace preference",
      "type": ["string", "boolean"]
    },
    "commentSpace": {
      "default": "always",
      "description": "Enforce or disallow spaces after line comments ('// comment' vs '//comment').",
      "enum": [false, "never", "always"],
      "title": "CommentSpace preference",
      "type": ["string", "boolean"]
    },
    "cssLiteral": {
      "default": "never",
      "description": "By default Stylint ignores @css blocks. If set to true however, it will throw a warning if @css is used.",
      "enum": [false, "never"],
      "title": "CssLiteral preference",
      "type": ["string", "boolean"]
    },
    "customProperties": {
      "description": "In Stylus you have the option of using mixins transparently, like css properties. Because of how Stylus' syntax works, this rule also allows you to add adhoc support for custom properties as needed by just added the name of the property to this array.",
      "items": {},
      "title": "Custom Properties array.",
      "type": "array"
    },
    "depthLimit": {
      "default": false,
      "description": "Sets the max selector depth. If set to 4, max selector depth will be 4 indents. Pseudo selectors like &:first-child or &:hover won't count towards the limit. Set to false if you don't want to check for this",
      "title": "Max selector depth preference",
      "type": ["boolean", "integer"]
    },
    "duplicates": {
      "default": true,
      "description": "Checks if selector or property duplicated unnecessarily.",
      "title": "Duplicates preference",
      "type": "boolean"
    },
    "efficient": {
      "default": "always",
      "description": "Check for places where properties can be written more efficiently. (Example: prefer margin 0 over margin 0 0)",
      "enum": [false, "never", "always"],
      "title": "Property efficiency preference",
      "type": ["string", "boolean"]
    },
    "exclude": {
      "description": "Exclude certain file patterns from linting. (Example: ['vendor/**/*', 'node_modules/**/*'])",
      "items": {},
      "title": "Exclude files preference",
      "type": "array"
    },
    "extendPref": {
      "default": false,
      "description": "Pass in either @extend or @extends to enforce one, or false to enforce neither.",
      "enum": [false, "@extend", "@extends"],
      "title": "Extend(s) preference",
      "type": ["string", "boolean"]
    },
    "globalDupe": {
      "default": false,
      "description": "Works in conjunction with duplicates. Does nothing on its own. If false, duplicates will check for dupes within individual files only. If true, duplicates will check for dupes across all files.",
      "title": "Global Duplicate rules preference",
      "type": "boolean"
    },
    "groupOutputByFile": {
      "default": true,
      "description": "Stylint's default setting groups errors and warnings by file when outputting. You can disable this if you want.",
      "title": "GroupOutputByFile schema.",
      "type": "boolean"
    },
    "indentPref": {
      "default": false,
      "description": "Number of spaces to indent.",
      "title": "IndentPref preference.",
      "type": ["boolean", "integer"]
    },
    "leadingZero": {
      "default": "never",
      "description": "Enforce or disallow unnecessary leading zeroes on decimal points.",
      "enum": [false, "never", "always"],
      "title": "LeadingZero preference",
      "type": ["string", "boolean"]
    },
    "maxErrors": {
      "default": false,
      "description": "Set 'max' number of Errors.",
      "title": "Max number of errors preference",
      "type": ["boolean", "integer"]
    },
    "maxWarnings": {
      "default": false,
      "description": "Set 'max' number of Warnings.",
      "title": "Max number of warnings preference",
      "type": ["boolean", "integer"]
    },
    "mixed": {
      "default": false,
      "description": "Returns true if mixed spaces and tabs are found. If a number is passed to indentPref, it assumes soft tabs (ie, spaces), and if false is passed to indentPref it assumes hard tabs. If soft tabs, outputs warning/error if hard tabs used. If hard tabs, outputs warning/error if unnecessary extra spaces found.",
      "title": "Allow mixed hard & soft tabs",
      "type": "boolean"
    },
    "mixins": {
      "description": "In Stylus you have the option of using mixins transparently, like css properties. Because of how Stylus' syntax works, this rule also allows you to add adhoc support for custom mixins as needed by just added the name of the mixin to this array.",
      "items": {},
      "title": "Mixins",
      "type": "array"
    },
    "namingConvention": {
      "default": false,
      "description": "Enforce a particular naming convention when declaring classes, ids, and variables. Throws a warning if you don't follow the convention.",
      "enum": [
        false,
        "lowercase-dash",
        "lowercase_underscore",
        "camelCase",
        "BEM"
      ],
      "title": "Naming Convention",
      "type": ["boolean", "string"]
    },
    "namingConventionStrict": {
      "default": false,
      "description": "By default, namingConvention only looks at variable names. If namingConventionStrict is set to true, namingConvention will also look at class and id names. If you have a lot of 3rd party css you can't change you might want to leave this off.",
      "title": "NamingConventionStrict schema.",
      "type": "boolean"
    },
    "noImportant": {
      "default": true,
      "description": "If true, show warning when !important is found.",
      "title": "NoImportant preference.",
      "type": "boolean"
    },
    "none": {
      "default": "never",
      "description": "If 'always' check for places where none used instead of 0. If 'never' check for places where 0 could be used instead of none.",
      "enum": [false, "always", "never"],
      "title": "None preference.",
      "type": ["boolean", "string"]
    },
    "parenSpace": {
      "default": false,
      "description": "Enforce or disallow use of extra spaces inside parens.",
      "enum": [false, "always", "never"],
      "title": "ParenSpace preference.",
      "type": ["boolean", "string"]
    },
    "placeholders": {
      "default": "always",
      "description": "Enforce extending placeholder vars when using @extend(s) (prefer @extends $placeholder over $extends .some-class)",
      "enum": [false, "always", "never"],
      "title": "Placeholders preference",
      "type": ["boolean", "string"]
    },
    "prefixVarsWithDollar": {
      "default": "always",
      "description": "Enforce use of $ when defining a variable. In Stylus using a $ when defining a variable is optional, but is a good idea if you want to prevent ambiguity. Not including the $ sets up situations where you wonder: 'Is this a variable or a value?' For instance: padding $default is easier to understand than padding default.",
      "enum": [false, "always", "never"],
      "title": "PrefixVarsWithDollar preference",
      "type": ["boolean", "string"]
    },
    "quotePref": {
      "default": false,
      "description": "Enforce consistent quotation style.",
      "enum": [false, "single", "double"],
      "title": "Quote style preference",
      "type": ["boolean", "string"]
    },
    "reporterOptions": {
      "description": "Customize reporter output.",
      "properties": {
        "columnSplitter": {
          "default": "  ",
          "title": "ColumnSplitter schema.",
          "type": ["boolean", "string"]
        },
        "columns": {
          "items": {
            "default": "rule",
            "title": "3 schema.",
            "type": "string"
          },
          "title": "Columns schema.",
          "type": "array"
        },
        "showHeaders": {
          "default": false,
          "title": "ShowHeaders schema."
        },
        "truncate": {
          "default": true,
          "title": "Truncate schema.",
          "type": "boolean"
        }
      },
      "title": "ReporterOptions schema.",
      "type": "object"
    },
    "semicolons": {
      "default": "never",
      "description": "Enforce or disallow semicolons",
      "enum": [false, "always", "never"],
      "title": "Semicolon preference",
      "type": ["boolean", "string"]
    },
    "sortOrder": {
      "default": "alphabetical",
      "description": "Enforce a particular sort order when declaring properties. Throws a warning if you don't follow the order.",
      "title": "Property sorting order preference",
      "type": ["boolean", "string", "array"]
    },
    "stackedProperties": {
      "description": "Enforce putting properties on new lines.",
      "enum": [false, "always", "never"],
      "title": "One-liners preference",
      "type": ["boolean", "string"]
    },
    "trailingWhitespace": {
      "default": "never",
      "description": "An explanation about the purpose of this instance.",
      "enum": [false, "never"],
      "title": "TrailingWhitespace preference",
      "type": ["string", "boolean"]
    },
    "universal": {
      "default": false,
      "description": "Looks for instances of the inefficient * selector. Lots of resets use this, for good reason (resetting box model), but past that you really don't need this selector, and you should avoid it if possible.",
      "enum": [false, "never"],
      "title": "Universal preference",
      "type": ["boolean", "string"]
    },
    "valid": {
      "default": true,
      "description": "Check that a property is valid CSS or HTML.",
      "title": "Valid preference",
      "type": "boolean"
    },
    "zIndexNormalize": {
      "default": false,
      "description": "Enforce some (very) basic z-index sanity. Any number passed in will be used as the base for your z-index values. Throws an error if your value is not normalized.",
      "title": "ZIndexNormalize preference",
      "type": ["boolean", "integer"]
    },
    "zeroUnits": {
      "default": "never",
      "description": "Looks for instances of 0px. You don't need the px. Checks all units, not just px.",
      "enum": [false, "never"],
      "title": "ZeroUnits preference",
      "type": ["boolean", "string"]
    }
  },
  "title": "JSON schema for Stylint configuration files",
  "type": "object"
}
