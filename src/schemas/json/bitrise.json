{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://json.schemastore.org/bitrise.json",
  "$ref": "#/definitions/BitriseDataModel",
  "definitions": {
    "AppModel": {
      "properties": {
        "title": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status_report_name": {
          "$ref": "#/definitions/StatusReportNameModel"
        },
        "envs": {
          "$ref": "#/definitions/EnvModel"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AptGetDepModel": {
      "properties": {
        "name": {
          "type": "string"
        },
        "bin_name": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "BashStepToolkitModel": {
      "properties": {
        "entry_file": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "BitriseDataModel": {
      "anyOf": [
        { "required": ["format_version"] },
        { "required": ["include"] }
      ],
      "properties": {
        "format_version": {
          "type": "string",
          "description": "The minimum Bitrise CLI version required to run your build. Locally, you can get your Bitrise CLIâ€™s supported highest format version with bitrise version --full."
        },
        "default_step_lib_source": {
          "type": "string",
          "description": "The default code repository for the Steps used in your configuration. Bitrise uses this source if no specific source is provided for a given Step."
        },
        "project_type": {
          "type": "string",
          "description": "The type of your Bitrise project, such as ios, android, flutter, and so on. When adding a new project, the project scanner can automatically detect the project type and automatically create a basic configuration."
        },
        "title": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "services": {
          "patternProperties": {
            ".*": {
              "$ref": "#/definitions/ContainerModel"
            }
          },
          "type": "object",
          "description": "https://devcenter.bitrise.io/en/infrastructure/docker-containers-on-bitrise/using-containers-in-bitrise-workflows.html#service-containers\n\nThis property allows running Docker containers as services for advanced integration testing. Define services here and refer to them in a `with` group within a Workflow."
        },
        "containers": {
          "patternProperties": {
            ".*": {
              "$ref": "#/definitions/ContainerModel"
            }
          },
          "type": "object",
          "description": "https://devcenter.bitrise.io/en/infrastructure/docker-containers-on-bitrise/using-containers-in-bitrise-workflows.html#step-execution-containers\n\nThis property allows running Docker containers for Step execution. You define the container in the top level of the configuration file and then refer to it in a with group in the Workflow configuration."
        },
        "app": {
          "$ref": "#/definitions/AppModel"
        },
        "meta": {
          "patternProperties": {
            ".*": {
              "additionalProperties": true
            }
          },
          "type": "object",
          "description": "Stores project metadata key-value pairs. Most importantly, it defines the default stack and the build machine type for the project."
        },
        "trigger_map": {
          "items": {
            "$ref": "#/definitions/TriggerMapItemModel"
          },
          "type": "array",
          "description": "https://devcenter.bitrise.io/en/builds/starting-builds/legacy-project-based-triggers.html#legacy-project-based-triggers\n\nDefines the build triggers on a project level. This is the legacy method of configuring triggers: we recommend using target-based triggers defined within a Pipeline or a Workflow isntead."
        },
        "pipelines": {
          "patternProperties": {
            ".*": {
              "$ref": "#/definitions/PipelineModel"
            }
          },
          "type": "object",
          "description": "https://devcenter.bitrise.io/en/steps-and-workflows/build-pipelines/configuring-a-bitrise-pipeline.html\n\nDefine Pipelines in your project's configuration. Pipelines can be used to organize the entire CI/CD process and to set up advanced configurations with multiple different tasks running parallel and/or sequentially."
        },
        "stages": {
          "patternProperties": {
            ".*": {
              "$ref": "#/definitions/StageModel"
            }
          },
          "type": "object"
        },
        "workflows": {
          "patternProperties": {
            ".*": {
              "$ref": "#/definitions/WorkflowModel"
            }
          },
          "type": "object",
          "description": "https://devcenter.bitrise.io/en/steps-and-workflows/introduction-to-workflows.html\n\nThe Workflows included in your configuration. A Workflow is a collection of blocks of script executions called Steps. Steps are executed sequentially within a Workflow."
        },
        "step_bundles": {
          "patternProperties": {
            ".*": {
              "$ref": "#/definitions/StepBundleModel",
            }
          },
          "type": "object",
          "description": "https://devcenter.bitrise.io/en/steps-and-workflows/introduction-to-steps/step-bundles.html\n\nStep bundles allow you to group multiple Steps into a single unit. With Step bundles, you can reuse Steps and sequences of Steps without manually copying and pasting from a YAML configuration file."
        },
        "include": {
          "items": {
            "$ref": "#/definitions/IncludeItemModel"
          },
          "type": "array",
          "description": "https://devcenter.bitrise.io/en/builds/configuration-yaml/modular-yaml-configuration.html\n\nThe `include` property allows you to use other configuration YAML files in your Bitrise configuration, to break down large, complex YAML files into smaller, modular components."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "BrewDepModel": {
      "properties": {
        "name": {
          "type": "string"
        },
        "bin_name": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "CheckOnlyDepModel": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ContainerModel": {
      "required": ["image"],
      "properties": {
        "image": {
          "type": "string",
          "description": "This property defines the Docker image used for the container, in a `name:tag` format."
        },
        "credentials": {
          "$ref": "#/definitions/DockerCredentialModel"
        },
        "ports": {
          "type": "array",
          "description": "This property defines the ports which are used to access the service.",
          "items": {
            "type": "string"
          }
        },
        "envs": {
          "$ref": "#/definitions/EnvModel"
        },
        "options": {
          "type": "string",
          "descriptions": "Define additional Docker container resource options. These are parameters that will be passed to the `docker create` command."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DepsModel": {
      "properties": {
        "brew": {
          "items": {
            "$ref": "#/definitions/BrewDepModel"
          },
          "type": "array"
        },
        "apt_get": {
          "items": {
            "$ref": "#/definitions/AptGetDepModel"
          },
          "type": "array"
        },
        "check_only": {
          "items": {
            "$ref": "#/definitions/CheckOnlyDepModel"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DockerCredentialModel": {
      "required": ["username", "password"],
      "properties": {
        "username": {
          "type": "string",
          "description": "The username used for the `docker login` command."
        },
        "password": {
          "type": "string",
          "description": "The password used for the `docker login` command."
        },
        "server": {
          "type": "string",
          "description": "The server for the `docker login` command. This is optional if the server is already part of the image reference."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EnvModel": {
      "items": {
        "patternProperties": {
          ".*": {
            "additionalProperties": true
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "GoStepToolkitModel": {
      "required": ["package_name"],
      "properties": {
        "package_name": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PipelineModel": {
      "properties": {
        "title": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "triggers": {
          "$ref": "#/definitions/TriggersModel",
          "description": "Target-based triggers defined for the Pipeline: if a code event matches the condition defined in a trigger, Bitrise will trigger a build with the Pipeline."
        },
        "status_report_name": {
          "$ref": "#/definitions/StatusReportNameModel"
        },
        "stages": {
          "items": {
            "patternProperties": {
              ".*": {
                "$ref": "#/definitions/StageModel"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "workflows": {
          "patternProperties": {
            ".*": {
              "$ref": "#/definitions/GraphPipelineWorkflowModel"
            }
          },
          "type": "object",
          "description": "The Workflows that are part of the Pipeline configuration. You can create dependencies between Workflows with the `depends_on` property."
        },
        "priority": {
          "$ref": "#/definitions/PriorityModel"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "GraphPipelineWorkflowModel": {
      "properties": {
        "depends_on": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "This property defines the Workflows that this Workflow depends on. If any of the Workflows in the list fails, this Workflow won't run."
        },
        "abort_on_fail": {
          "type": "boolean",
          "description": "When this property is `true`, the Pipeline and any other running Workflows are aborted if this Workflow fails."
        },
        "should_always_run": {
          "type": "string",
          "enum": ["off", "workflow"],
          "description": "This property defines whether a Workflow should run if a previous Workflow failed. Set to `workflow` if you want this Workflow to always run."
        },
        "run_if": {
          "$ref": "#/definitions/GraphPipelineWorkflowRunIfModel"
        },
        "parallel": {
          "oneOf": [{ "type": "integer" }, { "type": "string" }],
          "description": "https://devcenter.bitrise.io/en/steps-and-workflows/build-pipelines/configuring-a-bitrise-pipeline.html#parallelism-in-pipelines\n\nThe `parallel` property allows you to run copies of the same Workflow in parallel, in a single instruction. This is particularly useful for test sharding. It takes an integer or an Environment Variable."
        },
        "uses": {
          "type": "string"
        },
        "inputs": {
          "$ref": "#/definitions/EnvModel"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "GraphPipelineWorkflowRunIfModel": {
      "required": ["expression"],
      "properties": {
        "expression": {
          "type": "string",
          "description": "https://devcenter.bitrise.io/en/steps-and-workflows/build-pipelines/configuring-a-bitrise-pipeline.html#conditional-workflow-execution-in-a-pipeline\n\nA Go template expression that defines the conditions for running the Workflow."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "StageModel": {
      "properties": {
        "title": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "abort_on_fail": {
          "type": "boolean"
        },
        "should_always_run": {
          "type": "boolean"
        },
        "workflows": {
          "items": {
            "patternProperties": {
              ".*": {
                "$ref": "#/definitions/WorkflowStageConfigModel"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "StatusReportNameModel": {
      "type": "string",
      "minLength": 1,
      "maxLength": 100,
      "pattern": "^[a-zA-Z0-9,./():\\-_ <>\\[\\]\\|]*$"
    },
    "StepModel": {
      "properties": {
        "title": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "source_code_url": {
          "type": "string"
        },
        "support_url": {
          "type": "string"
        },
        "published_at": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "$ref": "#/definitions/StepSourceModel"
        },
        "asset_urls": {
          "patternProperties": {
            ".*": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "host_os_tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project_type_tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "This property defines the project type category of the Step. For example, `flutter` or `ios`."
        },
        "type_tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "This property defines the functional category that the Step belongs to. For example, a dependency installer Step should have the type `dependency`. This allows you to filter by type when searching for a Step in the Workflow Editor."
        },
        "toolkit": {
          "$ref": "#/definitions/StepToolkitModel"
        },
        "deps": {
          "$ref": "#/definitions/DepsModel",
          "description": "This property defines the required dependencies of the Step. To declare a dependency, specify a package manager and then the dependency you want to install."
        },
        "is_requires_admin_user": {
          "type": "boolean"
        },
        "is_always_run": {
          "type": "boolean",
          "description": "If this property is true, the Step will always run, even if a previous Step in the Workflow failed."
        },
        "is_skippable": {
          "type": "boolean",
          "description": "If this property is true, the build won't fail even if this Step fails. For example, if a Step restoring a cache archive fails, you might still want to run the build."
        },
        "run_if": {
          "type": "string",
          "description": "https://devcenter.bitrise.io/en/steps-and-workflows/introduction-to-steps/enabling-or-disabling-a-step-conditionally.html#examples-of-run_if-expressions\n\nThis property sets conditions for running a Step. It requires a valid Go template expression."
        },
        "timeout": {
          "type": "integer",
          "description": "https://devcenter.bitrise.io/en/steps-and-workflows/introduction-to-steps/setting-a-time-limit-for-steps.html\n\nThis property defines a time limit for a Step: if the Step runs longer than the defined time, the Step fails. Define the limit in seconds."
        },
        "no_output_timeout": {
          "type": "integer",
          "description": "https://devcenter.bitrise.io/en/steps-and-workflows/introduction-to-steps/detecting-and-aborting-hanging-steps.html\n\nThis property defines a time limit for Steps: if a Steps runs longer than the defined time without producing an output, the Step fails. Define the limit in seconds."
        },
        "meta": {
          "patternProperties": {
            ".*": {
              "additionalProperties": true
            }
          },
          "type": "object"
        },
        "inputs": {
          "$ref": "#/definitions/EnvModel"
        },
        "outputs": {
          "$ref": "#/definitions/EnvModel"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "TriggersModel": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "push": {
          "items": {
            "$ref": "#/definitions/PushTriggerModel"
          },
          "type": "array",
          "description": "Code push triggers: they define the conditions for triggering a Bitrise build when code is pushed to the project's repository."
        },
        "pull_request": {
          "items": {
            "$ref": "#/definitions/PullrequestTriggerModel"
          },
          "type": "array",
          "description": "Pull request triggers: they define the conditions for triggering a Bitrise build when a pull request is opened in the project's repository."
        },
        "tag": {
          "items": {
            "$ref": "#/definitions/TagTriggerModel"
          },
          "type": "array",
          "description": "Git tag triggers: they define the conditions for triggering a Bitrise build when a Git tag is pushed to the project's repository."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PushTriggerModel": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "priority": {
          "$ref": "#/definitions/PriorityModel"
        },
        "branch": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "A branch of the project's repository. Bitrise triggers a build if code is pushed to the branch defined in this property."
        },
        "commit_message": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Define a Git commit message that should trigger a Bitrise build."
        },
        "changed_files": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Set a filepath or a folder. If any file or files change in that location, Bitrise triggers a build."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PullrequestTriggerModel": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "priority": {
          "$ref": "#/definitions/PriorityModel"
        },
        "draft_enabled": {
          "type": "boolean",
          "description": "https://devcenter.bitrise.io/en/builds/starting-builds/triggering-builds-automatically.html#triggering-builds-from-draft-prs\n\nIf this property is `true`, draft pull requests can trigger builds, too."
        },
        "source_branch": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Bitrise triggers a build if the branch name in this property matches the source branch of a pull request opened in the project's repository."
        },
        "target_branch": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Bitrise triggers a build if the branch name in the property matches the target branch of a pull request opened in the project's repository."
        },
        "label": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "You can mark pull requests with labels. If a pull request's label matches the label in this property, Bitrise triggers a build."
        },
        "comment": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "This property looks for comments on pull requests to trigger Bitrise builds."
        },
        "commit_message": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Define a Git commit message that should trigger a Bitrise build."
        },
        "changed_files": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Set a filepath or a folder. If any file or files change in that location in a pull request, Bitrise triggers a build."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "TagTriggerModel": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "priority": {
          "$ref": "#/definitions/PriorityModel"
        },
        "name": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "This property looks for the name of a Git tag to trigger a Bitrise build."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "StepSourceModel": {
      "properties": {
        "git": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "StepToolkitModel": {
      "properties": {
        "bash": {
          "$ref": "#/definitions/BashStepToolkitModel"
        },
        "go": {
          "$ref": "#/definitions/GoStepToolkitModel"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "TriggerMapItemModelRegexCondition": {
      "properties": {
        "regex": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "TriggerMapItemModel": {
      "properties": {
        "type": {
          "type": "string",
          "enum": ["push", "pull_request", "tag"],
          "description": "The type of the code event the trigger looks for."
        },
        "enabled": {
          "type": "boolean"
        },
        "pipeline": {
          "type": "string",
          "description": "The name of the Pipeline that will be triggered if the code event matches the trigger condition."
        },
        "workflow": {
          "type": "string",
          "description": "The name of the Workflow that will be triggered if the code event matches the trigger condition."
        },

        "push_branch": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "A branch of the project's repository. Bitrise triggers a build if code is pushed to the branch defined in this property."
        },
        "commit_message": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Define a Git commit message that should trigger a Bitrise build."
        },
        "changed_files": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Set a filepath or a folder. If any file or files change in that location, Bitrise triggers a build."
        },

        "pull_request_source_branch": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Bitrise triggers a build if the branch name in this property matches the source branch of a pull request opened in the project's repository."
        },
        "pull_request_target_branch": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Bitrise triggers a build if the branch name in the property matches the target branch of a pull request opened in the project's repository."
        },
        "draft_pull_request_enabled": {
          "type": "boolean",
          "description": "https://devcenter.bitrise.io/en/builds/starting-builds/triggering-builds-automatically.html#triggering-builds-from-draft-prs\n\nIf this property is `true`, draft pull requests can trigger builds, too."
        },
        "pull_request_label": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "You can mark pull requests with labels. If a pull request's label matches the label in this property, Bitrise triggers a build."
        },
        "pull_request_comment": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "This property looks for comments on pull requests to trigger Bitrise builds."
        },

        "tag": {
          "oneOf": [
            { "$ref": "#/definitions/TriggerMapItemModelRegexCondition" },
            { "type": "string" }
          ],
          "description": "Bitrise triggers a build when a Git tag matching the tag defined in this property is pushed to the project's repository."
        },

        "pattern": {
          "type": "string"
        },
        "is_pull_request_allowed": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "WithModel": {
      "required": ["steps"],
      "properties": {
        "container": {
          "type": "string",
          "description": "The name of the container that will be used as the execution environment."
        },
        "services": {
          "type": "array",
          "description": "The name of the service container that will be used to run services.",
          "items": {
            "type": "string"
          }
        },
        "steps": {
          "items": {
            "patternProperties": {
              "^(?!bundle::)(?!with$).*": {
                "$ref": "#/definitions/StepModel"
              }
            },
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "WorkflowStageConfigModel": {
      "properties": {
        "run_if": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "WorkflowModel": {
      "properties": {
        "title": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "triggers": {
          "$ref": "#/definitions/TriggersModel",
          "description": "Target-based triggers defined for the Workflow: if a code event matches the condition defined in a trigger, Bitrise will trigger a build with the Workflow."
        },
        "status_report_name": {
          "$ref": "#/definitions/StatusReportNameModel"
        },
        "before_run": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "https://devcenter.bitrise.io/en/steps-and-workflows/introduction-to-workflows/managing-workflows.html#chaining-workflows-together\n\nThe Workflows that will run before this Workflow starts."
        },
        "after_run": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "https://devcenter.bitrise.io/en/steps-and-workflows/introduction-to-workflows/managing-workflows.html#chaining-workflows-together\n\nThe Workflows that will run after this Workflow is finished."
        },
        "envs": {
          "$ref": "#/definitions/EnvModel"
        },
        "steps": {
          "items": {
            "patternProperties": {
              "^bundle::.+": {
                "$ref": "#/definitions/StepBundleOverrideModel"
              },
              "^with$": {
                "$ref": "#/definitions/WithModel"
              },
              "^(?!bundle::)(?!with$).*": {
                "$ref": "#/definitions/StepModel"
              }
            },
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array",
          "description": "The list of Steps in the Workflow."
        },
        "priority": {
          "$ref": "#/definitions/PriorityModel"
        },
        "meta": {
          "patternProperties": {
            ".*": {
              "additionalProperties": true
            }
          },
          "type": "object",
          "description": "Stores project metadata key-value pairs. Most importantly, it defines the stack and the machine type for the Workflow."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "StepBundleModel": {
      "properties": {
        "title": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "envs": {
          "$ref": "#/definitions/EnvModel"
        },
        "inputs": {
          "$ref": "#/definitions/EnvModel"
        },
        "steps": {
          "items": {
            "patternProperties": {
              "^bundle::.+": {
                "$ref": "#/definitions/StepBundleOverrideModel"
              },
              "^(?!bundle::)(?!with$).*": {
                "$ref": "#/definitions/StepModel"
              }
            },
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array",
          "description": "The Steps included in the Step bundle."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "StepBundleOverrideModel": {
      "properties": {
        "title": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "envs": {
          "$ref": "#/definitions/EnvModel"
        },
        "inputs": {
          "$ref": "#/definitions/EnvModel"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "IncludeItemModel": {
      "required": ["path"],
      "properties": {
        "path": {
          "type": "string",
          "minLength": 1
        },
        "repository": {
          "type": "string",
          "description": "The name of the repository that contains the included configuration file. You do not need the URL, just the name. Leave it empty if the file is in the same repository as your current configuration file."
        },
        "branch": {
          "type": "string",
          "description": "The repository branch that contains the included configuration file. It has a lower priority than `tag` and `commit`."
        },
        "commit": {
          "type": "string",
          "description": "The commit hash of the commit that contains the included configuration file. It takes priority over `branch` and `tag` if they are all specified."
        },
        "tag": {
          "type": "string",
          "description": "The Git tag of the commit that contains the included configuration file. It has a higher priority than `branch` but a lower priority than `tag`."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PriorityModel": {
      "description": "https://devcenter.bitrise.io/en/builds/configuring-build-settings/build-priority.html\n\nBuild priority determines a build's position in the build queue. A build with a higher priority is executed sooner than a build with a lower priority. You can set priorities for Pipelines, Workflows, build triggers, and when manually starting a new build.",
      "type": "integer",
      "maximum": 100,
      "minimum": -100
    }
  }
}
