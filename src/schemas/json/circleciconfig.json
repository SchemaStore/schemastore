{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "builtinSteps": {
      "configuration": {
        "add_ssh_keys": {
          "additionalProperties": false,
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/add_ssh_keys"
            }
          ],
          "properties": {
            "fingerprints": {
              "description": "Directory to attach the workspace to",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "name": {
              "description": "Title of the step to be shown in the CircleCI UI",
              "type": "string"
            }
          },
          "type": "object"
        },
        "attach_workspace": {
          "additionalProperties": false,
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/attach_workspace"
            }
          ],
          "properties": {
            "at": {
              "description": "Directory to attach the workspace to",
              "type": "string"
            },
            "name": {
              "description": "Title of the step to be shown in the CircleCI UI",
              "type": "string"
            }
          },
          "required": ["at"],
          "type": "object"
        },
        "checkout": {
          "additionalProperties": false,
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/checkout"
            }
          ],
          "properties": {
            "name": {
              "description": "Title of the step to be shown in the CircleCI UI",
              "type": "string"
            },
            "path": {
              "description": "Checkout directory (default: jobâ€™s `working_directory`)",
              "type": "string"
            }
          },
          "type": "object"
        },
        "deploy": {
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/deploy"
            },
            {
              "$ref": "#/definitions/builtinSteps/configuration/run"
            }
          ]
        },
        "persist_to_workspace": {
          "additionalProperties": false,
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/persist_to_workspace"
            }
          ],
          "properties": {
            "name": {
              "description": "Title of the step to be shown in the CircleCI UI",
              "type": "string"
            },
            "paths": {
              "description": "Glob identifying file(s), or a non-glob path to a directory to add to the shared workspace. Interpreted as relative to the workspace root. Must not be the workspace root itself.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "root": {
              "description": "Either an absolute path or a path relative to `working_directory`",
              "type": "string"
            }
          },
          "required": ["root", "paths"],
          "type": "object"
        },
        "restore_cache": {
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/restore_cache"
            }
          ],
          "oneOf": [
            {
              "additionalProperties": false,
              "properties": {
                "key": {
                  "description": "Single cache key to restore",
                  "type": "string"
                },
                "name": {
                  "description": "Title of the step to be shown in the CircleCI UI (default: 'Restoring Cache')",
                  "type": "string"
                }
              },
              "required": ["key"],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "keys": {
                  "description": "List of cache keys to lookup for a cache to restore. Only first existing key will be restored.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Title of the step to be shown in the CircleCI UI (default: 'Restoring Cache')",
                  "type": "string"
                }
              },
              "required": ["keys"],
              "type": "object"
            }
          ]
        },
        "run": {
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/run"
            }
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "additionalProperties": false,
              "properties": {
                "background": {
                  "default": false,
                  "description": "Whether or not this step should run in the background (default: false)",
                  "type": "boolean"
                },
                "command": {
                  "description": "Command to run via the shell",
                  "type": "string"
                },
                "environment": {
                  "additionalProperties": {
                    "type": ["string", "number"]
                  },
                  "description": "Additional environmental variables, locally scoped to command",
                  "type": "object"
                },
                "name": {
                  "description": "Title of the step to be shown in the CircleCI UI (default: full `command`)",
                  "type": "string"
                },
                "no_output_timeout": {
                  "default": "10m",
                  "description": "Elapsed time the command can run without output. The string is a decimal with unit suffix, such as \"20m\", \"1.25h\", \"5s\" (default: 10 minutes)",
                  "pattern": "\\d+(\\.\\d+)?[mhs]",
                  "type": "string"
                },
                "shell": {
                  "description": "Shell to use for execution command",
                  "type": "string"
                },
                "when": {
                  "description": "Specify when to enable or disable the step. Takes the following values: `always`, `on_success`, `on_fail` (default: `on_success`)",
                  "enum": ["always", "on_success", "on_fail"]
                },
                "working_directory": {
                  "description": "In which directory to run this step (default: `working_directory` of the job",
                  "type": "string"
                }
              },
              "required": ["command"],
              "type": "object"
            }
          ]
        },
        "save_cache": {
          "additionalProperties": false,
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/save_cache"
            }
          ],
          "properties": {
            "key": {
              "description": "Unique identifier for this cache",
              "type": "string"
            },
            "name": {
              "description": "Title of the step to be shown in the CircleCI UI (default: 'Saving Cache')",
              "type": "string"
            },
            "paths": {
              "description": "List of directories which should be added to the cache",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "when": {
              "description": "Specify when to enable or disable the step. Takes the following values: `always`, `on_success`, `on_fail` (default: `on_success`)",
              "enum": ["always", "on_success", "on_fail"]
            }
          },
          "required": ["paths", "key"],
          "type": "object"
        },
        "setup_remote_docker": {
          "additionalProperties": false,
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/setup_remote_docker"
            }
          ],
          "properties": {
            "docker_layer_caching": {
              "default": false,
              "description": "When `docker_layer_caching` is set to `true`, CircleCI will try to reuse Docker Images (layers) built during a previous job or workflow (Paid feature)",
              "type": "boolean"
            },
            "name": {
              "description": "Title of the step to be shown in the CircleCI UI",
              "type": "string"
            },
            "version": {
              "default": "17.09.0-ce",
              "description": "If your build requires a specific docker image, you can set it as an image attribute",
              "enum": [
                "20.10.14",
                "20.10.12",
                "20.10.11",
                "20.10.7",
                "20.10.6",
                "20.10.2",
                "19.03.13",
                "17.09.0-ce"
              ]
            }
          },
          "type": "object"
        },
        "store_artifacts": {
          "additionalProperties": false,
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/store_artifacts"
            }
          ],
          "properties": {
            "destination": {
              "description": "Prefix added to the artifact paths in the artifacts API (default: the directory of the file specified in `path`)",
              "type": "string"
            },
            "name": {
              "description": "Title of the step to be shown in the CircleCI UI",
              "type": "string"
            },
            "path": {
              "description": "Directory in the primary container to save as job artifacts",
              "type": "string"
            }
          },
          "required": ["path"],
          "type": "object"
        },
        "store_test_results": {
          "additionalProperties": false,
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/store_test_results"
            }
          ],
          "properties": {
            "name": {
              "description": "Title of the step to be shown in the CircleCI UI",
              "type": "string"
            },
            "path": {
              "description": "Path (absolute, or relative to your `working_directory`) to directory containing subdirectories of JUnit XML or Cucumber JSON test metadata files",
              "type": "string"
            }
          },
          "required": ["path"],
          "type": "object"
        },
        "unless": {
          "additionalProperties": false,
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/unless"
            }
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/logical"
            },
            "steps": {
              "description": "A list of steps to be performed",
              "items": {
                "$ref": "#/definitions/step"
              },
              "type": "array"
            }
          },
          "required": ["condition", "steps"],
          "type": "object"
        },
        "when": {
          "additionalProperties": false,
          "allOf": [
            {
              "$ref": "#/definitions/builtinSteps/documentation/when"
            }
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/logical"
            },
            "steps": {
              "description": "A list of steps to be performed",
              "items": {
                "$ref": "#/definitions/step"
              },
              "type": "array"
            }
          },
          "required": ["condition", "steps"],
          "type": "object"
        }
      },
      "documentation": {
        "add_ssh_keys": {
          "description": "https://circleci.com/docs/configuration-reference#add_ssh_keys\n\nSpecial step that adds SSH keys from a projectâ€™s settings to a container. Also configures SSH to use these keys."
        },
        "attach_workspace": {
          "description": "https://circleci.com/docs/configuration-reference#attach_workspace\n\nSpecial step used to attach the workflow's workspace to the current container. The full contents of the workspace are downloaded and copied into the directory the workspace is being attached at."
        },
        "checkout": {
          "description": "https://circleci.com/docs/configuration-reference#checkout\n\nSpecial step used to check out source code to the configured `path` (defaults to the `working_directory`). The reason this is a special step is because it is more of a helper function designed to make checking out code easy for you. If you require doing git over HTTPS you should not use this step as it configures git to checkout over ssh."
        },
        "deploy": {
          "description": "https://circleci.com/docs/configuration-reference#deploy\n\nSpecial step for deploying artifacts. `deploy` uses the same configuration map and semantics as run step. Jobs may have more than one deploy step. In general deploy step behaves just like run with two exceptions:\n* In a job with parallelism, the deploy step will only be executed by node #0 and only if all nodes succeed. Nodes other than #0 will skip this step.\n* In a job that runs with SSH, the deploy step will not execute"
        },
        "persist_to_workspace": {
          "description": "https://circleci.com/docs/configuration-reference#persist_to_workspace\n\nSpecial step used to persist a temporary file to be used by another job in the workflow"
        },
        "restore_cache": {
          "description": "https://circleci.com/docs/configuration-reference#restore_cache\n\nRestores a previously saved cache based on a `key`. Cache needs to have been saved first for this key using the `save_cache` step."
        },
        "run": {
          "description": "https://circleci.com/docs/configuration-reference#run\n\nUsed for invoking all command-line programs, taking either a map of configuration values, or, when called in its short-form, a string that will be used as both the `command` and `name`. Run commands are executed using non-login shells by default, so you must explicitly source any dotfiles as part of the command."
        },
        "save_cache": {
          "description": "https://circleci.com/docs/configuration-reference#save_cache\n\nGenerates and stores a cache of a file or directory of files such as dependencies or source code in our object storage. Later jobs can restore this cache using the `restore_cache` step."
        },
        "setup_remote_docker": {
          "description": "https://circleci.com/docs/configuration-reference#setup_remote_docker\n\nCreates a remote Docker environment configured to execute Docker commands."
        },
        "store_artifacts": {
          "description": "https://circleci.com/docs/configuration-reference#store_artifacts\n\nStep to store artifacts (for example logs, binaries, etc) to be available in the web app or through the API."
        },
        "store_test_results": {
          "description": "https://circleci.com/docs/configuration-reference#storetestresults\n\nSpecial step used to upload test results so they display in buildsâ€™ Test Summary section and can be used for timing analysis. To also see test result as build artifacts, please use the `store_artifacts` step."
        },
        "unless": {
          "description": "https://circleci.com/docs/configuration-reference#the-when-step-requires-version-21 \n\nConditional step to run when custom conditions aren't met (determined at config-compile time) that are checked before a workflow runs"
        },
        "when": {
          "description": "https://circleci.com/docs/configuration-reference#the-when-step-requires-version-21 \n\nConditional step to run on custom conditions (determined at config-compile time) that are checked before a workflow runs"
        }
      }
    },
    "commands": {
      "additionalProperties": {
        "description": "https://circleci.com/docs/configuration-reference#commands-requires-version-21\n\nDefinition of a custom command.",
        "properties": {
          "description": {
            "description": "A string that describes the purpose of the command.",
            "type": "string"
          },
          "parameters": {
            "description": "https://circleci.com/docs/reusing-config#using-the-parameters-declaration\n\nA map of parameter keys.",
            "patternProperties": {
              "^[a-z][a-z0-9_-]+$": {
                "oneOf": [
                  {
                    "description": "https://circleci.com/docs/reusing-config#string\n\nA string parameter.",
                    "properties": {
                      "default": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "enum": ["string"]
                      }
                    },
                    "required": ["type"],
                    "type": "object"
                  },
                  {
                    "description": "https://circleci.com/docs/reusing-config#boolean\n\nA boolean parameter.",
                    "properties": {
                      "default": {
                        "type": "boolean"
                      },
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "enum": ["boolean"]
                      }
                    },
                    "required": ["type"],
                    "type": "object"
                  },
                  {
                    "description": "https://circleci.com/docs/reusing-config#integer\n\nAn integer parameter.",
                    "properties": {
                      "default": {
                        "type": "integer"
                      },
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "enum": ["integer"]
                      }
                    },
                    "required": ["type"],
                    "type": "object"
                  },
                  {
                    "description": "https://circleci.com/docs/reusing-config#enum\n\nThe `enum` parameter may be a list of any values. Use the `enum` parameter type when you want to enforce that the value must be one from a specific set of string values.",
                    "properties": {
                      "default": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "enum": {
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array"
                      },
                      "type": {
                        "enum": ["enum"]
                      }
                    },
                    "required": ["type", "enum"],
                    "type": "object"
                  },
                  {
                    "description": "https://circleci.com/docs/reusing-config#executor\n\nUse an `executor` parameter type to allow the invoker of a job to decide what executor it will run on.",
                    "properties": {
                      "default": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "enum": ["executor"]
                      }
                    },
                    "required": ["type"],
                    "type": "object"
                  },
                  {
                    "description": "https://circleci.com/docs/reusing-config#steps\n\nSteps are used when you have a job or command that needs to mix predefined and user-defined steps. When passed in to a command or job invocation, the steps passed as parameters are always defined as a sequence, even if only one step is provided.",
                    "properties": {
                      "default": {
                        "items": {
                          "$ref": "#/definitions/step"
                        },
                        "type": "array"
                      },
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "enum": ["steps"]
                      }
                    },
                    "required": ["type"],
                    "type": "object"
                  },
                  {
                    "description": "https://circleci.com/docs/reusing-config#environment-variable-name\n\nThe environment variable name parameter is a string that must match a POSIX_NAME regexp (e.g. no spaces or special characters) and is a more meaningful parameter type that enables additional checks to be performed. ",
                    "properties": {
                      "default": {
                        "pattern": "^[a-zA-Z][a-zA-Z0-9_-]+$",
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "enum": ["env_var_name"]
                      }
                    },
                    "required": ["type"],
                    "type": "object"
                  }
                ]
              }
            },
            "type": "object"
          },
          "steps": {
            "description": "A sequence of steps run inside the calling job of the command.",
            "items": {
              "$ref": "#/definitions/step"
            },
            "type": "array"
          }
        },
        "required": ["steps"],
        "type": "object"
      },
      "description": "https://circleci.com/docs/configuration-reference#commands-requires-version-21\n\nA command definition defines a sequence of steps as a map to be executed in a job, enabling you to reuse a single command definition across multiple jobs.",
      "type": "object"
    },
    "dockerExecutor": {
      "description": "Options for the [docker executor](https://circleci.com/docs/configuration-reference#docker)",
      "items": {
        "additionalProperties": false,
        "properties": {
          "auth": {
            "additionalProperties": false,
            "description": "Authentication for registries using standard `docker login` credentials",
            "properties": {
              "password": {
                "type": "string"
              },
              "username": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "aws_auth": {
            "additionalProperties": false,
            "description": "Authentication for AWS EC2 Container Registry (ECR)",
            "properties": {
              "aws_access_key_id": {
                "type": "string"
              },
              "aws_secret_access_key": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "command": {
            "description": "The command used as pid 1 (or args for entrypoint) when launching the container",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ]
          },
          "entrypoint": {
            "description": "The command used as executable when launching the container",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ]
          },
          "environment": {
            "additionalProperties": {
              "type": ["string", "number", "boolean"]
            },
            "description": "A map of environment variable names and values",
            "type": "object"
          },
          "image": {
            "description": "The name of a custom docker image to use",
            "type": "string"
          },
          "name": {
            "description": "The name the container is reachable by. By default, container services are accessible through `localhost`",
            "type": "string"
          },
          "user": {
            "description": "Which user to run the command as",
            "type": "string"
          }
        },
        "required": ["image"],
        "type": "object"
      },
      "type": "array"
    },
    "executorChoice": {
      "oneOf": [
        {
          "properties": {
            "docker": {
              "$ref": "#/definitions/dockerExecutor"
            }
          },
          "required": ["docker"],
          "type": "object"
        },
        {
          "properties": {
            "machine": {
              "$ref": "#/definitions/machineExecutor"
            }
          },
          "required": ["machine"],
          "type": "object"
        },
        {
          "properties": {
            "machine": {
              "description": "Use the default machine executor image",
              "type": "boolean"
            }
          },
          "required": ["machine"],
          "type": "object"
        },
        {
          "properties": {
            "macos": {
              "$ref": "#/definitions/macosExecutor"
            }
          },
          "required": ["macos"],
          "type": "object"
        }
      ]
    },
    "executors": {
      "additionalProperties": {
        "$ref": "#/definitions/executorChoice",
        "properties": {
          "environment": {
            "additionalProperties": {
              "type": ["string", "number"]
            },
            "description": "A map of environment variable names and values.",
            "type": "object"
          },
          "resource_class": {
            "default": "medium",
            "description": "Amount of CPU and RAM allocated to each container in a job. Note: A performance plan is required to access this feature.",
            "enum": [
              "small",
              "medium",
              "medium+",
              "large",
              "xlarge",
              "2xlarge",
              "2xlarge+",
              "gpu.nvidia.small",
              "gpu.nvidia.medium",
              "windows.gpu.nvidia.medium",
              "macos.x86.medium.gen2",
              "macos.x86.metal.gen1"
            ],
            "type": "string"
          },
          "shell": {
            "description": "Shell to use for execution command in all steps. Can be overridden by shell in each step (default: See [Default Shell Options](https://circleci.com/docs/configuration-reference#default-shell-options)",
            "type": "string"
          },
          "working_directory": {
            "description": "In which directory to run the steps.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "description": "Executors define the environment in which the steps of a job will be run, allowing you to reuse a single executor definition across multiple jobs.",
      "type": "object"
    },
    "filter": {
      "additionalProperties": false,
      "description": "A map defining rules for execution on specific branches",
      "properties": {
        "ignore": {
          "description": "Either a single branch specifier, or a list of branch specifiers",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "only": {
          "description": "Either a single branch specifier, or a list of branch specifiers",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        }
      },
      "type": "object"
    },
    "jobRef": {
      "additionalProperties": true,
      "description": "Run a job as part of this workflow",
      "properties": {
        "context": {
          "default": "org-global",
          "description": "Either a single context name, or a list of contexts. The default name is `org-global`",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "filters": {
          "additionalProperties": false,
          "description": "A map defining rules for execution on specific branches",
          "properties": {
            "branches": {
              "$ref": "#/definitions/filter"
            },
            "tags": {
              "$ref": "#/definitions/filter"
            }
          },
          "type": "object"
        },
        "matrix": {
          "additionalProperties": false,
          "description": "https://circleci.com/docs/configuration-reference#matrix-requires-version-21\n\nThe matrix stanza allows you to run a parameterized job multiple times with different arguments.",
          "properties": {
            "alias": {
              "description": "An alias for the matrix, usable from another jobâ€™s requires stanza. Defaults to the name of the job being executed",
              "type": "string"
            },
            "exclude": {
              "description": "A list of argument maps that should be excluded from the matrix",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "parameters": {
              "additionalProperties": {
                "type": "array"
              },
              "description": "A map of parameter names to every value the job should be called with",
              "type": "object"
            }
          },
          "required": ["parameters"],
          "type": "object"
        },
        "requires": {
          "description": "Jobs are run in parallel by default, so you must explicitly require any dependencies by their job name.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "A job may have a `type` of `approval` indicating it must be manually approved before downstream jobs may proceed.",
          "enum": ["approval"]
        }
      },
      "type": "object"
    },
    "jobs": {
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/executorChoice"
          },
          {
            "properties": {
              "executor": {
                "description": "The name of the executor to use (defined via the top level executors map).",
                "type": "string"
              }
            },
            "required": ["executor"],
            "type": "object"
          },
          {
            "properties": {
              "executor": {
                "description": "Executor stanza to use for the job",
                "properties": {
                  "name": {
                    "description": "The name of the executor to use (defined via the top level executors map).",
                    "type": "string"
                  }
                },
                "required": ["name"],
                "type": "object"
              }
            },
            "required": ["executor"],
            "type": "object"
          }
        ],
        "properties": {
          "branches": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map defining rules for whitelisting/blacklisting execution of specific branches for a single job that is **not** in a workflow (default: all whitelisted). See Workflows for configuring branch execution for jobs in a workflow.",
            "type": "object"
          },
          "environment": {
            "additionalProperties": {
              "type": ["string", "number"]
            },
            "description": "A map of environment variable names and variables (NOTE: these will override any environment variables you set in the CircleCI web interface).",
            "type": "object"
          },
          "parallelism": {
            "default": 1,
            "description": "Number of parallel instances of this job to run (default: 1)",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "pattern": "^<<.+\\..+>>$",
                "type": "string"
              }
            ]
          },
          "shell": {
            "description": "Shell to use for execution command in all steps. Can be overridden by shell in each step",
            "type": "string"
          },
          "steps": {
            "description": "A list of steps to be performed",
            "items": {
              "$ref": "#/definitions/step"
            },
            "type": "array"
          },
          "working_directory": {
            "default": "~/project",
            "description": "In which directory to run the steps. (default: `~/project`. `project` is a literal string, not the name of the project.) You can also refer the directory with `$CIRCLE_WORKING_DIRECTORY` environment variable.",
            "type": "string"
          }
        },
        "required": ["steps"],
        "type": "object"
      },
      "description": "Jobs are collections of steps. All of the steps in the job are executed in a single unit, either within a fresh container or VM.",
      "type": "object"
    },
    "logical": {
      "description": "https://circleci.com/docs/configuration-reference#logic-statements \n\nA logical statement to be used in dynamic configuration",
      "oneOf": [
        {
          "type": ["string", "boolean", "integer", "number"]
        },
        {
          "additionalProperties": false,
          "maxProperties": 1,
          "minProperties": 1,
          "properties": {
            "and": {
              "description": "https://circleci.com/docs/configuration-reference#logic-statements \n\nLogical and: true when all statements in the list are true",
              "items": {
                "$ref": "#/definitions/logical"
              },
              "type": "array"
            },
            "equal": {
              "description": "https://circleci.com/docs/configuration-reference#logic-statements \n\nTrue when all elements in the list are equal",
              "type": "array"
            },
            "matches": {
              "additionalProperties": false,
              "description": "https://circleci.com/docs/configuration-reference#logic-statements \n\nTrue when value matches the pattern",
              "properties": {
                "pattern": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "not": {
              "$ref": "#/definitions/logical",
              "description": "https://circleci.com/docs/configuration-reference#logic-statements \n\nLogical not: true when statement is false"
            },
            "or": {
              "description": "https://circleci.com/docs/configuration-reference#logic-statements \n\nLogical or: true when at least one statements in the list is true",
              "items": {
                "$ref": "#/definitions/logical"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "machineExecutor": {
      "additionalProperties": false,
      "description": "Options for the [machine executor](https://circleci.com/docs/configuration-reference#machine)",
      "properties": {
        "docker_layer_caching": {
          "default": "true",
          "description": "Set to `true` to enable [Docker Layer Caching](https://circleci.com/docs/docker-layer-caching). Note: If you haven't already, you must open a support ticket to have a CircleCI Sales representative contact you about enabling this feature on your account for an additional fee.",
          "type": "boolean"
        },
        "image": {
          "default": "ubuntu-2004:current",
          "description": "The VM image to use. View [available images](https://circleci.com/docs/configuration-reference#available-machine-images). **Note:** This key is **not** supported on the installable CircleCI. For information about customizing machine executor images on CircleCI installed on your servers, see our [VM Service documentation](https://circleci.com/docs/vm-service).",
          "type": "string"
        }
      },
      "required": ["image"],
      "type": "object"
    },
    "macosExecutor": {
      "additionalProperties": false,
      "description": "Options for the [macOS executor](https://circleci.com/docs/configuration-reference#macos)",
      "properties": {
        "xcode": {
          "description": "The version of Xcode that is installed on the virtual machine, see the [Supported Xcode Versions section of the Testing iOS](https://circleci.com/docs/testing-ios#supported-xcode-versions) document for the complete list.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "minimum": 0,
              "type": "string"
            }
          ]
        }
      },
      "required": ["xcode"],
      "type": "object"
    },
    "orbs": {
      "additionalProperties": {
        "oneOf": [
          {
            "description": "https://circleci.com/docs/creating-orbs#semantic-versioning-in-orbs\n\nAn orb to depend on and its semver range, or volatile for the most recent release.",
            "pattern": "^[a-z][a-z0-9_-]+/[a-z][a-z0-9_-]+@(dev:[\\.a-z0-9_-]+|\\d+|\\d+\\.\\d+|\\d+\\.\\d+\\.\\d+|volatile)$",
            "type": "string"
          },
          {
            "description": "https://circleci.com/docs/creating-orbs#creating-inline-orbs\n\nInline orbs can be handy during development of an orb or as a convenience for name-spacing jobs and commands in lengthy configurations, particularly if you later intend to share the orb with others.",
            "properties": {
              "commands": {
                "$ref": "#/definitions/commands"
              },
              "executors": {
                "$ref": "#/definitions/executors"
              },
              "jobs": {
                "$ref": "#/definitions/jobs"
              },
              "orbs": {
                "$ref": "#/definitions/orbs"
              }
            },
            "type": "object"
          }
        ]
      },
      "description": "https://circleci.com/docs/configuration-reference#orbs-requires-version-21\n\nOrbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.",
      "type": "object"
    },
    "step": {
      "anyOf": [
        {
          "$ref": "#/definitions/builtinSteps/documentation/checkout",
          "enum": ["checkout"]
        },
        {
          "$ref": "#/definitions/builtinSteps/documentation/setup_remote_docker",
          "enum": ["setup_remote_docker"]
        },
        {
          "$ref": "#/definitions/builtinSteps/documentation/add_ssh_keys",
          "enum": ["add_ssh_keys"]
        },
        {
          "description": "https://circleci.com/docs/reusing-config#invoking-reusable-commands\n\nA custom command defined via the top level commands key",
          "pattern": "^[a-z][a-z0-9_-]+$",
          "type": "string"
        },
        {
          "description": "https://circleci.com/docs/using-orbs#commands\n\nA custom command defined via an orb.",
          "pattern": "^[a-z][a-z0-9_-]+/[a-z][a-z0-9_-]+$",
          "type": "string"
        },
        {
          "maxProperties": 1,
          "minProperties": 1,
          "patternProperties": {
            "^[a-z][a-z0-9_-]+$": {
              "description": "https://circleci.com/docs/reusing-config#invoking-reusable-commands\n\nA custom command defined via the top level commands key"
            },
            "^[a-z][a-z0-9_-]+/[a-z][a-z0-9_-]+$": {
              "description": "https://circleci.com/docs/using-orbs#commands\n\nA custom command defined via an orb."
            }
          },
          "properties": {
            "add_ssh_keys": {
              "$ref": "#/definitions/builtinSteps/configuration/add_ssh_keys"
            },
            "attach_workspace": {
              "$ref": "#/definitions/builtinSteps/configuration/attach_workspace"
            },
            "checkout": {
              "$ref": "#/definitions/builtinSteps/configuration/checkout"
            },
            "deploy": {
              "$ref": "#/definitions/builtinSteps/configuration/deploy"
            },
            "persist_to_workspace": {
              "$ref": "#/definitions/builtinSteps/configuration/persist_to_workspace"
            },
            "restore_cache": {
              "$ref": "#/definitions/builtinSteps/configuration/restore_cache"
            },
            "run": {
              "$ref": "#/definitions/builtinSteps/configuration/run"
            },
            "save_cache": {
              "$ref": "#/definitions/builtinSteps/configuration/save_cache"
            },
            "setup_remote_docker": {
              "$ref": "#/definitions/builtinSteps/configuration/setup_remote_docker"
            },
            "store_artifacts": {
              "$ref": "#/definitions/builtinSteps/configuration/store_artifacts"
            },
            "store_test_results": {
              "$ref": "#/definitions/builtinSteps/configuration/store_test_results"
            },
            "unless": {
              "$ref": "#/definitions/builtinSteps/configuration/unless"
            },
            "when": {
              "$ref": "#/definitions/builtinSteps/configuration/when"
            }
          },
          "type": "object"
        }
      ]
    }
  },
  "properties": {
    "commands": {
      "$ref": "#/definitions/commands"
    },
    "executors": {
      "$ref": "#/definitions/executors"
    },
    "jobs": {
      "$ref": "#/definitions/jobs"
    },
    "orbs": {
      "$ref": "#/definitions/orbs"
    },
    "version": {
      "default": 2.1,
      "description": "The version field is intended to be used in order to issue warnings for deprecation or breaking changes.",
      "enum": [2, 2.1]
    },
    "workflows": {
      "additionalProperties": {
        "additionalProperties": false,
        "properties": {
          "jobs": {
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "additionalProperties": {
                    "$ref": "#/definitions/jobRef",
                    "type": "object"
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "triggers": {
            "description": "Specifies which triggers will cause this workflow to be executed. Default behavior is to trigger the workflow when pushing to a branch.",
            "items": {
              "additionalProperties": false,
              "properties": {
                "schedule": {
                  "description": "A workflow may have a schedule indicating it runs at a certain time, for example a nightly build that runs every day at 12am UTC:",
                  "properties": {
                    "cron": {
                      "description": "See the [crontab man page](http://pubs.opengroup.org/onlinepubs/7908799/xcu/crontab.html)",
                      "type": "string"
                    },
                    "filters": {
                      "additionalProperties": false,
                      "description": "A map defining rules for execution on specific branches",
                      "properties": {
                        "branches": {
                          "$ref": "#/definitions/filter"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "unless": {
            "$ref": "#/definitions/logical",
            "description": "Specify when *not* to run the workflow."
          },
          "when": {
            "$ref": "#/definitions/logical",
            "description": "Specify when to run the workflow."
          }
        },
        "type": "object"
      },
      "description": "Used for orchestrating all jobs. Each workflow consists of the workflow name as a key and a map as a value",
      "properties": {
        "version": {
          "description": "The Workflows `version` field is used to issue warnings for deprecation or breaking changes during v2 Beta. It is deprecated as of CircleCI v2.1",
          "enum": [2]
        }
      },
      "type": "object"
    }
  },
  "required": ["version"],
  "title": "JSON schema for CircleCI configuration files",
  "type": "object"
}
