{
  "$schema": "http://json-schema.org/draft-04/schema",
  "definitions": {
    "baseMinify": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "gzip": {
          "default": false,
          "description": "Produce a .gz file after minification.",
          "type": "boolean"
        },
        "indentSize": {
          "default": 2,
          "description": "For the multi-line output feature, how many spaces to use when indenting a block (see outputMode).",
          "type": "integer"
        },
        "outputMode": {
          "default": "singleLine",
          "description": "SingleLine minifies everything to a single line. MultipleLines breaks the minified code into multiple lines for easier reading.",
          "enum": ["multipleLines", "singleLine", "none"]
        }
      },
      "type": "object"
    },
    "coffeeScript": {
      "description": "Specify options for the compiler.",
      "properties": {
        "bare": {
          "default": false,
          "description": "CoffeeScript only. Compile the JavaScript without the top-level function safety wrapper.",
          "type": "boolean"
        },
        "runtimeMode": {
          "default": "node",
          "description": "CoffeeScript only. Specify how the Iced runtime is included in the output JavaScript file.",
          "enum": ["node", "inline", "none", "window"]
        },
        "sourceMap": {
          "default": false,
          "description": "Generates a source map file.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "cssMinify": {
      "properties": {
        "colorNames": {
          "default": "strict",
          "description": "CSS only. If no color names are to be used, set this value to 'hex'. If a set of colors recognized by all major browser is okay to use (W3C-strict validation is not required), set this value to 'major'.",
          "enum": ["hex", "major", "noSwap", "strict"]
        },
        "commentMode": {
          "default": "important",
          "description": "CSS only. How to treat comments in the code. The default is 'none', which will strip all comments except 'important' comments. 'all' will leave all comments, and 'hacks' will only leave certain known comment-based hacks.",
          "enum": ["none", "all", "hacks", "important"]
        },
        "termSemicolons": {
          "default": false,
          "description": "Forces all rules to be terminated with semicolons if set to true.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "handlebars": {
      "description": "Specify options for the compiler.",
      "properties": {
        "amd": {
          "default": false,
          "description": "Exports amd style (require.js), this option has priority to commonjs.",
          "type": "boolean"
        },
        "commonjs": {
          "default": "",
          "description": "Path to the Handlebars module to export CommonJS style",
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "knownHelpers": {
          "default": "",
          "description": "List of known helpers for a more optimized output (comma separated)",
          "type": "string"
        },
        "knownHelpersOnly": {
          "default": false,
          "description": "Compile with known helpers only",
          "type": "boolean"
        },
        "namespace": {
          "default": "",
          "description": "Template namespace",
          "type": "string"
        },
        "noBOM": {
          "default": false,
          "description": "Removes the BOM (Byte Order Mark) from the beginning of the templates.",
          "type": "boolean"
        },
        "root": {
          "default": "",
          "description": "Template root. Base value that will be stripped from template names.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "javascriptMinify": {
      "properties": {
        "evalTreatment": {
          "default": "ignore",
          "description": "JavaScript only.",
          "enum": ["ignore", "makeAllSafe", "makeImmediateSafe"]
        },
        "preserveImportantComments": {
          "default": true,
          "description": "JavaScript only.",
          "type": "boolean"
        },
        "renameLocals": {
          "default": true,
          "description": "JavaScript only. Controls if local variables should be shortened.",
          "type": "boolean"
        },
        "termSemicolons": {
          "default": true,
          "description": "Forces all rules to be terminated with semicolons if set to true.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "less": {
      "description": "Specify options for the compiler.",
      "properties": {
        "autoPrefix": {
          "default": "",
          "description": "LESS only. Support for AutoPrefixer by adding a browser string. An empty string means this feature is disabled. Example: 'last 2 versions, > 5%'. See more at https://github.com/ai/browserslist.",
          "type": "string"
        },
        "cssComb": {
          "default": "none",
          "description": "LESS only. CSScomb helps you sort and categorize CSS properties in your code to improve maintenance of your stylesheets. You can specify a relative path to a local .json file as well.",
          "oneOf": [
            {
              "enum": ["csscomb", "zen", "yandex", "none"]
            },
            {
              "pattern": ".+\\.json$",
              "type": "string"
            }
          ]
        },
        "ieCompat": {
          "default": true,
          "description": "LESS only. Currently only used for the data-uri function to ensure that images aren't created that are too large for the browser to handle.",
          "type": "boolean"
        },
        "math": {
          "default": "none",
          "description": "LESS only. Specifies which mode Less will use to process the math in your CSS.",
          "enum": [
            "always",
            "parens-division",
            "parens",
            "strict",
            "strict-legacy"
          ]
        },
        "relativeUrls": {
          "default": true,
          "description": "LESS only. This option allows you to re-write URL's in imported files so that the URL is always relative to the base imported file.",
          "type": "boolean"
        },
        "rootPath": {
          "description": "LESS only. Allows you to add a path to every generated import and URL in your CSS. This does not affect less import statements that are processed, just ones that are left in the output css.",
          "type": "string"
        },
        "sourceMap": {
          "default": false,
          "description": "Generates a base64 encoded source map at the bottom of the output.",
          "type": "boolean"
        },
        "sourceMapBasePath": {
          "description": "Scss only. This is the opposite of the rootpath option, it specifies a path which should be removed from the output paths.",
          "type": "string"
        },
        "sourceMapRoot": {
          "description": "LESS only. Base path, will be emitted in source-map as is.",
          "type": "string"
        },
        "strictMath": {
          "default": false,
          "description": "(DEPRECATED: Use 'math' instead) LESS only. Without this option on Less will try and process all maths in your CSS.",
          "type": "boolean"
        },
        "strictUnits": {
          "default": false,
          "description": "LESS only. Without this option, less attempts to guess at the output unit when it does maths.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "sass": {
      "description": "Specify options for the compiler.",
      "properties": {
        "includePath": {
          "description": "Scss only. Path to look for imported files",
          "type": "string"
        },
        "indentType": {
          "default": "space",
          "description": "Scss only. Indent type for output CSS.",
          "enum": ["space", "tab"]
        },
        "indentWidth": {
          "default": 2,
          "description": "Scss only. Number of spaces or tabs.",
          "maximum": 10,
          "type": "integer"
        },
        "lineFeed": {
          "default": "crlf",
          "description": "Scss only. Linefeed style (cr | crlf | lf | lfcr).",
          "enum": ["cr", "crlf", "lf", "lfcr"]
        },
        "outputStyle": {
          "default": "nested",
          "description": "Scss only. Determines the output format of the final CSS style.",
          "enum": ["nested", "expanded", "compact", "compressed"]
        },
        "precision": {
          "default": 5,
          "description": "Scss only. Used to determine how many digits after the decimal will be allowed. For instance, if you had a decimal number of 1.23456789 and a precision of 5, the result will be 1.23457 in the final CSS.",
          "type": "integer"
        },
        "relativeUrls": {
          "default": true,
          "description": "Scss only. This option allows you to re-write URL's to make them relative to the output file. This doesn't work for imported .scss files.",
          "type": "boolean"
        },
        "sourceMap": {
          "default": false,
          "description": "Generates a base64 encoded source map at the bottom of the output.",
          "type": "boolean"
        },
        "sourceMapRoot": {
          "description": "Scss only. Base path, will be emitted in source-map as is.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "stylus": {
      "description": "Specify options for the compiler.",
      "properties": {
        "sourceMap": {
          "default": false,
          "description": "Generates a base64 encoded source map at the bottom of the output.",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "description": "Schema for bundleconfig.json files",
  "id": "https://json.schemastore.org/compilerdefaults.json",
  "properties": {
    "compilers": {
      "properties": {
        "coffeescript": {
          "$ref": "#/definitions/coffeeScript"
        },
        "handlebars": {
          "$ref": "#/definitions/handlebars"
        },
        "less": {
          "$ref": "#/definitions/less"
        },
        "sass": {
          "$ref": "#/definitions/sass"
        },
        "stylus": {
          "$ref": "#/definitions/stylus"
        }
      },
      "type": "object"
    },
    "minifiers": {
      "properties": {
        "css": {
          "allOf": [
            {
              "$ref": "#/definitions/baseMinify"
            },
            {
              "$ref": "#/definitions/cssMinify"
            }
          ]
        },
        "javascript": {
          "allOf": [
            {
              "$ref": "#/definitions/baseMinify"
            },
            {
              "$ref": "#/definitions/javascriptMinify"
            }
          ]
        }
      },
      "type": "object"
    }
  },
  "type": "object"
}
