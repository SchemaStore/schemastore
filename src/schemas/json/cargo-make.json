{
  "$id": "https://github.com/sagiegurari/cargo-make",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {
    "env": {
      "additionalProperties": {
        "$ref": "#/definitions/env_value"
      },
      "description": "Setup environment variables",
      "title": "Env Vars",
      "type": "object",
      "x-taplo": {
        "links": {
          "key": "https://sagiegurari.github.io/cargo-make/#usage-env-config"
        }
      }
    },
    "env_files": {
      "default": [],
      "description": "Load environment files",
      "items": {
        "$ref": "#/definitions/envfile"
      },
      "title": "List of Env Files",
      "type": "array",
      "uniqueItems": true,
      "x-taplo": {
        "links": {
          "key": "https://sagiegurari.github.io/cargo-make/#usage-env-file"
        }
      }
    },
    "env_value": {
      "anyOf": [
        {
          "title": "Boolean",
          "type": "boolean"
        },
        {
          "title": "Integer",
          "type": "integer"
        },
        {
          "title": "String",
          "type": "string"
        },
        {
          "description": "An array which will be joined with the `;` separator ",
          "items": {
            "type": "string"
          },
          "title": "Separator List",
          "type": "array"
        },
        {
          "$ref": "#/definitions/env_value_unset"
        },
        {
          "$ref": "#/definitions/env_value_script"
        },
        {
          "$ref": "#/definitions/env_value_decode"
        },
        {
          "$ref": "#/definitions/env_value_conditioned"
        },
        {
          "$ref": "#/definitions/env_value_path_glob"
        },
        {
          "$ref": "#/definitions/env",
          "description": "Profile dependent environment variables",
          "title": "Profile Env Vars"
        }
      ],
      "description": "An environment variable value",
      "title": "Env Value",
      "x-taplo": {
        "links": {
          "key": "https://sagiegurari.github.io/cargo-make/#usage-env"
        }
      }
    },
    "env_value_conditioned": {
      "additionalProperties": false,
      "description": "Environment variable value set if condition is met",
      "properties": {
        "condition": {
          "$ref": "#/definitions/task_condition",
          "description": "Condition to evaluate to see whether to set the environment value or not"
        },
        "value": {
          "description": "The value to set (can be an env expression)",
          "title": "Env Value",
          "type": "string"
        }
      },
      "required": ["value"],
      "title": "Conditional Env Value",
      "type": "object",
      "x-taplo": {
        "initKeys": ["condition"]
      }
    },
    "env_value_decode": {
      "additionalProperties": false,
      "description": "Environment variable value provided by decoding other values",
      "properties": {
        "default_value": {
          "description": "The default value in case no decode mapping was found, if not provided it will default to the source value",
          "title": "Env Value",
          "type": "string"
        },
        "mapping": {
          "additionalProperties": {
            "title": "Env Value",
            "type": "string"
          },
          "default": {},
          "description": "The decoding mapping from one value to another value",
          "title": "Value Mapping",
          "type": "object"
        },
        "source": {
          "description": "The source environment variable (can be an env expression)",
          "title": "Env Var",
          "type": "string"
        }
      },
      "required": ["source", "mapping"],
      "title": "Env Value Mapping",
      "type": "object",
      "x-taplo": {
        "initKeys": ["default_value"]
      }
    },
    "env_value_path_glob": {
      "additionalProperties": false,
      "description": "Environment value holding a list of paths based on given glob definitions",
      "properties": {
        "glob": {
          "description": "The glob used to fetch all paths",
          "title": "Glob Pattern",
          "type": "string"
        },
        "ignore_type": {
          "default": "git",
          "description": "An ignore source that enables respecting ignore files from that source",
          "enum": ["git"],
          "title": "Ignore Source",
          "type": "string"
        },
        "include_dirs": {
          "default": true,
          "description": "If true, include directories in glob",
          "type": "boolean"
        },
        "include_files": {
          "default": true,
          "description": "If true, include files in glob",
          "type": "boolean"
        }
      },
      "required": ["glob"],
      "title": "Env Value Glob",
      "type": "object"
    },
    "env_value_script": {
      "additionalProperties": false,
      "description": "Provide environment variable via script",
      "properties": {
        "multi_line": {
          "default": true,
          "description": "Enable multi-line values",
          "type": "boolean"
        },
        "script": {
          "default": [],
          "items": {
            "type": "string"
          },
          "title": "Script Lines",
          "type": "array"
        }
      },
      "required": ["script"],
      "title": "Env Value Script",
      "type": "object"
    },
    "env_value_unset": {
      "additionalProperties": false,
      "description": "Unsets environment variable",
      "properties": {
        "unset": {
          "default": true,
          "description": "If true, the env variable will be unset, else ignored",
          "type": "boolean"
        }
      },
      "required": ["unset"],
      "title": "Unset",
      "type": "object"
    },
    "envfile": {
      "description": "File containing environment variables and their values",
      "examples": [
        "path/to/env.env",
        {
          "path": "path/to/env.env",
          "profile": "development"
        }
      ],
      "oneOf": [
        {
          "default": "path/to/env.env",
          "description": "The path to the env file",
          "title": "File Path",
          "type": "string"
        },
        {
          "additionalProperties": false,
          "description": "The env file path and attributes",
          "properties": {
            "base_path": {
              "default": "path/to/dir",
              "description": "The path base directory (relative paths are from this base path)",
              "title": "Directory Path",
              "type": "string"
            },
            "path": {
              "default": "path/to/env.env",
              "description": "The path to the env file",
              "title": "File Path",
              "type": "string"
            },
            "profile": {
              "default": "development",
              "description": "The profile name this file is relevant to",
              "examples": ["development", "production"],
              "title": "Profile",
              "type": "string"
            }
          },
          "required": ["path"],
          "type": "object",
          "x-taplo": {
            "initKeys": ["profile"]
          }
        }
      ],
      "title": "Env File"
    },
    "extend": {
      "additionalProperties": false,
      "description": "A potentially optional external makefile to extend",
      "properties": {
        "optional": {
          "default": true,
          "description": "If true, the external makefile is optional and does not need to exist",
          "type": "boolean"
        },
        "path": {
          "default": "path/to/Makefile.toml",
          "description": "The path of the external makefile, relative to this file",
          "title": "File Path",
          "type": "string"
        }
      },
      "required": ["path"],
      "title": "External Makefile",
      "type": "object",
      "x-taplo": {
        "initKeys": ["optional"]
      }
    },
    "script": {
      "oneOf": [
        {
          "title": "Script Line",
          "type": "string"
        },
        {
          "items": {
            "type": "string"
          },
          "title": "Script Lines",
          "type": "array"
        },
        {
          "additionalProperties": false,
          "examples": [
            {
              "file": "path/to/script"
            },
            {
              "absolute_path": true,
              "file": "path/to/script"
            }
          ],
          "properties": {
            "absolute_path": {
              "default": true,
              "description": "If true, the `file` value is an absolute path",
              "type": "boolean"
            },
            "file": {
              "default": "path/to/script",
              "description": "Scipt file name",
              "title": "File Path",
              "type": "string"
            }
          },
          "required": ["file"],
          "title": "Script File",
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Script content split to parts to enable a more fine tuned extension capability",
          "properties": {
            "main": {
              "description": "Main script section",
              "title": "Main Script",
              "type": "string"
            },
            "post": {
              "description": "Post-main script section",
              "title": "Post-Main Script",
              "type": "string"
            },
            "pre": {
              "description": "Pre-main script section",
              "title": "Pre-Main Script",
              "type": "string"
            }
          },
          "title": "Split Script",
          "type": "object",
          "x-taplo": {
            "initKeys": ["pre", "main", "post"]
          }
        }
      ],
      "title": "Script"
    },
    "semver": {
      "pattern": "^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(?:-((?:0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
      "title": "Semantic Version",
      "type": "string"
    },
    "task": {
      "additionalProperties": false,
      "description": "A task is a command, script, rust code or other sub tasks to execute. Tasks can have dependencies which are also tasks that will be executed before the task itself.",
      "properties": {
        "alias": {
          "description": "If defined, task points to another task and all other properties are ignored",
          "title": "Task Name",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-dependencies-alias"
            }
          }
        },
        "args": {
          "description": "The args for the executed command",
          "items": {
            "type": "string"
          },
          "title": "Args",
          "type": "array",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplecommand"
            }
          }
        },
        "category": {
          "description": "Category name used to document the task",
          "title": "Category",
          "type": "string"
        },
        "clear": {
          "default": true,
          "description": "If true, it should ignore all data in the base task",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-default-tasks"
            }
          }
        },
        "command": {
          "description": "The command to execute for this task",
          "title": "File Name",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplecommand"
            }
          }
        },
        "condition": {
          "$ref": "#/definitions/task_condition",
          "description": "If provided all condition values must be met in order for the task to be invoked (will not stop dependencies)"
        },
        "condition_script": {
          "description": "If script exit code is not 0, the command/script of this task will not be invoked, dependencies however will be",
          "items": {
            "type": "string"
          },
          "title": "Script",
          "type": "array",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-conditions-script"
            }
          }
        },
        "cwd": {
          "default": "path/to/dir",
          "description": "The working directory for the task to execute its command/script",
          "title": "Directory Path",
          "type": "string"
        },
        "dependencies": {
          "description": "A list of tasks to execute before this task",
          "items": {
            "oneOf": [
              {
                "description": "The name of a task in this file",
                "title": "Task Name",
                "type": "string"
              },
              {
                "additionalProperties": false,
                "description": "A task dependency potentially in another file",
                "properties": {
                  "name": {
                    "description": "The task name to execute",
                    "title": "Task Name",
                    "type": "string"
                  },
                  "path": {
                    "default": "path/to/makefile",
                    "description": "The path to the makefile the task resides in",
                    "title": "File Path",
                    "type": "string"
                  }
                },
                "required": ["name"],
                "title": "External Task",
                "type": "object",
                "x-taplo": {
                  "initKeys": ["path"]
                }
              }
            ]
          },
          "title": "List of Tasks",
          "type": "array",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-dependencies-alias"
            }
          }
        },
        "deprecated": {
          "default": true,
          "description": "If set, this task is documented as deprecated. This can be a boolean or a string deprecation message.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "title": "Deprecation Message",
              "type": "string"
            }
          ],
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-deprecated-tasks"
            }
          }
        },
        "description": {
          "description": "A description used to document the task",
          "title": "Description",
          "type": "string"
        },
        "disabled": {
          "default": true,
          "description": "If true, the command/script of this task will not be invoked, but dependencies will be",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-default-tasks"
            }
          }
        },
        "env": {
          "$ref": "#/definitions/env",
          "description": "The env vars to setup before running the task commands"
        },
        "env_files": {
          "$ref": "#/definitions/env_files",
          "description": "The env files to setup before running the task commands"
        },
        "extend": {
          "description": "Extends the specified task as a base task",
          "title": "Task Name",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-extend-attribute"
            }
          }
        },
        "force": {
          "default": true,
          "deprecated": true,
          "description": "DEPRECATED, replaced with `ignore_errors`",
          "type": "boolean",
          "x-taplo": {
            "hidden": true
          }
        },
        "ignore_errors": {
          "default": true,
          "description": "If true, any error while executing the task will be printed but will not break the build",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-ignoring-errors"
            }
          }
        },
        "install_crate": {
          "description": "Indicates the provided crate needs to be installed (if needed) before running the task",
          "oneOf": [
            {
              "default": false,
              "description": "If set to false, will disable crate installation from the base task",
              "type": "boolean"
            },
            {
              "description": "Name of the crate to install",
              "title": "Crate Name",
              "type": "string"
            },
            {
              "additionalProperties": false,
              "description": "Instructions on how to install a crate",
              "properties": {
                "binary": {
                  "description": "The binary file name to be used to test if the crate is already installed",
                  "title": "File Name",
                  "type": "string"
                },
                "crate_name": {
                  "description": "Name of the crate to install",
                  "title": "Crate Name",
                  "type": "string"
                },
                "min_version": {
                  "$ref": "#/definitions/semver",
                  "description": "Minimum version of installed crate before it needs to be reinstalled"
                },
                "rustup_component_name": {
                  "description": "The component to install via rustup",
                  "title": "Component Name",
                  "type": "string"
                },
                "test_arg": {
                  "description": "Arguments used to check whether a crate or rustup component is installed.",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Args"
                },
                "version": {
                  "$ref": "#/definitions/semver",
                  "description": "Exact version of installed crate"
                }
              },
              "required": ["crate_name", "binary", "test_arg"],
              "title": "Crate Install Options",
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Instructions on how to install a rustup component",
              "properties": {
                "binary": {
                  "description": "The binary file name to be used to test if the crate is already installed",
                  "title": "File Name",
                  "type": "string"
                },
                "rustup_component_name": {
                  "description": "The component to install via rustup",
                  "title": "Component Name",
                  "type": "string"
                },
                "test_arg": {
                  "description": "Arguments used to check whether a crate or rustup component is installed.",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Args"
                }
              },
              "required": ["rustup_component_name"],
              "title": "Component Install Options",
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Instructions on how to install a cargo plugin",
              "properties": {
                "crate_name": {
                  "description": "Name of the crate to install",
                  "title": "Crate Name",
                  "type": "string"
                },
                "min_version": {
                  "$ref": "#/definitions/semver",
                  "description": "Minimum version of installed crate before it needs to be reinstalled"
                }
              },
              "required": ["crate_name", "min_version"],
              "title": "Plugin Install Options",
              "type": "object"
            }
          ],
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-installing-crates"
            }
          }
        },
        "install_crate_args": {
          "description": "Additional cargo install args",
          "items": {
            "type": "string"
          },
          "title": "Args",
          "type": "array"
        },
        "install_script": {
          "$ref": "#/definitions/script",
          "description": "Provided script will be executed before running the task"
        },
        "linux": {
          "$ref": "#/definitions/task",
          "description": "Override task if runtime OS is Linux (takes precedence over alias)"
        },
        "linux_alias": {
          "description": "If defined and this platform is Linux, task points to another task and all other properties are ignored (takes precedence over `alias` on Linux)",
          "title": "Task Name",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-dependencies-alias"
            }
          }
        },
        "mac": {
          "$ref": "#/definitions/task",
          "description": "Override task if runtime OS is Mac (takes precedence over alias)"
        },
        "mac_alias": {
          "description": "If defined and this platform is Mac, task points to another task and all other properties are ignored (takes precedence over `alias` on Mac)",
          "title": "Task Name",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-dependencies-alias"
            }
          }
        },
        "private": {
          "default": true,
          "description": "If true, the task is hidden from the list of available tasks and also cannot be invoked directly from CLI",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-private-tasks"
            }
          }
        },
        "run_task": {
          "description": "Run a task as a sub-task at the end of executing this task",
          "oneOf": [
            {
              "description": "Name of the sub-task to execute",
              "title": "Task Name",
              "type": "string"
            },
            {
              "additionalProperties": false,
              "properties": {
                "cleanup_task": {
                  "description": "A task to run after all specified sub-tasks have completed",
                  "title": "Task Name",
                  "type": "string",
                  "x-taplo": {
                    "links": {
                      "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplesubtask"
                    }
                  }
                },
                "fork": {
                  "default": true,
                  "description": "Fork the sub-task into a a new subprocess",
                  "type": "boolean",
                  "x-taplo": {
                    "links": {
                      "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplesubtask"
                    }
                  }
                },
                "name": {
                  "description": "Name(s) of the sub-task to execute",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "title": "Task Name",
                        "type": "string"
                      },
                      "title": "List of Task Names",
                      "type": "array"
                    }
                  ],
                  "title": "Task Name"
                },
                "parallel": {
                  "default": true,
                  "description": "Run tasks in parallel",
                  "type": "boolean",
                  "x-taplo": {
                    "links": {
                      "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplesubtask"
                    }
                  }
                }
              },
              "required": ["name"],
              "type": "object"
            },
            {
              "description": "Conditional sub-task selector",
              "items": {
                "additionalProperties": false,
                "description": "Sub-task routing information",
                "properties": {
                  "cleanup_task": {
                    "description": "A task to run after all specified sub-tasks have completed",
                    "title": "Task Name",
                    "type": "string",
                    "x-taplo": {
                      "links": {
                        "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplesubtask"
                      }
                    }
                  },
                  "condition": {
                    "$ref": "#/definitions/task_condition",
                    "description": "If provided all condition values must be met in order for the task to be invoked"
                  },
                  "condition_script": {
                    "description": "If script exit code is not 0, the sub tasks will not be invoked",
                    "items": {
                      "type": "string"
                    },
                    "title": "Script",
                    "type": "array"
                  },
                  "fork": {
                    "default": true,
                    "description": "Fork the sub-task into a a new subprocess",
                    "type": "boolean",
                    "x-taplo": {
                      "links": {
                        "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplesubtask"
                      }
                    }
                  },
                  "name": {
                    "description": "Name(s) of the sub-task to execute",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "items": {
                          "title": "Task Name",
                          "type": "string"
                        },
                        "title": "List of Task Names",
                        "type": "array"
                      }
                    ],
                    "title": "Task Name"
                  },
                  "parallel": {
                    "default": true,
                    "description": "Run tasks in parallel",
                    "type": "boolean",
                    "x-taplo": {
                      "links": {
                        "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplesubtask"
                      }
                    }
                  }
                },
                "required": ["name"],
                "type": "object"
              },
              "title": "Conditional Tasks",
              "type": "array"
            }
          ],
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplesubtask"
            }
          }
        },
        "script": {
          "$ref": "#/definitions/script",
          "description": "If `command` is not defined, but `script` is defined, the provided script will be executed",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplescript"
            }
          }
        },
        "script_extension": {
          "description": "The file extension to use for the script",
          "examples": ["py", "pl", "js", "php", "ps1"],
          "title": "File Extension",
          "type": "string"
        },
        "script_runner": {
          "description": "The script attribute may hold non OS scripts, for example rust code to be compiled and executed. In order to use non OS script runners, you must define the special script_runner with the @ prefix.",
          "examples": [
            "@rust",
            "@duckscript",
            "@shell",
            "python",
            "perl",
            "node",
            "php",
            "powershell"
          ],
          "title": "Script Runner",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task"
            }
          }
        },
        "script_runner_args": {
          "description": "The script runner arguments before the script file path",
          "examples": ["-f"],
          "title": "Args",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplegeneric"
            }
          }
        },
        "toolchain": {
          "description": "The rust toolchain used to invoke the command or install the needed crates/components",
          "title": "Toolchain",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-toolchain"
            }
          }
        },
        "watch": {
          "default": true,
          "description": "Watch for file changes and invoke the task operation",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "ignore_pattern": {
                  "description": "Ignore a glob/gitignore-style pattern while watching",
                  "title": "Glob Pattern",
                  "type": "string"
                },
                "no_git_ignore": {
                  "default": true,
                  "description": "Do not use .gitignore files while watching",
                  "type": "boolean"
                },
                "postpone": {
                  "default": true,
                  "description": "Postpone first run until a file changes",
                  "type": "boolean"
                },
                "version": {
                  "$ref": "#/definitions/semver",
                  "description": "Version of cargo-watch to install if it's not already installed"
                },
                "watch": {
                  "description": "List of files and folders to watch",
                  "items": {
                    "description": "File or folder to watch",
                    "title": "Path",
                    "type": "string"
                  },
                  "title": "List of Paths",
                  "type": "array"
                }
              },
              "title": "Watch Options",
              "type": "object",
              "x-taplo": {
                "initKeys": ["watch"]
              }
            }
          ],
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-watch"
            }
          }
        },
        "windows": {
          "$ref": "#/definitions/task",
          "description": "Override task if runtime OS is Windows (takes precedence over alias)"
        },
        "windows_alias": {
          "description": "If defined and this platform is Windows, task points to another task and all other properties are ignored (takes precedence over `alias` on Windows)",
          "title": "Task Name",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-task-dependencies-alias"
            }
          }
        },
        "workspace": {
          "default": false,
          "description": "Set to false to specify that this is not a workspace and should not call the task for every member (same as --no-workspace CLI flag)",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-workspace-disabling-workspace-support"
            }
          }
        },
        "x-taplo": {
          "links": {
            "key": "https://sagiegurari.github.io/cargo-make/#usage-task-command-script-task-examplegeneric"
          }
        }
      },
      "title": "Task",
      "type": "object"
    },
    "task_condition": {
      "additionalProperties": false,
      "description": "Conditions allow you to evaluate at runtime if to run a specific task or not",
      "properties": {
        "channels": {
          "description": "Rust channels to match for the condition",
          "items": {
            "default": "stable",
            "description": "Rust channel",
            "enum": ["stable", "beta", "nightly"],
            "title": "Channel",
            "type": "string"
          },
          "title": "List of Channels",
          "type": "array"
        },
        "env": {
          "additionalProperties": {
            "description": "Environment value",
            "title": "Env Value",
            "type": "string"
          },
          "description": "Map of environment variables that must be defined and equal to the provided values",
          "title": "Env Vars",
          "type": "object"
        },
        "env_contains": {
          "additionalProperties": {
            "description": "Environment value",
            "title": "Env Value",
            "type": "string"
          },
          "description": "Map of environment variables that must be defined and contain (case insensitive) the provided values",
          "title": "Env Vars",
          "type": "object"
        },
        "env_false": {
          "description": "List of environment variables which must be defined and must be set to any of the following (case insensitive): `false`, `no`, `0`, or empty",
          "items": {
            "description": "Environment variable",
            "title": "Env Var",
            "type": "string"
          },
          "title": "List of Env Vars",
          "type": "array"
        },
        "env_not_set": {
          "description": "List of environment variables which must not be defined",
          "items": {
            "description": "Environment variable",
            "title": "Env Var",
            "type": "string"
          },
          "title": "List of Env Vars",
          "type": "array"
        },
        "env_set": {
          "description": "List of environment variables which must be defined",
          "items": {
            "description": "Environment variable",
            "title": "Env Var",
            "type": "string"
          },
          "title": "List of Env Vars",
          "type": "array"
        },
        "env_true": {
          "description": "List of environment variables which must be defined and must not be set to any of the following (case insensitive): `false`, `no`, `0`, or empty",
          "items": {
            "description": "Environment variable",
            "title": "Env Var",
            "type": "string"
          },
          "title": "List of Env Vars",
          "type": "array"
        },
        "fail_message": {
          "description": "Message to display when the condition fails",
          "title": "Message",
          "type": "string"
        },
        "files_exist": {
          "description": "List of absolute path files to check they exist. Environment substitution is supported so you can define relative paths",
          "items": {
            "description": "File path",
            "title": "File Path",
            "type": "string"
          },
          "title": "List of Files",
          "type": "array"
        },
        "files_not_exist": {
          "description": "List of absolute path files to check they do not exist. Environment substitution is supported so you can define relative paths",
          "items": {
            "description": "File path",
            "title": "File Path",
            "type": "string"
          },
          "title": "List of Files",
          "type": "array"
        },
        "platforms": {
          "description": "Platform names to match for the condition",
          "items": {
            "description": "Platform name",
            "enum": ["linux", "windows", "mac"],
            "title": "Platform",
            "type": "string"
          },
          "title": "List of Platforms",
          "type": "array"
        },
        "profiles": {
          "default": [],
          "description": "Profile names to match for the condition",
          "items": {
            "default": "development",
            "description": "Profile name",
            "title": "Profile",
            "type": "string"
          },
          "title": "List of Profiles",
          "type": "array"
        },
        "rust_version": {
          "additionalProperties": false,
          "description": "A definition of min, max and/or specific rust version",
          "properties": {
            "equal": {
              "$ref": "#/definitions/semver",
              "description": "Exact Rust version"
            },
            "max": {
              "$ref": "#/definitions/semver",
              "description": "Maximum Rust version"
            },
            "min": {
              "$ref": "#/definitions/semver",
              "description": "Minimum Rust version"
            }
          },
          "title": "Rust Version Criteria",
          "type": "object",
          "x-taplo": {
            "initKeys": ["min"]
          }
        }
      },
      "title": "Condition",
      "type": "object",
      "x-taplo": {
        "links": {
          "key": "https://sagiegurari.github.io/cargo-make/#usage-conditions"
        }
      }
    }
  },
  "description": "A schema for cargo-make makefiles",
  "properties": {
    "config": {
      "additionalProperties": false,
      "description": "Configuration options for this makefile",
      "properties": {
        "additional_profiles": {
          "default": [],
          "description": "Additional profile names to load",
          "examples": [["additional_profile"]],
          "items": {
            "default": "additional_profile",
            "description": "Additional profile name to load",
            "title": "Profile",
            "type": "string"
          },
          "title": "List of Profiles",
          "type": "array",
          "uniqueItems": true,
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-profiles"
            }
          }
        },
        "default_to_workspace": {
          "default": true,
          "description": "The default value for the `workspace` value of tasks in this makefile",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-workspace-disabling-workspace-support"
            }
          }
        },
        "end_task": {
          "default": "end",
          "description": "End task name which will be invoked at the end of every run",
          "title": "Task Name",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-init-end-tasks"
            }
          }
        },
        "init_task": {
          "default": "init",
          "description": "Init task name which will be invoked at the start of every run",
          "title": "Task Name",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-init-end-tasks"
            }
          }
        },
        "legacy_migration_task": {
          "default": "legacy-migration",
          "description": "The name of the task which runs legacy migration flows",
          "title": "Task Name",
          "type": "string",
          "x-taplo": {
            "hidden": true
          }
        },
        "linux_load_script": {
          "$ref": "#/definitions/script",
          "description": "Invoked while loading the descriptor file but before loading any extended descriptor. Takes precedence over `load_script` if runtime OS is Linux.",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-load-scripts"
            }
          }
        },
        "load_cargo_aliases": {
          "default": true,
          "description": "Automatically load cargo aliases as cargo-make tasks",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-cargo-alias-tasks"
            }
          }
        },
        "load_script": {
          "$ref": "#/definitions/script",
          "description": "Invoked while loading the descriptor file but before loading any extended descriptor",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-load-scripts"
            }
          }
        },
        "mac_load_script": {
          "$ref": "#/definitions/script",
          "description": "Invoked while loading the descriptor file but before loading any extended descriptor. Takes precedence over `load_script` if runtime OS is Mac.",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-load-scripts"
            }
          }
        },
        "main_project_member": {
          "default": "main-crate",
          "description": "The project information member (used by workspaces)",
          "title": "Crate",
          "type": "string"
        },
        "min_version": {
          "$ref": "#/definitions/semver",
          "default": "0.35.0",
          "description": "Minimum cargo-make/makers version",
          "examples": ["0.35.0", "0.34.0", "0.33.0"],
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-min-version"
            }
          }
        },
        "modify_core_tasks": {
          "additionalProperties": false,
          "description": "Options to modify all the core tasks",
          "examples": [
            {
              "private": true
            },
            {
              "namespace": "default"
            },
            {
              "namespace": "default",
              "private": true
            }
          ],
          "properties": {
            "namespace": {
              "default": "default",
              "description": "If set to some value, all core tasks are modified to: `namespace::name`",
              "title": "Namespace",
              "type": "string"
            },
            "private": {
              "default": true,
              "description": "If true, all core tasks will be set to private (default false)",
              "type": "boolean"
            }
          },
          "type": "object",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-predefined-flows-modify"
            }
          }
        },
        "on_error_task": {
          "default": "catch",
          "description": "The name of the task to run in case of any error during the invocation of the flow",
          "title": "Task Name",
          "type": "string",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-catching-errors"
            }
          }
        },
        "reduce_output": {
          "default": true,
          "description": "Set to true to reduce console output for non CI execution",
          "type": "boolean"
        },
        "skip_core_tasks": {
          "default": false,
          "description": "If true, the default core tasks will not be loaded",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-predefined-flows-disable"
            }
          }
        },
        "skip_crate_env_info": {
          "default": false,
          "description": "If true, the current crate related environment variables will not be loaded",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://github.com/sagiegurari/cargo-make#performance-tuning"
            }
          }
        },
        "skip_git_env_info": {
          "default": false,
          "description": "If true, the Git related environment variables will not be loaded",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://github.com/sagiegurari/cargo-make#performance-tuning"
            }
          }
        },
        "skip_rust_env_info": {
          "default": false,
          "description": "If true, the rust related environment variables will not be loaded",
          "type": "boolean",
          "x-taplo": {
            "links": {
              "key": "https://github.com/sagiegurari/cargo-make#performance-tuning"
            }
          }
        },
        "time_summary": {
          "default": true,
          "description": "Set to true to print time summary at the end of the flow",
          "type": "boolean"
        },
        "windows_load_script": {
          "$ref": "#/definitions/script",
          "description": "Invoked while loading the descriptor file but before loading any extended descriptor. Takes precedence over `load_script` if runtime OS is Windows.",
          "x-taplo": {
            "links": {
              "key": "https://sagiegurari.github.io/cargo-make/#usage-load-scripts"
            }
          }
        }
      },
      "title": "Config",
      "type": "object",
      "x-taplo": {
        "initKeys": ["min_version"],
        "links": {
          "key": "https://sagiegurari.github.io/cargo-make/api/cli/types/struct.ConfigSection.html"
        }
      }
    },
    "env": {
      "$ref": "#/definitions/env",
      "description": "The environment variables to setup before running any tasks"
    },
    "env_files": {
      "$ref": "#/definitions/env_files",
      "description": "The environment files to setup before running any tasks"
    },
    "env_scripts": {
      "default": [],
      "description": "The environment scripts to execute after environment files and the env block. These scripts can be used to run anything needed before starting up the flow.",
      "items": {
        "$ref": "#/definitions/script",
        "description": "Env script",
        "type": "string"
      },
      "title": "List of Env Scripts",
      "type": "array",
      "x-taplo": {
        "links": {
          "key": "https://sagiegurari.github.io/cargo-make/#usage-env-file"
        }
      }
    },
    "extend": {
      "default": "path/to/Makefile.toml",
      "description": "Extend an external makefile by importing its tasks and properties to this file. Paths are relative to this makefile",
      "examples": [
        "path/to/Makefile.toml",
        {
          "optional": true,
          "path": "path/to/Makefile.toml"
        },
        [
          {
            "optional": true,
            "path": "path/to/Makefile.toml"
          }
        ]
      ],
      "oneOf": [
        {
          "description": "File path to external makefile relative to this file",
          "examples": ["path/to/Makefile.toml"],
          "title": "File Path",
          "type": "string"
        },
        {
          "$ref": "#/definitions/extend"
        },
        {
          "description": "List of external makefiles to extend",
          "items": {
            "$ref": "#/definitions/extend"
          },
          "title": "External Makefile List",
          "type": "array",
          "uniqueItems": true
        }
      ],
      "title": "Extend External Makefile",
      "x-taplo": {
        "links": {
          "key": "https://sagiegurari.github.io/cargo-make/#usage-workspace-extending-external-makefile"
        }
      }
    },
    "tasks": {
      "additionalProperties": {
        "$ref": "#/definitions/task"
      },
      "description": "Task definitions",
      "type": "object"
    }
  },
  "title": "Makefile.toml",
  "type": "object",
  "x-taplo-info": {
    "authors": ["Kathryn Long (https://github.com/starkat99)"],
    "patterns": ["^(.*(/|\\\\)Makefile\\.toml|Makefile\\.toml)$"],
    "version": "0.35.0"
  }
}
