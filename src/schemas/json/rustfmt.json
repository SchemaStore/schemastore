{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://json.schemastore.org/rustfmt.json",
  "$comment": "Parts of this file were taken from rustfmt's repository, which is double licensed under MIT and Apache 2.0, on 2024-10-21.",
  "title": "rustfmt",
  "description": "rustfmt configurations",
  "type": "object",
  "properties": {
    "array_width": {
      "type": "integer",
      "description": "Maximum width of an array literal before falling back to vertical formatting.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `array_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "markdownDescription": "Maximum width of an array literal before falling back to vertical formatting.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `array_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "x-intellij-html-description": "<p>Maximum width of an array literal before falling back to vertical formatting.</p>\n<p>Possible values: any positive integer that is less than or equal to the value specified for <code>max_width</code></p>\n<p>Stable: Yes</p>\n<p>By default this option is set as a percentage of <code>max_width</code> provided by <code>use_small_heuristics</code>, but a value set directly for <code>array_width</code> will take precedence.</p>\n<p>See also <code>max_width</code> and <code>use_small_heuristics</code></p>\n",
      "default": 60
    },
    "attr_fn_like_width": {
      "type": "integer",
      "description": "Maximum width of the args of a function-like attributes before falling back to vertical formatting.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `attr_fn_like_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "markdownDescription": "Maximum width of the args of a function-like attributes before falling back to vertical formatting.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `attr_fn_like_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "x-intellij-html-description": "<p>Maximum width of the args of a function-like attributes before falling back to vertical formatting.</p>\n<p>Possible values: any positive integer that is less than or equal to the value specified for <code>max_width</code></p>\n<p>Stable: Yes</p>\n<p>By default this option is set as a percentage of <code>max_width</code> provided by <code>use_small_heuristics</code>, but a value set directly for <code>attr_fn_like_width</code> will take precedence.</p>\n<p>See also <code>max_width</code> and <code>use_small_heuristics</code></p>\n",
      "default": 70
    },
    "binop_separator": {
      "type": "string",
      "description": "Where to put a binary operator when a binary expression goes multiline.\n\nStable: No (tracking issue: [#3368](https://github.com/rust-lang/rustfmt/issues/3368))\n\n\n#### `\"Front\"` (default):\n\n```rust\nfn main() {\n    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo\n        || barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n\n    let sum = 123456789012345678901234567890\n        + 123456789012345678901234567890\n        + 123456789012345678901234567890;\n\n    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n        ..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n}\n```\n\n#### `\"Back\"`:\n\n```rust\nfn main() {\n    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo ||\n        barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n\n    let sum = 123456789012345678901234567890 +\n        123456789012345678901234567890 +\n        123456789012345678901234567890;\n\n    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa..\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n}\n```",
      "markdownDescription": "Where to put a binary operator when a binary expression goes multiline.\n\nStable: No (tracking issue: [#3368](https://github.com/rust-lang/rustfmt/issues/3368))\n\n\n#### `\"Front\"` (default):\n\n```rust\nfn main() {\n    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo\n        || barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n\n    let sum = 123456789012345678901234567890\n        + 123456789012345678901234567890\n        + 123456789012345678901234567890;\n\n    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n        ..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n}\n```\n\n#### `\"Back\"`:\n\n```rust\nfn main() {\n    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo ||\n        barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n\n    let sum = 123456789012345678901234567890 +\n        123456789012345678901234567890 +\n        123456789012345678901234567890;\n\n    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa..\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n}\n```",
      "x-intellij-html-description": "<p>Where to put a binary operator when a binary expression goes multiline.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3368\">#3368</a>)</p>\n<h4><code>&quot;Front&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo\n        || barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n\n    let sum = 123456789012345678901234567890\n        + 123456789012345678901234567890\n        + 123456789012345678901234567890;\n\n    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n        ..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n}\n</code></pre>\n<h4><code>&quot;Back&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo ||\n        barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n\n    let sum = 123456789012345678901234567890 +\n        123456789012345678901234567890 +\n        123456789012345678901234567890;\n\n    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa..\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n}\n</code></pre>\n",
      "default": "Front",
      "enum": ["Front", "Back"]
    },
    "blank_lines_lower_bound": {
      "type": "integer",
      "description": "Minimum number of blank lines which must be put between items. If two items have fewer blank lines between\nthem, additional blank lines are inserted.\n\nPossible values: *unsigned integer*\n\nStable: No (tracking issue: [#3382](https://github.com/rust-lang/rustfmt/issues/3382))\n\n\n### Example\nOriginal Code (rustfmt will not change it with the default value of `0`):\n\n```rust\n#![rustfmt::skip]\n\nfn foo() {\n    println!(\"a\");\n}\nfn bar() {\n    println!(\"b\");\n    println!(\"c\");\n}\n```\n\n#### `1`\n```rust\nfn foo() {\n\n    println!(\"a\");\n}\n\nfn bar() {\n\n    println!(\"b\");\n\n    println!(\"c\");\n}\n```",
      "markdownDescription": "Minimum number of blank lines which must be put between items. If two items have fewer blank lines between\nthem, additional blank lines are inserted.\n\nPossible values: *unsigned integer*\n\nStable: No (tracking issue: [#3382](https://github.com/rust-lang/rustfmt/issues/3382))\n\n\n### Example\nOriginal Code (rustfmt will not change it with the default value of `0`):\n\n```rust\n#![rustfmt::skip]\n\nfn foo() {\n    println!(\"a\");\n}\nfn bar() {\n    println!(\"b\");\n    println!(\"c\");\n}\n```\n\n#### `1`\n```rust\nfn foo() {\n\n    println!(\"a\");\n}\n\nfn bar() {\n\n    println!(\"b\");\n\n    println!(\"c\");\n}\n```",
      "x-intellij-html-description": "<p>Minimum number of blank lines which must be put between items. If two items have fewer blank lines between\nthem, additional blank lines are inserted.</p>\n<p>Possible values: <em>unsigned integer</em></p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3382\">#3382</a>)</p>\n<h3>Example</h3>\n<p>Original Code (rustfmt will not change it with the default value of <code>0</code>):</p>\n<pre><code class=\"language-rust\">#![rustfmt::skip]\n\nfn foo() {\n    println!(&quot;a&quot;);\n}\nfn bar() {\n    println!(&quot;b&quot;);\n    println!(&quot;c&quot;);\n}\n</code></pre>\n<h4><code>1</code></h4>\n<pre><code class=\"language-rust\">fn foo() {\n\n    println!(&quot;a&quot;);\n}\n\nfn bar() {\n\n    println!(&quot;b&quot;);\n\n    println!(&quot;c&quot;);\n}\n</code></pre>\n",
      "default": 0
    },
    "blank_lines_upper_bound": {
      "type": "integer",
      "description": "Maximum number of blank lines which can be put between items. If more than this number of consecutive empty\nlines are found, they are trimmed down to match this integer.\n\nPossible values: any non-negative integer\n\nStable: No (tracking issue: [#3381](https://github.com/rust-lang/rustfmt/issues/3381))\n\n\n### Example\nOriginal Code:\n\n```rust\n#![rustfmt::skip]\n\nfn foo() {\n    println!(\"a\");\n}\n\n\n\nfn bar() {\n    println!(\"b\");\n\n\n    println!(\"c\");\n}\n```\n\n#### `1` (default):\n```rust\nfn foo() {\n    println!(\"a\");\n}\n\nfn bar() {\n    println!(\"b\");\n\n    println!(\"c\");\n}\n```\n\n#### `2`:\n```rust\nfn foo() {\n    println!(\"a\");\n}\n\n\nfn bar() {\n    println!(\"b\");\n\n\n    println!(\"c\");\n}\n```\n\nSee also: `blank_lines_lower_bound`",
      "markdownDescription": "Maximum number of blank lines which can be put between items. If more than this number of consecutive empty\nlines are found, they are trimmed down to match this integer.\n\nPossible values: any non-negative integer\n\nStable: No (tracking issue: [#3381](https://github.com/rust-lang/rustfmt/issues/3381))\n\n\n### Example\nOriginal Code:\n\n```rust\n#![rustfmt::skip]\n\nfn foo() {\n    println!(\"a\");\n}\n\n\n\nfn bar() {\n    println!(\"b\");\n\n\n    println!(\"c\");\n}\n```\n\n#### `1` (default):\n```rust\nfn foo() {\n    println!(\"a\");\n}\n\nfn bar() {\n    println!(\"b\");\n\n    println!(\"c\");\n}\n```\n\n#### `2`:\n```rust\nfn foo() {\n    println!(\"a\");\n}\n\n\nfn bar() {\n    println!(\"b\");\n\n\n    println!(\"c\");\n}\n```\n\nSee also: `blank_lines_lower_bound`",
      "x-intellij-html-description": "<p>Maximum number of blank lines which can be put between items. If more than this number of consecutive empty\nlines are found, they are trimmed down to match this integer.</p>\n<p>Possible values: any non-negative integer</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3381\">#3381</a>)</p>\n<h3>Example</h3>\n<p>Original Code:</p>\n<pre><code class=\"language-rust\">#![rustfmt::skip]\n\nfn foo() {\n    println!(&quot;a&quot;);\n}\n\n\n\nfn bar() {\n    println!(&quot;b&quot;);\n\n\n    println!(&quot;c&quot;);\n}\n</code></pre>\n<h4><code>1</code> (default):</h4>\n<pre><code class=\"language-rust\">fn foo() {\n    println!(&quot;a&quot;);\n}\n\nfn bar() {\n    println!(&quot;b&quot;);\n\n    println!(&quot;c&quot;);\n}\n</code></pre>\n<h4><code>2</code>:</h4>\n<pre><code class=\"language-rust\">fn foo() {\n    println!(&quot;a&quot;);\n}\n\n\nfn bar() {\n    println!(&quot;b&quot;);\n\n\n    println!(&quot;c&quot;);\n}\n</code></pre>\n<p>See also: <code>blank_lines_lower_bound</code></p>\n",
      "default": 1
    },
    "brace_style": {
      "type": "string",
      "description": "Brace style for items\n\nStable: No (tracking issue: [#3376](https://github.com/rust-lang/rustfmt/issues/3376))\n\n\n### Functions\n\n#### `\"SameLineWhere\"` (default):\n\n```rust\nfn lorem() {\n    // body\n}\n\nfn lorem(ipsum: usize) {\n    // body\n}\n\nfn lorem<T>(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div,\n{\n    // body\n}\n```\n\n#### `\"AlwaysNextLine\"`:\n\n```rust\nfn lorem()\n{\n    // body\n}\n\nfn lorem(ipsum: usize)\n{\n    // body\n}\n\nfn lorem<T>(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div,\n{\n    // body\n}\n```\n\n#### `\"PreferSameLine\"`:\n\n```rust\nfn lorem() {\n    // body\n}\n\nfn lorem(ipsum: usize) {\n    // body\n}\n\nfn lorem<T>(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div, {\n    // body\n}\n```\n\n### Structs and enums\n\n#### `\"SameLineWhere\"` (default):\n\n```rust\nstruct Lorem {\n    ipsum: bool,\n}\n\nstruct Dolor<T>\nwhere\n    T: Eq,\n{\n    sit: T,\n}\n```\n\n#### `\"AlwaysNextLine\"`:\n\n```rust\nstruct Lorem\n{\n    ipsum: bool,\n}\n\nstruct Dolor<T>\nwhere\n    T: Eq,\n{\n    sit: T,\n}\n```\n\n#### `\"PreferSameLine\"`:\n\n```rust\nstruct Lorem {\n    ipsum: bool,\n}\n\nstruct Dolor<T>\nwhere\n    T: Eq, {\n    sit: T,\n}\n```",
      "markdownDescription": "Brace style for items\n\nStable: No (tracking issue: [#3376](https://github.com/rust-lang/rustfmt/issues/3376))\n\n\n### Functions\n\n#### `\"SameLineWhere\"` (default):\n\n```rust\nfn lorem() {\n    // body\n}\n\nfn lorem(ipsum: usize) {\n    // body\n}\n\nfn lorem<T>(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div,\n{\n    // body\n}\n```\n\n#### `\"AlwaysNextLine\"`:\n\n```rust\nfn lorem()\n{\n    // body\n}\n\nfn lorem(ipsum: usize)\n{\n    // body\n}\n\nfn lorem<T>(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div,\n{\n    // body\n}\n```\n\n#### `\"PreferSameLine\"`:\n\n```rust\nfn lorem() {\n    // body\n}\n\nfn lorem(ipsum: usize) {\n    // body\n}\n\nfn lorem<T>(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div, {\n    // body\n}\n```\n\n### Structs and enums\n\n#### `\"SameLineWhere\"` (default):\n\n```rust\nstruct Lorem {\n    ipsum: bool,\n}\n\nstruct Dolor<T>\nwhere\n    T: Eq,\n{\n    sit: T,\n}\n```\n\n#### `\"AlwaysNextLine\"`:\n\n```rust\nstruct Lorem\n{\n    ipsum: bool,\n}\n\nstruct Dolor<T>\nwhere\n    T: Eq,\n{\n    sit: T,\n}\n```\n\n#### `\"PreferSameLine\"`:\n\n```rust\nstruct Lorem {\n    ipsum: bool,\n}\n\nstruct Dolor<T>\nwhere\n    T: Eq, {\n    sit: T,\n}\n```",
      "x-intellij-html-description": "<p>Brace style for items</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3376\">#3376</a>)</p>\n<h3>Functions</h3>\n<h4><code>&quot;SameLineWhere&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem() {\n    // body\n}\n\nfn lorem(ipsum: usize) {\n    // body\n}\n\nfn lorem&lt;T&gt;(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div,\n{\n    // body\n}\n</code></pre>\n<h4><code>&quot;AlwaysNextLine&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem()\n{\n    // body\n}\n\nfn lorem(ipsum: usize)\n{\n    // body\n}\n\nfn lorem&lt;T&gt;(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div,\n{\n    // body\n}\n</code></pre>\n<h4><code>&quot;PreferSameLine&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem() {\n    // body\n}\n\nfn lorem(ipsum: usize) {\n    // body\n}\n\nfn lorem&lt;T&gt;(ipsum: T)\nwhere\n    T: Add + Sub + Mul + Div, {\n    // body\n}\n</code></pre>\n<h3>Structs and enums</h3>\n<h4><code>&quot;SameLineWhere&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">struct Lorem {\n    ipsum: bool,\n}\n\nstruct Dolor&lt;T&gt;\nwhere\n    T: Eq,\n{\n    sit: T,\n}\n</code></pre>\n<h4><code>&quot;AlwaysNextLine&quot;</code>:</h4>\n<pre><code class=\"language-rust\">struct Lorem\n{\n    ipsum: bool,\n}\n\nstruct Dolor&lt;T&gt;\nwhere\n    T: Eq,\n{\n    sit: T,\n}\n</code></pre>\n<h4><code>&quot;PreferSameLine&quot;</code>:</h4>\n<pre><code class=\"language-rust\">struct Lorem {\n    ipsum: bool,\n}\n\nstruct Dolor&lt;T&gt;\nwhere\n    T: Eq, {\n    sit: T,\n}\n</code></pre>\n",
      "default": "SameLineWhere",
      "enum": ["AlwaysNextLine", "PreferSameLine", "SameLineWhere"]
    },
    "chain_width": {
      "type": "integer",
      "description": "Maximum width of a chain to fit on one line.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `chain_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "markdownDescription": "Maximum width of a chain to fit on one line.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `chain_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "x-intellij-html-description": "<p>Maximum width of a chain to fit on one line.</p>\n<p>Possible values: any positive integer that is less than or equal to the value specified for <code>max_width</code></p>\n<p>Stable: Yes</p>\n<p>By default this option is set as a percentage of <code>max_width</code> provided by <code>use_small_heuristics</code>, but a value set directly for <code>chain_width</code> will take precedence.</p>\n<p>See also <code>max_width</code> and <code>use_small_heuristics</code></p>\n",
      "default": 60
    },
    "color": {
      "type": "string",
      "description": "Whether to use colored output or not.\n\nStable: No (tracking issue: [#3385](https://github.com/rust-lang/rustfmt/issues/3385))",
      "markdownDescription": "Whether to use colored output or not.\n\nStable: No (tracking issue: [#3385](https://github.com/rust-lang/rustfmt/issues/3385))",
      "x-intellij-html-description": "<p>Whether to use colored output or not.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3385\">#3385</a>)</p>\n",
      "default": "Auto",
      "enum": ["Auto", "Always", "Never"]
    },
    "combine_control_expr": {
      "type": "boolean",
      "description": "Combine control expressions with function calls.\n\nStable: No (tracking issue: [#3369](https://github.com/rust-lang/rustfmt/issues/3369))\n\n\n#### `true` (default):\n\n```rust\nfn example() {\n    // If\n    foo!(if x {\n        foo();\n    } else {\n        bar();\n    });\n\n    // IfLet\n    foo!(if let Some(..) = x {\n        foo();\n    } else {\n        bar();\n    });\n\n    // While\n    foo!(while x {\n        foo();\n        bar();\n    });\n\n    // WhileLet\n    foo!(while let Some(..) = x {\n        foo();\n        bar();\n    });\n\n    // ForLoop\n    foo!(for x in y {\n        foo();\n        bar();\n    });\n\n    // Loop\n    foo!(loop {\n        foo();\n        bar();\n    });\n}\n```\n\n#### `false`:\n\n```rust\nfn example() {\n    // If\n    foo!(\n        if x {\n            foo();\n        } else {\n            bar();\n        }\n    );\n\n    // IfLet\n    foo!(\n        if let Some(..) = x {\n            foo();\n        } else {\n            bar();\n        }\n    );\n\n    // While\n    foo!(\n        while x {\n            foo();\n            bar();\n        }\n    );\n\n    // WhileLet\n    foo!(\n        while let Some(..) = x {\n            foo();\n            bar();\n        }\n    );\n\n    // ForLoop\n    foo!(\n        for x in y {\n            foo();\n            bar();\n        }\n    );\n\n    // Loop\n    foo!(\n        loop {\n            foo();\n            bar();\n        }\n    );\n}\n```",
      "markdownDescription": "Combine control expressions with function calls.\n\nStable: No (tracking issue: [#3369](https://github.com/rust-lang/rustfmt/issues/3369))\n\n\n#### `true` (default):\n\n```rust\nfn example() {\n    // If\n    foo!(if x {\n        foo();\n    } else {\n        bar();\n    });\n\n    // IfLet\n    foo!(if let Some(..) = x {\n        foo();\n    } else {\n        bar();\n    });\n\n    // While\n    foo!(while x {\n        foo();\n        bar();\n    });\n\n    // WhileLet\n    foo!(while let Some(..) = x {\n        foo();\n        bar();\n    });\n\n    // ForLoop\n    foo!(for x in y {\n        foo();\n        bar();\n    });\n\n    // Loop\n    foo!(loop {\n        foo();\n        bar();\n    });\n}\n```\n\n#### `false`:\n\n```rust\nfn example() {\n    // If\n    foo!(\n        if x {\n            foo();\n        } else {\n            bar();\n        }\n    );\n\n    // IfLet\n    foo!(\n        if let Some(..) = x {\n            foo();\n        } else {\n            bar();\n        }\n    );\n\n    // While\n    foo!(\n        while x {\n            foo();\n            bar();\n        }\n    );\n\n    // WhileLet\n    foo!(\n        while let Some(..) = x {\n            foo();\n            bar();\n        }\n    );\n\n    // ForLoop\n    foo!(\n        for x in y {\n            foo();\n            bar();\n        }\n    );\n\n    // Loop\n    foo!(\n        loop {\n            foo();\n            bar();\n        }\n    );\n}\n```",
      "x-intellij-html-description": "<p>Combine control expressions with function calls.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3369\">#3369</a>)</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">fn example() {\n    // If\n    foo!(if x {\n        foo();\n    } else {\n        bar();\n    });\n\n    // IfLet\n    foo!(if let Some(..) = x {\n        foo();\n    } else {\n        bar();\n    });\n\n    // While\n    foo!(while x {\n        foo();\n        bar();\n    });\n\n    // WhileLet\n    foo!(while let Some(..) = x {\n        foo();\n        bar();\n    });\n\n    // ForLoop\n    foo!(for x in y {\n        foo();\n        bar();\n    });\n\n    // Loop\n    foo!(loop {\n        foo();\n        bar();\n    });\n}\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">fn example() {\n    // If\n    foo!(\n        if x {\n            foo();\n        } else {\n            bar();\n        }\n    );\n\n    // IfLet\n    foo!(\n        if let Some(..) = x {\n            foo();\n        } else {\n            bar();\n        }\n    );\n\n    // While\n    foo!(\n        while x {\n            foo();\n            bar();\n        }\n    );\n\n    // WhileLet\n    foo!(\n        while let Some(..) = x {\n            foo();\n            bar();\n        }\n    );\n\n    // ForLoop\n    foo!(\n        for x in y {\n            foo();\n            bar();\n        }\n    );\n\n    // Loop\n    foo!(\n        loop {\n            foo();\n            bar();\n        }\n    );\n}\n</code></pre>\n",
      "default": true
    },
    "comment_width": {
      "type": "integer",
      "description": "Maximum length of comments. No effect unless `wrap_comments = true`.\n\nPossible values: any positive integer\n\nStable: No (tracking issue: [#3349](https://github.com/rust-lang/rustfmt/issues/3349))\n\n**Note:** A value of `0` results in `wrap_comments` being applied regardless of a line's width.\n\n#### `80` (default; comments shorter than `comment_width`):\n```rust\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n```\n\n#### `60` (comments longer than `comment_width`):\n```rust\n// Lorem ipsum dolor sit amet,\n// consectetur adipiscing elit.\n```\n\nSee also `wrap_comments`.",
      "markdownDescription": "Maximum length of comments. No effect unless `wrap_comments = true`.\n\nPossible values: any positive integer\n\nStable: No (tracking issue: [#3349](https://github.com/rust-lang/rustfmt/issues/3349))\n\n**Note:** A value of `0` results in `wrap_comments` being applied regardless of a line's width.\n\n#### `80` (default; comments shorter than `comment_width`):\n```rust\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n```\n\n#### `60` (comments longer than `comment_width`):\n```rust\n// Lorem ipsum dolor sit amet,\n// consectetur adipiscing elit.\n```\n\nSee also `wrap_comments`.",
      "x-intellij-html-description": "<p>Maximum length of comments. No effect unless <code>wrap_comments = true</code>.</p>\n<p>Possible values: any positive integer</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3349\">#3349</a>)</p>\n<p><strong>Note:</strong> A value of <code>0</code> results in <code>wrap_comments</code> being applied regardless of a line&#39;s width.</p>\n<h4><code>80</code> (default; comments shorter than <code>comment_width</code>):</h4>\n<pre><code class=\"language-rust\">// Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n</code></pre>\n<h4><code>60</code> (comments longer than <code>comment_width</code>):</h4>\n<pre><code class=\"language-rust\">// Lorem ipsum dolor sit amet,\n// consectetur adipiscing elit.\n</code></pre>\n<p>See also <code>wrap_comments</code>.</p>\n",
      "default": 80
    },
    "condense_wildcard_suffixes": {
      "type": "boolean",
      "description": "Replace strings of _ wildcards by a single .. in tuple patterns\n\nStable: No (tracking issue: [#3384](https://github.com/rust-lang/rustfmt/issues/3384))\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let (lorem, ipsum, _, _) = (1, 2, 3, 4);\n    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n}\n```",
      "markdownDescription": "Replace strings of _ wildcards by a single .. in tuple patterns\n\nStable: No (tracking issue: [#3384](https://github.com/rust-lang/rustfmt/issues/3384))\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let (lorem, ipsum, _, _) = (1, 2, 3, 4);\n    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n}\n```",
      "x-intellij-html-description": "<p>Replace strings of _ wildcards by a single .. in tuple patterns</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3384\">#3384</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let (lorem, ipsum, _, _) = (1, 2, 3, 4);\n    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let (lorem, ipsum, ..) = (1, 2, 3, 4);\n}\n</code></pre>\n",
      "default": false
    },
    "control_brace_style": {
      "type": "string",
      "description": "Brace style for control flow constructs\n\nStable: No (tracking issue: [#3377](https://github.com/rust-lang/rustfmt/issues/3377))\n\n\n#### `\"AlwaysSameLine\"` (default):\n\n```rust\nfn main() {\n    if lorem {\n        println!(\"ipsum!\");\n    } else {\n        println!(\"dolor!\");\n    }\n}\n```\n\n#### `\"AlwaysNextLine\"`:\n\n```rust\nfn main() {\n    if lorem\n    {\n        println!(\"ipsum!\");\n    }\n    else\n    {\n        println!(\"dolor!\");\n    }\n}\n```\n\n#### `\"ClosingNextLine\"`:\n\n```rust\nfn main() {\n    if lorem {\n        println!(\"ipsum!\");\n    }\n    else {\n        println!(\"dolor!\");\n    }\n}\n```",
      "markdownDescription": "Brace style for control flow constructs\n\nStable: No (tracking issue: [#3377](https://github.com/rust-lang/rustfmt/issues/3377))\n\n\n#### `\"AlwaysSameLine\"` (default):\n\n```rust\nfn main() {\n    if lorem {\n        println!(\"ipsum!\");\n    } else {\n        println!(\"dolor!\");\n    }\n}\n```\n\n#### `\"AlwaysNextLine\"`:\n\n```rust\nfn main() {\n    if lorem\n    {\n        println!(\"ipsum!\");\n    }\n    else\n    {\n        println!(\"dolor!\");\n    }\n}\n```\n\n#### `\"ClosingNextLine\"`:\n\n```rust\nfn main() {\n    if lorem {\n        println!(\"ipsum!\");\n    }\n    else {\n        println!(\"dolor!\");\n    }\n}\n```",
      "x-intellij-html-description": "<p>Brace style for control flow constructs</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3377\">#3377</a>)</p>\n<h4><code>&quot;AlwaysSameLine&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    if lorem {\n        println!(&quot;ipsum!&quot;);\n    } else {\n        println!(&quot;dolor!&quot;);\n    }\n}\n</code></pre>\n<h4><code>&quot;AlwaysNextLine&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    if lorem\n    {\n        println!(&quot;ipsum!&quot;);\n    }\n    else\n    {\n        println!(&quot;dolor!&quot;);\n    }\n}\n</code></pre>\n<h4><code>&quot;ClosingNextLine&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    if lorem {\n        println!(&quot;ipsum!&quot;);\n    }\n    else {\n        println!(&quot;dolor!&quot;);\n    }\n}\n</code></pre>\n",
      "default": "AlwaysSameLine",
      "enum": ["AlwaysNextLine", "AlwaysSameLine", "ClosingNextLine"]
    },
    "disable_all_formatting": {
      "type": "boolean",
      "description": "Don't reformat anything.\n\nNote that this option may be soft-deprecated in the future once the [ignore](#ignore) option is stabilized. Nightly toolchain users are encouraged to use [ignore](#ignore) instead when possible.\n\nStable: Yes",
      "markdownDescription": "Don't reformat anything.\n\nNote that this option may be soft-deprecated in the future once the [ignore](#ignore) option is stabilized. Nightly toolchain users are encouraged to use [ignore](#ignore) instead when possible.\n\nStable: Yes",
      "x-intellij-html-description": "<p>Don&#39;t reformat anything.</p>\n<p>Note that this option may be soft-deprecated in the future once the <a href=\"#ignore\">ignore</a> option is stabilized. Nightly toolchain users are encouraged to use <a href=\"#ignore\">ignore</a> instead when possible.</p>\n<p>Stable: Yes</p>\n",
      "default": false
    },
    "edition": {
      "type": "string",
      "description": "Specifies which edition is used by the parser.\n\nStable: Yes\n\nRustfmt is able to pick up the edition used by reading the `Cargo.toml` file if executed\nthrough the Cargo's formatting tool `cargo fmt`. Otherwise, the edition needs to be specified\nin your config file:\n\n```toml\nedition = \"2018\"\n```",
      "markdownDescription": "Specifies which edition is used by the parser.\n\nStable: Yes\n\nRustfmt is able to pick up the edition used by reading the `Cargo.toml` file if executed\nthrough the Cargo's formatting tool `cargo fmt`. Otherwise, the edition needs to be specified\nin your config file:\n\n```toml\nedition = \"2018\"\n```",
      "x-intellij-html-description": "<p>Specifies which edition is used by the parser.</p>\n<p>Stable: Yes</p>\n<p>Rustfmt is able to pick up the edition used by reading the <code>Cargo.toml</code> file if executed\nthrough the Cargo&#39;s formatting tool <code>cargo fmt</code>. Otherwise, the edition needs to be specified\nin your config file:</p>\n<pre><code class=\"language-toml\">edition = &quot;2018&quot;\n</code></pre>\n",
      "default": "2015",
      "enum": ["2015", "2018", "2021", "2024"]
    },
    "empty_item_single_line": {
      "type": "boolean",
      "description": "Put empty-body functions and impls on a single line\n\nStable: No (tracking issue: [#3356](https://github.com/rust-lang/rustfmt/issues/3356))\n\n\n#### `true` (default):\n\n```rust\nfn lorem() {}\n\nimpl Lorem {}\n```\n\n#### `false`:\n\n```rust\nfn lorem() {\n}\n\nimpl Lorem {\n}\n```\n\nSee also `brace_style`, `control_brace_style`.",
      "markdownDescription": "Put empty-body functions and impls on a single line\n\nStable: No (tracking issue: [#3356](https://github.com/rust-lang/rustfmt/issues/3356))\n\n\n#### `true` (default):\n\n```rust\nfn lorem() {}\n\nimpl Lorem {}\n```\n\n#### `false`:\n\n```rust\nfn lorem() {\n}\n\nimpl Lorem {\n}\n```\n\nSee also `brace_style`, `control_brace_style`.",
      "x-intellij-html-description": "<p>Put empty-body functions and impls on a single line</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3356\">#3356</a>)</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem() {}\n\nimpl Lorem {}\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem() {\n}\n\nimpl Lorem {\n}\n</code></pre>\n<p>See also <code>brace_style</code>, <code>control_brace_style</code>.</p>\n",
      "default": true
    },
    "enum_discrim_align_threshold": {
      "type": "integer",
      "description": "The maximum length of enum variant having discriminant, that gets vertically aligned with others.\nVariants without discriminants would be ignored for the purpose of alignment.\n\nNote that this is not how much whitespace is inserted, but instead the longest variant name that\ndoesn't get ignored when aligning.\n\nPossible values: any positive integer\n\nStable: No (tracking issue: [#3372](https://github.com/rust-lang/rustfmt/issues/3372))\n\n\n#### `0` (default):\n\n```rust\nenum Foo {\n    A = 0,\n    Bb = 1,\n    RandomLongVariantGoesHere = 10,\n    Ccc = 71,\n}\n\nenum Bar {\n    VeryLongVariantNameHereA = 0,\n    VeryLongVariantNameHereBb = 1,\n    VeryLongVariantNameHereCcc = 2,\n}\n```\n\n#### `20`:\n\n```rust\nenum Foo {\n    A   = 0,\n    Bb  = 1,\n    RandomLongVariantGoesHere = 10,\n    Ccc = 2,\n}\n\nenum Bar {\n    VeryLongVariantNameHereA = 0,\n    VeryLongVariantNameHereBb = 1,\n    VeryLongVariantNameHereCcc = 2,\n}\n```",
      "markdownDescription": "The maximum length of enum variant having discriminant, that gets vertically aligned with others.\nVariants without discriminants would be ignored for the purpose of alignment.\n\nNote that this is not how much whitespace is inserted, but instead the longest variant name that\ndoesn't get ignored when aligning.\n\nPossible values: any positive integer\n\nStable: No (tracking issue: [#3372](https://github.com/rust-lang/rustfmt/issues/3372))\n\n\n#### `0` (default):\n\n```rust\nenum Foo {\n    A = 0,\n    Bb = 1,\n    RandomLongVariantGoesHere = 10,\n    Ccc = 71,\n}\n\nenum Bar {\n    VeryLongVariantNameHereA = 0,\n    VeryLongVariantNameHereBb = 1,\n    VeryLongVariantNameHereCcc = 2,\n}\n```\n\n#### `20`:\n\n```rust\nenum Foo {\n    A   = 0,\n    Bb  = 1,\n    RandomLongVariantGoesHere = 10,\n    Ccc = 2,\n}\n\nenum Bar {\n    VeryLongVariantNameHereA = 0,\n    VeryLongVariantNameHereBb = 1,\n    VeryLongVariantNameHereCcc = 2,\n}\n```",
      "x-intellij-html-description": "<p>The maximum length of enum variant having discriminant, that gets vertically aligned with others.\nVariants without discriminants would be ignored for the purpose of alignment.</p>\n<p>Note that this is not how much whitespace is inserted, but instead the longest variant name that\ndoesn&#39;t get ignored when aligning.</p>\n<p>Possible values: any positive integer</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3372\">#3372</a>)</p>\n<h4><code>0</code> (default):</h4>\n<pre><code class=\"language-rust\">enum Foo {\n    A = 0,\n    Bb = 1,\n    RandomLongVariantGoesHere = 10,\n    Ccc = 71,\n}\n\nenum Bar {\n    VeryLongVariantNameHereA = 0,\n    VeryLongVariantNameHereBb = 1,\n    VeryLongVariantNameHereCcc = 2,\n}\n</code></pre>\n<h4><code>20</code>:</h4>\n<pre><code class=\"language-rust\">enum Foo {\n    A   = 0,\n    Bb  = 1,\n    RandomLongVariantGoesHere = 10,\n    Ccc = 2,\n}\n\nenum Bar {\n    VeryLongVariantNameHereA = 0,\n    VeryLongVariantNameHereBb = 1,\n    VeryLongVariantNameHereCcc = 2,\n}\n</code></pre>\n",
      "default": 0
    },
    "error_on_line_overflow": {
      "type": "boolean",
      "description": "Error if Rustfmt is unable to get all lines within `max_width`, except for comments and string\nliterals. If this happens, then it is a bug in Rustfmt. You might be able to work around the bug by\nrefactoring your code to avoid long/complex expressions, usually by extracting a local variable or\nusing a shorter name.\n\nStable: No (tracking issue: [#3391](https://github.com/rust-lang/rustfmt/issues/3391))\n\nSee also `max_width`.",
      "markdownDescription": "Error if Rustfmt is unable to get all lines within `max_width`, except for comments and string\nliterals. If this happens, then it is a bug in Rustfmt. You might be able to work around the bug by\nrefactoring your code to avoid long/complex expressions, usually by extracting a local variable or\nusing a shorter name.\n\nStable: No (tracking issue: [#3391](https://github.com/rust-lang/rustfmt/issues/3391))\n\nSee also `max_width`.",
      "x-intellij-html-description": "<p>Error if Rustfmt is unable to get all lines within <code>max_width</code>, except for comments and string\nliterals. If this happens, then it is a bug in Rustfmt. You might be able to work around the bug by\nrefactoring your code to avoid long/complex expressions, usually by extracting a local variable or\nusing a shorter name.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3391\">#3391</a>)</p>\n<p>See also <code>max_width</code>.</p>\n",
      "default": false
    },
    "error_on_unformatted": {
      "type": "boolean",
      "description": "Error if unable to get comments or string literals within `max_width`, or they are left with\ntrailing whitespaces.\n\nStable: No (tracking issue: [#3392](https://github.com/rust-lang/rustfmt/issues/3392))",
      "markdownDescription": "Error if unable to get comments or string literals within `max_width`, or they are left with\ntrailing whitespaces.\n\nStable: No (tracking issue: [#3392](https://github.com/rust-lang/rustfmt/issues/3392))",
      "x-intellij-html-description": "<p>Error if unable to get comments or string literals within <code>max_width</code>, or they are left with\ntrailing whitespaces.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3392\">#3392</a>)</p>\n",
      "default": false
    },
    "fn_args_layout": {
      "type": "string",
      "description": "This option is deprecated and has been renamed to `fn_params_layout` to better communicate that\nit affects the layout of parameters in function signatures.\n\nStable: Yes\n\n\n#### `\"Tall\"` (default):\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Compressed\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Vertical\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    ) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\nSee also `fn_params_layout`",
      "markdownDescription": "This option is deprecated and has been renamed to `fn_params_layout` to better communicate that\nit affects the layout of parameters in function signatures.\n\nStable: Yes\n\n\n#### `\"Tall\"` (default):\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Compressed\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Vertical\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    ) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\nSee also `fn_params_layout`",
      "x-intellij-html-description": "<p>This option is deprecated and has been renamed to <code>fn_params_layout</code> to better communicate that\nit affects the layout of parameters in function signatures.</p>\n<p>Stable: Yes</p>\n<h4><code>&quot;Tall&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">trait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n</code></pre>\n<h4><code>&quot;Compressed&quot;</code>:</h4>\n<pre><code class=\"language-rust\">trait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    ) {\n        // body\n    }\n}\n</code></pre>\n<h4><code>&quot;Vertical&quot;</code>:</h4>\n<pre><code class=\"language-rust\">trait Lorem {\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    ) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n</code></pre>\n<p>See also <code>fn_params_layout</code></p>\n",
      "default": "Tall",
      "enum": ["Compressed", "Tall", "Vertical"]
    },
    "fn_call_width": {
      "type": "integer",
      "description": "Maximum width of the args of a function call before falling back to vertical formatting.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `fn_call_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "markdownDescription": "Maximum width of the args of a function call before falling back to vertical formatting.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `fn_call_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "x-intellij-html-description": "<p>Maximum width of the args of a function call before falling back to vertical formatting.</p>\n<p>Possible values: any positive integer that is less than or equal to the value specified for <code>max_width</code></p>\n<p>Stable: Yes</p>\n<p>By default this option is set as a percentage of <code>max_width</code> provided by <code>use_small_heuristics</code>, but a value set directly for <code>fn_call_width</code> will take precedence.</p>\n<p>See also <code>max_width</code> and <code>use_small_heuristics</code></p>\n",
      "default": 60
    },
    "fn_params_layout": {
      "type": "string",
      "description": "Control the layout of parameters in function signatures.\n\nStable: Yes\n\n\n#### `\"Tall\"` (default):\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Compressed\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Vertical\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    ) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```",
      "markdownDescription": "Control the layout of parameters in function signatures.\n\nStable: Yes\n\n\n#### `\"Tall\"` (default):\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Compressed\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    ) {\n        // body\n    }\n}\n```\n\n#### `\"Vertical\"`:\n\n```rust\ntrait Lorem {\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    ) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n```",
      "x-intellij-html-description": "<p>Control the layout of parameters in function signatures.</p>\n<p>Stable: Yes</p>\n<h4><code>&quot;Tall&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">trait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n</code></pre>\n<h4><code>&quot;Compressed&quot;</code>:</h4>\n<pre><code class=\"language-rust\">trait Lorem {\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n\n    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n        adipiscing: Adipiscing, elit: Elit,\n    ) {\n        // body\n    }\n}\n</code></pre>\n<h4><code>&quot;Vertical&quot;</code>:</h4>\n<pre><code class=\"language-rust\">trait Lorem {\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n    ) {\n        // body\n    }\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    );\n\n    fn lorem(\n        ipsum: Ipsum,\n        dolor: Dolor,\n        sit: Sit,\n        amet: Amet,\n        consectetur: Consectetur,\n        adipiscing: Adipiscing,\n        elit: Elit,\n    ) {\n        // body\n    }\n}\n</code></pre>\n",
      "default": "Tall",
      "enum": ["Compressed", "Tall", "Vertical"]
    },
    "fn_single_line": {
      "type": "boolean",
      "description": "Put single-expression functions on a single line\n\nStable: No (tracking issue: [#3358](https://github.com/rust-lang/rustfmt/issues/3358))\n\n\n#### `false` (default):\n\n```rust\nfn lorem() -> usize {\n    42\n}\n\nfn lorem() -> usize {\n    let ipsum = 42;\n    ipsum\n}\n```\n\n#### `true`:\n\n```rust\nfn lorem() -> usize { 42 }\n\nfn lorem() -> usize {\n    let ipsum = 42;\n    ipsum\n}\n```\n\nSee also `control_brace_style`.",
      "markdownDescription": "Put single-expression functions on a single line\n\nStable: No (tracking issue: [#3358](https://github.com/rust-lang/rustfmt/issues/3358))\n\n\n#### `false` (default):\n\n```rust\nfn lorem() -> usize {\n    42\n}\n\nfn lorem() -> usize {\n    let ipsum = 42;\n    ipsum\n}\n```\n\n#### `true`:\n\n```rust\nfn lorem() -> usize { 42 }\n\nfn lorem() -> usize {\n    let ipsum = 42;\n    ipsum\n}\n```\n\nSee also `control_brace_style`.",
      "x-intellij-html-description": "<p>Put single-expression functions on a single line</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3358\">#3358</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem() -&gt; usize {\n    42\n}\n\nfn lorem() -&gt; usize {\n    let ipsum = 42;\n    ipsum\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem() -&gt; usize { 42 }\n\nfn lorem() -&gt; usize {\n    let ipsum = 42;\n    ipsum\n}\n</code></pre>\n<p>See also <code>control_brace_style</code>.</p>\n",
      "default": false
    },
    "force_explicit_abi": {
      "type": "boolean",
      "description": "Always print the abi for extern items\n\nStable: Yes\n\n**Note:** Non-\"C\" ABIs are always printed. If `false` then \"C\" is removed.\n\n#### `true` (default):\n\n```rust\nextern \"C\" {\n    pub static lorem: c_int;\n}\n```\n\n#### `false`:\n\n```rust\nextern {\n    pub static lorem: c_int;\n}\n```",
      "markdownDescription": "Always print the abi for extern items\n\nStable: Yes\n\n**Note:** Non-\"C\" ABIs are always printed. If `false` then \"C\" is removed.\n\n#### `true` (default):\n\n```rust\nextern \"C\" {\n    pub static lorem: c_int;\n}\n```\n\n#### `false`:\n\n```rust\nextern {\n    pub static lorem: c_int;\n}\n```",
      "x-intellij-html-description": "<p>Always print the abi for extern items</p>\n<p>Stable: Yes</p>\n<p><strong>Note:</strong> Non-&quot;C&quot; ABIs are always printed. If <code>false</code> then &quot;C&quot; is removed.</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">extern &quot;C&quot; {\n    pub static lorem: c_int;\n}\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">extern {\n    pub static lorem: c_int;\n}\n</code></pre>\n",
      "default": true
    },
    "force_multiline_blocks": {
      "type": "boolean",
      "description": "Force multiline closure and match arm bodies to be wrapped in a block\n\nStable: No (tracking issue: [#3374](https://github.com/rust-lang/rustfmt/issues/3374))\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    result.and_then(|maybe_value| match maybe_value {\n        None => foo(),\n        Some(value) => bar(),\n    });\n\n    match lorem {\n        None => |ipsum| {\n            println!(\"Hello World\");\n        },\n        Some(dolor) => foo(),\n    }\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    result.and_then(|maybe_value| {\n        match maybe_value {\n            None => foo(),\n            Some(value) => bar(),\n        }\n    });\n\n    match lorem {\n        None => {\n            |ipsum| {\n                println!(\"Hello World\");\n            }\n        }\n        Some(dolor) => foo(),\n    }\n}\n```",
      "markdownDescription": "Force multiline closure and match arm bodies to be wrapped in a block\n\nStable: No (tracking issue: [#3374](https://github.com/rust-lang/rustfmt/issues/3374))\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    result.and_then(|maybe_value| match maybe_value {\n        None => foo(),\n        Some(value) => bar(),\n    });\n\n    match lorem {\n        None => |ipsum| {\n            println!(\"Hello World\");\n        },\n        Some(dolor) => foo(),\n    }\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    result.and_then(|maybe_value| {\n        match maybe_value {\n            None => foo(),\n            Some(value) => bar(),\n        }\n    });\n\n    match lorem {\n        None => {\n            |ipsum| {\n                println!(\"Hello World\");\n            }\n        }\n        Some(dolor) => foo(),\n    }\n}\n```",
      "x-intellij-html-description": "<p>Force multiline closure and match arm bodies to be wrapped in a block</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3374\">#3374</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    result.and_then(|maybe_value| match maybe_value {\n        None =&gt; foo(),\n        Some(value) =&gt; bar(),\n    });\n\n    match lorem {\n        None =&gt; |ipsum| {\n            println!(&quot;Hello World&quot;);\n        },\n        Some(dolor) =&gt; foo(),\n    }\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    result.and_then(|maybe_value| {\n        match maybe_value {\n            None =&gt; foo(),\n            Some(value) =&gt; bar(),\n        }\n    });\n\n    match lorem {\n        None =&gt; {\n            |ipsum| {\n                println!(&quot;Hello World&quot;);\n            }\n        }\n        Some(dolor) =&gt; foo(),\n    }\n}\n</code></pre>\n",
      "default": false
    },
    "format_code_in_doc_comments": {
      "type": "boolean",
      "description": "Format code snippet included in doc comments.\n\nStable: No (tracking issue: [#3348](https://github.com/rust-lang/rustfmt/issues/3348))\n\n\n#### `false` (default):\n\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```rust\n/// let five=5;\n///\n/// assert_eq!(\n///     6,\n///     add_one(5)\n/// );\n/// # fn add_one(x: i32) -> i32 {\n/// #     x + 1\n/// # }\n/// ```\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\n#### `true`\n\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```rust\n/// let five = 5;\n///\n/// assert_eq!(6, add_one(5));\n/// # fn add_one(x: i32) -> i32 {\n/// #     x + 1\n/// # }\n/// ```\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n```",
      "markdownDescription": "Format code snippet included in doc comments.\n\nStable: No (tracking issue: [#3348](https://github.com/rust-lang/rustfmt/issues/3348))\n\n\n#### `false` (default):\n\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```rust\n/// let five=5;\n///\n/// assert_eq!(\n///     6,\n///     add_one(5)\n/// );\n/// # fn add_one(x: i32) -> i32 {\n/// #     x + 1\n/// # }\n/// ```\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\n#### `true`\n\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```rust\n/// let five = 5;\n///\n/// assert_eq!(6, add_one(5));\n/// # fn add_one(x: i32) -> i32 {\n/// #     x + 1\n/// # }\n/// ```\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n```",
      "x-intellij-html-description": "<p>Format code snippet included in doc comments.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3348\">#3348</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```rust\n/// let five=5;\n///\n/// assert_eq!(\n///     6,\n///     add_one(5)\n/// );\n/// # fn add_one(x: i32) -&gt; i32 {\n/// #     x + 1\n/// # }\n/// ```\nfn add_one(x: i32) -&gt; i32 {\n    x + 1\n}\n</code></pre>\n<h4><code>true</code></h4>\n<pre><code class=\"language-rust\">/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```rust\n/// let five = 5;\n///\n/// assert_eq!(6, add_one(5));\n/// # fn add_one(x: i32) -&gt; i32 {\n/// #     x + 1\n/// # }\n/// ```\nfn add_one(x: i32) -&gt; i32 {\n    x + 1\n}\n</code></pre>\n",
      "default": false
    },
    "doc_comment_code_block_width": {
      "type": "integer",
      "description": "Max width for code snippets included in doc comments. Only used if `format_code_in_doc_comments` is true.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: No (tracking issue: [#5359](https://github.com/rust-lang/rustfmt/issues/5359))",
      "markdownDescription": "Max width for code snippets included in doc comments. Only used if `format_code_in_doc_comments` is true.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: No (tracking issue: [#5359](https://github.com/rust-lang/rustfmt/issues/5359))",
      "x-intellij-html-description": "<p>Max width for code snippets included in doc comments. Only used if <code>format_code_in_doc_comments</code> is true.</p>\n<p>Possible values: any positive integer that is less than or equal to the value specified for <code>max_width</code></p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/5359\">#5359</a>)</p>\n",
      "default": 100
    },
    "format_generated_files": {
      "type": "boolean",
      "description": "Format generated files. A file is considered generated if any of the first several lines contain a `@generated` comment marker. The number of lines to check is configured by `generated_marker_line_search_limit`.\n\nBy default, generated files are reformatted, i. e. `@generated` marker is ignored.\nThis option is currently ignored for stdin (`@generated` in stdin is ignored.)\n\nStable: No (tracking issue: [#5080](https://github.com/rust-lang/rustfmt/issues/5080))",
      "markdownDescription": "Format generated files. A file is considered generated if any of the first several lines contain a `@generated` comment marker. The number of lines to check is configured by `generated_marker_line_search_limit`.\n\nBy default, generated files are reformatted, i. e. `@generated` marker is ignored.\nThis option is currently ignored for stdin (`@generated` in stdin is ignored.)\n\nStable: No (tracking issue: [#5080](https://github.com/rust-lang/rustfmt/issues/5080))",
      "x-intellij-html-description": "<p>Format generated files. A file is considered generated if any of the first several lines contain a <code>@generated</code> comment marker. The number of lines to check is configured by <code>generated_marker_line_search_limit</code>.</p>\n<p>By default, generated files are reformatted, i. e. <code>@generated</code> marker is ignored.\nThis option is currently ignored for stdin (<code>@generated</code> in stdin is ignored.)</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/5080\">#5080</a>)</p>\n",
      "default": true
    },
    "generated_marker_line_search_limit": {
      "type": "integer",
      "description": "Number of lines to check for a `@generated` pragma header, starting from the top of the file. Setting this value to `0` will treat all files as non-generated. When`format_generated_files` is `true`, this option has no effect.\n\nPossible values: any positive integer\n\nStable: No (tracking issue: [#5080](https://github.com/rust-lang/rustfmt/issues/5080))\n\nSee also [format_generated_files](#format_generated_files) link here.",
      "markdownDescription": "Number of lines to check for a `@generated` pragma header, starting from the top of the file. Setting this value to `0` will treat all files as non-generated. When`format_generated_files` is `true`, this option has no effect.\n\nPossible values: any positive integer\n\nStable: No (tracking issue: [#5080](https://github.com/rust-lang/rustfmt/issues/5080))\n\nSee also [format_generated_files](#format_generated_files) link here.",
      "x-intellij-html-description": "<p>Number of lines to check for a <code>@generated</code> pragma header, starting from the top of the file. Setting this value to <code>0</code> will treat all files as non-generated. When<code>format_generated_files</code> is <code>true</code>, this option has no effect.</p>\n<p>Possible values: any positive integer</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/5080\">#5080</a>)</p>\n<p>See also <a href=\"#format_generated_files\">format_generated_files</a> link here.</p>\n",
      "default": 5
    },
    "format_macro_matchers": {
      "type": "boolean",
      "description": "Format the metavariable matching patterns in macros.\n\nStable: No (tracking issue: [#3354](https://github.com/rust-lang/rustfmt/issues/3354))\n\n\n#### `false` (default):\n\n```rust\nmacro_rules! foo {\n    ($a: ident : $b: ty) => {\n        $a(42): $b;\n    };\n    ($a: ident $b: ident $c: ident) => {\n        $a = $b + $c;\n    };\n}\n```\n\n#### `true`:\n\n```rust\nmacro_rules! foo {\n    ($a:ident : $b:ty) => {\n        $a(42): $b;\n    };\n    ($a:ident $b:ident $c:ident) => {\n        $a = $b + $c;\n    };\n}\n```\n\nSee also `format_macro_bodies`.",
      "markdownDescription": "Format the metavariable matching patterns in macros.\n\nStable: No (tracking issue: [#3354](https://github.com/rust-lang/rustfmt/issues/3354))\n\n\n#### `false` (default):\n\n```rust\nmacro_rules! foo {\n    ($a: ident : $b: ty) => {\n        $a(42): $b;\n    };\n    ($a: ident $b: ident $c: ident) => {\n        $a = $b + $c;\n    };\n}\n```\n\n#### `true`:\n\n```rust\nmacro_rules! foo {\n    ($a:ident : $b:ty) => {\n        $a(42): $b;\n    };\n    ($a:ident $b:ident $c:ident) => {\n        $a = $b + $c;\n    };\n}\n```\n\nSee also `format_macro_bodies`.",
      "x-intellij-html-description": "<p>Format the metavariable matching patterns in macros.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3354\">#3354</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">macro_rules! foo {\n    ($a: ident : $b: ty) =&gt; {\n        $a(42): $b;\n    };\n    ($a: ident $b: ident $c: ident) =&gt; {\n        $a = $b + $c;\n    };\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">macro_rules! foo {\n    ($a:ident : $b:ty) =&gt; {\n        $a(42): $b;\n    };\n    ($a:ident $b:ident $c:ident) =&gt; {\n        $a = $b + $c;\n    };\n}\n</code></pre>\n<p>See also <code>format_macro_bodies</code>.</p>\n",
      "default": false
    },
    "format_macro_bodies": {
      "type": "boolean",
      "description": "Format the bodies of declarative macro definitions.\n\nStable: No (tracking issue: [#3355](https://github.com/rust-lang/rustfmt/issues/3355))\n\n\n#### `true` (default):\n\n```rust\nmacro_rules! foo {\n    ($a: ident : $b: ty) => {\n        $a(42): $b;\n    };\n    ($a: ident $b: ident $c: ident) => {\n        $a = $b + $c;\n    };\n}\n```\n\n#### `false`:\n\n```rust\nmacro_rules! foo {\n    ($a: ident : $b: ty) => { $a(42): $b; };\n    ($a: ident $b: ident $c: ident) => { $a=$b+$c; };\n}\n```\n\nSee also `format_macro_matchers`.",
      "markdownDescription": "Format the bodies of declarative macro definitions.\n\nStable: No (tracking issue: [#3355](https://github.com/rust-lang/rustfmt/issues/3355))\n\n\n#### `true` (default):\n\n```rust\nmacro_rules! foo {\n    ($a: ident : $b: ty) => {\n        $a(42): $b;\n    };\n    ($a: ident $b: ident $c: ident) => {\n        $a = $b + $c;\n    };\n}\n```\n\n#### `false`:\n\n```rust\nmacro_rules! foo {\n    ($a: ident : $b: ty) => { $a(42): $b; };\n    ($a: ident $b: ident $c: ident) => { $a=$b+$c; };\n}\n```\n\nSee also `format_macro_matchers`.",
      "x-intellij-html-description": "<p>Format the bodies of declarative macro definitions.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3355\">#3355</a>)</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">macro_rules! foo {\n    ($a: ident : $b: ty) =&gt; {\n        $a(42): $b;\n    };\n    ($a: ident $b: ident $c: ident) =&gt; {\n        $a = $b + $c;\n    };\n}\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">macro_rules! foo {\n    ($a: ident : $b: ty) =&gt; { $a(42): $b; };\n    ($a: ident $b: ident $c: ident) =&gt; { $a=$b+$c; };\n}\n</code></pre>\n<p>See also <code>format_macro_matchers</code>.</p>\n",
      "default": true
    },
    "skip_macro_invocations": {
      "description": "Skip formatting the bodies of macro invocations with the following names.\n\nrustfmt will not format any macro invocation for macros with names set in this list.\nIncluding the special value \"*\" will prevent any macro invocations from being formatted.\n\nNote: This option does not have any impact on how rustfmt formats macro definitions.\n\nPossible values: a list of macro name idents, `[\"name_0\", \"name_1\", ..., \"*\"]`\n\nStable: No (tracking issue: [#5346](https://github.com/rust-lang/rustfmt/issues/5346))\n\n\n#### `[]` (default):\n\nrustfmt will follow its standard approach to formatting macro invocations.\n\nNo macro invocations will be skipped based on their name. More information about rustfmt's standard macro invocation formatting behavior can be found in [#5437](https://github.com/rust-lang/rustfmt/discussions/5437).\n\n```rust\nlorem!(\n    const _: u8 = 0;\n);\n\nipsum!(\n    const _: u8 = 0;\n);\n```\n\n#### `[\"lorem\"]`:\n\nThe named macro invocations will be skipped.\n\n```rust\nlorem!(\n        const _: u8 = 0;\n);\n\nipsum!(\n    const _: u8 = 0;\n);\n```\n\n#### `[\"*\"]`:\n\nThe special selector `*` will skip all macro invocations.\n\n```rust\nlorem!(\n        const _: u8 = 0;\n);\n\nipsum!(\n        const _: u8 = 0;\n);\n```",
      "markdownDescription": "Skip formatting the bodies of macro invocations with the following names.\n\nrustfmt will not format any macro invocation for macros with names set in this list.\nIncluding the special value \"*\" will prevent any macro invocations from being formatted.\n\nNote: This option does not have any impact on how rustfmt formats macro definitions.\n\nPossible values: a list of macro name idents, `[\"name_0\", \"name_1\", ..., \"*\"]`\n\nStable: No (tracking issue: [#5346](https://github.com/rust-lang/rustfmt/issues/5346))\n\n\n#### `[]` (default):\n\nrustfmt will follow its standard approach to formatting macro invocations.\n\nNo macro invocations will be skipped based on their name. More information about rustfmt's standard macro invocation formatting behavior can be found in [#5437](https://github.com/rust-lang/rustfmt/discussions/5437).\n\n```rust\nlorem!(\n    const _: u8 = 0;\n);\n\nipsum!(\n    const _: u8 = 0;\n);\n```\n\n#### `[\"lorem\"]`:\n\nThe named macro invocations will be skipped.\n\n```rust\nlorem!(\n        const _: u8 = 0;\n);\n\nipsum!(\n    const _: u8 = 0;\n);\n```\n\n#### `[\"*\"]`:\n\nThe special selector `*` will skip all macro invocations.\n\n```rust\nlorem!(\n        const _: u8 = 0;\n);\n\nipsum!(\n        const _: u8 = 0;\n);\n```",
      "x-intellij-html-description": "<p>Skip formatting the bodies of macro invocations with the following names.</p>\n<p>rustfmt will not format any macro invocation for macros with names set in this list.\nIncluding the special value &quot;*&quot; will prevent any macro invocations from being formatted.</p>\n<p>Note: This option does not have any impact on how rustfmt formats macro definitions.</p>\n<p>Possible values: a list of macro name idents, <code>[&quot;name_0&quot;, &quot;name_1&quot;, ..., &quot;*&quot;]</code></p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/5346\">#5346</a>)</p>\n<h4><code>[]</code> (default):</h4>\n<p>rustfmt will follow its standard approach to formatting macro invocations.</p>\n<p>No macro invocations will be skipped based on their name. More information about rustfmt&#39;s standard macro invocation formatting behavior can be found in <a href=\"https://github.com/rust-lang/rustfmt/discussions/5437\">#5437</a>.</p>\n<pre><code class=\"language-rust\">lorem!(\n    const _: u8 = 0;\n);\n\nipsum!(\n    const _: u8 = 0;\n);\n</code></pre>\n<h4><code>[&quot;lorem&quot;]</code>:</h4>\n<p>The named macro invocations will be skipped.</p>\n<pre><code class=\"language-rust\">lorem!(\n        const _: u8 = 0;\n);\n\nipsum!(\n    const _: u8 = 0;\n);\n</code></pre>\n<h4><code>[&quot;*&quot;]</code>:</h4>\n<p>The special selector <code>*</code> will skip all macro invocations.</p>\n<pre><code class=\"language-rust\">lorem!(\n        const _: u8 = 0;\n);\n\nipsum!(\n        const _: u8 = 0;\n);\n</code></pre>\n",
      "default": []
    },
    "format_strings": {
      "type": "boolean",
      "description": "Format string literals where necessary\n\nStable: No (tracking issue: [#3353](https://github.com/rust-lang/rustfmt/issues/3353))\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet consectetur adipiscing\";\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet \\\n                 consectetur adipiscing\";\n}\n```\n\nSee also `max_width`.",
      "markdownDescription": "Format string literals where necessary\n\nStable: No (tracking issue: [#3353](https://github.com/rust-lang/rustfmt/issues/3353))\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet consectetur adipiscing\";\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet \\\n                 consectetur adipiscing\";\n}\n```\n\nSee also `max_width`.",
      "x-intellij-html-description": "<p>Format string literals where necessary</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3353\">#3353</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = &quot;ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet consectetur adipiscing&quot;;\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = &quot;ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet \\\n                 consectetur adipiscing&quot;;\n}\n</code></pre>\n<p>See also <code>max_width</code>.</p>\n",
      "default": false
    },
    "hard_tabs": {
      "type": "boolean",
      "description": "Use tab characters for indentation, spaces for alignment\n\nStable: Yes\n\n\n#### `false` (default):\n\n```rust\nfn lorem() -> usize {\n    42 // spaces before 42\n}\n```\n\n#### `true`:\n\n```rust\nfn lorem() -> usize {\n\t42 // tabs before 42\n}\n```\n\nSee also: `tab_spaces`.",
      "markdownDescription": "Use tab characters for indentation, spaces for alignment\n\nStable: Yes\n\n\n#### `false` (default):\n\n```rust\nfn lorem() -> usize {\n    42 // spaces before 42\n}\n```\n\n#### `true`:\n\n```rust\nfn lorem() -> usize {\n\t42 // tabs before 42\n}\n```\n\nSee also: `tab_spaces`.",
      "x-intellij-html-description": "<p>Use tab characters for indentation, spaces for alignment</p>\n<p>Stable: Yes</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem() -&gt; usize {\n    42 // spaces before 42\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem() -&gt; usize {\n\t42 // tabs before 42\n}\n</code></pre>\n<p>See also: <code>tab_spaces</code>.</p>\n",
      "default": false
    },
    "hex_literal_case": {
      "type": "string",
      "description": "Control the case of the letters in hexadecimal literal values\n\nStable: No (tracking issue: [#5081](https://github.com/rust-lang/rustfmt/issues/5081))",
      "markdownDescription": "Control the case of the letters in hexadecimal literal values\n\nStable: No (tracking issue: [#5081](https://github.com/rust-lang/rustfmt/issues/5081))",
      "x-intellij-html-description": "<p>Control the case of the letters in hexadecimal literal values</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/5081\">#5081</a>)</p>\n",
      "default": "Preserve",
      "enum": ["Preserve", "Upper", "Lower"]
    },
    "hide_parse_errors": {
      "type": "boolean",
      "description": "This option is deprecated and has been renamed to `show_parse_errors` to avoid confusion around the double negative default of `hide_parse_errors=false`.\n\nStable: No (tracking issue: [#3390](https://github.com/rust-lang/rustfmt/issues/3390))",
      "markdownDescription": "This option is deprecated and has been renamed to `show_parse_errors` to avoid confusion around the double negative default of `hide_parse_errors=false`.\n\nStable: No (tracking issue: [#3390](https://github.com/rust-lang/rustfmt/issues/3390))",
      "x-intellij-html-description": "<p>This option is deprecated and has been renamed to <code>show_parse_errors</code> to avoid confusion around the double negative default of <code>hide_parse_errors=false</code>.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3390\">#3390</a>)</p>\n",
      "default": false
    },
    "show_parse_errors": {
      "type": "boolean",
      "description": "Show parse errors if the parser failed to parse files.\n\nStable: No (tracking issue: [#5977](https://github.com/rust-lang/rustfmt/issues/5977))",
      "markdownDescription": "Show parse errors if the parser failed to parse files.\n\nStable: No (tracking issue: [#5977](https://github.com/rust-lang/rustfmt/issues/5977))",
      "x-intellij-html-description": "<p>Show parse errors if the parser failed to parse files.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/5977\">#5977</a>)</p>\n",
      "default": true
    },
    "ignore": {
      "description": "Skip formatting files and directories that match the specified pattern.\nThe pattern format is the same as [.gitignore](https://git-scm.com/docs/gitignore#_pattern_format). Be sure to use Unix/forwardslash `/` style  paths. This path style will work on all platforms. Windows style paths with backslashes `\\` are not supported.\n\nDefault value: format every file\n\nPossible values: See an example below\n\nStable: No (tracking issue: [#3395](https://github.com/rust-lang/rustfmt/issues/3395))\n\n\n### Example\n\nIf you want to ignore specific files, put the following to your config file:\n\n```toml\nignore = [\n    \"src/types.rs\",\n    \"src/foo/bar.rs\",\n]\n```\n\nIf you want to ignore every file under `examples/`, put the following to your config file:\n\n```toml\nignore = [\n    \"examples\",\n]\n```\n\nIf you want to ignore every file under the directory where you put your rustfmt.toml:\n\n```toml\nignore = [\"/\"]\n```\n\nIf you want to allow specific paths that would otherwise be ignored, prefix those paths with a `!`:\n\n```toml\nignore = [\"bar_dir/*\", \"!bar_dir/*/what.rs\"]\n```\n\nIn this case, all files under `bar_dir` will be ignored, except files like `bar_dir/sub/what.rs`\nor `bar_dir/another/what.rs`.",
      "markdownDescription": "Skip formatting files and directories that match the specified pattern.\nThe pattern format is the same as [.gitignore](https://git-scm.com/docs/gitignore#_pattern_format). Be sure to use Unix/forwardslash `/` style  paths. This path style will work on all platforms. Windows style paths with backslashes `\\` are not supported.\n\nDefault value: format every file\n\nPossible values: See an example below\n\nStable: No (tracking issue: [#3395](https://github.com/rust-lang/rustfmt/issues/3395))\n\n\n### Example\n\nIf you want to ignore specific files, put the following to your config file:\n\n```toml\nignore = [\n    \"src/types.rs\",\n    \"src/foo/bar.rs\",\n]\n```\n\nIf you want to ignore every file under `examples/`, put the following to your config file:\n\n```toml\nignore = [\n    \"examples\",\n]\n```\n\nIf you want to ignore every file under the directory where you put your rustfmt.toml:\n\n```toml\nignore = [\"/\"]\n```\n\nIf you want to allow specific paths that would otherwise be ignored, prefix those paths with a `!`:\n\n```toml\nignore = [\"bar_dir/*\", \"!bar_dir/*/what.rs\"]\n```\n\nIn this case, all files under `bar_dir` will be ignored, except files like `bar_dir/sub/what.rs`\nor `bar_dir/another/what.rs`.",
      "x-intellij-html-description": "<p>Skip formatting files and directories that match the specified pattern.\nThe pattern format is the same as <a href=\"https://git-scm.com/docs/gitignore#_pattern_format\">.gitignore</a>. Be sure to use Unix/forwardslash <code>/</code> style  paths. This path style will work on all platforms. Windows style paths with backslashes <code>\\</code> are not supported.</p>\n<p>Default value: format every file</p>\n<p>Possible values: See an example below</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3395\">#3395</a>)</p>\n<h3>Example</h3>\n<p>If you want to ignore specific files, put the following to your config file:</p>\n<pre><code class=\"language-toml\">ignore = [\n    &quot;src/types.rs&quot;,\n    &quot;src/foo/bar.rs&quot;,\n]\n</code></pre>\n<p>If you want to ignore every file under <code>examples/</code>, put the following to your config file:</p>\n<pre><code class=\"language-toml\">ignore = [\n    &quot;examples&quot;,\n]\n</code></pre>\n<p>If you want to ignore every file under the directory where you put your rustfmt.toml:</p>\n<pre><code class=\"language-toml\">ignore = [&quot;/&quot;]\n</code></pre>\n<p>If you want to allow specific paths that would otherwise be ignored, prefix those paths with a <code>!</code>:</p>\n<pre><code class=\"language-toml\">ignore = [&quot;bar_dir/*&quot;, &quot;!bar_dir/*/what.rs&quot;]\n</code></pre>\n<p>In this case, all files under <code>bar_dir</code> will be ignored, except files like <code>bar_dir/sub/what.rs</code>\nor <code>bar_dir/another/what.rs</code>.</p>\n"
    },
    "imports_indent": {
      "type": "string",
      "description": "Indent style of imports\n\nStable: No (tracking issue: [#3360](https://github.com/rust-lang/rustfmt/issues/3360))\n\n\n#### `\"Block\"` (default):\n\n```rust\nuse foo::{\n    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,\n};\n```\n\n#### `\"Visual\"`:\n\n```rust\nuse foo::{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n          zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz};\n```\n\nSee also: `imports_layout`.",
      "markdownDescription": "Indent style of imports\n\nStable: No (tracking issue: [#3360](https://github.com/rust-lang/rustfmt/issues/3360))\n\n\n#### `\"Block\"` (default):\n\n```rust\nuse foo::{\n    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,\n};\n```\n\n#### `\"Visual\"`:\n\n```rust\nuse foo::{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n          zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz};\n```\n\nSee also: `imports_layout`.",
      "x-intellij-html-description": "<p>Indent style of imports</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3360\">#3360</a>)</p>\n<h4><code>&quot;Block&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">use foo::{\n    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz,\n};\n</code></pre>\n<h4><code>&quot;Visual&quot;</code>:</h4>\n<pre><code class=\"language-rust\">use foo::{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n          zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz};\n</code></pre>\n<p>See also: <code>imports_layout</code>.</p>\n",
      "default": "Block",
      "enum": ["Block", "Visual"]
    },
    "imports_layout": {
      "type": "string",
      "description": "Item layout inside a imports block\n\nStable: No (tracking issue: [#3361](https://github.com/rust-lang/rustfmt/issues/3361))\n\n\n#### `\"Mixed\"` (default):\n\n```rust\nuse foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n\nuse foo::{\n    aaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbb, cccccccccccccccccc, dddddddddddddddddd,\n    eeeeeeeeeeeeeeeeee, ffffffffffffffffff,\n};\n```\n\n#### `\"Horizontal\"`:\n\n**Note**: This option forces all imports onto one line and may exceed `max_width`.\n\n```rust\nuse foo::{xxx, yyy, zzz};\n\nuse foo::{aaa, bbb, ccc, ddd, eee, fff};\n```\n\n#### `\"HorizontalVertical\"`:\n\n```rust\nuse foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n\nuse foo::{\n    aaaaaaaaaaaaaaaaaa,\n    bbbbbbbbbbbbbbbbbb,\n    cccccccccccccccccc,\n    dddddddddddddddddd,\n    eeeeeeeeeeeeeeeeee,\n    ffffffffffffffffff,\n};\n```\n\n#### `\"Vertical\"`:\n\n```rust\nuse foo::{\n    xxx,\n    yyy,\n    zzz,\n};\n\nuse foo::{\n    aaa,\n    bbb,\n    ccc,\n    ddd,\n    eee,\n    fff,\n};\n```",
      "markdownDescription": "Item layout inside a imports block\n\nStable: No (tracking issue: [#3361](https://github.com/rust-lang/rustfmt/issues/3361))\n\n\n#### `\"Mixed\"` (default):\n\n```rust\nuse foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n\nuse foo::{\n    aaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbb, cccccccccccccccccc, dddddddddddddddddd,\n    eeeeeeeeeeeeeeeeee, ffffffffffffffffff,\n};\n```\n\n#### `\"Horizontal\"`:\n\n**Note**: This option forces all imports onto one line and may exceed `max_width`.\n\n```rust\nuse foo::{xxx, yyy, zzz};\n\nuse foo::{aaa, bbb, ccc, ddd, eee, fff};\n```\n\n#### `\"HorizontalVertical\"`:\n\n```rust\nuse foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n\nuse foo::{\n    aaaaaaaaaaaaaaaaaa,\n    bbbbbbbbbbbbbbbbbb,\n    cccccccccccccccccc,\n    dddddddddddddddddd,\n    eeeeeeeeeeeeeeeeee,\n    ffffffffffffffffff,\n};\n```\n\n#### `\"Vertical\"`:\n\n```rust\nuse foo::{\n    xxx,\n    yyy,\n    zzz,\n};\n\nuse foo::{\n    aaa,\n    bbb,\n    ccc,\n    ddd,\n    eee,\n    fff,\n};\n```",
      "x-intellij-html-description": "<p>Item layout inside a imports block</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3361\">#3361</a>)</p>\n<h4><code>&quot;Mixed&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">use foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n\nuse foo::{\n    aaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbb, cccccccccccccccccc, dddddddddddddddddd,\n    eeeeeeeeeeeeeeeeee, ffffffffffffffffff,\n};\n</code></pre>\n<h4><code>&quot;Horizontal&quot;</code>:</h4>\n<p><strong>Note</strong>: This option forces all imports onto one line and may exceed <code>max_width</code>.</p>\n<pre><code class=\"language-rust\">use foo::{xxx, yyy, zzz};\n\nuse foo::{aaa, bbb, ccc, ddd, eee, fff};\n</code></pre>\n<h4><code>&quot;HorizontalVertical&quot;</code>:</h4>\n<pre><code class=\"language-rust\">use foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n\nuse foo::{\n    aaaaaaaaaaaaaaaaaa,\n    bbbbbbbbbbbbbbbbbb,\n    cccccccccccccccccc,\n    dddddddddddddddddd,\n    eeeeeeeeeeeeeeeeee,\n    ffffffffffffffffff,\n};\n</code></pre>\n<h4><code>&quot;Vertical&quot;</code>:</h4>\n<pre><code class=\"language-rust\">use foo::{\n    xxx,\n    yyy,\n    zzz,\n};\n\nuse foo::{\n    aaa,\n    bbb,\n    ccc,\n    ddd,\n    eee,\n    fff,\n};\n</code></pre>\n",
      "default": "Mixed",
      "enum": ["Horizontal", "HorizontalVertical", "Mixed", "Vertical"]
    },
    "indent_style": {
      "type": "string",
      "description": "Indent on expressions or items.\n\nStable: No (tracking issue: [#3346](https://github.com/rust-lang/rustfmt/issues/3346))\n\n\n### Array\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    let lorem = vec![\n        \"ipsum\",\n        \"dolor\",\n        \"sit\",\n        \"amet\",\n        \"consectetur\",\n        \"adipiscing\",\n        \"elit\",\n    ];\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    let lorem = vec![\"ipsum\",\n                     \"dolor\",\n                     \"sit\",\n                     \"amet\",\n                     \"consectetur\",\n                     \"adipiscing\",\n                     \"elit\"];\n}\n```\n\n### Control flow\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    if lorem_ipsum\n        && dolor_sit\n        && amet_consectetur\n        && lorem_sit\n        && dolor_consectetur\n        && amet_ipsum\n        && lorem_consectetur\n    {\n        // ...\n    }\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    if lorem_ipsum\n       && dolor_sit\n       && amet_consectetur\n       && lorem_sit\n       && dolor_consectetur\n       && amet_ipsum\n       && lorem_consectetur\n    {\n        // ...\n    }\n}\n```\n\nSee also: `control_brace_style`.\n\n### Function arguments\n\n#### `\"Block\"` (default):\n\n```rust\nfn lorem() {}\n\nfn lorem(ipsum: usize) {}\n\nfn lorem(\n    ipsum: usize,\n    dolor: usize,\n    sit: usize,\n    amet: usize,\n    consectetur: usize,\n    adipiscing: usize,\n    elit: usize,\n) {\n    // body\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn lorem() {}\n\nfn lorem(ipsum: usize) {}\n\nfn lorem(ipsum: usize,\n         dolor: usize,\n         sit: usize,\n         amet: usize,\n         consectetur: usize,\n         adipiscing: usize,\n         elit: usize) {\n    // body\n}\n```\n\n### Function calls\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    lorem(\n        \"lorem\",\n        \"ipsum\",\n        \"dolor\",\n        \"sit\",\n        \"amet\",\n        \"consectetur\",\n        \"adipiscing\",\n        \"elit\",\n    );\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    lorem(\"lorem\",\n          \"ipsum\",\n          \"dolor\",\n          \"sit\",\n          \"amet\",\n          \"consectetur\",\n          \"adipiscing\",\n          \"elit\");\n}\n```\n\n### Generics\n\n#### `\"Block\"` (default):\n\n```rust\nfn lorem<\n    Ipsum: Eq = usize,\n    Dolor: Eq = usize,\n    Sit: Eq = usize,\n    Amet: Eq = usize,\n    Adipiscing: Eq = usize,\n    Consectetur: Eq = usize,\n    Elit: Eq = usize,\n>(\n    ipsum: Ipsum,\n    dolor: Dolor,\n    sit: Sit,\n    amet: Amet,\n    adipiscing: Adipiscing,\n    consectetur: Consectetur,\n    elit: Elit,\n) -> T {\n    // body\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn lorem<Ipsum: Eq = usize,\n         Dolor: Eq = usize,\n         Sit: Eq = usize,\n         Amet: Eq = usize,\n         Adipiscing: Eq = usize,\n         Consectetur: Eq = usize,\n         Elit: Eq = usize>(\n    ipsum: Ipsum,\n    dolor: Dolor,\n    sit: Sit,\n    amet: Amet,\n    adipiscing: Adipiscing,\n    consectetur: Consectetur,\n    elit: Elit)\n    -> T {\n    // body\n}\n```\n\n#### Struct\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    let lorem = Lorem { ipsum: dolor,\n                        sit: amet };\n}\n```\n\nSee also: `struct_lit_single_line`, `indent_style`.\n\n### Where predicates\n\n#### `\"Block\"` (default):\n\n```rust\nfn lorem<Ipsum, Dolor, Sit, Amet>() -> T\nwhere\n    Ipsum: Eq,\n    Dolor: Eq,\n    Sit: Eq,\n    Amet: Eq,\n{\n    // body\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n    where Ipsum: Eq,\n          Dolor: Eq,\n          Sit: Eq,\n          Amet: Eq\n{\n    // body\n}\n```",
      "markdownDescription": "Indent on expressions or items.\n\nStable: No (tracking issue: [#3346](https://github.com/rust-lang/rustfmt/issues/3346))\n\n\n### Array\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    let lorem = vec![\n        \"ipsum\",\n        \"dolor\",\n        \"sit\",\n        \"amet\",\n        \"consectetur\",\n        \"adipiscing\",\n        \"elit\",\n    ];\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    let lorem = vec![\"ipsum\",\n                     \"dolor\",\n                     \"sit\",\n                     \"amet\",\n                     \"consectetur\",\n                     \"adipiscing\",\n                     \"elit\"];\n}\n```\n\n### Control flow\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    if lorem_ipsum\n        && dolor_sit\n        && amet_consectetur\n        && lorem_sit\n        && dolor_consectetur\n        && amet_ipsum\n        && lorem_consectetur\n    {\n        // ...\n    }\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    if lorem_ipsum\n       && dolor_sit\n       && amet_consectetur\n       && lorem_sit\n       && dolor_consectetur\n       && amet_ipsum\n       && lorem_consectetur\n    {\n        // ...\n    }\n}\n```\n\nSee also: `control_brace_style`.\n\n### Function arguments\n\n#### `\"Block\"` (default):\n\n```rust\nfn lorem() {}\n\nfn lorem(ipsum: usize) {}\n\nfn lorem(\n    ipsum: usize,\n    dolor: usize,\n    sit: usize,\n    amet: usize,\n    consectetur: usize,\n    adipiscing: usize,\n    elit: usize,\n) {\n    // body\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn lorem() {}\n\nfn lorem(ipsum: usize) {}\n\nfn lorem(ipsum: usize,\n         dolor: usize,\n         sit: usize,\n         amet: usize,\n         consectetur: usize,\n         adipiscing: usize,\n         elit: usize) {\n    // body\n}\n```\n\n### Function calls\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    lorem(\n        \"lorem\",\n        \"ipsum\",\n        \"dolor\",\n        \"sit\",\n        \"amet\",\n        \"consectetur\",\n        \"adipiscing\",\n        \"elit\",\n    );\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    lorem(\"lorem\",\n          \"ipsum\",\n          \"dolor\",\n          \"sit\",\n          \"amet\",\n          \"consectetur\",\n          \"adipiscing\",\n          \"elit\");\n}\n```\n\n### Generics\n\n#### `\"Block\"` (default):\n\n```rust\nfn lorem<\n    Ipsum: Eq = usize,\n    Dolor: Eq = usize,\n    Sit: Eq = usize,\n    Amet: Eq = usize,\n    Adipiscing: Eq = usize,\n    Consectetur: Eq = usize,\n    Elit: Eq = usize,\n>(\n    ipsum: Ipsum,\n    dolor: Dolor,\n    sit: Sit,\n    amet: Amet,\n    adipiscing: Adipiscing,\n    consectetur: Consectetur,\n    elit: Elit,\n) -> T {\n    // body\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn lorem<Ipsum: Eq = usize,\n         Dolor: Eq = usize,\n         Sit: Eq = usize,\n         Amet: Eq = usize,\n         Adipiscing: Eq = usize,\n         Consectetur: Eq = usize,\n         Elit: Eq = usize>(\n    ipsum: Ipsum,\n    dolor: Dolor,\n    sit: Sit,\n    amet: Amet,\n    adipiscing: Adipiscing,\n    consectetur: Consectetur,\n    elit: Elit)\n    -> T {\n    // body\n}\n```\n\n#### Struct\n\n#### `\"Block\"` (default):\n\n```rust\nfn main() {\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn main() {\n    let lorem = Lorem { ipsum: dolor,\n                        sit: amet };\n}\n```\n\nSee also: `struct_lit_single_line`, `indent_style`.\n\n### Where predicates\n\n#### `\"Block\"` (default):\n\n```rust\nfn lorem<Ipsum, Dolor, Sit, Amet>() -> T\nwhere\n    Ipsum: Eq,\n    Dolor: Eq,\n    Sit: Eq,\n    Amet: Eq,\n{\n    // body\n}\n```\n\n#### `\"Visual\"`:\n\n```rust\nfn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n    where Ipsum: Eq,\n          Dolor: Eq,\n          Sit: Eq,\n          Amet: Eq\n{\n    // body\n}\n```",
      "x-intellij-html-description": "<p>Indent on expressions or items.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3346\">#3346</a>)</p>\n<h3>Array</h3>\n<h4><code>&quot;Block&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = vec![\n        &quot;ipsum&quot;,\n        &quot;dolor&quot;,\n        &quot;sit&quot;,\n        &quot;amet&quot;,\n        &quot;consectetur&quot;,\n        &quot;adipiscing&quot;,\n        &quot;elit&quot;,\n    ];\n}\n</code></pre>\n<h4><code>&quot;Visual&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = vec![&quot;ipsum&quot;,\n                     &quot;dolor&quot;,\n                     &quot;sit&quot;,\n                     &quot;amet&quot;,\n                     &quot;consectetur&quot;,\n                     &quot;adipiscing&quot;,\n                     &quot;elit&quot;];\n}\n</code></pre>\n<h3>Control flow</h3>\n<h4><code>&quot;Block&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    if lorem_ipsum\n        &amp;&amp; dolor_sit\n        &amp;&amp; amet_consectetur\n        &amp;&amp; lorem_sit\n        &amp;&amp; dolor_consectetur\n        &amp;&amp; amet_ipsum\n        &amp;&amp; lorem_consectetur\n    {\n        // ...\n    }\n}\n</code></pre>\n<h4><code>&quot;Visual&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    if lorem_ipsum\n       &amp;&amp; dolor_sit\n       &amp;&amp; amet_consectetur\n       &amp;&amp; lorem_sit\n       &amp;&amp; dolor_consectetur\n       &amp;&amp; amet_ipsum\n       &amp;&amp; lorem_consectetur\n    {\n        // ...\n    }\n}\n</code></pre>\n<p>See also: <code>control_brace_style</code>.</p>\n<h3>Function arguments</h3>\n<h4><code>&quot;Block&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem() {}\n\nfn lorem(ipsum: usize) {}\n\nfn lorem(\n    ipsum: usize,\n    dolor: usize,\n    sit: usize,\n    amet: usize,\n    consectetur: usize,\n    adipiscing: usize,\n    elit: usize,\n) {\n    // body\n}\n</code></pre>\n<h4><code>&quot;Visual&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem() {}\n\nfn lorem(ipsum: usize) {}\n\nfn lorem(ipsum: usize,\n         dolor: usize,\n         sit: usize,\n         amet: usize,\n         consectetur: usize,\n         adipiscing: usize,\n         elit: usize) {\n    // body\n}\n</code></pre>\n<h3>Function calls</h3>\n<h4><code>&quot;Block&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    lorem(\n        &quot;lorem&quot;,\n        &quot;ipsum&quot;,\n        &quot;dolor&quot;,\n        &quot;sit&quot;,\n        &quot;amet&quot;,\n        &quot;consectetur&quot;,\n        &quot;adipiscing&quot;,\n        &quot;elit&quot;,\n    );\n}\n</code></pre>\n<h4><code>&quot;Visual&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    lorem(&quot;lorem&quot;,\n          &quot;ipsum&quot;,\n          &quot;dolor&quot;,\n          &quot;sit&quot;,\n          &quot;amet&quot;,\n          &quot;consectetur&quot;,\n          &quot;adipiscing&quot;,\n          &quot;elit&quot;);\n}\n</code></pre>\n<h3>Generics</h3>\n<h4><code>&quot;Block&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem&lt;\n    Ipsum: Eq = usize,\n    Dolor: Eq = usize,\n    Sit: Eq = usize,\n    Amet: Eq = usize,\n    Adipiscing: Eq = usize,\n    Consectetur: Eq = usize,\n    Elit: Eq = usize,\n&gt;(\n    ipsum: Ipsum,\n    dolor: Dolor,\n    sit: Sit,\n    amet: Amet,\n    adipiscing: Adipiscing,\n    consectetur: Consectetur,\n    elit: Elit,\n) -&gt; T {\n    // body\n}\n</code></pre>\n<h4><code>&quot;Visual&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem&lt;Ipsum: Eq = usize,\n         Dolor: Eq = usize,\n         Sit: Eq = usize,\n         Amet: Eq = usize,\n         Adipiscing: Eq = usize,\n         Consectetur: Eq = usize,\n         Elit: Eq = usize&gt;(\n    ipsum: Ipsum,\n    dolor: Dolor,\n    sit: Sit,\n    amet: Amet,\n    adipiscing: Adipiscing,\n    consectetur: Consectetur,\n    elit: Elit)\n    -&gt; T {\n    // body\n}\n</code></pre>\n<h4>Struct</h4>\n<h4><code>&quot;Block&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n</code></pre>\n<h4><code>&quot;Visual&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = Lorem { ipsum: dolor,\n                        sit: amet };\n}\n</code></pre>\n<p>See also: <code>struct_lit_single_line</code>, <code>indent_style</code>.</p>\n<h3>Where predicates</h3>\n<h4><code>&quot;Block&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem&lt;Ipsum, Dolor, Sit, Amet&gt;() -&gt; T\nwhere\n    Ipsum: Eq,\n    Dolor: Eq,\n    Sit: Eq,\n    Amet: Eq,\n{\n    // body\n}\n</code></pre>\n<h4><code>&quot;Visual&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem&lt;Ipsum, Dolor, Sit, Amet&gt;() -&gt; T\n    where Ipsum: Eq,\n          Dolor: Eq,\n          Sit: Eq,\n          Amet: Eq\n{\n    // body\n}\n</code></pre>\n",
      "default": "Block",
      "enum": ["Block", "Visual"]
    },
    "inline_attribute_width": {
      "type": "integer",
      "description": "Write an item and its attribute on the same line if their combined width is below a threshold\n\nPossible values: any positive integer\n\nStable: No (tracking issue: [#3343](https://github.com/rust-lang/rustfmt/issues/3343))\n\n\n### Example\n\n#### `0` (default):\n```rust\n#[cfg(feature = \"alloc\")]\nuse core::slice;\n```\n\n#### `50`:\n```rust\n#[cfg(feature = \"alloc\")] use core::slice;\n```",
      "markdownDescription": "Write an item and its attribute on the same line if their combined width is below a threshold\n\nPossible values: any positive integer\n\nStable: No (tracking issue: [#3343](https://github.com/rust-lang/rustfmt/issues/3343))\n\n\n### Example\n\n#### `0` (default):\n```rust\n#[cfg(feature = \"alloc\")]\nuse core::slice;\n```\n\n#### `50`:\n```rust\n#[cfg(feature = \"alloc\")] use core::slice;\n```",
      "x-intellij-html-description": "<p>Write an item and its attribute on the same line if their combined width is below a threshold</p>\n<p>Possible values: any positive integer</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3343\">#3343</a>)</p>\n<h3>Example</h3>\n<h4><code>0</code> (default):</h4>\n<pre><code class=\"language-rust\">#[cfg(feature = &quot;alloc&quot;)]\nuse core::slice;\n</code></pre>\n<h4><code>50</code>:</h4>\n<pre><code class=\"language-rust\">#[cfg(feature = &quot;alloc&quot;)] use core::slice;\n</code></pre>\n",
      "default": 0
    },
    "match_arm_blocks": {
      "type": "boolean",
      "description": "Controls whether arm bodies are wrapped in cases where the first line of the body cannot fit on the same line as the `=>` operator.\n\nThe Style Guide requires that bodies are block wrapped by default if a line break is required after the `=>`, but this option can be used to disable that behavior to prevent wrapping arm bodies in that event, so long as the body contains neither multiple statements nor line comments.\n\nStable: No (tracking issue: [#3373](https://github.com/rust-lang/rustfmt/issues/3373))\n\n\n#### `true` (default):\n\n```rust\nfn main() {\n    match lorem {\n        ipsum => {\n            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n        }\n        dolor => println!(\"{}\", sit),\n        sit => foo(\n            \"foooooooooooooooooooooooo\",\n            \"baaaaaaaaaaaaaaaaaaaaaaaarr\",\n            \"baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz\",\n            \"qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx\",\n        ),\n    }\n}\n```\n\n#### `false`:\n\n```rust\nfn main() {\n    match lorem {\n        lorem =>\n            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n        ipsum => println!(\"{}\", sit),\n        sit => foo(\n            \"foooooooooooooooooooooooo\",\n            \"baaaaaaaaaaaaaaaaaaaaaaaarr\",\n            \"baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz\",\n            \"qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx\",\n        ),\n    }\n}\n```\n\nSee also: `match_block_trailing_comma`.",
      "markdownDescription": "Controls whether arm bodies are wrapped in cases where the first line of the body cannot fit on the same line as the `=>` operator.\n\nThe Style Guide requires that bodies are block wrapped by default if a line break is required after the `=>`, but this option can be used to disable that behavior to prevent wrapping arm bodies in that event, so long as the body contains neither multiple statements nor line comments.\n\nStable: No (tracking issue: [#3373](https://github.com/rust-lang/rustfmt/issues/3373))\n\n\n#### `true` (default):\n\n```rust\nfn main() {\n    match lorem {\n        ipsum => {\n            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n        }\n        dolor => println!(\"{}\", sit),\n        sit => foo(\n            \"foooooooooooooooooooooooo\",\n            \"baaaaaaaaaaaaaaaaaaaaaaaarr\",\n            \"baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz\",\n            \"qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx\",\n        ),\n    }\n}\n```\n\n#### `false`:\n\n```rust\nfn main() {\n    match lorem {\n        lorem =>\n            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n        ipsum => println!(\"{}\", sit),\n        sit => foo(\n            \"foooooooooooooooooooooooo\",\n            \"baaaaaaaaaaaaaaaaaaaaaaaarr\",\n            \"baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz\",\n            \"qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx\",\n        ),\n    }\n}\n```\n\nSee also: `match_block_trailing_comma`.",
      "x-intellij-html-description": "<p>Controls whether arm bodies are wrapped in cases where the first line of the body cannot fit on the same line as the <code>=&gt;</code> operator.</p>\n<p>The Style Guide requires that bodies are block wrapped by default if a line break is required after the <code>=&gt;</code>, but this option can be used to disable that behavior to prevent wrapping arm bodies in that event, so long as the body contains neither multiple statements nor line comments.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3373\">#3373</a>)</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    match lorem {\n        ipsum =&gt; {\n            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n        }\n        dolor =&gt; println!(&quot;{}&quot;, sit),\n        sit =&gt; foo(\n            &quot;foooooooooooooooooooooooo&quot;,\n            &quot;baaaaaaaaaaaaaaaaaaaaaaaarr&quot;,\n            &quot;baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz&quot;,\n            &quot;qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx&quot;,\n        ),\n    }\n}\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    match lorem {\n        lorem =&gt;\n            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n        ipsum =&gt; println!(&quot;{}&quot;, sit),\n        sit =&gt; foo(\n            &quot;foooooooooooooooooooooooo&quot;,\n            &quot;baaaaaaaaaaaaaaaaaaaaaaaarr&quot;,\n            &quot;baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz&quot;,\n            &quot;qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx&quot;,\n        ),\n    }\n}\n</code></pre>\n<p>See also: <code>match_block_trailing_comma</code>.</p>\n",
      "default": true
    },
    "match_arm_leading_pipes": {
      "type": "string",
      "description": "Controls whether to include a leading pipe on match arms\n\nStable: Yes\n\n\n#### `Never` (default):\n```rust\n// Leading pipes are removed from this:\n// fn foo() {\n//     match foo {\n//         | \"foo\" | \"bar\" => {}\n//         | \"baz\"\n//         | \"something relatively long\"\n//         | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n//         | \"qux\" => println!(\"y\"),\n//         _ => {}\n//     }\n// }\n\n// Becomes\nfn foo() {\n    match foo {\n        \"foo\" | \"bar\" => {}\n        \"baz\"\n        | \"something relatively long\"\n        | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n        \"qux\" => println!(\"y\"),\n        _ => {}\n    }\n}\n```\n\n#### `Always`:\n```rust\n// Leading pipes are emitted on all arms of this:\n// fn foo() {\n//     match foo {\n//         \"foo\" | \"bar\" => {}\n//         \"baz\"\n//         | \"something relatively long\"\n//         | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n//         \"qux\" => println!(\"y\"),\n//         _ => {}\n//     }\n// }\n\n// Becomes:\nfn foo() {\n    match foo {\n        | \"foo\" | \"bar\" => {}\n        | \"baz\"\n        | \"something relatively long\"\n        | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n        | \"qux\" => println!(\"y\"),\n        | _ => {}\n    }\n}\n```\n\n#### `Preserve`:\n```rust\nfn foo() {\n    match foo {\n        | \"foo\" | \"bar\" => {}\n        | \"baz\"\n        | \"something relatively long\"\n        | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n        | \"qux\" => println!(\"y\"),\n        _ => {}\n    }\n\n    match baz {\n        \"qux\" => {}\n        \"foo\" | \"bar\" => {}\n        _ => {}\n    }\n}\n```",
      "markdownDescription": "Controls whether to include a leading pipe on match arms\n\nStable: Yes\n\n\n#### `Never` (default):\n```rust\n// Leading pipes are removed from this:\n// fn foo() {\n//     match foo {\n//         | \"foo\" | \"bar\" => {}\n//         | \"baz\"\n//         | \"something relatively long\"\n//         | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n//         | \"qux\" => println!(\"y\"),\n//         _ => {}\n//     }\n// }\n\n// Becomes\nfn foo() {\n    match foo {\n        \"foo\" | \"bar\" => {}\n        \"baz\"\n        | \"something relatively long\"\n        | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n        \"qux\" => println!(\"y\"),\n        _ => {}\n    }\n}\n```\n\n#### `Always`:\n```rust\n// Leading pipes are emitted on all arms of this:\n// fn foo() {\n//     match foo {\n//         \"foo\" | \"bar\" => {}\n//         \"baz\"\n//         | \"something relatively long\"\n//         | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n//         \"qux\" => println!(\"y\"),\n//         _ => {}\n//     }\n// }\n\n// Becomes:\nfn foo() {\n    match foo {\n        | \"foo\" | \"bar\" => {}\n        | \"baz\"\n        | \"something relatively long\"\n        | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n        | \"qux\" => println!(\"y\"),\n        | _ => {}\n    }\n}\n```\n\n#### `Preserve`:\n```rust\nfn foo() {\n    match foo {\n        | \"foo\" | \"bar\" => {}\n        | \"baz\"\n        | \"something relatively long\"\n        | \"something really really really realllllllllllllly long\" => println!(\"x\"),\n        | \"qux\" => println!(\"y\"),\n        _ => {}\n    }\n\n    match baz {\n        \"qux\" => {}\n        \"foo\" | \"bar\" => {}\n        _ => {}\n    }\n}\n```",
      "x-intellij-html-description": "<p>Controls whether to include a leading pipe on match arms</p>\n<p>Stable: Yes</p>\n<h4><code>Never</code> (default):</h4>\n<pre><code class=\"language-rust\">// Leading pipes are removed from this:\n// fn foo() {\n//     match foo {\n//         | &quot;foo&quot; | &quot;bar&quot; =&gt; {}\n//         | &quot;baz&quot;\n//         | &quot;something relatively long&quot;\n//         | &quot;something really really really realllllllllllllly long&quot; =&gt; println!(&quot;x&quot;),\n//         | &quot;qux&quot; =&gt; println!(&quot;y&quot;),\n//         _ =&gt; {}\n//     }\n// }\n\n// Becomes\nfn foo() {\n    match foo {\n        &quot;foo&quot; | &quot;bar&quot; =&gt; {}\n        &quot;baz&quot;\n        | &quot;something relatively long&quot;\n        | &quot;something really really really realllllllllllllly long&quot; =&gt; println!(&quot;x&quot;),\n        &quot;qux&quot; =&gt; println!(&quot;y&quot;),\n        _ =&gt; {}\n    }\n}\n</code></pre>\n<h4><code>Always</code>:</h4>\n<pre><code class=\"language-rust\">// Leading pipes are emitted on all arms of this:\n// fn foo() {\n//     match foo {\n//         &quot;foo&quot; | &quot;bar&quot; =&gt; {}\n//         &quot;baz&quot;\n//         | &quot;something relatively long&quot;\n//         | &quot;something really really really realllllllllllllly long&quot; =&gt; println!(&quot;x&quot;),\n//         &quot;qux&quot; =&gt; println!(&quot;y&quot;),\n//         _ =&gt; {}\n//     }\n// }\n\n// Becomes:\nfn foo() {\n    match foo {\n        | &quot;foo&quot; | &quot;bar&quot; =&gt; {}\n        | &quot;baz&quot;\n        | &quot;something relatively long&quot;\n        | &quot;something really really really realllllllllllllly long&quot; =&gt; println!(&quot;x&quot;),\n        | &quot;qux&quot; =&gt; println!(&quot;y&quot;),\n        | _ =&gt; {}\n    }\n}\n</code></pre>\n<h4><code>Preserve</code>:</h4>\n<pre><code class=\"language-rust\">fn foo() {\n    match foo {\n        | &quot;foo&quot; | &quot;bar&quot; =&gt; {}\n        | &quot;baz&quot;\n        | &quot;something relatively long&quot;\n        | &quot;something really really really realllllllllllllly long&quot; =&gt; println!(&quot;x&quot;),\n        | &quot;qux&quot; =&gt; println!(&quot;y&quot;),\n        _ =&gt; {}\n    }\n\n    match baz {\n        &quot;qux&quot; =&gt; {}\n        &quot;foo&quot; | &quot;bar&quot; =&gt; {}\n        _ =&gt; {}\n    }\n}\n</code></pre>\n",
      "default": "Never",
      "enum": ["Always", "Never", "Preserve"]
    },
    "match_block_trailing_comma": {
      "type": "boolean",
      "description": "Put a trailing comma after a block based match arm (non-block arms are not affected)\n\nStable: Yes\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    match lorem {\n        Lorem::Ipsum => {\n            println!(\"ipsum\");\n        }\n        Lorem::Dolor => println!(\"dolor\"),\n    }\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    match lorem {\n        Lorem::Ipsum => {\n            println!(\"ipsum\");\n        },\n        Lorem::Dolor => println!(\"dolor\"),\n    }\n}\n```\n\nSee also: `trailing_comma`, `match_arm_blocks`.",
      "markdownDescription": "Put a trailing comma after a block based match arm (non-block arms are not affected)\n\nStable: Yes\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    match lorem {\n        Lorem::Ipsum => {\n            println!(\"ipsum\");\n        }\n        Lorem::Dolor => println!(\"dolor\"),\n    }\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    match lorem {\n        Lorem::Ipsum => {\n            println!(\"ipsum\");\n        },\n        Lorem::Dolor => println!(\"dolor\"),\n    }\n}\n```\n\nSee also: `trailing_comma`, `match_arm_blocks`.",
      "x-intellij-html-description": "<p>Put a trailing comma after a block based match arm (non-block arms are not affected)</p>\n<p>Stable: Yes</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    match lorem {\n        Lorem::Ipsum =&gt; {\n            println!(&quot;ipsum&quot;);\n        }\n        Lorem::Dolor =&gt; println!(&quot;dolor&quot;),\n    }\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    match lorem {\n        Lorem::Ipsum =&gt; {\n            println!(&quot;ipsum&quot;);\n        },\n        Lorem::Dolor =&gt; println!(&quot;dolor&quot;),\n    }\n}\n</code></pre>\n<p>See also: <code>trailing_comma</code>, <code>match_arm_blocks</code>.</p>\n",
      "default": false
    },
    "max_width": {
      "type": "integer",
      "description": "Maximum width of each line\n\nPossible values: any positive integer\n\nStable: Yes\n\nSee also `error_on_line_overflow`.",
      "markdownDescription": "Maximum width of each line\n\nPossible values: any positive integer\n\nStable: Yes\n\nSee also `error_on_line_overflow`.",
      "x-intellij-html-description": "<p>Maximum width of each line</p>\n<p>Possible values: any positive integer</p>\n<p>Stable: Yes</p>\n<p>See also <code>error_on_line_overflow</code>.</p>\n",
      "default": 100
    },
    "merge_derives": {
      "type": "boolean",
      "description": "Merge multiple derives into a single one.\n\nStable: Yes\n\n\n#### `true` (default):\n\n```rust\n#[derive(Eq, PartialEq, Debug, Copy, Clone)]\npub enum Foo {}\n```\n\n#### `false`:\n\n```rust\n#[derive(Eq, PartialEq, Debug, Copy, Clone)]\npub enum Bar {}\n\n#[derive(Eq, PartialEq)]\n#[derive(Debug)]\n#[derive(Copy, Clone)]\npub enum Foo {}\n```",
      "markdownDescription": "Merge multiple derives into a single one.\n\nStable: Yes\n\n\n#### `true` (default):\n\n```rust\n#[derive(Eq, PartialEq, Debug, Copy, Clone)]\npub enum Foo {}\n```\n\n#### `false`:\n\n```rust\n#[derive(Eq, PartialEq, Debug, Copy, Clone)]\npub enum Bar {}\n\n#[derive(Eq, PartialEq)]\n#[derive(Debug)]\n#[derive(Copy, Clone)]\npub enum Foo {}\n```",
      "x-intellij-html-description": "<p>Merge multiple derives into a single one.</p>\n<p>Stable: Yes</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">#[derive(Eq, PartialEq, Debug, Copy, Clone)]\npub enum Foo {}\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">#[derive(Eq, PartialEq, Debug, Copy, Clone)]\npub enum Bar {}\n\n#[derive(Eq, PartialEq)]\n#[derive(Debug)]\n#[derive(Copy, Clone)]\npub enum Foo {}\n</code></pre>\n",
      "default": true
    },
    "imports_granularity": {
      "type": "string",
      "description": "Controls how imports are structured in `use` statements. Imports will be merged or split to the configured level of granularity.\n\nSimilar to other `import` related configuration options, this option operates within the bounds of user-defined groups of imports. See `group_imports` for more information on import groups.\n\nNote that rustfmt will not modify the granularity of imports containing comments if doing so could potentially lose or misplace said comments.\n\nStable: No (tracking issue: [#4991](https://github.com/rust-lang/rustfmt/issues/4991))\n\n\n#### `Preserve` (default):\n\nDo not change the granularity of any imports and preserve the original structure written by the developer.\n\n```rust\nuse foo::b;\nuse foo::b::{f, g};\nuse foo::{a, c, d::e};\nuse qux::{h, i};\n```\n\n#### `Crate`:\n\nMerge imports from the same crate into a single `use` statement. Conversely, imports from different crates are split into separate statements.\n\n```rust\nuse foo::{\n    a, b,\n    b::{f, g},\n    c,\n    d::e,\n};\nuse qux::{h, i};\n```\n\n#### `Module`:\n\nMerge imports from the same module into a single `use` statement. Conversely, imports from different modules are split into separate statements.\n\n```rust\nuse foo::b::{f, g};\nuse foo::d::e;\nuse foo::{a, b, c};\nuse qux::{h, i};\n```\n\n#### `Item`:\n\nFlatten imports so that each has its own `use` statement.\n\n```rust\nuse foo::a;\nuse foo::b;\nuse foo::b::f;\nuse foo::b::g;\nuse foo::c;\nuse foo::d::e;\nuse qux::h;\nuse qux::i;\n```\n\n#### `One`:\n\nMerge all imports into a single `use` statement as long as they have the same visibility.\n\n```rust\npub use foo::{x, y};\nuse {\n    bar::{\n        a,\n        b::{self, f, g},\n        c,\n        d::e,\n    },\n    qux::{h, i},\n};\n```",
      "markdownDescription": "Controls how imports are structured in `use` statements. Imports will be merged or split to the configured level of granularity.\n\nSimilar to other `import` related configuration options, this option operates within the bounds of user-defined groups of imports. See `group_imports` for more information on import groups.\n\nNote that rustfmt will not modify the granularity of imports containing comments if doing so could potentially lose or misplace said comments.\n\nStable: No (tracking issue: [#4991](https://github.com/rust-lang/rustfmt/issues/4991))\n\n\n#### `Preserve` (default):\n\nDo not change the granularity of any imports and preserve the original structure written by the developer.\n\n```rust\nuse foo::b;\nuse foo::b::{f, g};\nuse foo::{a, c, d::e};\nuse qux::{h, i};\n```\n\n#### `Crate`:\n\nMerge imports from the same crate into a single `use` statement. Conversely, imports from different crates are split into separate statements.\n\n```rust\nuse foo::{\n    a, b,\n    b::{f, g},\n    c,\n    d::e,\n};\nuse qux::{h, i};\n```\n\n#### `Module`:\n\nMerge imports from the same module into a single `use` statement. Conversely, imports from different modules are split into separate statements.\n\n```rust\nuse foo::b::{f, g};\nuse foo::d::e;\nuse foo::{a, b, c};\nuse qux::{h, i};\n```\n\n#### `Item`:\n\nFlatten imports so that each has its own `use` statement.\n\n```rust\nuse foo::a;\nuse foo::b;\nuse foo::b::f;\nuse foo::b::g;\nuse foo::c;\nuse foo::d::e;\nuse qux::h;\nuse qux::i;\n```\n\n#### `One`:\n\nMerge all imports into a single `use` statement as long as they have the same visibility.\n\n```rust\npub use foo::{x, y};\nuse {\n    bar::{\n        a,\n        b::{self, f, g},\n        c,\n        d::e,\n    },\n    qux::{h, i},\n};\n```",
      "x-intellij-html-description": "<p>Controls how imports are structured in <code>use</code> statements. Imports will be merged or split to the configured level of granularity.</p>\n<p>Similar to other <code>import</code> related configuration options, this option operates within the bounds of user-defined groups of imports. See <code>group_imports</code> for more information on import groups.</p>\n<p>Note that rustfmt will not modify the granularity of imports containing comments if doing so could potentially lose or misplace said comments.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/4991\">#4991</a>)</p>\n<h4><code>Preserve</code> (default):</h4>\n<p>Do not change the granularity of any imports and preserve the original structure written by the developer.</p>\n<pre><code class=\"language-rust\">use foo::b;\nuse foo::b::{f, g};\nuse foo::{a, c, d::e};\nuse qux::{h, i};\n</code></pre>\n<h4><code>Crate</code>:</h4>\n<p>Merge imports from the same crate into a single <code>use</code> statement. Conversely, imports from different crates are split into separate statements.</p>\n<pre><code class=\"language-rust\">use foo::{\n    a, b,\n    b::{f, g},\n    c,\n    d::e,\n};\nuse qux::{h, i};\n</code></pre>\n<h4><code>Module</code>:</h4>\n<p>Merge imports from the same module into a single <code>use</code> statement. Conversely, imports from different modules are split into separate statements.</p>\n<pre><code class=\"language-rust\">use foo::b::{f, g};\nuse foo::d::e;\nuse foo::{a, b, c};\nuse qux::{h, i};\n</code></pre>\n<h4><code>Item</code>:</h4>\n<p>Flatten imports so that each has its own <code>use</code> statement.</p>\n<pre><code class=\"language-rust\">use foo::a;\nuse foo::b;\nuse foo::b::f;\nuse foo::b::g;\nuse foo::c;\nuse foo::d::e;\nuse qux::h;\nuse qux::i;\n</code></pre>\n<h4><code>One</code>:</h4>\n<p>Merge all imports into a single <code>use</code> statement as long as they have the same visibility.</p>\n<pre><code class=\"language-rust\">pub use foo::{x, y};\nuse {\n    bar::{\n        a,\n        b::{self, f, g},\n        c,\n        d::e,\n    },\n    qux::{h, i},\n};\n</code></pre>\n",
      "default": "Preserve",
      "enum": ["Preserve", "Crate", "Module", "Item", "One"]
    },
    "merge_imports": {
      "type": "string",
      "description": "This option is deprecated. Use `imports_granularity = \"Crate\"` instead.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n\n#### `false` (default):\n\n```rust\nuse foo::{a, c, d};\nuse foo::{b, g};\nuse foo::{e, f};\n```\n\n#### `true`:\n\n```rust\nuse foo::{a, b, c, d, e, f, g};\n```\n\n\n## `newline_style`\n\nUnix or Windows line endings\n\nStable: Yes\n\n\n#### `Auto` (default):\n\nThe newline style is detected automatically on a per-file basis. Files\nwith mixed line endings will be converted to the first detected line\nending style.\n\n#### `Native`\n\nLine endings will be converted to `\\r\\n` on Windows and `\\n` on all\nother platforms.\n\n#### `Unix`\n\nLine endings will be converted to `\\n`.\n\n#### `Windows`\n\nLine endings will be converted to `\\r\\n`.",
      "markdownDescription": "This option is deprecated. Use `imports_granularity = \"Crate\"` instead.\n\n- **Default value**: `false`\n- **Possible values**: `true`, `false`\n\n#### `false` (default):\n\n```rust\nuse foo::{a, c, d};\nuse foo::{b, g};\nuse foo::{e, f};\n```\n\n#### `true`:\n\n```rust\nuse foo::{a, b, c, d, e, f, g};\n```\n\n\n## `newline_style`\n\nUnix or Windows line endings\n\nStable: Yes\n\n\n#### `Auto` (default):\n\nThe newline style is detected automatically on a per-file basis. Files\nwith mixed line endings will be converted to the first detected line\nending style.\n\n#### `Native`\n\nLine endings will be converted to `\\r\\n` on Windows and `\\n` on all\nother platforms.\n\n#### `Unix`\n\nLine endings will be converted to `\\n`.\n\n#### `Windows`\n\nLine endings will be converted to `\\r\\n`.",
      "x-intellij-html-description": "<p>This option is deprecated. Use <code>imports_granularity = &quot;Crate&quot;</code> instead.</p>\n<ul>\n<li><strong>Default value</strong>: <code>false</code></li>\n<li><strong>Possible values</strong>: <code>true</code>, <code>false</code></li>\n</ul>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">use foo::{a, c, d};\nuse foo::{b, g};\nuse foo::{e, f};\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">use foo::{a, b, c, d, e, f, g};\n</code></pre>\n<h2><code>newline_style</code></h2>\n<p>Unix or Windows line endings</p>\n<p>Stable: Yes</p>\n<h4><code>Auto</code> (default):</h4>\n<p>The newline style is detected automatically on a per-file basis. Files\nwith mixed line endings will be converted to the first detected line\nending style.</p>\n<h4><code>Native</code></h4>\n<p>Line endings will be converted to <code>\\r\\n</code> on Windows and <code>\\n</code> on all\nother platforms.</p>\n<h4><code>Unix</code></h4>\n<p>Line endings will be converted to <code>\\n</code>.</p>\n<h4><code>Windows</code></h4>\n<p>Line endings will be converted to <code>\\r\\n</code>.</p>\n",
      "default": "Auto",
      "enum": ["Auto", "Native", "Unix", "Windows"]
    },
    "normalize_comments": {
      "type": "boolean",
      "description": "Convert /* */ comments to // comments where possible\n\nStable: No (tracking issue: [#3350](https://github.com/rust-lang/rustfmt/issues/3350))\n\n\n#### `false` (default):\n\n```rust\n// Lorem ipsum:\nfn dolor() -> usize {}\n\n/* sit amet: */\nfn adipiscing() -> usize {}\n```\n\n#### `true`:\n\n```rust\n// Lorem ipsum:\nfn dolor() -> usize {}\n\n// sit amet:\nfn adipiscing() -> usize {}\n```",
      "markdownDescription": "Convert /* */ comments to // comments where possible\n\nStable: No (tracking issue: [#3350](https://github.com/rust-lang/rustfmt/issues/3350))\n\n\n#### `false` (default):\n\n```rust\n// Lorem ipsum:\nfn dolor() -> usize {}\n\n/* sit amet: */\nfn adipiscing() -> usize {}\n```\n\n#### `true`:\n\n```rust\n// Lorem ipsum:\nfn dolor() -> usize {}\n\n// sit amet:\nfn adipiscing() -> usize {}\n```",
      "x-intellij-html-description": "<p>Convert /* */ comments to // comments where possible</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3350\">#3350</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">// Lorem ipsum:\nfn dolor() -&gt; usize {}\n\n/* sit amet: */\nfn adipiscing() -&gt; usize {}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">// Lorem ipsum:\nfn dolor() -&gt; usize {}\n\n// sit amet:\nfn adipiscing() -&gt; usize {}\n</code></pre>\n",
      "default": false
    },
    "normalize_doc_attributes": {
      "type": "boolean",
      "description": "Convert `#![doc]` and `#[doc]` attributes to `//!` and `///` doc comments.\n\nStable: No (tracking issue: [#3351](https://github.com/rust-lang/rustfmt/issues/3351))\n\n\n#### `false` (default):\n\n```rust\n#![doc = \"Example documentation\"]\n\n#[doc = \"Example item documentation\"]\npub enum Bar {}\n\n/// Example item documentation\npub enum Foo {}\n```\n\n#### `true`:\n\n```rust\n//! Example documentation\n\n/// Example item documentation\npub enum Foo {}\n```",
      "markdownDescription": "Convert `#![doc]` and `#[doc]` attributes to `//!` and `///` doc comments.\n\nStable: No (tracking issue: [#3351](https://github.com/rust-lang/rustfmt/issues/3351))\n\n\n#### `false` (default):\n\n```rust\n#![doc = \"Example documentation\"]\n\n#[doc = \"Example item documentation\"]\npub enum Bar {}\n\n/// Example item documentation\npub enum Foo {}\n```\n\n#### `true`:\n\n```rust\n//! Example documentation\n\n/// Example item documentation\npub enum Foo {}\n```",
      "x-intellij-html-description": "<p>Convert <code>#![doc]</code> and <code>#[doc]</code> attributes to <code>//!</code> and <code>///</code> doc comments.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3351\">#3351</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">#![doc = &quot;Example documentation&quot;]\n\n#[doc = &quot;Example item documentation&quot;]\npub enum Bar {}\n\n/// Example item documentation\npub enum Foo {}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">//! Example documentation\n\n/// Example item documentation\npub enum Foo {}\n</code></pre>\n",
      "default": false
    },
    "overflow_delimited_expr": {
      "type": "boolean",
      "description": "When structs, slices, arrays, and block/array-like macros are used as the last\nargument in an expression list, allow them to overflow (like blocks/closures)\ninstead of being indented on a new line.\n\nStable: No (tracking issue: [#3370](https://github.com/rust-lang/rustfmt/issues/3370))\n\n\n#### `false` (default):\n\n```rust\nfn example() {\n    foo(ctx, |param| {\n        action();\n        foo(param)\n    });\n\n    foo(\n        ctx,\n        Bar {\n            x: value,\n            y: value2,\n        },\n    );\n\n    foo(\n        ctx,\n        &[\n            MAROON_TOMATOES,\n            PURPLE_POTATOES,\n            ORGANE_ORANGES,\n            GREEN_PEARS,\n            RED_APPLES,\n        ],\n    );\n\n    foo(\n        ctx,\n        vec![\n            MAROON_TOMATOES,\n            PURPLE_POTATOES,\n            ORGANE_ORANGES,\n            GREEN_PEARS,\n            RED_APPLES,\n        ],\n    );\n}\n```\n\n#### `true`:\n\n```rust\nfn example() {\n    foo(ctx, |param| {\n        action();\n        foo(param)\n    });\n\n    foo(ctx, Bar {\n        x: value,\n        y: value2,\n    });\n\n    foo(ctx, &[\n        MAROON_TOMATOES,\n        PURPLE_POTATOES,\n        ORGANE_ORANGES,\n        GREEN_PEARS,\n        RED_APPLES,\n    ]);\n\n    foo(ctx, vec![\n        MAROON_TOMATOES,\n        PURPLE_POTATOES,\n        ORGANE_ORANGES,\n        GREEN_PEARS,\n        RED_APPLES,\n    ]);\n}\n```",
      "markdownDescription": "When structs, slices, arrays, and block/array-like macros are used as the last\nargument in an expression list, allow them to overflow (like blocks/closures)\ninstead of being indented on a new line.\n\nStable: No (tracking issue: [#3370](https://github.com/rust-lang/rustfmt/issues/3370))\n\n\n#### `false` (default):\n\n```rust\nfn example() {\n    foo(ctx, |param| {\n        action();\n        foo(param)\n    });\n\n    foo(\n        ctx,\n        Bar {\n            x: value,\n            y: value2,\n        },\n    );\n\n    foo(\n        ctx,\n        &[\n            MAROON_TOMATOES,\n            PURPLE_POTATOES,\n            ORGANE_ORANGES,\n            GREEN_PEARS,\n            RED_APPLES,\n        ],\n    );\n\n    foo(\n        ctx,\n        vec![\n            MAROON_TOMATOES,\n            PURPLE_POTATOES,\n            ORGANE_ORANGES,\n            GREEN_PEARS,\n            RED_APPLES,\n        ],\n    );\n}\n```\n\n#### `true`:\n\n```rust\nfn example() {\n    foo(ctx, |param| {\n        action();\n        foo(param)\n    });\n\n    foo(ctx, Bar {\n        x: value,\n        y: value2,\n    });\n\n    foo(ctx, &[\n        MAROON_TOMATOES,\n        PURPLE_POTATOES,\n        ORGANE_ORANGES,\n        GREEN_PEARS,\n        RED_APPLES,\n    ]);\n\n    foo(ctx, vec![\n        MAROON_TOMATOES,\n        PURPLE_POTATOES,\n        ORGANE_ORANGES,\n        GREEN_PEARS,\n        RED_APPLES,\n    ]);\n}\n```",
      "x-intellij-html-description": "<p>When structs, slices, arrays, and block/array-like macros are used as the last\nargument in an expression list, allow them to overflow (like blocks/closures)\ninstead of being indented on a new line.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3370\">#3370</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">fn example() {\n    foo(ctx, |param| {\n        action();\n        foo(param)\n    });\n\n    foo(\n        ctx,\n        Bar {\n            x: value,\n            y: value2,\n        },\n    );\n\n    foo(\n        ctx,\n        &amp;[\n            MAROON_TOMATOES,\n            PURPLE_POTATOES,\n            ORGANE_ORANGES,\n            GREEN_PEARS,\n            RED_APPLES,\n        ],\n    );\n\n    foo(\n        ctx,\n        vec![\n            MAROON_TOMATOES,\n            PURPLE_POTATOES,\n            ORGANE_ORANGES,\n            GREEN_PEARS,\n            RED_APPLES,\n        ],\n    );\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">fn example() {\n    foo(ctx, |param| {\n        action();\n        foo(param)\n    });\n\n    foo(ctx, Bar {\n        x: value,\n        y: value2,\n    });\n\n    foo(ctx, &amp;[\n        MAROON_TOMATOES,\n        PURPLE_POTATOES,\n        ORGANE_ORANGES,\n        GREEN_PEARS,\n        RED_APPLES,\n    ]);\n\n    foo(ctx, vec![\n        MAROON_TOMATOES,\n        PURPLE_POTATOES,\n        ORGANE_ORANGES,\n        GREEN_PEARS,\n        RED_APPLES,\n    ]);\n}\n</code></pre>\n",
      "default": false
    },
    "remove_nested_parens": {
      "type": "boolean",
      "description": "Remove nested parens.\n\nDefault value: `true`,\n\nStable: Yes\n\n\n#### `true` (default):\n```rust\nfn main() {\n    (foo());\n}\n```\n\n#### `false`:\n```rust\nfn main() {\n    (foo());\n\n    ((((foo()))));\n}\n```",
      "markdownDescription": "Remove nested parens.\n\nDefault value: `true`,\n\nStable: Yes\n\n\n#### `true` (default):\n```rust\nfn main() {\n    (foo());\n}\n```\n\n#### `false`:\n```rust\nfn main() {\n    (foo());\n\n    ((((foo()))));\n}\n```",
      "x-intellij-html-description": "<p>Remove nested parens.</p>\n<p>Default value: <code>true</code>,</p>\n<p>Stable: Yes</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    (foo());\n}\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    (foo());\n\n    ((((foo()))));\n}\n</code></pre>\n"
    },
    "reorder_impl_items": {
      "type": "boolean",
      "description": "Reorder impl items. `type` and `const` are put first, then macros and methods.\n\nStable: No (tracking issue: [#3363](https://github.com/rust-lang/rustfmt/issues/3363))\n\n\n#### `false` (default)\n\n```rust\nstruct Dummy;\n\nimpl Iterator for Dummy {\n    fn next(&mut self) -> Option<Self::Item> {\n        None\n    }\n\n    type Item = i32;\n}\n\nimpl Iterator for Dummy {\n    type Item = i32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        None\n    }\n}\n```\n\n#### `true`\n\n```rust\nstruct Dummy;\n\nimpl Iterator for Dummy {\n    type Item = i32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        None\n    }\n}\n```",
      "markdownDescription": "Reorder impl items. `type` and `const` are put first, then macros and methods.\n\nStable: No (tracking issue: [#3363](https://github.com/rust-lang/rustfmt/issues/3363))\n\n\n#### `false` (default)\n\n```rust\nstruct Dummy;\n\nimpl Iterator for Dummy {\n    fn next(&mut self) -> Option<Self::Item> {\n        None\n    }\n\n    type Item = i32;\n}\n\nimpl Iterator for Dummy {\n    type Item = i32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        None\n    }\n}\n```\n\n#### `true`\n\n```rust\nstruct Dummy;\n\nimpl Iterator for Dummy {\n    type Item = i32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        None\n    }\n}\n```",
      "x-intellij-html-description": "<p>Reorder impl items. <code>type</code> and <code>const</code> are put first, then macros and methods.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3363\">#3363</a>)</p>\n<h4><code>false</code> (default)</h4>\n<pre><code class=\"language-rust\">struct Dummy;\n\nimpl Iterator for Dummy {\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        None\n    }\n\n    type Item = i32;\n}\n\nimpl Iterator for Dummy {\n    type Item = i32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        None\n    }\n}\n</code></pre>\n<h4><code>true</code></h4>\n<pre><code class=\"language-rust\">struct Dummy;\n\nimpl Iterator for Dummy {\n    type Item = i32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        None\n    }\n}\n</code></pre>\n",
      "default": false
    },
    "reorder_imports": {
      "type": "boolean",
      "description": "Reorder import and extern crate statements alphabetically in groups (a group is\nseparated by a newline).\n\nStable: Yes\n\n\n#### `true` (default):\n\n```rust\nuse dolor;\nuse ipsum;\nuse lorem;\nuse sit;\n```\n\n#### `false`:\n\n```rust\nuse lorem;\nuse ipsum;\nuse dolor;\nuse sit;\n```",
      "markdownDescription": "Reorder import and extern crate statements alphabetically in groups (a group is\nseparated by a newline).\n\nStable: Yes\n\n\n#### `true` (default):\n\n```rust\nuse dolor;\nuse ipsum;\nuse lorem;\nuse sit;\n```\n\n#### `false`:\n\n```rust\nuse lorem;\nuse ipsum;\nuse dolor;\nuse sit;\n```",
      "x-intellij-html-description": "<p>Reorder import and extern crate statements alphabetically in groups (a group is\nseparated by a newline).</p>\n<p>Stable: Yes</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">use dolor;\nuse ipsum;\nuse lorem;\nuse sit;\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">use lorem;\nuse ipsum;\nuse dolor;\nuse sit;\n</code></pre>\n",
      "default": true
    },
    "group_imports": {
      "type": "string",
      "description": "Controls the strategy for how consecutive imports are grouped together.\n\nControls the strategy for grouping sets of consecutive imports. Imports may contain newlines between imports and still be grouped together as a single set, but other statements between imports will result in different grouping sets.\n\nStable: No (tracking issue: [#5083](https://github.com/rust-lang/rustfmt/issues/5083))\n\nEach set of imports (one or more `use` statements, optionally separated by newlines) will be formatted independently. Other statements such as `mod ...` or `extern crate ...` will cause imports to not be grouped together.\n\n#### `Preserve` (default):\n\nPreserve the source file's import groups.\n\n```rust\nuse super::update::convert_publish_payload;\nuse chrono::Utc;\n\nuse alloc::alloc::Layout;\nuse juniper::{FieldError, FieldResult};\nuse uuid::Uuid;\n\nuse std::sync::Arc;\n\nuse broker::database::PooledConnection;\n\nuse super::schema::{Context, Payload};\nuse crate::models::Event;\nuse core::f32;\n```\n\n#### `StdExternalCrate`:\n\nDiscard existing import groups, and create three groups for:\n1. `std`, `core` and `alloc`,\n2. external crates,\n3. `self`, `super` and `crate` imports.\n\n```rust\nuse alloc::alloc::Layout;\nuse core::f32;\nuse std::sync::Arc;\n\nuse broker::database::PooledConnection;\nuse chrono::Utc;\nuse juniper::{FieldError, FieldResult};\nuse uuid::Uuid;\n\nuse super::schema::{Context, Payload};\nuse super::update::convert_publish_payload;\nuse crate::models::Event;\n```\n\n#### `One`:\n\nDiscard existing import groups, and create a single group for everything\n\n```rust\nuse super::schema::{Context, Payload};\nuse super::update::convert_publish_payload;\nuse crate::models::Event;\nuse alloc::alloc::Layout;\nuse broker::database::PooledConnection;\nuse chrono::Utc;\nuse core::f32;\nuse juniper::{FieldError, FieldResult};\nuse std::sync::Arc;\nuse uuid::Uuid;\n```",
      "markdownDescription": "Controls the strategy for how consecutive imports are grouped together.\n\nControls the strategy for grouping sets of consecutive imports. Imports may contain newlines between imports and still be grouped together as a single set, but other statements between imports will result in different grouping sets.\n\nStable: No (tracking issue: [#5083](https://github.com/rust-lang/rustfmt/issues/5083))\n\nEach set of imports (one or more `use` statements, optionally separated by newlines) will be formatted independently. Other statements such as `mod ...` or `extern crate ...` will cause imports to not be grouped together.\n\n#### `Preserve` (default):\n\nPreserve the source file's import groups.\n\n```rust\nuse super::update::convert_publish_payload;\nuse chrono::Utc;\n\nuse alloc::alloc::Layout;\nuse juniper::{FieldError, FieldResult};\nuse uuid::Uuid;\n\nuse std::sync::Arc;\n\nuse broker::database::PooledConnection;\n\nuse super::schema::{Context, Payload};\nuse crate::models::Event;\nuse core::f32;\n```\n\n#### `StdExternalCrate`:\n\nDiscard existing import groups, and create three groups for:\n1. `std`, `core` and `alloc`,\n2. external crates,\n3. `self`, `super` and `crate` imports.\n\n```rust\nuse alloc::alloc::Layout;\nuse core::f32;\nuse std::sync::Arc;\n\nuse broker::database::PooledConnection;\nuse chrono::Utc;\nuse juniper::{FieldError, FieldResult};\nuse uuid::Uuid;\n\nuse super::schema::{Context, Payload};\nuse super::update::convert_publish_payload;\nuse crate::models::Event;\n```\n\n#### `One`:\n\nDiscard existing import groups, and create a single group for everything\n\n```rust\nuse super::schema::{Context, Payload};\nuse super::update::convert_publish_payload;\nuse crate::models::Event;\nuse alloc::alloc::Layout;\nuse broker::database::PooledConnection;\nuse chrono::Utc;\nuse core::f32;\nuse juniper::{FieldError, FieldResult};\nuse std::sync::Arc;\nuse uuid::Uuid;\n```",
      "x-intellij-html-description": "<p>Controls the strategy for how consecutive imports are grouped together.</p>\n<p>Controls the strategy for grouping sets of consecutive imports. Imports may contain newlines between imports and still be grouped together as a single set, but other statements between imports will result in different grouping sets.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/5083\">#5083</a>)</p>\n<p>Each set of imports (one or more <code>use</code> statements, optionally separated by newlines) will be formatted independently. Other statements such as <code>mod ...</code> or <code>extern crate ...</code> will cause imports to not be grouped together.</p>\n<h4><code>Preserve</code> (default):</h4>\n<p>Preserve the source file&#39;s import groups.</p>\n<pre><code class=\"language-rust\">use super::update::convert_publish_payload;\nuse chrono::Utc;\n\nuse alloc::alloc::Layout;\nuse juniper::{FieldError, FieldResult};\nuse uuid::Uuid;\n\nuse std::sync::Arc;\n\nuse broker::database::PooledConnection;\n\nuse super::schema::{Context, Payload};\nuse crate::models::Event;\nuse core::f32;\n</code></pre>\n<h4><code>StdExternalCrate</code>:</h4>\n<p>Discard existing import groups, and create three groups for:</p>\n<ol>\n<li><code>std</code>, <code>core</code> and <code>alloc</code>,</li>\n<li>external crates,</li>\n<li><code>self</code>, <code>super</code> and <code>crate</code> imports.</li>\n</ol>\n<pre><code class=\"language-rust\">use alloc::alloc::Layout;\nuse core::f32;\nuse std::sync::Arc;\n\nuse broker::database::PooledConnection;\nuse chrono::Utc;\nuse juniper::{FieldError, FieldResult};\nuse uuid::Uuid;\n\nuse super::schema::{Context, Payload};\nuse super::update::convert_publish_payload;\nuse crate::models::Event;\n</code></pre>\n<h4><code>One</code>:</h4>\n<p>Discard existing import groups, and create a single group for everything</p>\n<pre><code class=\"language-rust\">use super::schema::{Context, Payload};\nuse super::update::convert_publish_payload;\nuse crate::models::Event;\nuse alloc::alloc::Layout;\nuse broker::database::PooledConnection;\nuse chrono::Utc;\nuse core::f32;\nuse juniper::{FieldError, FieldResult};\nuse std::sync::Arc;\nuse uuid::Uuid;\n</code></pre>\n",
      "default": "Preserve",
      "enum": ["Preserve", "StdExternalCrate", "One"]
    },
    "reorder_modules": {
      "type": "boolean",
      "description": "Reorder `mod` declarations alphabetically in group.\n\nStable: Yes\n\n\n#### `true` (default)\n\n```rust\nmod a;\nmod b;\n\nmod dolor;\nmod ipsum;\nmod lorem;\nmod sit;\n```\n\n#### `false`\n\n```rust\nmod b;\nmod a;\n\nmod lorem;\nmod ipsum;\nmod dolor;\nmod sit;\n```\n\n**Note** `mod` with `#[macro_export]` will not be reordered since that could change the semantics\nof the original source code.",
      "markdownDescription": "Reorder `mod` declarations alphabetically in group.\n\nStable: Yes\n\n\n#### `true` (default)\n\n```rust\nmod a;\nmod b;\n\nmod dolor;\nmod ipsum;\nmod lorem;\nmod sit;\n```\n\n#### `false`\n\n```rust\nmod b;\nmod a;\n\nmod lorem;\nmod ipsum;\nmod dolor;\nmod sit;\n```\n\n**Note** `mod` with `#[macro_export]` will not be reordered since that could change the semantics\nof the original source code.",
      "x-intellij-html-description": "<p>Reorder <code>mod</code> declarations alphabetically in group.</p>\n<p>Stable: Yes</p>\n<h4><code>true</code> (default)</h4>\n<pre><code class=\"language-rust\">mod a;\nmod b;\n\nmod dolor;\nmod ipsum;\nmod lorem;\nmod sit;\n</code></pre>\n<h4><code>false</code></h4>\n<pre><code class=\"language-rust\">mod b;\nmod a;\n\nmod lorem;\nmod ipsum;\nmod dolor;\nmod sit;\n</code></pre>\n<p><strong>Note</strong> <code>mod</code> with <code>#[macro_export]</code> will not be reordered since that could change the semantics\nof the original source code.</p>\n",
      "default": true
    },
    "required_version": {
      "description": "Require a specific version of rustfmt. If you want to make sure that the\nspecific version of rustfmt is used in your CI, use this option.\n\nPossible values: any published version (e.g. `\"0.3.8\"`)\n\nStable: No (tracking issue: [#3386](https://github.com/rust-lang/rustfmt/issues/3386))",
      "markdownDescription": "Require a specific version of rustfmt. If you want to make sure that the\nspecific version of rustfmt is used in your CI, use this option.\n\nPossible values: any published version (e.g. `\"0.3.8\"`)\n\nStable: No (tracking issue: [#3386](https://github.com/rust-lang/rustfmt/issues/3386))",
      "x-intellij-html-description": "<p>Require a specific version of rustfmt. If you want to make sure that the\nspecific version of rustfmt is used in your CI, use this option.</p>\n<p>Possible values: any published version (e.g. <code>&quot;0.3.8&quot;</code>)</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3386\">#3386</a>)</p>\n",
      "default": "CARGO_PKG_VERSION"
    },
    "short_array_element_width_threshold": {
      "type": "integer",
      "description": "The width threshold for an array element to be considered \"short\".\n\nThe layout of an array is dependent on the length of each of its elements. \nIf the length of every element in an array is below this threshold (all elements are \"short\") then the array can be formatted in the mixed/compressed style, but if any one element has a length that exceeds this threshold then the array elements will have to be formatted vertically.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\n\n#### `10` (default):\n```rust\nfn main() {\n    pub const FORMAT_TEST: [u64; 5] = [\n        0x0000000000000000,\n        0xaaaaaaaaaaaaaaaa,\n        0xbbbbbbbbbbbbbbbb,\n        0xcccccccccccccccc,\n        0xdddddddddddddddd,\n    ];\n}\n```\n#### `20`:\n```rust\nfn main() {\n    pub const FORMAT_TEST: [u64; 5] = [\n        0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xbbbbbbbbbbbbbbbb, 0xcccccccccccccccc,\n        0xdddddddddddddddd,\n    ];\n}\n```\nSee also `max_width`.",
      "markdownDescription": "The width threshold for an array element to be considered \"short\".\n\nThe layout of an array is dependent on the length of each of its elements. \nIf the length of every element in an array is below this threshold (all elements are \"short\") then the array can be formatted in the mixed/compressed style, but if any one element has a length that exceeds this threshold then the array elements will have to be formatted vertically.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\n\n#### `10` (default):\n```rust\nfn main() {\n    pub const FORMAT_TEST: [u64; 5] = [\n        0x0000000000000000,\n        0xaaaaaaaaaaaaaaaa,\n        0xbbbbbbbbbbbbbbbb,\n        0xcccccccccccccccc,\n        0xdddddddddddddddd,\n    ];\n}\n```\n#### `20`:\n```rust\nfn main() {\n    pub const FORMAT_TEST: [u64; 5] = [\n        0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xbbbbbbbbbbbbbbbb, 0xcccccccccccccccc,\n        0xdddddddddddddddd,\n    ];\n}\n```\nSee also `max_width`.",
      "x-intellij-html-description": "<p>The width threshold for an array element to be considered &quot;short&quot;.</p>\n<p>The layout of an array is dependent on the length of each of its elements. \nIf the length of every element in an array is below this threshold (all elements are &quot;short&quot;) then the array can be formatted in the mixed/compressed style, but if any one element has a length that exceeds this threshold then the array elements will have to be formatted vertically.</p>\n<p>Possible values: any positive integer that is less than or equal to the value specified for <code>max_width</code></p>\n<p>Stable: Yes</p>\n<h4><code>10</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    pub const FORMAT_TEST: [u64; 5] = [\n        0x0000000000000000,\n        0xaaaaaaaaaaaaaaaa,\n        0xbbbbbbbbbbbbbbbb,\n        0xcccccccccccccccc,\n        0xdddddddddddddddd,\n    ];\n}\n</code></pre>\n<h4><code>20</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    pub const FORMAT_TEST: [u64; 5] = [\n        0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xbbbbbbbbbbbbbbbb, 0xcccccccccccccccc,\n        0xdddddddddddddddd,\n    ];\n}\n</code></pre>\n<p>See also <code>max_width</code>.</p>\n",
      "default": 10
    },
    "skip_children": {
      "type": "boolean",
      "description": "Don't reformat out of line modules\n\nStable: No (tracking issue: [#3389](https://github.com/rust-lang/rustfmt/issues/3389))",
      "markdownDescription": "Don't reformat out of line modules\n\nStable: No (tracking issue: [#3389](https://github.com/rust-lang/rustfmt/issues/3389))",
      "x-intellij-html-description": "<p>Don&#39;t reformat out of line modules</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3389\">#3389</a>)</p>\n",
      "default": false
    },
    "single_line_if_else_max_width": {
      "type": "integer",
      "description": "Maximum line length for single line if-else expressions. A value of `0` (zero) results in if-else expressions always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `single_line_if_else_max_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "markdownDescription": "Maximum line length for single line if-else expressions. A value of `0` (zero) results in if-else expressions always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `single_line_if_else_max_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "x-intellij-html-description": "<p>Maximum line length for single line if-else expressions. A value of <code>0</code> (zero) results in if-else expressions always being broken into multiple lines. Note this occurs when <code>use_small_heuristics</code> is set to <code>Off</code>.</p>\n<p>Possible values: any positive integer that is less than or equal to the value specified for <code>max_width</code></p>\n<p>Stable: Yes</p>\n<p>By default this option is set as a percentage of <code>max_width</code> provided by <code>use_small_heuristics</code>, but a value set directly for <code>single_line_if_else_max_width</code> will take precedence.</p>\n<p>See also <code>max_width</code> and <code>use_small_heuristics</code></p>\n",
      "default": 50
    },
    "single_line_let_else_max_width": {
      "type": "integer",
      "description": "Maximum line length for single line let-else statements.\nSee the [let-else statement section of the Rust Style Guide](https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#else-blocks-let-else-statements) for more details on when a let-else statement may be written on a single line.\nA value of `0` (zero) means the divergent `else` block will always be formatted over multiple lines.\nNote this occurs when `use_small_heuristics` is set to `Off`.\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `single_line_let_else_max_width` will take precedence.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\n\n#### `50` (default):\n\n```rust\nfn main() {\n    let Some(w) = opt else { return Ok(()) };\n\n    let Some(x) = opt else { return };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else {\n        return;\n    };\n}\n```\n\n#### `0`:\n\n```rust\nfn main() {\n    let Some(w) = opt else {\n        return Ok(());\n    };\n\n    let Some(x) = opt else {\n        return;\n    };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else {\n        return;\n    };\n}\n```\n\n#### `100`:\n\n```rust\nfn main() {\n    let Some(w) = opt else { return Ok(()) };\n\n    let Some(x) = opt else { return };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else { return };\n}\n```\n\nSee also `max_width` and `use_small_heuristics`",
      "markdownDescription": "Maximum line length for single line let-else statements.\nSee the [let-else statement section of the Rust Style Guide](https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#else-blocks-let-else-statements) for more details on when a let-else statement may be written on a single line.\nA value of `0` (zero) means the divergent `else` block will always be formatted over multiple lines.\nNote this occurs when `use_small_heuristics` is set to `Off`.\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `single_line_let_else_max_width` will take precedence.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\n\n#### `50` (default):\n\n```rust\nfn main() {\n    let Some(w) = opt else { return Ok(()) };\n\n    let Some(x) = opt else { return };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else {\n        return;\n    };\n}\n```\n\n#### `0`:\n\n```rust\nfn main() {\n    let Some(w) = opt else {\n        return Ok(());\n    };\n\n    let Some(x) = opt else {\n        return;\n    };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else {\n        return;\n    };\n}\n```\n\n#### `100`:\n\n```rust\nfn main() {\n    let Some(w) = opt else { return Ok(()) };\n\n    let Some(x) = opt else { return };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else { return };\n}\n```\n\nSee also `max_width` and `use_small_heuristics`",
      "x-intellij-html-description": "<p>Maximum line length for single line let-else statements.\nSee the <a href=\"https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#else-blocks-let-else-statements\">let-else statement section of the Rust Style Guide</a> for more details on when a let-else statement may be written on a single line.\nA value of <code>0</code> (zero) means the divergent <code>else</code> block will always be formatted over multiple lines.\nNote this occurs when <code>use_small_heuristics</code> is set to <code>Off</code>.</p>\n<p>By default this option is set as a percentage of <code>max_width</code> provided by <code>use_small_heuristics</code>, but a value set directly for <code>single_line_let_else_max_width</code> will take precedence.</p>\n<p>Possible values: any positive integer that is less than or equal to the value specified for <code>max_width</code></p>\n<p>Stable: Yes</p>\n<h4><code>50</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let Some(w) = opt else { return Ok(()) };\n\n    let Some(x) = opt else { return };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else {\n        return;\n    };\n}\n</code></pre>\n<h4><code>0</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let Some(w) = opt else {\n        return Ok(());\n    };\n\n    let Some(x) = opt else {\n        return;\n    };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else {\n        return;\n    };\n}\n</code></pre>\n<h4><code>100</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let Some(w) = opt else { return Ok(()) };\n\n    let Some(x) = opt else { return };\n\n    let Some(y) = opt else {\n        return;\n    };\n\n    let Some(z) = some_very_very_very_very_long_name else { return };\n}\n</code></pre>\n<p>See also <code>max_width</code> and <code>use_small_heuristics</code></p>\n",
      "default": 50
    },
    "space_after_colon": {
      "type": "boolean",
      "description": "Leave a space after the colon.\n\nStable: No (tracking issue: [#3366](https://github.com/rust-lang/rustfmt/issues/3366))\n\n\n#### `true` (default):\n\n```rust\nfn lorem<T: Eq>(t: T) {\n    let lorem: Dolor = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n```\n\n#### `false`:\n\n```rust\nfn lorem<T:Eq>(t:T) {\n    let lorem:Dolor = Lorem {\n        ipsum:dolor,\n        sit:amet,\n    };\n}\n```\n\nSee also: `space_before_colon`.",
      "markdownDescription": "Leave a space after the colon.\n\nStable: No (tracking issue: [#3366](https://github.com/rust-lang/rustfmt/issues/3366))\n\n\n#### `true` (default):\n\n```rust\nfn lorem<T: Eq>(t: T) {\n    let lorem: Dolor = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n```\n\n#### `false`:\n\n```rust\nfn lorem<T:Eq>(t:T) {\n    let lorem:Dolor = Lorem {\n        ipsum:dolor,\n        sit:amet,\n    };\n}\n```\n\nSee also: `space_before_colon`.",
      "x-intellij-html-description": "<p>Leave a space after the colon.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3366\">#3366</a>)</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem&lt;T: Eq&gt;(t: T) {\n    let lorem: Dolor = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem&lt;T:Eq&gt;(t:T) {\n    let lorem:Dolor = Lorem {\n        ipsum:dolor,\n        sit:amet,\n    };\n}\n</code></pre>\n<p>See also: <code>space_before_colon</code>.</p>\n",
      "default": true
    },
    "space_before_colon": {
      "type": "boolean",
      "description": "Leave a space before the colon.\n\nStable: No (tracking issue: [#3365](https://github.com/rust-lang/rustfmt/issues/3365))\n\n\n#### `false` (default):\n\n```rust\nfn lorem<T: Eq>(t: T) {\n    let lorem: Dolor = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n```\n\n#### `true`:\n\n```rust\nfn lorem<T : Eq>(t : T) {\n    let lorem : Dolor = Lorem {\n        ipsum : dolor,\n        sit : amet,\n    };\n}\n```\n\nSee also: `space_after_colon`.",
      "markdownDescription": "Leave a space before the colon.\n\nStable: No (tracking issue: [#3365](https://github.com/rust-lang/rustfmt/issues/3365))\n\n\n#### `false` (default):\n\n```rust\nfn lorem<T: Eq>(t: T) {\n    let lorem: Dolor = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n```\n\n#### `true`:\n\n```rust\nfn lorem<T : Eq>(t : T) {\n    let lorem : Dolor = Lorem {\n        ipsum : dolor,\n        sit : amet,\n    };\n}\n```\n\nSee also: `space_after_colon`.",
      "x-intellij-html-description": "<p>Leave a space before the colon.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3365\">#3365</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem&lt;T: Eq&gt;(t: T) {\n    let lorem: Dolor = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem&lt;T : Eq&gt;(t : T) {\n    let lorem : Dolor = Lorem {\n        ipsum : dolor,\n        sit : amet,\n    };\n}\n</code></pre>\n<p>See also: <code>space_after_colon</code>.</p>\n",
      "default": false
    },
    "spaces_around_ranges": {
      "type": "boolean",
      "description": "Put spaces around the .., ..=, and ... range operators\n\nStable: No (tracking issue: [#3367](https://github.com/rust-lang/rustfmt/issues/3367))\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let lorem = 0..10;\n    let ipsum = 0..=10;\n\n    match lorem {\n        1..5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1..=5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1...5 => foo(),\n        _ => bar,\n    }\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let lorem = 0 .. 10;\n    let ipsum = 0 ..= 10;\n\n    match lorem {\n        1 .. 5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1 ..= 5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1 ... 5 => foo(),\n        _ => bar,\n    }\n}\n```",
      "markdownDescription": "Put spaces around the .., ..=, and ... range operators\n\nStable: No (tracking issue: [#3367](https://github.com/rust-lang/rustfmt/issues/3367))\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let lorem = 0..10;\n    let ipsum = 0..=10;\n\n    match lorem {\n        1..5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1..=5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1...5 => foo(),\n        _ => bar,\n    }\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let lorem = 0 .. 10;\n    let ipsum = 0 ..= 10;\n\n    match lorem {\n        1 .. 5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1 ..= 5 => foo(),\n        _ => bar,\n    }\n\n    match lorem {\n        1 ... 5 => foo(),\n        _ => bar,\n    }\n}\n```",
      "x-intellij-html-description": "<p>Put spaces around the .., ..=, and ... range operators</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3367\">#3367</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = 0..10;\n    let ipsum = 0..=10;\n\n    match lorem {\n        1..5 =&gt; foo(),\n        _ =&gt; bar,\n    }\n\n    match lorem {\n        1..=5 =&gt; foo(),\n        _ =&gt; bar,\n    }\n\n    match lorem {\n        1...5 =&gt; foo(),\n        _ =&gt; bar,\n    }\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = 0 .. 10;\n    let ipsum = 0 ..= 10;\n\n    match lorem {\n        1 .. 5 =&gt; foo(),\n        _ =&gt; bar,\n    }\n\n    match lorem {\n        1 ..= 5 =&gt; foo(),\n        _ =&gt; bar,\n    }\n\n    match lorem {\n        1 ... 5 =&gt; foo(),\n        _ =&gt; bar,\n    }\n}\n</code></pre>\n",
      "default": false
    },
    "struct_field_align_threshold": {
      "type": "integer",
      "description": "The maximum diff of width between struct fields to be aligned with each other.\n\nPossible values: any non-negative integer\n\nStable: No (tracking issue: [#3371](https://github.com/rust-lang/rustfmt/issues/3371))\n\n\n#### `0` (default):\n\n```rust\nstruct Foo {\n    x: u32,\n    yy: u32,\n    zzz: u32,\n}\n```\n\n#### `20`:\n\n```rust\nstruct Foo {\n    x:   u32,\n    yy:  u32,\n    zzz: u32,\n}\n```",
      "markdownDescription": "The maximum diff of width between struct fields to be aligned with each other.\n\nPossible values: any non-negative integer\n\nStable: No (tracking issue: [#3371](https://github.com/rust-lang/rustfmt/issues/3371))\n\n\n#### `0` (default):\n\n```rust\nstruct Foo {\n    x: u32,\n    yy: u32,\n    zzz: u32,\n}\n```\n\n#### `20`:\n\n```rust\nstruct Foo {\n    x:   u32,\n    yy:  u32,\n    zzz: u32,\n}\n```",
      "x-intellij-html-description": "<p>The maximum diff of width between struct fields to be aligned with each other.</p>\n<p>Possible values: any non-negative integer</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3371\">#3371</a>)</p>\n<h4><code>0</code> (default):</h4>\n<pre><code class=\"language-rust\">struct Foo {\n    x: u32,\n    yy: u32,\n    zzz: u32,\n}\n</code></pre>\n<h4><code>20</code>:</h4>\n<pre><code class=\"language-rust\">struct Foo {\n    x:   u32,\n    yy:  u32,\n    zzz: u32,\n}\n</code></pre>\n",
      "default": 0
    },
    "struct_lit_single_line": {
      "type": "boolean",
      "description": "Put small struct literals on a single line\n\nStable: No (tracking issue: [#3357](https://github.com/rust-lang/rustfmt/issues/3357))\n\n\n#### `true` (default):\n\n```rust\nfn main() {\n    let lorem = Lorem { foo: bar, baz: ofo };\n}\n```\n\n#### `false`:\n\n```rust\nfn main() {\n    let lorem = Lorem {\n        foo: bar,\n        baz: ofo,\n    };\n}\n```\n\nSee also: `indent_style`.",
      "markdownDescription": "Put small struct literals on a single line\n\nStable: No (tracking issue: [#3357](https://github.com/rust-lang/rustfmt/issues/3357))\n\n\n#### `true` (default):\n\n```rust\nfn main() {\n    let lorem = Lorem { foo: bar, baz: ofo };\n}\n```\n\n#### `false`:\n\n```rust\nfn main() {\n    let lorem = Lorem {\n        foo: bar,\n        baz: ofo,\n    };\n}\n```\n\nSee also: `indent_style`.",
      "x-intellij-html-description": "<p>Put small struct literals on a single line</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3357\">#3357</a>)</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = Lorem { foo: bar, baz: ofo };\n}\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = Lorem {\n        foo: bar,\n        baz: ofo,\n    };\n}\n</code></pre>\n<p>See also: <code>indent_style</code>.</p>\n",
      "default": true
    },
    "struct_lit_width": {
      "type": "integer",
      "description": "Maximum width in the body of a struct literal before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `struct_lit_width` will take precedence.\n\nSee also `max_width`, `use_small_heuristics`, and `struct_lit_single_line`",
      "markdownDescription": "Maximum width in the body of a struct literal before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `struct_lit_width` will take precedence.\n\nSee also `max_width`, `use_small_heuristics`, and `struct_lit_single_line`",
      "x-intellij-html-description": "<p>Maximum width in the body of a struct literal before falling back to vertical formatting. A value of <code>0</code> (zero) results in struct literals always being broken into multiple lines. Note this occurs when <code>use_small_heuristics</code> is set to <code>Off</code>.</p>\n<p>Possible values: any positive integer that is less than or equal to the value specified for <code>max_width</code></p>\n<p>Stable: Yes</p>\n<p>By default this option is set as a percentage of <code>max_width</code> provided by <code>use_small_heuristics</code>, but a value set directly for <code>struct_lit_width</code> will take precedence.</p>\n<p>See also <code>max_width</code>, <code>use_small_heuristics</code>, and <code>struct_lit_single_line</code></p>\n",
      "default": 18
    },
    "struct_variant_width": {
      "type": "integer",
      "description": "Maximum width in the body of a struct variant before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `struct_variant_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "markdownDescription": "Maximum width in the body of a struct variant before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n\nPossible values: any positive integer that is less than or equal to the value specified for `max_width`\n\nStable: Yes\n\nBy default this option is set as a percentage of `max_width` provided by `use_small_heuristics`, but a value set directly for `struct_variant_width` will take precedence.\n\nSee also `max_width` and `use_small_heuristics`",
      "x-intellij-html-description": "<p>Maximum width in the body of a struct variant before falling back to vertical formatting. A value of <code>0</code> (zero) results in struct literals always being broken into multiple lines. Note this occurs when <code>use_small_heuristics</code> is set to <code>Off</code>.</p>\n<p>Possible values: any positive integer that is less than or equal to the value specified for <code>max_width</code></p>\n<p>Stable: Yes</p>\n<p>By default this option is set as a percentage of <code>max_width</code> provided by <code>use_small_heuristics</code>, but a value set directly for <code>struct_variant_width</code> will take precedence.</p>\n<p>See also <code>max_width</code> and <code>use_small_heuristics</code></p>\n",
      "default": 35
    },
    "style_edition": {
      "description": "Controls the edition of the [Rust Style Guide] to use for formatting ([RFC 3338])\n\nPossible values: `\"2015\"`, `\"2018\"`, `\"2021\"`, `\"2024\"` (unstable variant)\n\nStable: No\n\n[Rust Style Guide]: https://doc.rust-lang.org/nightly/style-guide/\n[RFC 3338]: https://rust-lang.github.io/rfcs/3338-style-evolution.html",
      "markdownDescription": "Controls the edition of the [Rust Style Guide] to use for formatting ([RFC 3338])\n\nPossible values: `\"2015\"`, `\"2018\"`, `\"2021\"`, `\"2024\"` (unstable variant)\n\nStable: No\n\n[Rust Style Guide]: https://doc.rust-lang.org/nightly/style-guide/\n[RFC 3338]: https://rust-lang.github.io/rfcs/3338-style-evolution.html",
      "x-intellij-html-description": "<p>Controls the edition of the <a href=\"https://doc.rust-lang.org/nightly/style-guide/\">Rust Style Guide</a> to use for formatting (<a href=\"https://rust-lang.github.io/rfcs/3338-style-evolution.html\">RFC 3338</a>)</p>\n<p>Possible values: <code>&quot;2015&quot;</code>, <code>&quot;2018&quot;</code>, <code>&quot;2021&quot;</code>, <code>&quot;2024&quot;</code> (unstable variant)</p>\n<p>Stable: No</p>\n",
      "default": "2015"
    },
    "tab_spaces": {
      "type": "integer",
      "description": "Number of spaces per tab\n\nPossible values: any positive integer\n\nStable: Yes\n\n\n#### `4` (default):\n\n```rust\nfn lorem() {\n    let ipsum = dolor();\n    let sit = vec![\n        \"amet consectetur adipiscing elit amet\",\n        \"consectetur adipiscing elit amet consectetur.\",\n    ];\n}\n```\n\n#### `2`:\n\n```rust\nfn lorem() {\n  let ipsum = dolor();\n  let sit = vec![\n    \"amet consectetur adipiscing elit amet\",\n    \"consectetur adipiscing elit amet consectetur.\",\n  ];\n}\n```\n\nSee also: `hard_tabs`.",
      "markdownDescription": "Number of spaces per tab\n\nPossible values: any positive integer\n\nStable: Yes\n\n\n#### `4` (default):\n\n```rust\nfn lorem() {\n    let ipsum = dolor();\n    let sit = vec![\n        \"amet consectetur adipiscing elit amet\",\n        \"consectetur adipiscing elit amet consectetur.\",\n    ];\n}\n```\n\n#### `2`:\n\n```rust\nfn lorem() {\n  let ipsum = dolor();\n  let sit = vec![\n    \"amet consectetur adipiscing elit amet\",\n    \"consectetur adipiscing elit amet consectetur.\",\n  ];\n}\n```\n\nSee also: `hard_tabs`.",
      "x-intellij-html-description": "<p>Number of spaces per tab</p>\n<p>Possible values: any positive integer</p>\n<p>Stable: Yes</p>\n<h4><code>4</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem() {\n    let ipsum = dolor();\n    let sit = vec![\n        &quot;amet consectetur adipiscing elit amet&quot;,\n        &quot;consectetur adipiscing elit amet consectetur.&quot;,\n    ];\n}\n</code></pre>\n<h4><code>2</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem() {\n  let ipsum = dolor();\n  let sit = vec![\n    &quot;amet consectetur adipiscing elit amet&quot;,\n    &quot;consectetur adipiscing elit amet consectetur.&quot;,\n  ];\n}\n</code></pre>\n<p>See also: <code>hard_tabs</code>.</p>\n",
      "default": 4
    },
    "trailing_comma": {
      "type": "string",
      "description": "How to handle trailing commas for lists\n\nStable: No (tracking issue: [#3379](https://github.com/rust-lang/rustfmt/issues/3379))\n\n\n#### `\"Vertical\"` (default):\n\n```rust\nfn main() {\n    let Lorem { ipsum, dolor, sit } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing,\n    } = elit;\n}\n```\n\n#### `\"Always\"`:\n\n```rust\nfn main() {\n    let Lorem { ipsum, dolor, sit, } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing,\n    } = elit;\n}\n```\n\n#### `\"Never\"`:\n\n```rust\nfn main() {\n    let Lorem { ipsum, dolor, sit } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing\n    } = elit;\n}\n```\n\nSee also: `match_block_trailing_comma`.",
      "markdownDescription": "How to handle trailing commas for lists\n\nStable: No (tracking issue: [#3379](https://github.com/rust-lang/rustfmt/issues/3379))\n\n\n#### `\"Vertical\"` (default):\n\n```rust\nfn main() {\n    let Lorem { ipsum, dolor, sit } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing,\n    } = elit;\n}\n```\n\n#### `\"Always\"`:\n\n```rust\nfn main() {\n    let Lorem { ipsum, dolor, sit, } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing,\n    } = elit;\n}\n```\n\n#### `\"Never\"`:\n\n```rust\nfn main() {\n    let Lorem { ipsum, dolor, sit } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing\n    } = elit;\n}\n```\n\nSee also: `match_block_trailing_comma`.",
      "x-intellij-html-description": "<p>How to handle trailing commas for lists</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3379\">#3379</a>)</p>\n<h4><code>&quot;Vertical&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let Lorem { ipsum, dolor, sit } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing,\n    } = elit;\n}\n</code></pre>\n<h4><code>&quot;Always&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let Lorem { ipsum, dolor, sit, } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing,\n    } = elit;\n}\n</code></pre>\n<h4><code>&quot;Never&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let Lorem { ipsum, dolor, sit } = amet;\n    let Lorem {\n        ipsum,\n        dolor,\n        sit,\n        amet,\n        consectetur,\n        adipiscing\n    } = elit;\n}\n</code></pre>\n<p>See also: <code>match_block_trailing_comma</code>.</p>\n",
      "default": "Vertical",
      "enum": ["Always", "Never", "Vertical"]
    },
    "trailing_semicolon": {
      "type": "boolean",
      "description": "Add trailing semicolon after break, continue and return\n\nStable: No (tracking issue: [#3378](https://github.com/rust-lang/rustfmt/issues/3378))\n\n\n#### `true` (default):\n```rust\nfn foo() -> usize {\n    return 0;\n}\n```\n\n#### `false`:\n```rust\nfn foo() -> usize {\n    return 0\n}\n```",
      "markdownDescription": "Add trailing semicolon after break, continue and return\n\nStable: No (tracking issue: [#3378](https://github.com/rust-lang/rustfmt/issues/3378))\n\n\n#### `true` (default):\n```rust\nfn foo() -> usize {\n    return 0;\n}\n```\n\n#### `false`:\n```rust\nfn foo() -> usize {\n    return 0\n}\n```",
      "x-intellij-html-description": "<p>Add trailing semicolon after break, continue and return</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3378\">#3378</a>)</p>\n<h4><code>true</code> (default):</h4>\n<pre><code class=\"language-rust\">fn foo() -&gt; usize {\n    return 0;\n}\n</code></pre>\n<h4><code>false</code>:</h4>\n<pre><code class=\"language-rust\">fn foo() -&gt; usize {\n    return 0\n}\n</code></pre>\n",
      "default": true
    },
    "type_punctuation_density": {
      "type": "string",
      "description": "Determines if `+` or `=` are wrapped in spaces in the punctuation of types\n\nStable: No (tracking issue: [#3364](https://github.com/rust-lang/rustfmt/issues/3364))\n\n\n#### `\"Wide\"` (default):\n\n```rust\nfn lorem<Ipsum: Dolor + Sit = Amet>() {\n    // body\n}\n```\n\n#### `\"Compressed\"`:\n\n```rust\nfn lorem<Ipsum: Dolor+Sit=Amet>() {\n    // body\n}\n```",
      "markdownDescription": "Determines if `+` or `=` are wrapped in spaces in the punctuation of types\n\nStable: No (tracking issue: [#3364](https://github.com/rust-lang/rustfmt/issues/3364))\n\n\n#### `\"Wide\"` (default):\n\n```rust\nfn lorem<Ipsum: Dolor + Sit = Amet>() {\n    // body\n}\n```\n\n#### `\"Compressed\"`:\n\n```rust\nfn lorem<Ipsum: Dolor+Sit=Amet>() {\n    // body\n}\n```",
      "x-intellij-html-description": "<p>Determines if <code>+</code> or <code>=</code> are wrapped in spaces in the punctuation of types</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3364\">#3364</a>)</p>\n<h4><code>&quot;Wide&quot;</code> (default):</h4>\n<pre><code class=\"language-rust\">fn lorem&lt;Ipsum: Dolor + Sit = Amet&gt;() {\n    // body\n}\n</code></pre>\n<h4><code>&quot;Compressed&quot;</code>:</h4>\n<pre><code class=\"language-rust\">fn lorem&lt;Ipsum: Dolor+Sit=Amet&gt;() {\n    // body\n}\n</code></pre>\n",
      "default": "Wide",
      "enum": ["Compressed", "Wide"]
    },
    "unstable_features": {
      "type": "boolean",
      "description": "Enable unstable features on the unstable channel.\n\nStable: No (tracking issue: [#3387](https://github.com/rust-lang/rustfmt/issues/3387))",
      "markdownDescription": "Enable unstable features on the unstable channel.\n\nStable: No (tracking issue: [#3387](https://github.com/rust-lang/rustfmt/issues/3387))",
      "x-intellij-html-description": "<p>Enable unstable features on the unstable channel.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3387\">#3387</a>)</p>\n",
      "default": false
    },
    "use_field_init_shorthand": {
      "type": "boolean",
      "description": "Use field initialize shorthand if possible.\n\nStable: Yes\n\n\n#### `false` (default):\n\n```rust\nstruct Foo {\n    x: u32,\n    y: u32,\n    z: u32,\n}\n\nfn main() {\n    let x = 1;\n    let y = 2;\n    let z = 3;\n    let a = Foo { x, y, z };\n    let b = Foo { x: x, y: y, z: z };\n}\n```\n\n#### `true`:\n\n```rust\nstruct Foo {\n    x: u32,\n    y: u32,\n    z: u32,\n}\n\nfn main() {\n    let x = 1;\n    let y = 2;\n    let z = 3;\n    let a = Foo { x, y, z };\n}\n```",
      "markdownDescription": "Use field initialize shorthand if possible.\n\nStable: Yes\n\n\n#### `false` (default):\n\n```rust\nstruct Foo {\n    x: u32,\n    y: u32,\n    z: u32,\n}\n\nfn main() {\n    let x = 1;\n    let y = 2;\n    let z = 3;\n    let a = Foo { x, y, z };\n    let b = Foo { x: x, y: y, z: z };\n}\n```\n\n#### `true`:\n\n```rust\nstruct Foo {\n    x: u32,\n    y: u32,\n    z: u32,\n}\n\nfn main() {\n    let x = 1;\n    let y = 2;\n    let z = 3;\n    let a = Foo { x, y, z };\n}\n```",
      "x-intellij-html-description": "<p>Use field initialize shorthand if possible.</p>\n<p>Stable: Yes</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">struct Foo {\n    x: u32,\n    y: u32,\n    z: u32,\n}\n\nfn main() {\n    let x = 1;\n    let y = 2;\n    let z = 3;\n    let a = Foo { x, y, z };\n    let b = Foo { x: x, y: y, z: z };\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">struct Foo {\n    x: u32,\n    y: u32,\n    z: u32,\n}\n\nfn main() {\n    let x = 1;\n    let y = 2;\n    let z = 3;\n    let a = Foo { x, y, z };\n}\n</code></pre>\n",
      "default": false
    },
    "use_small_heuristics": {
      "type": "string",
      "description": "This option can be used to simplify the management and bulk updates of the granular width configuration settings (`fn_call_width`, `attr_fn_like_width`, `struct_lit_width`, `struct_variant_width`, `array_width`, `chain_width`, `single_line_if_else_max_width`), that respectively control when formatted constructs are multi-lined/vertical based on width.\n\nNote that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by `use_small_heuristics`.\n\nStable: Yes\n\n\n#### `Default` (default):\nWhen `use_small_heuristics` is set to `Default`, the values for the granular width settings are calculated as a ratio of the value for `max_width`.\n\nThe ratios are:\n* `fn_call_width` - `60%`\n* `attr_fn_like_width` - `70%`\n* `struct_lit_width` - `18%`\n* `struct_variant_width` - `35%`\n* `array_width` - `60%`\n* `chain_width` - `60%`\n* `single_line_if_else_max_width` - `50%`\n* `single_line_let_else_max_width` - `50%`\n\nFor example when `max_width` is set to `100`, the width settings are:\n* `fn_call_width=60`\n* `attr_fn_like_width=70`\n* `struct_lit_width=18`\n* `struct_variant_width=35`\n* `array_width=60`\n* `chain_width=60`\n* `single_line_if_else_max_width=50`\n* `single_line_let_else_max_width=50`\n\nand when `max_width` is set to `200`:\n* `fn_call_width=120`\n* `attr_fn_like_width=140`\n* `struct_lit_width=36`\n* `struct_variant_width=70`\n* `array_width=120`\n* `chain_width=120`\n* `single_line_if_else_max_width=100`\n* `single_line_let_else_max_width=100`\n\n```rust\nenum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit { amet: Consectetur, adipiscing: Elit },\n}\n\nfn main() {\n    lorem(\n        \"lorem\",\n        \"ipsum\",\n        \"dolor\",\n        \"sit\",\n        \"amet\",\n        \"consectetur\",\n        \"adipiscing\",\n    );\n\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n    let lorem = Lorem { ipsum: dolor };\n\n    let lorem = if ipsum { dolor } else { sit };\n}\n```\n\n#### `Off`:\nWhen `use_small_heuristics` is set to `Off`, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics.\n\n```rust\nenum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit {\n        amet: Consectetur,\n        adipiscing: Elit,\n    },\n}\n\nfn main() {\n    lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\");\n\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n\n    let lorem = if ipsum {\n        dolor\n    } else {\n        sit\n    };\n}\n```\n\n#### `Max`:\nWhen `use_small_heuristics` is set to `Max`, then each granular width setting is set to the same value as `max_width`.\n\nSo if `max_width` is set to `200`, then all the width settings are also set to `200`.\n* `fn_call_width=200`\n* `attr_fn_like_width=200`\n* `struct_lit_width=200`\n* `struct_variant_width=200`\n* `array_width=200`\n* `chain_width=200`\n* `single_line_if_else_max_width=200`\n* `single_line_let_else_max_width=200`\n\n```rust\nenum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit { amet: Consectetur, adipiscing: Elit },\n}\n\nfn main() {\n    lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\");\n\n    let lorem = Lorem { ipsum: dolor, sit: amet };\n\n    let lorem = if ipsum { dolor } else { sit };\n}\n```\n\n\nSee also:\n* `max_width`\n* `fn_call_width`\n* `attr_fn_like_width`\n* `struct_lit_width`\n* `struct_variant_width`\n* `array_width`\n* `chain_width`\n* `single_line_if_else_max_width`\n* `single_line_let_else_max_width`",
      "markdownDescription": "This option can be used to simplify the management and bulk updates of the granular width configuration settings (`fn_call_width`, `attr_fn_like_width`, `struct_lit_width`, `struct_variant_width`, `array_width`, `chain_width`, `single_line_if_else_max_width`), that respectively control when formatted constructs are multi-lined/vertical based on width.\n\nNote that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by `use_small_heuristics`.\n\nStable: Yes\n\n\n#### `Default` (default):\nWhen `use_small_heuristics` is set to `Default`, the values for the granular width settings are calculated as a ratio of the value for `max_width`.\n\nThe ratios are:\n* `fn_call_width` - `60%`\n* `attr_fn_like_width` - `70%`\n* `struct_lit_width` - `18%`\n* `struct_variant_width` - `35%`\n* `array_width` - `60%`\n* `chain_width` - `60%`\n* `single_line_if_else_max_width` - `50%`\n* `single_line_let_else_max_width` - `50%`\n\nFor example when `max_width` is set to `100`, the width settings are:\n* `fn_call_width=60`\n* `attr_fn_like_width=70`\n* `struct_lit_width=18`\n* `struct_variant_width=35`\n* `array_width=60`\n* `chain_width=60`\n* `single_line_if_else_max_width=50`\n* `single_line_let_else_max_width=50`\n\nand when `max_width` is set to `200`:\n* `fn_call_width=120`\n* `attr_fn_like_width=140`\n* `struct_lit_width=36`\n* `struct_variant_width=70`\n* `array_width=120`\n* `chain_width=120`\n* `single_line_if_else_max_width=100`\n* `single_line_let_else_max_width=100`\n\n```rust\nenum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit { amet: Consectetur, adipiscing: Elit },\n}\n\nfn main() {\n    lorem(\n        \"lorem\",\n        \"ipsum\",\n        \"dolor\",\n        \"sit\",\n        \"amet\",\n        \"consectetur\",\n        \"adipiscing\",\n    );\n\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n    let lorem = Lorem { ipsum: dolor };\n\n    let lorem = if ipsum { dolor } else { sit };\n}\n```\n\n#### `Off`:\nWhen `use_small_heuristics` is set to `Off`, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics.\n\n```rust\nenum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit {\n        amet: Consectetur,\n        adipiscing: Elit,\n    },\n}\n\nfn main() {\n    lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\");\n\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n\n    let lorem = if ipsum {\n        dolor\n    } else {\n        sit\n    };\n}\n```\n\n#### `Max`:\nWhen `use_small_heuristics` is set to `Max`, then each granular width setting is set to the same value as `max_width`.\n\nSo if `max_width` is set to `200`, then all the width settings are also set to `200`.\n* `fn_call_width=200`\n* `attr_fn_like_width=200`\n* `struct_lit_width=200`\n* `struct_variant_width=200`\n* `array_width=200`\n* `chain_width=200`\n* `single_line_if_else_max_width=200`\n* `single_line_let_else_max_width=200`\n\n```rust\nenum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit { amet: Consectetur, adipiscing: Elit },\n}\n\nfn main() {\n    lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\");\n\n    let lorem = Lorem { ipsum: dolor, sit: amet };\n\n    let lorem = if ipsum { dolor } else { sit };\n}\n```\n\n\nSee also:\n* `max_width`\n* `fn_call_width`\n* `attr_fn_like_width`\n* `struct_lit_width`\n* `struct_variant_width`\n* `array_width`\n* `chain_width`\n* `single_line_if_else_max_width`\n* `single_line_let_else_max_width`",
      "x-intellij-html-description": "<p>This option can be used to simplify the management and bulk updates of the granular width configuration settings (<code>fn_call_width</code>, <code>attr_fn_like_width</code>, <code>struct_lit_width</code>, <code>struct_variant_width</code>, <code>array_width</code>, <code>chain_width</code>, <code>single_line_if_else_max_width</code>), that respectively control when formatted constructs are multi-lined/vertical based on width.</p>\n<p>Note that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by <code>use_small_heuristics</code>.</p>\n<p>Stable: Yes</p>\n<h4><code>Default</code> (default):</h4>\n<p>When <code>use_small_heuristics</code> is set to <code>Default</code>, the values for the granular width settings are calculated as a ratio of the value for <code>max_width</code>.</p>\n<p>The ratios are:</p>\n<ul>\n<li><code>fn_call_width</code> - <code>60%</code></li>\n<li><code>attr_fn_like_width</code> - <code>70%</code></li>\n<li><code>struct_lit_width</code> - <code>18%</code></li>\n<li><code>struct_variant_width</code> - <code>35%</code></li>\n<li><code>array_width</code> - <code>60%</code></li>\n<li><code>chain_width</code> - <code>60%</code></li>\n<li><code>single_line_if_else_max_width</code> - <code>50%</code></li>\n<li><code>single_line_let_else_max_width</code> - <code>50%</code></li>\n</ul>\n<p>For example when <code>max_width</code> is set to <code>100</code>, the width settings are:</p>\n<ul>\n<li><code>fn_call_width=60</code></li>\n<li><code>attr_fn_like_width=70</code></li>\n<li><code>struct_lit_width=18</code></li>\n<li><code>struct_variant_width=35</code></li>\n<li><code>array_width=60</code></li>\n<li><code>chain_width=60</code></li>\n<li><code>single_line_if_else_max_width=50</code></li>\n<li><code>single_line_let_else_max_width=50</code></li>\n</ul>\n<p>and when <code>max_width</code> is set to <code>200</code>:</p>\n<ul>\n<li><code>fn_call_width=120</code></li>\n<li><code>attr_fn_like_width=140</code></li>\n<li><code>struct_lit_width=36</code></li>\n<li><code>struct_variant_width=70</code></li>\n<li><code>array_width=120</code></li>\n<li><code>chain_width=120</code></li>\n<li><code>single_line_if_else_max_width=100</code></li>\n<li><code>single_line_let_else_max_width=100</code></li>\n</ul>\n<pre><code class=\"language-rust\">enum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit { amet: Consectetur, adipiscing: Elit },\n}\n\nfn main() {\n    lorem(\n        &quot;lorem&quot;,\n        &quot;ipsum&quot;,\n        &quot;dolor&quot;,\n        &quot;sit&quot;,\n        &quot;amet&quot;,\n        &quot;consectetur&quot;,\n        &quot;adipiscing&quot;,\n    );\n\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n    let lorem = Lorem { ipsum: dolor };\n\n    let lorem = if ipsum { dolor } else { sit };\n}\n</code></pre>\n<h4><code>Off</code>:</h4>\n<p>When <code>use_small_heuristics</code> is set to <code>Off</code>, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics.</p>\n<pre><code class=\"language-rust\">enum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit {\n        amet: Consectetur,\n        adipiscing: Elit,\n    },\n}\n\nfn main() {\n    lorem(&quot;lorem&quot;, &quot;ipsum&quot;, &quot;dolor&quot;, &quot;sit&quot;, &quot;amet&quot;, &quot;consectetur&quot;, &quot;adipiscing&quot;);\n\n    let lorem = Lorem {\n        ipsum: dolor,\n        sit: amet,\n    };\n\n    let lorem = if ipsum {\n        dolor\n    } else {\n        sit\n    };\n}\n</code></pre>\n<h4><code>Max</code>:</h4>\n<p>When <code>use_small_heuristics</code> is set to <code>Max</code>, then each granular width setting is set to the same value as <code>max_width</code>.</p>\n<p>So if <code>max_width</code> is set to <code>200</code>, then all the width settings are also set to <code>200</code>.</p>\n<ul>\n<li><code>fn_call_width=200</code></li>\n<li><code>attr_fn_like_width=200</code></li>\n<li><code>struct_lit_width=200</code></li>\n<li><code>struct_variant_width=200</code></li>\n<li><code>array_width=200</code></li>\n<li><code>chain_width=200</code></li>\n<li><code>single_line_if_else_max_width=200</code></li>\n<li><code>single_line_let_else_max_width=200</code></li>\n</ul>\n<pre><code class=\"language-rust\">enum Lorem {\n    Ipsum,\n    Dolor(bool),\n    Sit { amet: Consectetur, adipiscing: Elit },\n}\n\nfn main() {\n    lorem(&quot;lorem&quot;, &quot;ipsum&quot;, &quot;dolor&quot;, &quot;sit&quot;, &quot;amet&quot;, &quot;consectetur&quot;, &quot;adipiscing&quot;);\n\n    let lorem = Lorem { ipsum: dolor, sit: amet };\n\n    let lorem = if ipsum { dolor } else { sit };\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><code>max_width</code></li>\n<li><code>fn_call_width</code></li>\n<li><code>attr_fn_like_width</code></li>\n<li><code>struct_lit_width</code></li>\n<li><code>struct_variant_width</code></li>\n<li><code>array_width</code></li>\n<li><code>chain_width</code></li>\n<li><code>single_line_if_else_max_width</code></li>\n<li><code>single_line_let_else_max_width</code></li>\n</ul>\n",
      "default": "Default",
      "enum": ["Default", "Off", "Max"]
    },
    "use_try_shorthand": {
      "type": "boolean",
      "description": "Replace uses of the try! macro by the ? shorthand\n\nStable: Yes\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let lorem = ipsum.map(|dolor| dolor.sit())?;\n\n    let lorem = try!(ipsum.map(|dolor| dolor.sit()));\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let lorem = ipsum.map(|dolor| dolor.sit())?;\n}\n```",
      "markdownDescription": "Replace uses of the try! macro by the ? shorthand\n\nStable: Yes\n\n\n#### `false` (default):\n\n```rust\nfn main() {\n    let lorem = ipsum.map(|dolor| dolor.sit())?;\n\n    let lorem = try!(ipsum.map(|dolor| dolor.sit()));\n}\n```\n\n#### `true`:\n\n```rust\nfn main() {\n    let lorem = ipsum.map(|dolor| dolor.sit())?;\n}\n```",
      "x-intellij-html-description": "<p>Replace uses of the try! macro by the ? shorthand</p>\n<p>Stable: Yes</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = ipsum.map(|dolor| dolor.sit())?;\n\n    let lorem = try!(ipsum.map(|dolor| dolor.sit()));\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">fn main() {\n    let lorem = ipsum.map(|dolor| dolor.sit())?;\n}\n</code></pre>\n",
      "default": false
    },
    "version": {
      "type": "string",
      "description": "This option is deprecated and has been replaced by `style_edition`.\n`version = \"One\"` is equivalent to `style_edition = \"(2015|2018|2021)\"` and\n`version = \"Two\"` is equivalent to `style_edition = \"2024\"`\n\nStable: No (tracking issue: [#3383](https://github.com/rust-lang/rustfmt/issues/3383))\n\n\n### Example\n\n```toml\nversion = \"Two\"\n```",
      "markdownDescription": "This option is deprecated and has been replaced by `style_edition`.\n`version = \"One\"` is equivalent to `style_edition = \"(2015|2018|2021)\"` and\n`version = \"Two\"` is equivalent to `style_edition = \"2024\"`\n\nStable: No (tracking issue: [#3383](https://github.com/rust-lang/rustfmt/issues/3383))\n\n\n### Example\n\n```toml\nversion = \"Two\"\n```",
      "x-intellij-html-description": "<p>This option is deprecated and has been replaced by <code>style_edition</code>.\n<code>version = &quot;One&quot;</code> is equivalent to <code>style_edition = &quot;(2015|2018|2021)&quot;</code> and\n<code>version = &quot;Two&quot;</code> is equivalent to <code>style_edition = &quot;2024&quot;</code></p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3383\">#3383</a>)</p>\n<h3>Example</h3>\n<pre><code class=\"language-toml\">version = &quot;Two&quot;\n</code></pre>\n",
      "default": "One",
      "enum": ["One", "Two"]
    },
    "where_single_line": {
      "type": "boolean",
      "description": "Forces the `where` clause to be laid out on a single line.\n\nStable: No (tracking issue: [#3359](https://github.com/rust-lang/rustfmt/issues/3359))\n\n\n#### `false` (default):\n\n```rust\nimpl<T> Lorem for T\nwhere\n    Option<T>: Ipsum,\n{\n    // body\n}\n```\n\n#### `true`:\n\n```rust\nimpl<T> Lorem for T\nwhere Option<T>: Ipsum\n{\n    // body\n}\n```\n\nSee also `brace_style`, `control_brace_style`.",
      "markdownDescription": "Forces the `where` clause to be laid out on a single line.\n\nStable: No (tracking issue: [#3359](https://github.com/rust-lang/rustfmt/issues/3359))\n\n\n#### `false` (default):\n\n```rust\nimpl<T> Lorem for T\nwhere\n    Option<T>: Ipsum,\n{\n    // body\n}\n```\n\n#### `true`:\n\n```rust\nimpl<T> Lorem for T\nwhere Option<T>: Ipsum\n{\n    // body\n}\n```\n\nSee also `brace_style`, `control_brace_style`.",
      "x-intellij-html-description": "<p>Forces the <code>where</code> clause to be laid out on a single line.</p>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3359\">#3359</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">impl&lt;T&gt; Lorem for T\nwhere\n    Option&lt;T&gt;: Ipsum,\n{\n    // body\n}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">impl&lt;T&gt; Lorem for T\nwhere Option&lt;T&gt;: Ipsum\n{\n    // body\n}\n</code></pre>\n<p>See also <code>brace_style</code>, <code>control_brace_style</code>.</p>\n",
      "default": false
    },
    "wrap_comments": {
      "type": "boolean",
      "description": "Break comments to fit on the line\n\nNote that no wrapping will happen if:\n1. The comment is the start of a markdown header doc comment\n2. An URL was found in the comment\n\nStable: No (tracking issue: [#3347](https://github.com/rust-lang/rustfmt/issues/3347))\n\n\n#### `false` (default):\n\n```rust\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n// Information on the lorem ipsum can be found at the following url: https://en.wikipedia.org/wiki/Lorem_ipsum. Its text is: lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n/// # This doc comment is a very long header (it starts with a '#'). Had it not been a header it would have been wrapped. But because it is a header, it will not be. That is because wrapping a markdown header breaks it.\nstruct Foo {}\n```\n\n#### `true`:\n\n```rust\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Information on the lorem ipsum can be found at the following url: https://en.wikipedia.org/wiki/Lorem_ipsum. Its text is: lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n/// # This doc comment is a very long header (it starts with a '#'). Had it not been a header it would have been wrapped. But because it is a header, it will not be. That is because wrapping a markdown header breaks it.\nstruct Foo {}\n```",
      "markdownDescription": "Break comments to fit on the line\n\nNote that no wrapping will happen if:\n1. The comment is the start of a markdown header doc comment\n2. An URL was found in the comment\n\nStable: No (tracking issue: [#3347](https://github.com/rust-lang/rustfmt/issues/3347))\n\n\n#### `false` (default):\n\n```rust\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n// Information on the lorem ipsum can be found at the following url: https://en.wikipedia.org/wiki/Lorem_ipsum. Its text is: lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n/// # This doc comment is a very long header (it starts with a '#'). Had it not been a header it would have been wrapped. But because it is a header, it will not be. That is because wrapping a markdown header breaks it.\nstruct Foo {}\n```\n\n#### `true`:\n\n```rust\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Information on the lorem ipsum can be found at the following url: https://en.wikipedia.org/wiki/Lorem_ipsum. Its text is: lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n/// # This doc comment is a very long header (it starts with a '#'). Had it not been a header it would have been wrapped. But because it is a header, it will not be. That is because wrapping a markdown header breaks it.\nstruct Foo {}\n```",
      "x-intellij-html-description": "<p>Break comments to fit on the line</p>\n<p>Note that no wrapping will happen if:</p>\n<ol>\n<li>The comment is the start of a markdown header doc comment</li>\n<li>An URL was found in the comment</li>\n</ol>\n<p>Stable: No (tracking issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3347\">#3347</a>)</p>\n<h4><code>false</code> (default):</h4>\n<pre><code class=\"language-rust\">// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n// Information on the lorem ipsum can be found at the following url: https://en.wikipedia.org/wiki/Lorem_ipsum. Its text is: lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n/// # This doc comment is a very long header (it starts with a &#39;#&#39;). Had it not been a header it would have been wrapped. But because it is a header, it will not be. That is because wrapping a markdown header breaks it.\nstruct Foo {}\n</code></pre>\n<h4><code>true</code>:</h4>\n<pre><code class=\"language-rust\">// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n// sed do eiusmod tempor incididunt ut labore et dolore\n// magna aliqua. Ut enim ad minim veniam, quis nostrud\n// exercitation ullamco laboris nisi ut aliquip ex ea\n// commodo consequat.\n\n// Information on the lorem ipsum can be found at the following url: https://en.wikipedia.org/wiki/Lorem_ipsum. Its text is: lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n/// # This doc comment is a very long header (it starts with a &#39;#&#39;). Had it not been a header it would have been wrapped. But because it is a header, it will not be. That is because wrapping a markdown header breaks it.\nstruct Foo {}\n</code></pre>\n",
      "default": false
    }
  }
}
