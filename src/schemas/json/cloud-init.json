{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "cloud-config-schema",
  "allOf": [
    {
      "id": "cc_bootcmd",
      "name": "Bootcmd",
      "title": "Run arbitrary commands early in the boot process",
      "description": "This module runs arbitrary commands very early in the boot process,\nonly slightly after a boothook would run. This is very similar to a\nboothook, but more user friendly. The environment variable\n``INSTANCE_ID`` will be set to the current instance id for all run\ncommands. Commands can be specified either as lists or strings. For\ninvocation details, see ``runcmd``.\n\n.. note::\n    bootcmd should only be used for things that could not be done later\n    in the boot process.\n\n.. note::\n\n  when writing files, do not use /tmp dir as it races with\n  systemd-tmpfiles-clean LP: #1707222. Use /run/somedir instead.\n",
      "distros": [
        "all"
      ],
      "examples": [
        "bootcmd:\n    - echo 192.168.1.130 us.archive.ubuntu.com > /etc/hosts\n    - [ cloud-init-per, once, mymkfs, mkfs, /dev/vdb ]\n"
      ],
      "frequency": "always",
      "type": "object",
      "properties": {
        "bootcmd": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "additionalItems": false,
          "additionalProperties": false,
          "minItems": 1,
          "required": []
        }
      }
    },
    {
      "id": "cc_apt_configure",
      "name": "Apt Configure",
      "title": "Configure apt for the user",
      "description": "This module handles both configuration of apt options and adding\nsource lists.  There are configuration options such as\n``apt_get_wrapper`` and ``apt_get_command`` that control how\ncloud-init invokes apt-get. These configuration options are\nhandled on a per-distro basis, so consult documentation for\ncloud-init's distro support for instructions on using\nthese config options.\n\n.. note::\n    To ensure that apt configuration is valid yaml, any strings\n    containing special characters, especially ``:`` should be quoted.\n\n.. note::\n    For more information about apt configuration, see the\n    ``Additional apt configuration`` example.",
      "distros": [
        "ubuntu",
        "debian"
      ],
      "examples": [
        "apt:\n  preserve_sources_list: false\n  disable_suites:\n    - $RELEASE-updates\n    - backports\n    - $RELEASE\n    - mysuite\n  primary:\n    - arches:\n        - amd64\n        - i386\n        - default\n      uri: 'http://us.archive.ubuntu.com/ubuntu'\n      search:\n        - 'http://cool.but-sometimes-unreachable.com/ubuntu'\n        - 'http://us.archive.ubuntu.com/ubuntu'\n      search_dns: <true/false>\n    - arches:\n        - s390x\n        - arm64\n      uri: 'http://archive-to-use-for-arm64.example.com/ubuntu'\n  security:\n    - arches:\n        - default\n      search_dns: true\n  sources_list: |\n      deb $MIRROR $RELEASE main restricted\n      deb-src $MIRROR $RELEASE main restricted\n      deb $PRIMARY $RELEASE universe restricted\n      deb $SECURITY $RELEASE-security multiverse\n  debconf_selections:\n      set1: the-package the-package/some-flag boolean true\n  conf: |\n      APT {\n          Get {\n              Assume-Yes 'true';\n              Fix-Broken 'true';\n          }\n      }\n  proxy: 'http://[[user][:pass]@]host[:port]/'\n  http_proxy: 'http://[[user][:pass]@]host[:port]/'\n  ftp_proxy: 'ftp://[[user][:pass]@]host[:port]/'\n  https_proxy: 'https://[[user][:pass]@]host[:port]/'\n  sources:\n      source1:\n          keyid: 'keyid'\n          keyserver: 'keyserverurl'\n          source: 'deb http://<url>/ xenial main'\n      source2:\n          source: 'ppa:<ppa-name>'\n      source3:\n          source: 'deb $MIRROR $RELEASE multiverse'\n          key: |\n              ------BEGIN PGP PUBLIC KEY BLOCK-------\n              <key data>\n              ------END PGP PUBLIC KEY BLOCK-------"
      ],
      "frequency": "once-per-instance",
      "type": "object",
      "properties": {
        "apt": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "preserve_sources_list": {
              "type": "boolean",
              "default": false,
              "description": "By default, cloud-init will generate a new sources\nlist in ``/etc/apt/sources.list.d`` based on any\nchanges specified in cloud config. To disable this\nbehavior and preserve the sources list from the\npristine image, set ``preserve_sources_list``\nto ``true``.\n\nThe ``preserve_sources_list`` option overrides\nall other config keys that would alter\n``sources.list`` or ``sources.list.d``,\n**except** for additional sources to be added\nto ``sources.list.d``."
            },
            "disable_suites": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "description": "Entries in the sources list can be disabled using\n``disable_suites``, which takes a list of suites\nto be disabled. If the string ``$RELEASE`` is\npresent in a suite in the ``disable_suites`` list,\nit will be replaced with the release name. If a\nsuite specified in ``disable_suites`` is not\npresent in ``sources.list`` it will be ignored.\nFor convenience, several aliases are provided for\n``disable_suites``:\n\n    - ``updates`` => ``$RELEASE-updates``\n    - ``backports`` => ``$RELEASE-backports``\n    - ``security`` => ``$RELEASE-security``\n    - ``proposed`` => ``$RELEASE-proposed``\n    - ``release`` => ``$RELEASE``.\n\nWhen a suite is disabled using ``disable_suites``,\nits entry in ``sources.list`` is not deleted; it\nis just commented out."
            },
            "primary": {
              "type": "array",
              "item": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "arches"
                ],
                "properties": {
                  "arches": {
                    "type": "array",
                    "item": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  "uri": {
                    "type": "string",
                    "format": "uri"
                  },
                  "search": {
                    "type": "array",
                    "item": {
                      "type": "string",
                      "format": "uri"
                    },
                    "minItems": 1
                  },
                  "search_dns": {
                    "type": "boolean"
                  },
                  "keyid": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyserver": {
                    "type": "string"
                  }
                }
              },
              "description": "The primary and security archive mirrors can\nbe specified using the ``primary`` and\n``security`` keys, respectively. Both the\n``primary`` and ``security`` keys take a list\nof configs, allowing mirrors to be specified\non a per-architecture basis. Each config is a\ndictionary which must have an entry for\n``arches``, specifying which architectures\nthat config entry is for. The keyword\n``default`` applies to any architecture not\nexplicitly listed. The mirror url can be specified\nwith the ``uri`` key, or a list of mirrors to\ncheck can be provided in order, with the first\nmirror that can be resolved being selected. This\nallows the same configuration to be used in\ndifferent environment, with different hosts used\nfor a local apt mirror. If no mirror is provided\nby ``uri`` or ``search``, ``search_dns`` may be\nused to search for dns names in the format\n``<distro>-mirror`` in each of the following:\n\n    - fqdn of this host per cloud metadata,\n    - localdomain,\n    - domains listed in ``/etc/resolv.conf``.\n\nIf there is a dns entry for ``<distro>-mirror``,\nthen it is assumed that there is a distro mirror\nat ``http://<distro>-mirror.<domain>/<distro>``.\nIf the ``primary`` key is defined, but not the\n``security`` key, then then configuration for\n``primary`` is also used for ``security``.\nIf ``search_dns`` is used for the ``security``\nkey, the search pattern will be\n``<distro>-security-mirror``.\n\nEach mirror may also specify a key to import via\nany of the following optional keys:\n\n    - ``keyid``: a key to import via shortid or                                   fingerprint.\n    - ``key``: a raw PGP key.\n    - ``keyserver``: alternate keyserver to pull                                     ``keyid`` key from.\n\nIf no mirrors are specified, or all lookups fail,\nthen default mirrors defined in the datasource\nare used. If none are present in the datasource\neither the following defaults are used:\n\n    - ``primary`` =>                             ``http://archive.ubuntu.com/ubuntu``.\n    - ``security`` =>                             ``http://security.ubuntu.com/ubuntu``\n"
            },
            "security": {
              "type": "array",
              "item": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "arches"
                ],
                "properties": {
                  "arches": {
                    "type": "array",
                    "item": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  "uri": {
                    "type": "string",
                    "format": "uri"
                  },
                  "search": {
                    "type": "array",
                    "item": {
                      "type": "string",
                      "format": "uri"
                    },
                    "minItems": 1
                  },
                  "search_dns": {
                    "type": "boolean"
                  },
                  "keyid": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyserver": {
                    "type": "string"
                  }
                }
              },
              "description": "Please refer to the primary config documentation"
            },
            "add_apt_repo_match": {
              "type": "string",
              "default": "^[\\w-]+:\\w",
              "description": "All source entries in ``apt-sources`` that match\nregex in ``add_apt_repo_match`` will be added to\nthe system using ``add-apt-repository``. If\n``add_apt_repo_match`` is not specified, it\ndefaults to ``^[\\w-]+:\\w``"
            },
            "debconf_selections": {
              "type": "object",
              "items": {
                "type": "string"
              },
              "description": "Debconf additional configurations can be specified as a\ndictionary under the ``debconf_selections`` config\nkey, with each key in the dict representing a\ndifferent set of configurations. The value of each key\nmust be a string containing all the debconf\nconfigurations that must be applied. We will bundle\nall of the values and pass them to\n``debconf-set-selections``. Therefore, each value line\nmust be a valid entry for ``debconf-set-selections``,\nmeaning that they must possess for distinct fields:\n\n``pkgname question type answer``\n\nWhere:\n\n    - ``pkgname`` is the name of the package.\n    - ``question`` the name of the questions.\n    - ``type`` is the type of question.\n    - ``answer`` is the value used to ansert the                             question.\n\nFor example:                         ``ippackage ippackage/ip string 127.0.01``\n"
            },
            "sources_list": {
              "type": "string",
              "description": "Specifies a custom template for rendering\n``sources.list`` . If no ``sources_list`` template\nis given, cloud-init will use sane default. Within\nthis template, the following strings will be\nreplaced with the appropriate values:\n\n     - ``$MIRROR``\n     - ``$RELEASE``\n     - ``$PRIMARY``\n     - ``$SECURITY``"
            },
            "conf": {
              "type": "string",
              "description": "Specify configuration for apt, such as proxy\nconfiguration. This configuration is specified as a\nstring. For multiline apt configuration, make sure\nto follow yaml syntax."
            },
            "https_proxy": {
              "type": "string",
              "description": "More convenient way to specify https apt proxy.\nhttps proxy url is specified in the format\n``https://[[user][:pass]@]host[:port]/``."
            },
            "http_proxy": {
              "type": "string",
              "description": "More convenient way to specify http apt proxy.\nhttp proxy url is specified in the format\n``http://[[user][:pass]@]host[:port]/``."
            },
            "proxy": {
              "type": "string",
              "description": "Alias for defining a http apt proxy."
            },
            "ftp_proxy": {
              "type": "string",
              "description": "More convenient way to specify ftp apt proxy.\nftp proxy url is specified in the format\n``ftp://[[user][:pass]@]host[:port]/``."
            },
            "sources": {
              "type": "object",
              "items": {
                "type": "string"
              },
              "description": "Source list entries can be specified as a\ndictionary under the ``sources`` config key, with\neach key in the dict representing a different source\nfile. The key of each source entry will be used\nas an id that can be referenced in other config\nentries, as well as the filename for the source's\nconfiguration under ``/etc/apt/sources.list.d``.\nIf the name does not end with ``.list``, it will\nbe appended. If there is no configuration for a\nkey in ``sources``, no file will be written, but\nthe key may still be referred to as an id in other\n``sources`` entries.\n\nEach entry under ``sources`` is a dictionary which\nmay contain any of the following optional keys:\n\n    - ``source``: a sources.list entry                                   (some variable replacements apply).\n    - ``keyid``: a key to import via shortid or                                   fingerprint.\n    - ``key``: a raw PGP key.\n    - ``keyserver``: alternate keyserver to pull                                     ``keyid`` key from.\n\nThe ``source`` key supports variable\nreplacements for the following strings:\n\n    - ``$MIRROR``\n    - ``$PRIMARY``\n    - ``$SECURITY``\n    - ``$RELEASE``"
            }
          }
        }
      }
    },
    {
      "id": "cc_apk_configure",
      "name": "APK Configure",
      "title": "Configure apk repositories file",
      "description": "This module handles configuration of the /etc/apk/repositories file.\n\n.. note::\n  To ensure that apk configuration is valid yaml, any strings\n  containing special characters, especially ``:`` should be quoted.\n",
      "distros": [
        "alpine"
      ],
      "examples": [
        "# Keep the existing /etc/apk/repositories file unaltered.\napk_repos:\n    preserve_repositories: true\n",
        "# Create repositories file for Alpine v3.12 main and community\n# using default mirror site.\napk_repos:\n    alpine_repo:\n        community_enabled: true\n        version: 'v3.12'\n",
        "# Create repositories file for Alpine Edge main, community, and\n# testing using a specified mirror site and also a local repo.\napk_repos:\n    alpine_repo:\n        base_url: 'https://some-alpine-mirror/alpine'\n        community_enabled: true\n        testing_enabled: true\n        version: 'edge'\n    local_repo_base_url: 'https://my-local-server/local-alpine'\n"
      ],
      "frequency": "once-per-instance",
      "type": "object",
      "properties": {
        "apk_repos": {
          "type": "object",
          "properties": {
            "preserve_repositories": {
              "type": "boolean",
              "default": false,
              "description": "By default, cloud-init will generate a new repositories\nfile ``/etc/apk/repositories`` based on any valid\nconfiguration settings specified within a apk_repos\nsection of cloud config. To disable this behavior and\npreserve the repositories file from the pristine image,\nset ``preserve_repositories`` to ``true``.\n\nThe ``preserve_repositories`` option overrides\nall other config keys that would alter\n``/etc/apk/repositories``.\n"
            },
            "alpine_repo": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "base_url": {
                  "type": "string",
                  "default": "https://alpine.global.ssl.fastly.net/alpine",
                  "description": "The base URL of an Alpine repository, or\nmirror, to download official packages from.\nIf not specified then it defaults to ``https://alpine.global.ssl.fastly.net/alpine``\n"
                },
                "community_enabled": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to add the Community repo to the\nrepositories file. By default the Community\nrepo is not included.\n"
                },
                "testing_enabled": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to add the Testing repo to the\nrepositories file. By default the Testing\nrepo is not included. It is only recommended\nto use the Testing repo on a machine running\nthe ``Edge`` version of Alpine as packages\ninstalled from Testing may have dependancies\nthat conflict with those in non-Edge Main or\nCommunity repos.\"\n"
                },
                "version": {
                  "type": "string",
                  "description": "The Alpine version to use (e.g. ``v3.12`` or\n``edge``)\n"
                }
              },
              "required": [
                "version"
              ],
              "minProperties": 1,
              "additionalProperties": false
            },
            "local_repo_base_url": {
              "type": "string",
              "description": "The base URL of an Alpine repository containing\nunofficial packages\n"
            }
          },
          "required": [],
          "minProperties": 1,
          "additionalProperties": false
        }
      }
    },
    {
      "id": "cc_zypper_add_repo",
      "name": "ZypperAddRepo",
      "title": "Configure zypper behavior and add zypper repositories",
      "description": "Configure zypper behavior by modifying /etc/zypp/zypp.conf. The\nconfiguration writer is \"dumb\" and will simply append the provided\nconfiguration options to the configuration file. Option settings\nthat may be duplicate will be resolved by the way the zypp.conf file\nis parsed. The file is in INI format.\nAdd repositories to the system. No validation is performed on the\nrepository file entries, it is assumed the user is familiar with\nthe zypper repository file format.",
      "distros": [
        "opensuse",
        "sles"
      ],
      "examples": [
        "zypper:\n  repos:\n    - id: opensuse-oss\n      name: os-oss\n      baseurl: http://dl.opensuse.org/dist/leap/v/repo/oss/\n      enabled: 1\n      autorefresh: 1\n    - id: opensuse-oss-update\n      name: os-oss-up\n      baseurl: http://dl.opensuse.org/dist/leap/v/update\n      # any setting per\n      # https://en.opensuse.org/openSUSE:Standards_RepoInfo\n      # enable and autorefresh are on by default\n  config:\n    reposdir: /etc/zypp/repos.dir\n    servicesdir: /etc/zypp/services.d\n    download.use_deltarpm: true\n    # any setting in /etc/zypp/zypp.conf\n"
      ],
      "frequency": "always",
      "type": "object",
      "properties": {
        "zypper": {
          "type": "object",
          "properties": {
            "repos": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique id of the repo, used when\n writing\n/etc/zypp/repos.d/<id>.repo."
                  },
                  "baseurl": {
                    "type": "string",
                    "format": "uri",
                    "description": "The base repositoy URL"
                  }
                },
                "required": [
                  "id",
                  "baseurl"
                ],
                "additionalProperties": true
              },
              "minItems": 1
            },
            "config": {
              "type": "object",
              "description": "Any supported zypo.conf key is written to\n/etc/zypp/zypp.conf'"
            }
          },
          "required": [],
          "minProperties": 1,
          "additionalProperties": false
        }
      }
    },
    {
      "id": "cc_runcmd",
      "name": "Runcmd",
      "title": "Run arbitrary commands",
      "description": "Run arbitrary commands at a rc.local like level with output to the\nconsole. Each item can be either a list or a string. If the item is a\nlist, it will be properly executed as if passed to ``execve()`` (with\nthe first arg as the command). If the item is a string, it will be\nwritten to a file and interpreted\nusing ``sh``.\n\n.. note::\n\n  all commands must be proper yaml, so you have to quote any characters\n  yaml would eat (':' can be problematic)\n\n.. note::\n\n  when writing files, do not use /tmp dir as it races with\n  systemd-tmpfiles-clean LP: #1707222. Use /run/somedir instead.\n",
      "distros": [
        "all"
      ],
      "examples": [
        "runcmd:\n    - [ ls, -l, / ]\n    - [ sh, -xc, \"echo $(date) ': hello world!'\" ]\n    - [ sh, -c, echo \"=========hello world'=========\" ]\n    - ls -l /root\n    - [ wget, \"http://example.org\", -O, /tmp/index.html ]\n"
      ],
      "frequency": "once-per-instance",
      "type": "object",
      "properties": {
        "runcmd": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "additionalItems": false,
          "additionalProperties": false,
          "minItems": 1,
          "required": []
        }
      }
    },
    {
      "id": "cc_snap",
      "name": "Snap",
      "title": "Install, configure and manage snapd and snap packages",
      "description": "This module provides a simple configuration namespace in cloud-init to\nboth setup snapd and install snaps.\n\n.. note::\n    Both ``assertions`` and ``commands`` values can be either a\n    dictionary or a list. If these configs are provided as a\n    dictionary, the keys are only used to order the execution of the\n    assertions or commands and the dictionary is merged with any\n    vendor-data snap configuration provided. If a list is provided by\n    the user instead of a dict, any vendor-data snap configuration is\n    ignored.\n\nThe ``assertions`` configuration option is a dictionary or list of\nproperly-signed snap assertions which will run before any snap\n``commands``. They will be added to snapd's assertion database by\ninvoking ``snap ack <aggregate_assertion_file>``.\n\nSnap ``commands`` is a dictionary or list of individual snap\ncommands to run on the target system. These commands can be used to\ncreate snap users, install snaps and provide snap configuration.\n\n.. note::\n    If 'side-loading' private/unpublished snaps on an instance, it is\n    best to create a snap seed directory and seed.yaml manifest in\n    **/var/lib/snapd/seed/** which snapd automatically installs on\n    startup.\n\n**Development only**: The ``squashfuse_in_container`` boolean can be\nset true to install squashfuse package when in a container to enable\nsnap installs. Default is false.\n",
      "distros": [
        "ubuntu"
      ],
      "examples": [
        "snap:\n    assertions:\n      00: |\n        signed_assertion_blob_here\n      02: |\n        signed_assertion_blob_here\n    commands:\n      00: snap create-user --sudoer --known <snap-user>@mydomain.com\n      01: snap install canonical-livepatch\n      02: canonical-livepatch enable <AUTH_TOKEN>\n",
        "# LXC-based containers require squashfuse before snaps can be installed\nsnap:\n    commands:\n        00: apt-get install squashfuse -y\n        11: snap install emoj\n\n",
        "# Convenience: the snap command can be omitted when specifying commands\n# as a list and 'snap' will automatically be prepended.\n# The following commands are equivalent:\nsnap:\n    commands:\n        00: ['install', 'vlc']\n        01: ['snap', 'install', 'vlc']\n        02: snap install vlc\n        03: 'snap install vlc'\n",
        "# You can use a list of commands\nsnap:\n    commands:\n        - ['install', 'vlc']\n        - ['snap', 'install', 'vlc']\n        - snap install vlc\n        - 'snap install vlc'\n",
        "# You can use a list of assertions\nsnap:\n    assertions:\n        - signed_assertion_blob_here\n        - |\n            signed_assertion_blob_here\n"
      ],
      "frequency": "once-per-instance",
      "type": "object",
      "properties": {
        "snap": {
          "type": "object",
          "properties": {
            "assertions": {
              "type": [
                "object",
                "array"
              ],
              "items": {
                "type": "string"
              },
              "additionalItems": false,
              "minItems": 1,
              "minProperties": 1,
              "uniqueItems": true,
              "additionalProperties": {
                "type": "string"
              }
            },
            "commands": {
              "type": [
                "object",
                "array"
              ],
              "items": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "additionalItems": false,
              "minItems": 1,
              "minProperties": 1,
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "squashfuse_in_container": {
              "type": "boolean"
            }
          },
          "additionalProperties": false,
          "required": [],
          "minProperties": 1
        }
      }
    },
    {
      "id": "cc_resizefs",
      "name": "Resizefs",
      "title": "Resize filesystem",
      "description": "Resize a filesystem to use all avaliable space on partition. This\nmodule is useful along with ``cc_growpart`` and will ensure that if the\nroot partition has been resized the root filesystem will be resized\nalong with it. By default, ``cc_resizefs`` will resize the root\npartition and will block the boot process while the resize command is\nrunning. Optionally, the resize operation can be performed in the\nbackground while cloud-init continues running modules. This can be\nenabled by setting ``resize_rootfs`` to ``true``. This module can be\ndisabled altogether by setting ``resize_rootfs`` to ``false``.",
      "distros": [
        "all"
      ],
      "examples": [
        "resize_rootfs: false  # disable root filesystem resize operation"
      ],
      "frequency": "always",
      "type": "object",
      "properties": {
        "resize_rootfs": {
          "enum": [
            true,
            false,
            "noblock"
          ],
          "description": "Whether to resize the root partition. Default: 'true'"
        }
      }
    },
    {
      "id": "cc_chef",
      "name": "Chef",
      "title": "module that configures, starts and installs chef",
      "description": "This module enables chef to be installed (from packages,\ngems, or from omnibus). Before this occurs, chef configuration is\nwritten to disk (validation.pem, client.pem, firstboot.json,\nclient.rb), and required directories are created (/etc/chef and\n/var/log/chef and so-on). If configured, chef will be\ninstalled and started in either daemon or non-daemon mode.\nIf run in non-daemon mode, post run actions are executed to do\nfinishing activities such as removing validation.pem.",
      "distros": [
        "all"
      ],
      "examples": [
        "\nchef:\n  directories:\n    - /etc/chef\n    - /var/log/chef\n  validation_cert: system\n  install_type: omnibus\n  initial_attributes:\n    apache:\n      prefork:\n        maxclients: 100\n      keepalive: off\n  run_list:\n    - recipe[apache2]\n    - role[db]\n  encrypted_data_bag_secret: /etc/chef/encrypted_data_bag_secret\n  environment: _default\n  log_level: :auto\n  omnibus_url_retries: 2\n  server_url: https://chef.yourorg.com:4000\n  ssl_verify_mode: :verify_peer\n  validation_name: yourorg-validator"
      ],
      "frequency": "always",
      "type": "object",
      "properties": {
        "chef": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "directories": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "description": "Create the necessary directories for chef to run. By\ndefault, it creates the following directories:\n\n   - ``/etc/chef``\n   - ``/var/log/chef``\n   - ``/var/lib/chef``\n   - ``/var/cache/chef``\n   - ``/var/backups/chef``\n   - ``/var/run/chef``"
            },
            "validation_cert": {
              "type": "string",
              "description": "Optional string to be written to file validation_key.\nSpecial value ``system`` means set use existing file.\n"
            },
            "validation_key": {
              "type": "string",
              "default": "/etc/chef/validation.pem",
              "description": "Optional path for validation_cert. default to\n``/etc/chef/validation.pem``."
            },
            "firstboot_path": {
              "type": "string",
              "default": "/etc/chef/firstboot.json",
              "description": "Path to write run_list and initial_attributes keys that\nshould also be present in this configuration, defaults\nto ``/etc/chef/firstboot.json``."
            },
            "exec": {
              "type": "boolean",
              "default": false,
              "description": "define if we should run or not run chef (defaults to\nfalse, unless a gem installed is requested where this\nwill then default to true)."
            },
            "client_key": {
              "type": "string",
              "default": "/etc/chef/client.pem",
              "description": "Optional path for client_cert. default to\n``/etc/chef/client.pem``."
            },
            "encrypted_data_bag_secret": {
              "type": "string",
              "default": null,
              "description": "Specifies the location of the secret key used by chef\nto encrypt data items. By default, this path is set\nto None, meaning that chef will have to look at the\npath ``/etc/chef/encrypted_data_bag_secret`` for it.\n"
            },
            "environment": {
              "type": "string",
              "default": "_default",
              "description": "Specifies which environment chef will use. By default,\nit will use the ``_default`` configuration.\n"
            },
            "file_backup_path": {
              "type": "string",
              "default": "/var/backups/chef",
              "description": "Specifies the location in which backup files are\nstored. By default, it uses the\n``/var/backups/chef`` location."
            },
            "file_cache_path": {
              "type": "string",
              "default": "/var/cache/chef",
              "description": "Specifies the location in which chef cache files will\nbe saved. By default, it uses the ``/var/cache/chef``\nlocation."
            },
            "json_attribs": {
              "type": "string",
              "default": "/etc/chef/firstboot.json",
              "description": "Specifies the location in which some chef json data is\nstored. By default, it uses the\n``/etc/chef/firstboot.json`` location."
            },
            "log_level": {
              "type": "string",
              "default": ":info",
              "description": "Defines the level of logging to be stored in the log\nfile. By default this value is set to ``:info``.\n"
            },
            "log_location": {
              "type": "string",
              "default": "/var/log/chef/client.log",
              "description": "Specifies the location of the chef lof file. By\ndefault, the location is specified at\n``/var/log/chef/client.log``."
            },
            "node_name": {
              "type": "string",
              "description": "The name of the node to run. By default, we will\nuse th instance id as the node name."
            },
            "omnibus_url": {
              "type": "string",
              "default": "https://www.chef.io/chef/install.sh",
              "description": "Omnibus URL if chef should be installed through\nOmnibus. By default, it uses the\n``https://www.chef.io/chef/install.sh``."
            },
            "omnibus_url_retries": {
              "type": "integer",
              "default": 5,
              "description": "The number of retries that will be attempted to reach\nthe Omnibus URL"
            },
            "omnibus_version": {
              "type": "string",
              "description": "Optional version string to require for omnibus\ninstall."
            },
            "pid_file": {
              "type": "string",
              "default": "/var/run/chef/client.pid",
              "description": "The location in which a process identification\nnumber (pid) is saved. By default, it saves\nin the ``/var/run/chef/client.pid`` location."
            },
            "server_url": {
              "type": "string",
              "description": "The URL for the chef server"
            },
            "show_time": {
              "type": "boolean",
              "default": true,
              "description": "Show time in chef logs"
            },
            "ssl_verify_mode": {
              "type": "string",
              "default": ":verify_none",
              "description": "Set the verify mode for HTTPS requests. We can have\ntwo possible values for this parameter:\n\n    - ``:verify_none``: No validation of SSL                             certificates.\n    - ``:verify_peer``: Validate all SSL certificates.\n\nBy default, the parameter is set as ``:verify_none``.\n"
            },
            "validation_name": {
              "type": "string",
              "description": "The name of the chef-validator key that Chef Infra\nClient uses to access the Chef Infra Server during\nthe initial Chef Infra Client run."
            },
            "force_install": {
              "type": "boolean",
              "default": false,
              "description": "If set to ``True``, forces chef installation, even\nif it is already installed."
            },
            "initial_attributes": {
              "type": "object",
              "items": {
                "type": "string"
              },
              "description": "Specify a list of initial attributes used by the\ncookbooks."
            },
            "install_type": {
              "type": "string",
              "default": "packages",
              "description": "The type of installation for chef. It can be one of\nthe following values:\n\n    - ``packages``\n    - ``gems``\n    - ``omnibus``"
            },
            "run_list": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A run list for a first boot json."
            },
            "chef_license": {
              "type": "string",
              "description": "string that indicates if user accepts or not license\nrelated to some of chef products"
            }
          }
        }
      }
    },
    {
      "id": "cc_ntp",
      "name": "NTP",
      "title": "enable and configure ntp",
      "description": "Handle ntp configuration. If ntp is not installed on the system and\nntp configuration is specified, ntp will be installed. If there is a\ndefault ntp config file in the image or one is present in the\ndistro's ntp package, it will be copied to a file with ``.dist``\nappended to the filename before any changes are made. A list of ntp\npools and ntp servers can be provided under the ``ntp`` config key.\nIf no ntp ``servers`` or ``pools`` are provided, 4 pools will be used\nin the format ``{0-3}.{distro}.pool.ntp.org``.",
      "distros": [
        "almalinux",
        "alpine",
        "centos",
        "cloudlinux",
        "debian",
        "eurolinux",
        "fedora",
        "openEuler",
        "opensuse",
        "photon",
        "rhel",
        "rocky",
        "sles",
        "ubuntu",
        "virtuozzo"
      ],
      "examples": [
        "# Override ntp with chrony configuration on Ubuntu\nntp:\n  enabled: true\n  ntp_client: chrony  # Uses cloud-init default chrony configuration\n",
        "# Provide a custom ntp client configuration\nntp:\n  enabled: true\n  ntp_client: myntpclient\n  config:\n     confpath: /etc/myntpclient/myntpclient.conf\n     check_exe: myntpclientd\n     packages:\n       - myntpclient\n     service_name: myntpclient\n     template: |\n         ## template:jinja\n         # My NTP Client config\n         {% if pools -%}# pools{% endif %}\n         {% for pool in pools -%}\n         pool {{pool}} iburst\n         {% endfor %}\n         {%- if servers %}# servers\n         {% endif %}\n         {% for server in servers -%}\n         server {{server}} iburst\n         {% endfor %}\n  pools: [0.int.pool.ntp.org, 1.int.pool.ntp.org, ntp.myorg.org]\n  servers:\n    - ntp.server.local\n    - ntp.ubuntu.com\n    - 192.168.23.2"
      ],
      "frequency": "once-per-instance",
      "type": "object",
      "properties": {
        "ntp": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "pools": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "hostname"
              },
              "uniqueItems": true,
              "description": "List of ntp pools. If both pools and servers are\nempty, 4 default pool servers will be provided of\nthe format ``{0-3}.{distro}.pool.ntp.org``. NOTE:\nfor Alpine Linux when using the Busybox NTP client\nthis setting will be ignored due to the limited\nfunctionality of Busybox's ntpd."
            },
            "servers": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "hostname"
              },
              "uniqueItems": true,
              "description": "List of ntp servers. If both pools and servers are\nempty, 4 default pool servers will be provided with\nthe format ``{0-3}.{distro}.pool.ntp.org``."
            },
            "ntp_client": {
              "type": "string",
              "default": "auto",
              "description": "Name of an NTP client to use to configure system NTP.\nWhen unprovided or 'auto' the default client preferred\nby the distribution will be used. The following\nbuilt-in client names can be used to override existing\nconfiguration defaults: chrony, ntp, ntpdate,\nsystemd-timesyncd."
            },
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Attempt to enable ntp clients if set to True.  If set\nto False, ntp client will not be configured or\ninstalled"
            },
            "config": {
              "description": "Configuration settings or overrides for the\n``ntp_client`` specified.",
              "type": [
                "object"
              ],
              "properties": {
                "confpath": {
                  "type": "string",
                  "description": "The path to where the ``ntp_client``\nconfiguration is written."
                },
                "check_exe": {
                  "type": "string",
                  "description": "The executable name for the ``ntp_client``.\nFor example, ntp service ``check_exe`` is\n'ntpd' because it runs the ntpd binary."
                },
                "packages": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "uniqueItems": true,
                  "description": "List of packages needed to be installed for the\nselected ``ntp_client``."
                },
                "service_name": {
                  "type": "string",
                  "description": "The systemd or sysvinit service name used to\nstart and stop the ``ntp_client``\nservice."
                },
                "template": {
                  "type": "string",
                  "description": "Inline template allowing users to define their\nown ``ntp_client`` configuration template.\nThe value must start with '## template:jinja'\nto enable use of templating support.\n"
                }
              },
              "required": [],
              "minProperties": 1,
              "additionalProperties": false
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    {
      "id": "cc_ubuntu_drivers",
      "name": "Ubuntu Drivers",
      "title": "Interact with third party drivers in Ubuntu.",
      "description": "This module interacts with the 'ubuntu-drivers' command to install\nthird party driver packages.",
      "distros": [
        "ubuntu"
      ],
      "examples": [
        "drivers:\n  nvidia:\n    license-accepted: true\n"
      ],
      "frequency": "once-per-instance",
      "type": "object",
      "properties": {
        "drivers": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "nvidia": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "license-accepted"
              ],
              "properties": {
                "license-accepted": {
                  "type": "boolean",
                  "description": "Do you accept the NVIDIA driver license?"
                },
                "version": {
                  "type": "string",
                  "description": "The version of the driver to install (e.g. \"390\", \"410\"). Defaults to the latest version."
                }
              }
            }
          }
        }
      }
    },
    {
      "id": "cc_ubuntu_advantage",
      "name": "Ubuntu Advantage",
      "title": "Configure Ubuntu Advantage support services",
      "description": "Attach machine to an existing Ubuntu Advantage support contract and\nenable or disable support services such as Livepatch, ESM,\nFIPS and FIPS Updates. When attaching a machine to Ubuntu Advantage,\none can also specify services to enable.  When the 'enable'\nlist is present, any named service will be enabled and all absent\nservices will remain disabled.\n\nNote that when enabling FIPS or FIPS updates you will need to schedule\na reboot to ensure the machine is running the FIPS-compliant kernel.\nSee :ref:`Power State Change` for information on how to configure\ncloud-init to perform this reboot.\n",
      "distros": [
        "ubuntu"
      ],
      "examples": [
        "# Attach the machine to an Ubuntu Advantage support contract with a\n# UA contract token obtained from https://ubuntu.com/advantage.\nubuntu_advantage:\n  token: <ua_contract_token>\n",
        "# Attach the machine to an Ubuntu Advantage support contract enabling\n# only fips and esm services. Services will only be enabled if\n# the environment supports said service. Otherwise warnings will\n# be logged for incompatible services specified.\nubuntu-advantage:\n  token: <ua_contract_token>\n  enable:\n  - fips\n  - esm\n",
        "# Attach the machine to an Ubuntu Advantage support contract and enable\n# the FIPS service.  Perform a reboot once cloud-init has\n# completed.\npower_state:\n  mode: reboot\nubuntu-advantage:\n  token: <ua_contract_token>\n  enable:\n  - fips\n"
      ],
      "frequency": "once-per-instance",
      "type": "object",
      "properties": {
        "ubuntu_advantage": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "token": {
              "type": "string",
              "description": "A contract token obtained from https://ubuntu.com/advantage."
            }
          },
          "required": [
            "token"
          ],
          "additionalProperties": false
        }
      }
    },
    {
      "id": "cc_locale",
      "name": "Locale",
      "title": "Set system locale",
      "description": "Configure the system locale and apply it system wide. By default use\nthe locale specified by the datasource.",
      "distros": [
        "all"
      ],
      "examples": [
        "# Set the locale to ar_AE\nlocale: ar_AE\n",
        "# Set the locale to fr_CA in /etc/alternate_path/locale\nlocale: fr_CA\nlocale_configfile: /etc/alternate_path/locale\n"
      ],
      "frequency": "once-per-instance",
      "type": "object",
      "properties": {
        "locale": {
          "type": "string",
          "description": "The locale to set as the system's locale (e.g. ar_PS)"
        },
        "locale_configfile": {
          "type": "string",
          "description": "The file in which to write the locale configuration (defaults to the distro's default location)"
        }
      }
    },
    {
      "id": "cc_write_files",
      "name": "Write Files",
      "title": "write arbitrary files",
      "description": "    Write out arbitrary content to files, optionally setting permissions.\n    Parent folders in the path are created if absent.\n    Content can be specified in plain text or binary. Data encoded with\n    either base64 or binary gzip data can be specified and will be decoded\n    before being written. For empty file creation, content can be omitted.\n\n.. note::\n    if multiline data is provided, care should be taken to ensure that it\n    follows yaml formatting standards. to specify binary data, use the yaml\n    option ``!!binary``\n\n.. note::\n    Do not write files under /tmp during boot because of a race with\n    systemd-tmpfiles-clean that can cause temp files to get cleaned during\n    the early boot process. Use /run/somedir instead to avoid race\n    LP:1707222.",
      "distros": [
        "all"
      ],
      "examples": [
        "# Write out base64 encoded content to /etc/sysconfig/selinux\nwrite_files:\n- encoding: b64\n  content: CiMgVGhpcyBmaWxlIGNvbnRyb2xzIHRoZSBzdGF0ZSBvZiBTRUxpbnV4...\n  owner: root:root\n  path: /etc/sysconfig/selinux\n  permissions: '0644'\n",
        "# Appending content to an existing file\nwrite_files:\n- content: |\n    15 * * * * root ship_logs\n  path: /etc/crontab\n  append: true\n",
        "# Provide gziped binary content\nwrite_files:\n- encoding: gzip\n  content: !!binary |\n      H4sIAIDb/U8C/1NW1E/KzNMvzuBKTc7IV8hIzcnJVyjPL8pJ4QIA6N+MVxsAAAA=\n  path: /usr/bin/hello\n  permissions: '0755'\n",
        "# Create an empty file on the system\nwrite_files:\n- path: /root/CLOUD_INIT_WAS_HERE\n"
      ],
      "frequency": "once-per-instance",
      "type": "object",
      "properties": {
        "write_files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path of the file to which ``content`` is decoded\nand written\n"
              },
              "content": {
                "type": "string",
                "default": "",
                "description": "Optional content to write to the provided ``path``.\nWhen content is present and encoding is not 'text/plain',\ndecode the content prior to writing. Default:\n**''**\n"
              },
              "owner": {
                "type": "string",
                "default": "root:root",
                "description": "Optional owner:group to chown on the file. Default:\n**root:root**\n"
              },
              "permissions": {
                "type": "string",
                "default": "0644",
                "description": "Optional file permissions to set on ``path``\nrepresented as an octal string '0###'. Default:\n**'0644'**\n"
              },
              "encoding": {
                "type": "string",
                "default": "text/plain",
                "enum": [
                  "gz",
                  "gzip",
                  "gz+base64",
                  "gzip+base64",
                  "gz+b64",
                  "gzip+b64",
                  "b64",
                  "base64"
                ],
                "description": "Optional encoding type of the content. Default is\n**text/plain** and no content decoding is\nperformed. Supported encoding types are:\ngz, gzip, gz+base64, gzip+base64, gz+b64, gzip+b64, b64, base64."
              },
              "append": {
                "type": "boolean",
                "default": false,
                "description": "Whether to append ``content`` to existing file if\n``path`` exists. Default: **false**.\n"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false
          }
        }
      }
    }
  ]
}
