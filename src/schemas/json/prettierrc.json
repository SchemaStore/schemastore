{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Schema for .prettierrc",
  "type": "object",
  "definitions": {
    "optionsDefinition": {
      "type": "object",
      "properties": {
        "arrowParens": {
          "description":
            "Include parentheses around a sole arrow function parameter.",
          "default": "avoid",
          "oneOf": [
            {
              "enum": ["avoid"],
              "description": "Omit parens when possible. Example: `x => x`"
            },
            {
              "enum": ["always"],
              "description": "Always include parens. Example: `(x) => x`"
            }
          ]
        },
        "bracketSpacing": {
          "description": "Print spaces between brackets.",
          "default": true,
          "type": "boolean"
        },
        "cursorOffset": {
          "description":
            "Print (to stderr) where a cursor at the given position would move to after formatting.\nThis option cannot be used with --range-start and --range-end.",
          "default": -1,
          "type": "integer"
        },
        "filepath": {
          "description":
            "Specify the input filepath. This will be used to do parser inference.",
          "type": "string"
        },
        "insertPragma": {
          "description":
            "Insert @format pragma into file's first docblock comment.",
          "default": false,
          "type": "boolean"
        },
        "jsxBracketSameLine": {
          "description": "Put > on the last line instead of at a new line.",
          "default": false,
          "type": "boolean"
        },
        "parser": {
          "description": "Which parser to use.",
          "default": "babylon",
          "oneOf": [
            { "enum": ["flow"], "description": "Flow" },
            { "enum": ["babylon"], "description": "JavaScript" },
            { "enum": ["typescript"], "description": "TypeScript" },
            { "enum": ["css"], "description": "CSS" },
            { "enum": ["less"], "description": "Less" },
            { "enum": ["scss"], "description": "SCSS" },
            { "enum": ["json"], "description": "JSON" },
            { "enum": ["graphql"], "description": "GraphQL" },
            { "enum": ["markdown"], "description": "Markdown" },
            { "enum": ["vue"], "description": "Vue" }
          ]
        },
        "plugins": {
          "description":
            "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.",
          "default": [],
          "type": "array",
          "items": { "type": "string" }
        },
        "printWidth": {
          "description": "The line length where Prettier will try wrap.",
          "default": 80,
          "type": "integer"
        },
        "proseWrap": {
          "description": "How to wrap prose. (markdown)",
          "default": "preserve",
          "oneOf": [
            {
              "enum": ["always"],
              "description": "Wrap prose if it exceeds the print width."
            },
            { "enum": ["never"], "description": "Do not wrap prose." },
            { "enum": ["preserve"], "description": "Wrap prose as-is." }
          ]
        },
        "rangeEnd": {
          "description":
            "Format code ending at a given character offset (exclusive).\nThe range will extend forwards to the end of the selected statement.\nThis option cannot be used with --cursor-offset.",
          "default": null,
          "type": "integer"
        },
        "rangeStart": {
          "description":
            "Format code starting at a given character offset.\nThe range will extend backwards to the start of the first line containing the selected statement.\nThis option cannot be used with --cursor-offset.",
          "default": 0,
          "type": "integer"
        },
        "requirePragma": {
          "description":
            "Require either '@prettier' or '@format' to be present in the file's first docblock comment\nin order for it to be formatted.",
          "default": false,
          "type": "boolean"
        },
        "semi": {
          "description": "Print semicolons.",
          "default": true,
          "type": "boolean"
        },
        "singleQuote": {
          "description": "Use single quotes instead of double quotes.",
          "default": false,
          "type": "boolean"
        },
        "tabWidth": {
          "description": "Number of spaces per indentation level.",
          "default": 2,
          "type": "integer"
        },
        "trailingComma": {
          "description":
            "Print trailing commas wherever possible when multi-line.",
          "default": "none",
          "oneOf": [
            { "enum": ["none"], "description": "No trailing commas." },
            {
              "enum": ["es5"],
              "description":
                "Trailing commas where valid in ES5 (objects, arrays, etc.)"
            },
            {
              "enum": ["all"],
              "description":
                "Trailing commas wherever possible (including function arguments)."
            }
          ]
        },
        "useTabs": {
          "description": "Indent with tabs instead of spaces.",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "overridesDefinition": {
      "type": "object",
      "properties": {
        "overrides": {
          "type": "array",
          "description":
            "Provide a list of patterns to override prettier configuration.",
          "items": {
            "type": "object",
            "required": ["files"],
            "properties": {
              "files": {
                "description": "Include these files in this override.",
                "oneOf": [
                  { "type": "string" },
                  { "type": "array", "items": { "type": "string" } }
                ]
              },
              "excludeFiles": {
                "description": "Exclude these files from this override.",
                "oneOf": [
                  { "type": "string" },
                  { "type": "array", "items": { "type": "string" } }
                ]
              },
              "options": {
                "type": "object",
                "description": "The options to apply for this override.",
                "$ref": "#/definitions/optionsDefinition"
              }
            },
            "additionalProperties": false
          }
        }
      }
    }
  },
  "allOf": [
    { "$ref": "#/definitions/optionsDefinition" },
    { "$ref": "#/definitions/overridesDefinition" }
  ]
}
