{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "additionalProperties": false,
  "definitions": {
    "mergeEnv": {
      "additionalProperties": false,
      "properties": {
        "create": {
          "description": "List of Environment variable names to create in target project if they are not already created",
          "items": {
            "description": "The Environment variable name",
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "type": "string"
        },
        "set": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "skip": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "skipIfNotSameFileName": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": ["env"],
          "type": "string"
        }
      },
      "required": ["type", "path"],
      "type": "object"
    },
    "mergeGit": {
      "additionalProperties": false,
      "description": "Merge file using git merge (use with varied reliability)",
      "properties": {
        "path": {
          "description": "Path to file to merge",
          "type": "string"
        },
        "type": {
          "description": "Merge type",
          "enum": ["git"],
          "type": "string"
        }
      },
      "required": ["type", "path"]
    },
    "mergeJson": {
      "additionalProperties": false,
      "description": "Merge json file with jq command line tool pattern matching",
      "properties": {
        "create": {
          "description": "JQ pattern of property to create if the property does not exist in target project file",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "description": "Path to file to merge",
          "type": "string"
        },
        "replace": {
          "description": "JQ pattern of property to replace",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "replaceIf": {
          "description": "A set of properties to replace if the condition evaluates to truthy",
          "items": {
            "description": "Configuration for property to replace if condition evaluates to truthy",
            "properties": {
              "condition": {
                "description": "The condition to evaluate for truthiness. If truthy will replace property matched by pattern",
                "type": "string"
              },
              "pattern": {
                "description": "JQ pattern of property to replace",
                "type": "string"
              }
            },
            "required": ["condition", "pattern"],
            "type": "object"
          },
          "type": "array"
        },
        "set": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Set the value of these items to the value. So `'.license':MIT` would set the `license` property of the json file to 'MIT'",
          "type": "object"
        },
        "skip": {
          "description": "A list of items to not create, copy, replace, or remove in target file",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "skipIfNotSameFileName": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "Merge type",
          "enum": ["jq"],
          "type": "string"
        }
      },
      "required": ["type", "path"]
    },
    "mergeYaml": {
      "additionalProperties": false,
      "description": "Merge yaml file with yq command line tool pattern matching",
      "properties": {
        "create": {
          "description": "YQ pattern of property to create if the property does not exist in target project file",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "description": "Path to file to merge",
          "type": "string"
        },
        "replace": {
          "description": "YQ pattern of property to replace",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "replaceIf": {
          "description": "A set of properties to replace if the condition evaluates to truthy",
          "items": {
            "description": "Configuration for property to replace if condition evaluates to truthy",
            "properties": {
              "condition": {
                "description": "The condition to evaluate for truthiness. If truthy will replace property matched by pattern",
                "type": "string"
              },
              "pattern": {
                "description": "YQ pattern of property to replace",
                "type": "string"
              }
            },
            "required": ["condition", "pattern"],
            "type": "object"
          },
          "type": "array"
        },
        "set": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Set the value of these items to the value. So `'license':MIT` would set the `license` property of the yaml file to 'MIT'",
          "type": "object"
        },
        "skip": {
          "description": "A list of items to not create, copy, replace, or remove in target file",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "skipIfNotSameFileName": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "Merge type",
          "enum": ["yq"],
          "type": "string"
        }
      },
      "required": ["type", "path"]
    },
    "moveItems": {
      "properties": {
        "names": {
          "items": {
            "description": "The directories to move",
            "type": "string"
          },
          "type": "array"
        },
        "to": {
          "description": "The path to move the directory to",
          "type": "string"
        }
      },
      "required": ["to", "names"],
      "type": "object"
    }
  },
  "description": "plagiarize-me.yaml configuration schema",
  "id": "https://json.schemastore.org/plagiarize-me",
  "properties": {
    "create": {
      "properties": {
        "andClean": {
          "description": "Files to remove commented sections from. Eg code between `// plagiarize:start:always:delete` and `// plagiarize:end:always:delete`",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "files": {
          "description": "Files to copy from plagiarized project if they do not exist in the target project",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "merge": {
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/mergeJson"
          },
          {
            "$ref": "#/definitions/mergeYaml"
          },
          {
            "$ref": "#/definitions/mergeGit"
          },
          {
            "$ref": "#/definitions/mergeEnv"
          }
        ]
      },
      "type": "array"
    },
    "move": {
      "description": "Files to move in target project from their previous locations",
      "properties": {
        "directories": {
          "description": "Directories to move from the target repo to the target repo. Useful for refactoring project structures",
          "items": {
            "$ref": "#/definitions/moveItems"
          },
          "type": "array"
        },
        "files": {
          "description": "Files to move from the target repo to the target repo. Useful for refactoring",
          "items": {
            "$ref": "#/definitions/moveItems"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "push": {
      "items": {
        "additionalProperties": false,
        "properties": {
          "git": {
            "additionalProperties": false,
            "properties": {
              "branch": {
                "type": "string"
              },
              "commit": {
                "additionalProperties": false,
                "properties": {
                  "create": {
                    "default": false,
                    "type": "boolean"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "required": ["message"],
                "type": "object"
              },
              "hooks": {
                "additionalProperties": false,
                "properties": {
                  "post-push": {
                    "items": {
                      "oneOf": [
                        {
                          "properties": {
                            "api": {
                              "enum": ["gitlab"],
                              "type": "string"
                            },
                            "envVars": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "type": "object"
                            },
                            "remote": {
                              "type": "string"
                            },
                            "removeSourceBranch": {
                              "default": false,
                              "type": "boolean"
                            },
                            "targetBranch": {
                              "type": "string"
                            },
                            "type": {
                              "enum": ["create-merge-request"],
                              "type": "string"
                            }
                          },
                          "required": ["type", "api", "remote", "targetBranch"],
                          "type": "object"
                        }
                      ]
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "push": {
                "default": false,
                "type": "boolean"
              },
              "remotes": {
                "description": "A list of removes to push to (if `push: true`)",
                "items": {
                  "description": "name of the remote",
                  "type": "string"
                },
                "type": "array"
              },
              "repos": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "local": {
                      "type": "string"
                    },
                    "remote": {
                      "additionalProperties": false,
                      "properties": {
                        "checkout": {
                          "type": "string"
                        },
                        "defaultName": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": ["url", "checkout", "defaultName"],
                      "type": "object"
                    }
                  },
                  "required": ["remote"],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": ["repos", "commit", "branch", "remotes"],
            "type": "object"
          },
          "instances": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "required": ["project"],
              "type": "object"
            },
            "type": "array"
          },
          "values": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Values to set when iterating through each instance",
            "type": "object"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "replace": {
      "description": "Configuration for strings, files, and file paths to replace in target file",
      "properties": {
        "files": {
          "description": "Relative path to target files that will be completely overwritten by source files in the same path",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "strings": {
          "additionalProperties": {
            "type": ["string", "integer", "boolean"]
          },
          "description": "Strings to find in target project and be replaced with plagiarized project's values",
          "properties": {
            "project": {
              "type": "string"
            }
          },
          "required": ["project"],
          "type": "object"
        },
        "vars": {
          "additionalProperties": {
            "type": ["string", "integer", "boolean"]
          },
          "description": "Variables available to be used for finding and replacing by variable name. For example `$var_name: hello` would replace string '$var_name' with 'hello' in target project",
          "type": "object"
        }
      },
      "required": ["strings"],
      "type": "object"
    },
    "repo": {
      "additionalProperties": false,
      "description": "Git repo of where this plagiarizable project is hosted",
      "properties": {
        "checkout": {
          "default": "master",
          "description": "The default branch that downstream projects should checkout when plagiarizing this project",
          "type": "string"
        },
        "url": {
          "description": "The git repo url of this project",
          "type": "string"
        }
      },
      "required": ["url"],
      "type": "object"
    },
    "run": {
      "description": "Shell commands to run after plagiarize files are done being copied and updated",
      "items": {
        "properties": {
          "command": {
            "description": "The shell command to run",
            "type": "string"
          },
          "parallel": {
            "description": "Whether or not to run this command synchronously or in parallel to other commands where `parallel: true`",
            "type": "boolean"
          },
          "when": {
            "oneOf": [
              {
                "description": "Condition type",
                "enum": ["always"],
                "type": "string"
              },
              {
                "additionalProperties": false,
                "description": "Run this command only if configured file does not exist in target project",
                "properties": {
                  "options": {
                    "properties": {
                      "path": {
                        "type": "string"
                      }
                    },
                    "required": ["path"],
                    "type": "object"
                  },
                  "type": {
                    "description": "Condition type",
                    "enum": ["if-missing"],
                    "type": "string"
                  }
                },
                "required": ["type", "options"],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "description": "Always run this command",
                "properties": {
                  "type": {
                    "description": "Condition type",
                    "enum": ["always"],
                    "type": "string"
                  }
                },
                "required": ["type"],
                "type": "object"
              }
            ]
          }
        },
        "required": ["command"],
        "type": "object"
      },
      "type": "array"
    },
    "templates": {
      "description": "Files that are used the have similarities between instances of that that. .env files for example are similar and could be templated",
      "items": {
        "additionalProperties": false,
        "properties": {
          "configs": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "strings": {
                  "additionalProperties": {
                    "type": ["string", "boolean", "number"]
                  },
                  "type": "object"
                },
                "vars": {
                  "additionalProperties": {
                    "type": ["string", "boolean", "number", "null"]
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "create": {
            "additionalProperties": false,
            "properties": {
              "files": {
                "items": {
                  "description": "The path to the file to create if it does not already exist",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "merge": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/mergeJson"
                },
                {
                  "$ref": "#/definitions/mergeYaml"
                },
                {
                  "$ref": "#/definitions/mergeGit"
                },
                {
                  "$ref": "#/definitions/mergeEnv"
                }
              ]
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the template",
            "type": "string"
          },
          "replace": {
            "additionalProperties": false,
            "properties": {
              "strings": {
                "additionalProperties": {
                  "type": ["string", "boolean", "number"]
                },
                "description": "Values to be used as variables within the target project. So `var_name: hello` in the template configuration and `var_name: world` would replace instances of 'hello' found in the source file with with 'world' found in the target file",
                "type": "object"
              },
              "values": {
                "additionalProperties": {
                  "type": ["string", "boolean", "number", "null"]
                },
                "description": "Values to be used as variables within the target project. So `var_name: hello` would replace instances of '$var_name' with 'hello' in the target file",
                "type": "object"
              },
              "vars": {
                "additionalProperties": {
                  "type": ["string", "boolean", "number", "null"]
                },
                "description": "Values to be used as variables within the plagiarize-me.yaml file only. So `var_name: hello` would replace '$var_name' with 'hello' in plagiarize-me.yaml",
                "type": "object"
              }
            },
            "required": ["strings"],
            "type": "object"
          }
        },
        "required": ["name", "replace"],
        "type": "object"
      },
      "type": "array"
    }
  },
  "required": ["replace"],
  "title": "Plagiarize Me Configuration",
  "type": "object"
}
