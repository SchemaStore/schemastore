{
  "$defs": {
    "focus-metavariable": {
      "additionalProperties": false,
      "properties": {
        "focus-metavariable": {
          "title": "Focus on what a given metavariable is matching",
          "type": "string"
        }
      },
      "required": ["focus-metavariable"],
      "type": "object"
    },
    "id": {
      "title": "Rule ID to attach to findings",
      "type": "string"
    },
    "join-content": {
      "additionalProperties": false,
      "properties": {
        "additionalProperties": false,
        "on": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "refs": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "as": {
                "type": "string"
              },
              "renames": {
                "items": {
                  "properties": {
                    "from": {
                      "type": "string"
                    },
                    "to": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "rule": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "rules": {
          "items": {
            "additionalProperties": false,
            "oneOf": [
              {
                "required": ["pattern"]
              },
              {
                "required": ["patterns"]
              },
              {
                "required": ["pattern-sources", "pattern-sinks"]
              }
            ],
            "properties": {
              "id": {
                "$ref": "#/$defs/id"
              },
              "languages": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "mode": {
                "enum": ["search", "taint"]
              },
              "pattern": {
                "type": "string"
              },
              "pattern-propagators": {
                "$ref": "#/$defs/taint-content"
              },
              "pattern-sanitizers": {
                "$ref": "#/$defs/taint-content"
              },
              "pattern-sinks": {
                "$ref": "#/$defs/taint-content"
              },
              "pattern-sources": {
                "$ref": "#/$defs/taint-content"
              },
              "patterns": {
                "$ref": "#/$defs/patterns-content"
              }
            },
            "required": ["id", "languages"],
            "type": "object"
          },
          "type": "array"
        }
      },
      "title": "Join one or more rules together based on metavariable contents",
      "type": "object"
    },
    "metavariable-analysis": {
      "additionalProperties": false,
      "properties": {
        "metavariable-analysis": {
          "additionalProperties": false,
          "properties": {
            "analyzer": {
              "type": "string"
            },
            "metavariable": {
              "type": "string"
            },
            "options": {
              "type": "object"
            }
          },
          "required": ["analyzer", "metavariable"],
          "type": "object"
        }
      },
      "required": ["metavariable-analysis"],
      "type": "object"
    },
    "metavariable-comparison": {
      "additionalProperties": false,
      "properties": {
        "metavariable-comparison": {
          "additionalProperties": false,
          "properties": {
            "base": {
              "type": "integer"
            },
            "comparison": {
              "type": "string"
            },
            "metavariable": {
              "type": "string"
            },
            "strip": {
              "type": "boolean"
            }
          },
          "required": ["comparison"],
          "type": "object"
        }
      },
      "required": ["metavariable-comparison"],
      "type": "object"
    },
    "metavariable-pattern": {
      "additionalProperties": false,
      "properties": {
        "metavariable-pattern": {
          "additionalProperties": false,
          "oneOf": [
            {
              "not": {
                "anyOf": [
                  {
                    "required": ["patterns"]
                  },
                  {
                    "required": ["pattern-either"]
                  },
                  {
                    "required": ["pattern-regex"]
                  }
                ]
              },
              "required": ["pattern"]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": ["pattern"]
                  },
                  {
                    "required": ["pattern-either"]
                  },
                  {
                    "required": ["pattern-regex"]
                  }
                ]
              },
              "required": ["patterns"]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": ["pattern"]
                  },
                  {
                    "required": ["patterns"]
                  },
                  {
                    "required": ["pattern-regex"]
                  }
                ]
              },
              "required": ["pattern-either"]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": ["pattern"]
                  },
                  {
                    "required": ["patterns"]
                  },
                  {
                    "required": ["pattern-either"]
                  }
                ]
              },
              "required": ["pattern-regex"]
            }
          ],
          "properties": {
            "language": {
              "type": "string"
            },
            "metavariable": {
              "type": "string"
            },
            "pattern": {
              "title": "Return finding where Semgrep pattern matches exactly",
              "type": "string"
            },
            "pattern-either": {
              "$ref": "#/$defs/pattern-either-content"
            },
            "pattern-regex": {
              "title": "Return finding where regular expression matches exactly",
              "type": "string"
            },
            "patterns": {
              "$ref": "#/$defs/patterns-content"
            }
          },
          "required": ["metavariable"],
          "type": "object"
        }
      },
      "required": ["metavariable-pattern"],
      "type": "object"
    },
    "metavariable-regex": {
      "additionalProperties": false,
      "properties": {
        "metavariable-regex": {
          "additionalProperties": false,
          "properties": {
            "constant-propagation": {
              "type": "boolean"
            },
            "metavariable": {
              "type": "string"
            },
            "regex": {
              "type": "string"
            }
          },
          "required": ["metavariable", "regex"],
          "type": "object"
        }
      },
      "required": ["metavariable-regex"],
      "type": "object"
    },
    "path-array": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "pattern": {
      "additionalProperties": false,
      "properties": {
        "pattern": {
          "title": "Return finding where Semgrep pattern matches exactly",
          "type": "string"
        }
      },
      "required": ["pattern"],
      "type": "object"
    },
    "pattern-either": {
      "additionalProperties": false,
      "properties": {
        "pattern-either": {
          "$ref": "#/$defs/pattern-either-content",
          "title": "Return finding where any of the nested conditions are true"
        }
      },
      "required": ["pattern-either"],
      "type": "object"
    },
    "pattern-either-content": {
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/patterns"
          },
          {
            "$ref": "#/$defs/pattern-either"
          },
          {
            "$ref": "#/$defs/pattern-inside"
          },
          {
            "$ref": "#/$defs/pattern"
          },
          {
            "$ref": "#/$defs/pattern-regex"
          }
        ]
      },
      "title": "Return finding where any of the nested conditions are true",
      "type": "array"
    },
    "pattern-inside": {
      "additionalProperties": false,
      "properties": {
        "pattern-inside": {
          "title": "Return findings only from within snippets Semgrep pattern matches",
          "type": "string"
        }
      },
      "required": ["pattern-inside"],
      "type": "object"
    },
    "pattern-not": {
      "additionalProperties": false,
      "properties": {
        "pattern-not": {
          "title": "Do not return finding where Semgrep pattern matches exactly",
          "type": "string"
        }
      },
      "required": ["pattern-not"],
      "type": "object"
    },
    "pattern-not-inside": {
      "additionalProperties": false,
      "properties": {
        "pattern-not-inside": {
          "title": "Do not return findings from within snippets Semgrep pattern matches",
          "type": "string"
        }
      },
      "required": ["pattern-not-inside"],
      "type": "object"
    },
    "pattern-not-regex": {
      "additionalProperties": false,
      "properties": {
        "pattern-not-regex": {
          "title": "Do not return finding where regular expression matches",
          "type": "string"
        }
      },
      "required": ["pattern-not-regex"],
      "type": "object"
    },
    "pattern-regex": {
      "additionalProperties": false,
      "properties": {
        "pattern-regex": {
          "title": "Return finding where regular expression matches",
          "type": "string"
        }
      },
      "required": ["pattern-regex"],
      "type": "object"
    },
    "pattern-where-python": {
      "additionalProperties": false,
      "properties": {
        "pattern-where-python": {
          "title": "Return finding where Python expression returns true",
          "type": "string"
        }
      },
      "required": ["pattern-where-python"],
      "type": "object"
    },
    "patterns": {
      "additionalProperties": false,
      "properties": {
        "patterns": {
          "$ref": "#/$defs/patterns-content",
          "title": "Return finding where all of the nested conditions are true"
        }
      },
      "required": ["patterns"],
      "type": "object"
    },
    "patterns-content": {
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/patterns"
          },
          {
            "$ref": "#/$defs/pattern-either"
          },
          {
            "$ref": "#/$defs/focus-metavariable"
          },
          {
            "$ref": "#/$defs/pattern-inside"
          },
          {
            "$ref": "#/$defs/pattern-not-inside"
          },
          {
            "$ref": "#/$defs/pattern-not"
          },
          {
            "$ref": "#/$defs/pattern"
          },
          {
            "$ref": "#/$defs/pattern-regex"
          },
          {
            "$ref": "#/$defs/pattern-not-regex"
          },
          {
            "$ref": "#/$defs/pattern-where-python"
          },
          {
            "$ref": "#/$defs/metavariable-analysis"
          },
          {
            "$ref": "#/$defs/metavariable-regex"
          },
          {
            "$ref": "#/$defs/metavariable-pattern"
          },
          {
            "$ref": "#/$defs/metavariable-comparison"
          }
        ]
      },
      "title": "Return finding where all of the nested conditions are true",
      "type": "array"
    },
    "r2c-internal-project-depends-on-content": {
      "oneOf": [
        {
          "not": {
            "required": ["depends-on-either"]
          },
          "required": ["namespace", "package", "version"]
        },
        {
          "not": {
            "anyOf": [
              {
                "required": ["namespace"]
              },
              {
                "required": ["package"]
              },
              {
                "required": ["version"]
              }
            ]
          },
          "required": ["depends-on-either"]
        }
      ],
      "properties": {
        "depends-on-either": {
          "additionalProperties": false,
          "properties": {
            "namespace": {
              "type": "string"
            },
            "package": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          },
          "required": ["namespace", "package", "version"],
          "type": "array"
        },
        "namespace": {
          "type": "string"
        },
        "package": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "One or more dependencies that the project contains in a lock file",
      "type": "object"
    },
    "taint-content": {
      "items": {
        "anyOf": [
          {
            "oneOf": [
              {
                "not": {
                  "anyOf": [
                    {
                      "required": ["patterns"]
                    },
                    {
                      "required": ["pattern-either"]
                    },
                    {
                      "required": ["pattern-regex"]
                    }
                  ]
                },
                "required": ["pattern"]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "required": ["pattern"]
                    },
                    {
                      "required": ["pattern-either"]
                    },
                    {
                      "required": ["pattern-regex"]
                    }
                  ]
                },
                "required": ["patterns"]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "required": ["pattern"]
                    },
                    {
                      "required": ["patterns"]
                    },
                    {
                      "required": ["pattern-regex"]
                    }
                  ]
                },
                "required": ["pattern-either"]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "required": ["pattern"]
                    },
                    {
                      "required": ["patterns"]
                    },
                    {
                      "required": ["pattern-either"]
                    }
                  ]
                },
                "required": ["pattern-regex"]
              }
            ],
            "properties": {
              "pattern": {
                "title": "Return finding where Semgrep pattern matches exactly",
                "type": "string"
              },
              "pattern-either": {
                "$ref": "#/$defs/pattern-either-content"
              },
              "pattern-regex": {
                "title": "Return finding where regular expression matches exactly",
                "type": "string"
              },
              "patterns": {
                "$ref": "#/$defs/patterns-content"
              }
            },
            "type": "object"
          }
        ]
      },
      "type": "array"
    }
  },
  "$id": "https://raw.githubusercontent.com/returntocorp/semgrep-interfaces/main/rule_schema.yaml",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "rules": {
      "items": {
        "additionalProperties": false,
        "allOf": [
          {
            "if": {
              "properties": {
                "mode": {
                  "const": "extract"
                }
              },
              "required": ["mode"]
            },
            "then": {
              "oneOf": [
                {
                  "required": ["pattern"]
                },
                {
                  "required": ["patterns"]
                },
                {
                  "required": ["pattern-either"]
                },
                {
                  "required": ["pattern-regex"]
                }
              ],
              "properties": {
                "join": false,
                "message": false,
                "pattern-propagators": false,
                "pattern-sanitizers": false,
                "pattern-sinks": false,
                "pattern-sources": false,
                "severity": false
              },
              "required": ["id", "languages", "dest-language", "extract"]
            }
          },
          {
            "if": {
              "properties": {
                "mode": {
                  "const": "taint"
                }
              },
              "required": ["mode"]
            },
            "then": {
              "properties": {
                "dest-language": false,
                "extract": false,
                "join": false,
                "pattern": false,
                "pattern-either": false,
                "pattern-regex": false,
                "patterns": false,
                "reduce": false
              },
              "required": [
                "id",
                "message",
                "languages",
                "severity",
                "pattern-sinks",
                "pattern-sources"
              ]
            }
          },
          {
            "if": {
              "properties": {
                "mode": {
                  "const": "join"
                }
              },
              "required": ["mode"]
            },
            "then": {
              "properties": {
                "dest-language": false,
                "extract": false,
                "pattern": false,
                "pattern-either": false,
                "pattern-propagators": false,
                "pattern-regex": false,
                "pattern-sanitizers": false,
                "pattern-sinks": false,
                "pattern-sources": false,
                "patterns": false,
                "reduce": false
              },
              "required": ["id", "message", "severity", "join"]
            }
          },
          {
            "if": {
              "properties": {
                "mode": {
                  "const": "search"
                }
              }
            },
            "then": {
              "else": {
                "oneOf": [
                  {
                    "required": ["pattern"]
                  },
                  {
                    "required": ["patterns"]
                  },
                  {
                    "required": ["pattern-either"]
                  },
                  {
                    "required": ["pattern-regex"]
                  },
                  {
                    "required": ["r2c-internal-project-depends-on"]
                  }
                ]
              },
              "if": {
                "anyOf": [
                  {
                    "required": ["pattern"]
                  },
                  {
                    "required": ["patterns"]
                  },
                  {
                    "required": ["pattern-either"]
                  },
                  {
                    "required": ["pattern-regex"]
                  }
                ]
              },
              "properties": {
                "dest-language": false,
                "extract": false,
                "join": false,
                "pattern-propagators": false,
                "pattern-sanitizers": false,
                "pattern-sinks": false,
                "pattern-sources": false,
                "reduce": false
              },
              "required": ["id", "message", "languages", "severity"],
              "then": {
                "oneOf": [
                  {
                    "required": ["pattern"]
                  },
                  {
                    "required": ["patterns"]
                  },
                  {
                    "required": ["pattern-either"]
                  },
                  {
                    "required": ["pattern-regex"]
                  }
                ]
              }
            }
          }
        ],
        "properties": {
          "dest-language": {
            "title": "Language to process the extracted result of this rule as",
            "type": "string"
          },
          "extract": {
            "title": "Metavariable whose content to use as the extracted result for subsequent rules",
            "type": "string"
          },
          "fix": {
            "title": "Replacement text to fix matched code. Can use matched metavariables.",
            "type": "string"
          },
          "fix-regex": {
            "additionalProperties": false,
            "properties": {
              "count": {
                "title": "Replace up to this many regex matches",
                "type": "integer"
              },
              "regex": {
                "title": "Regular expression to find in matched code",
                "type": "string"
              },
              "replacement": {
                "title": "Code to replace the regular expression match with. Can use capture groups.",
                "type": "string"
              }
            },
            "required": ["regex", "replacement"],
            "title": "Replacement regex to fix matched code.",
            "type": "object"
          },
          "id": {
            "$ref": "#/$defs/id"
          },
          "join": {
            "$ref": "#/$defs/join-content"
          },
          "languages": {
            "items": {
              "type": "string"
            },
            "title": "Languages this pattern should run on",
            "type": "array"
          },
          "message": {
            "title": "Description to attach to findings",
            "type": "string"
          },
          "metadata": {
            "title": "Arbitrary structured data for your own reference",
            "type": "object"
          },
          "mode": {
            "default": "search",
            "enum": ["search", "taint", "join", "extract"]
          },
          "options": {
            "title": "Options object to enable/disable certain matching features in semgrep-core",
            "type": "object"
          },
          "paths": {
            "additionalProperties": false,
            "properties": {
              "exclude": {
                "$ref": "#/$defs/path-array"
              },
              "include": {
                "$ref": "#/$defs/path-array"
              }
            },
            "title": "Path globs this pattern should run on",
            "type": "object"
          },
          "pattern": {
            "title": "Return finding where Semgrep pattern matches exactly",
            "type": "string"
          },
          "pattern-either": {
            "$ref": "#/$defs/pattern-either-content"
          },
          "pattern-propagators": {
            "$ref": "#/$defs/taint-content"
          },
          "pattern-regex": {
            "title": "Return finding where regular expression matches exactly",
            "type": "string"
          },
          "pattern-sanitizers": {
            "$ref": "#/$defs/taint-content"
          },
          "pattern-sinks": {
            "$ref": "#/$defs/taint-content"
          },
          "pattern-sources": {
            "$ref": "#/$defs/taint-content"
          },
          "patterns": {
            "$ref": "#/$defs/patterns-content"
          },
          "r2c-internal-project-depends-on": {
            "$ref": "#/$defs/r2c-internal-project-depends-on-content"
          },
          "reduce": {
            "default": "separate",
            "enum": ["concat", "separate"],
            "title": "Method of intrafile match reduction"
          },
          "severity": {
            "enum": ["ERROR", "WARNING", "INFO", "INVENTORY", "EXPERIMENT"],
            "title": "Severity to report alongside this finding"
          },
          "version": {
            "title": "Version of rule",
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    }
  },
  "type": "object"
}
