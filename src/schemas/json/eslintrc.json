{
  "title": "JSON schema for ESLint configuration files",
  "$schema": "http://json-schema.org/draft-04/schema#",

  "type": "object",

  "definitions": {
    "rule": {
      "description": "ESLint rule\n\n0 - turns the rule off\n1 - turn the rule on as a warning (doesn't affect exit code)\n2 - turn the rule on as an error (exit code is 1 when triggered)\n",
      "type": [ "integer", "array" ],
      "minimum": 0,
      "maximum": 2
    },
    "possibleErrors": {
      "properties": {
        "comma-dangle": { "$ref": "#/definitions/rule" },
        "no-cond-assign": { "$ref": "#/definitions/rule" },
        "no-console": { "$ref": "#/definitions/rule" },
        "no-constant-condition": { "$ref": "#/definitions/rule" },
        "no-control-regex": { "$ref": "#/definitions/rule" },
        "no-debugger": { "$ref": "#/definitions/rule" },
        "no-dupe-args": { "$ref": "#/definitions/rule" },
        "no-dupe-keys": { "$ref": "#/definitions/rule" },
        "no-duplicate-case": { "$ref": "#/definitions/rule" },
        "no-empty-character-class": { "$ref": "#/definitions/rule" },
        "no-empty": { "$ref": "#/definitions/rule" },
        "no-ex-assign": { "$ref": "#/definitions/rule" },
        "no-extra-boolean-cast": { "$ref": "#/definitions/rule" },
        "no-extra-parens": { "$ref": "#/definitions/rule" },
        "no-extra-semi": { "$ref": "#/definitions/rule" },
        "no-func-assign": { "$ref": "#/definitions/rule" },
        "no-inner-declarations": { "$ref": "#/definitions/rule" },
        "no-invalid-regexp": { "$ref": "#/definitions/rule" },
        "no-irregular-whitespace": { "$ref": "#/definitions/rule" },
        "no-negated-in-lhs": { "$ref": "#/definitions/rule" },
        "no-obj-calls": { "$ref": "#/definitions/rule" },
        "no-regex-spaces": { "$ref": "#/definitions/rule" },
        "no-sparse-arrays": { "$ref": "#/definitions/rule" },
        "no-unreachable": { "$ref": "#/definitions/rule" },
        "use-isnan": { "$ref": "#/definitions/rule" },
        "valid-jsdoc": { "$ref": "#/definitions/rule" },
        "valid-typeof": { "$ref": "#/definitions/rule" },
        "no-unexpected-multiline": { "$ref": "#/definitions/rule" }
      }
    },
    "bestPractices": {
      "properties": {
        "accessor-pairs": { "$ref": "#/definitions/rule" },
        "block-scoped-var": { "$ref": "#/definitions/rule" },
        "complexity": { "$ref": "#/definitions/rule" },
        "consistent-return": { "$ref": "#/definitions/rule" },
        "curly": { "$ref": "#/definitions/rule" },
        "default-case": { "$ref": "#/definitions/rule" },
        "dot-notation": { "$ref": "#/definitions/rule" },
        "dot-location": { "$ref": "#/definitions/rule" },
        "eqeqeq": { "$ref": "#/definitions/rule" },
        "guard-for-in": { "$ref": "#/definitions/rule" },
        "no-alert": { "$ref": "#/definitions/rule" },
        "no-caller": { "$ref": "#/definitions/rule" },
        "no-div-regex": { "$ref": "#/definitions/rule" },
        "no-else-return": { "$ref": "#/definitions/rule" },
        "no-empty-label": { "$ref": "#/definitions/rule" },
        "no-eq-null": { "$ref": "#/definitions/rule" },
        "no-eval": { "$ref": "#/definitions/rule" },
        "no-extend-native": { "$ref": "#/definitions/rule" },
        "no-extra-bind": { "$ref": "#/definitions/rule" },
        "no-fallthrough": { "$ref": "#/definitions/rule" },
        "no-floating-decimal": { "$ref": "#/definitions/rule" },
        "no-implicit-coercion": { "$ref": "#/definitions/rule" },
        "no-implied-eval": { "$ref": "#/definitions/rule" },
        "no-implied-globals": { "$ref": "#/definitions/rule" },
        "no-invalid-this": { "$ref": "#/definitions/rule" },
        "no-iterator": { "$ref": "#/definitions/rule" },
        "no-labels": { "$ref": "#/definitions/rule" },
        "no-lone-blocks": { "$ref": "#/definitions/rule" },
        "no-loop-func": { "$ref": "#/definitions/rule" },
        "no-multi-spaces": { "$ref": "#/definitions/rule" },
        "no-multi-str": { "$ref": "#/definitions/rule" },
        "no-native-reassign": { "$ref": "#/definitions/rule" },
        "no-new-func": { "$ref": "#/definitions/rule" },
        "no-new-wrappers": { "$ref": "#/definitions/rule" },
        "no-new": { "$ref": "#/definitions/rule" },
        "no-octal-escape": { "$ref": "#/definitions/rule" },
        "no-octal": { "$ref": "#/definitions/rule" },
        "no-param-reassign": { "$ref": "#/definitions/rule" },
        "no-process-env": { "$ref": "#/definitions/rule" },
        "no-proto": { "$ref": "#/definitions/rule" },
        "no-redeclare": { "$ref": "#/definitions/rule" },
        "no-return-assign": { "$ref": "#/definitions/rule" },
        "no-script-url": { "$ref": "#/definitions/rule" },
        "no-self-compare": { "$ref": "#/definitions/rule" },
        "no-sequences": { "$ref": "#/definitions/rule" },
        "no-throw-literal": { "$ref": "#/definitions/rule" },
        "no-unused-expressions": { "$ref": "#/definitions/rule" },
        "no-useless-call": { "$ref": "#/definitions/rule" },
        "no-useless-concat": { "$ref": "#/definitions/rule" },
        "no-void ": { "$ref": "#/definitions/rule" },
        "no-warning-comments": { "$ref": "#/definitions/rule" },
        "no-with": { "$ref": "#/definitions/rule" },
        "radix": { "$ref": "#/definitions/rule" },
        "vars-on-top": { "$ref": "#/definitions/rule" },
        "wrap-iife": { "$ref": "#/definitions/rule" },
        "yoda": { "$ref": "#/definitions/rule" }
      }
    },
    "strictMode": {
      "properties": {
        "strict": { "$ref": "#/definitions/rule" }
      }
    },
    "variables": {
      "properties": {
        "init-declarations": { "$ref": "#/definitions/rule" },
        "no-catch-shadow": { "$ref": "#/definitions/rule" },
        "no-delete-var": { "$ref": "#/definitions/rule" },
        "no-label-var": { "$ref": "#/definitions/rule" },
        "no-shadow-restricted-names": { "$ref": "#/definitions/rule" },
        "no-shadow": { "$ref": "#/definitions/rule" },
        "no-undef-init": { "$ref": "#/definitions/rule" },
        "no-undef": { "$ref": "#/definitions/rule" },
        "no-undefined": { "$ref": "#/definitions/rule" },
        "no-unused-vars": { "$ref": "#/definitions/rule" },
        "no-use-before-define": { "$ref": "#/definitions/rule" }
      }
    },
    "nodeAndCommonJs": {
      "properties": {
        "array-callback-return": { "$ref": "#/definitions/rule" },
        "callback-return": { "$ref": "#/definitions/rule" },
        "global-require": { "$ref": "#/definitions/rule" },
        "handle-callback-err": { "$ref": "#/definitions/rule" },
        "no-mixed-requires": { "$ref": "#/definitions/rule" },
        "no-new-require": { "$ref": "#/definitions/rule" },
        "no-path-concat": { "$ref": "#/definitions/rule" },
        "no-process-exit": { "$ref": "#/definitions/rule" },
        "no-restricted-imports": { "$ref": "#/definitions/rule" },
        "no-restricted-modules": { "$ref": "#/definitions/rule" },
        "no-sync": { "$ref": "#/definitions/rule" }
      }
    },
    "stylisticIssues": {
      "properties": {
        "array-bracket-spacing": { "$ref": "#/definitions/rule" },
        "block-spacing": { "$ref": "#/definitions/rule" },
        "brace-style": { "$ref": "#/definitions/rule" },
        "camelcase": { "$ref": "#/definitions/rule" },
        "comma-spacing": { "$ref": "#/definitions/rule" },
        "comma-style": { "$ref": "#/definitions/rule" },
        "computed-property-spacing": { "$ref": "#/definitions/rule" },
        "consistent-this": { "$ref": "#/definitions/rule" },
        "eol-last": { "$ref": "#/definitions/rule" },
        "func-names": { "$ref": "#/definitions/rule" },
        "func-style": { "$ref": "#/definitions/rule" },
        "id-length": { "$ref": "#/definitions/rule" },
        "id-match": { "$ref": "#/definitions/rule" },
        "indent": { "$ref": "#/definitions/rule" },
        "jsx-quotes": { "$ref": "#/definitions/rule" },
        "key-spacing": { "$ref": "#/definitions/rule" },
        "lines-around-comment": { "$ref": "#/definitions/rule" },
        "linebreak-style": { "$ref": "#/definitions/rule" },
        "max-nested-callbacks": { "$ref": "#/definitions/rule" },
        "new-cap": { "$ref": "#/definitions/rule" },
        "new-parens": { "$ref": "#/definitions/rule" },
        "newline-after-var": { "$ref": "#/definitions/rule" },
        "no-array-constructor": { "$ref": "#/definitions/rule" },
        "no-continue": { "$ref": "#/definitions/rule" },
        "no-inline-comments": { "$ref": "#/definitions/rule" },
        "no-lonely-if": { "$ref": "#/definitions/rule" },
        "no-mixed-spaces-and-tabs": { "$ref": "#/definitions/rule" },
        "no-multiple-empty-lines": { "$ref": "#/definitions/rule" },
        "no-nested-ternary": { "$ref": "#/definitions/rule" },
        "no-negated-condition": { "$ref": "#/definitions/rule" },
        "no-new-object": { "$ref": "#/definitions/rule" },
        "no-restricted-syntax": { "$ref": "#/definitions/rule" },
        "no-spaced-func": { "$ref": "#/definitions/rule" },
        "no-ternary": { "$ref": "#/definitions/rule" },
        "no-trailing-spaces": { "$ref": "#/definitions/rule" },
        "no-underscore-dangle": { "$ref": "#/definitions/rule" },
        "no-unneeded-ternary": { "$ref": "#/definitions/rule" },
        "object-curly-spacing": { "$ref": "#/definitions/rule" },
        "one-var": { "$ref": "#/definitions/rule" },
        "operator-assignment": { "$ref": "#/definitions/rule" },
        "operator-linebreak": { "$ref": "#/definitions/rule" },
        "padded-blocks": { "$ref": "#/definitions/rule" },
        "quote-props": { "$ref": "#/definitions/rule" },
        "quotes": { "$ref": "#/definitions/rule" },
        "require-jsdoc": { "$ref": "#/definitions/rule" },
        "semi-spacing": { "$ref": "#/definitions/rule" },
        "semi": { "$ref": "#/definitions/rule" },
        "sort-vars": { "$ref": "#/definitions/rule" },
        "space-after-keywords": { "$ref": "#/definitions/rule" },
        "space-before-keywords": { "$ref": "#/definitions/rule" },
        "space-before-blocks": { "$ref": "#/definitions/rule" },
        "space-before-function-paren": { "$ref": "#/definitions/rule" },
        "space-in-parens": { "$ref": "#/definitions/rule" },
        "space-infix-ops": { "$ref": "#/definitions/rule" },
        "space-return-throw-case": { "$ref": "#/definitions/rule" },
        "space-unary-ops": { "$ref": "#/definitions/rule" },
        "spaced-comment": { "$ref": "#/definitions/rule" },
        "wrap-regex": { "$ref": "#/definitions/rule" },
        "yield-star-spacing": { "$ref": "#/definitions/rule" }
      }
    },
    "ecmaScript6": {
      "properties": {
        "arrow-parens": { "$ref": "#/definitions/rule" },
        "arrow-spacing": { "$ref": "#/definitions/rule" },
        "constructor-super": { "$ref": "#/definitions/rule" },
        "generator-star-spacing": { "$ref": "#/definitions/rule" },
        "no-class-assign": { "$ref": "#/definitions/rule" },
        "no-const-assign": { "$ref": "#/definitions/rule" },
        "no-dupe-class-members": { "$ref": "#/definitions/rule" },
        "no-this-before-super": { "$ref": "#/definitions/rule" },
        "no-var": { "$ref": "#/definitions/rule" },
        "object-shorthand": { "$ref": "#/definitions/rule" },
        "prefer-arrow-callback": { "$ref": "#/definitions/rule" },
        "prefer-const": { "$ref": "#/definitions/rule" },
        "prefer-spread": { "$ref": "#/definitions/rule" },
        "prefer-reflect": { "$ref": "#/definitions/rule" },
        "prefer-template": { "$ref": "#/definitions/rule" },
        "prefer-rest-params": { "$ref": "#/definitions/rule" },
        "require-yield": { "$ref": "#/definitions/rule" }
      }
    },
    "legacy": {
      "properties": {
        "max-depth": { "$ref": "#/definitions/rule" },
        "max-len": { "$ref": "#/definitions/rule" },
        "max-params": { "$ref": "#/definitions/rule" },
        "max-statements": { "$ref": "#/definitions/rule" },
        "no-bitwise": { "$ref": "#/definitions/rule" },
        "no-plusplus": { "$ref": "#/definitions/rule" }
      }
    }
  },

  "properties": {
    "ecmaFeatures": {
      "description": "By default, ESLint supports only ECMAScript 5 syntax. You can override that setting to enable support for ECMAScript 6 as well as JSX by using configuration settings.",
      "type": "object",

      "properties": {
        "arrowFunctions": { "type": "boolean" },
        "binaryLiterals": { "type": "boolean" },
        "blockBindings": { "type": "boolean" },
        "classes": { "type": "boolean" },
        "defaultParams": { "type": "boolean" },
        "destructuring": { "type": "boolean" },
        "experimentalObjectRestSpread ": { "type": "boolean" },
        "forOf": { "type": "boolean" },
        "generators": { "type": "boolean" },
        "globalReturn ": { "type": "boolean" },
        "jsx": { "type": "boolean" },
        "modules": { "type": "boolean" },
        "objectLiteralComputedProperties": { "type": "boolean" },
        "objectLiteralDuplicateProperties": { "type": "boolean" },
        "objectLiteralShorthandMethods": { "type": "boolean" },
        "objectLiteralShorthandProperties": { "type": "boolean" },
        "octalLiterals": { "type": "boolean" },
        "regexUFlag": { "type": "boolean" },
        "regexYFlag": { "type": "boolean" },
        "restParams": { "type": "boolean" },
        "spread": { "type": "boolean" },
        "superInFunctions": { "type": "boolean" },
        "templateStrings": { "type": "boolean" },
        "unicodeCodePointEscapes": { "type": "boolean" }
      }
    },
    "env": {
      "description": "An environment defines global variables that are predefined.",
      "type": "object",

      "properties": {
        "amd": {
          "type": "boolean",
          "description": "defines require() and define() as global variables as per the amd spec"
        },
        "applescript": {
          "type": "boolean",
          "description": "AppleScript global variables"
        },
        "atomtest": {
          "type": "boolean",
          "description": "Atom test helper globals"
        },
        "browser": {
          "type": "boolean",
          "description": "browser global variables"
        },
        "commonjs": {
          "type": "boolean",
          "description": "CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack)"
        },
        "embertest": {
          "type": "boolean",
          "description": "Ember test helper globals"
        },
        "es6": {
          "type": "boolean",
          "description": "enable all ECMAScript 6 features except for modules"
        },
        "greasemonkey": {
          "type": "boolean",
          "description": "GreaseMonkey globals"
        },
        "jasmine": {
          "type": "boolean",
          "description": "adds all of the Jasmine testing global variables for version 1.3 and 2.0"
        },
        "jest": {
          "type": "boolean",
          "description": "Jest global variables"
        },
        "jquery": {
          "type": "boolean",
          "description": "jQuery global variables"
        },
        "meteor": {
          "type": "boolean",
          "description": "Meteor global variables"
        },
        "mocha": {
          "type": "boolean",
          "description": "adds all of the Mocha test global variables"
        },
        "mongo": {
          "type": "boolean",
          "description": "MongoDB global variables"
        },
        "nashorn": {
          "type": "boolean",
          "description": "Java 8 Nashorn global variables"
        },
        "node": {
          "type": "boolean",
          "description": "Node.js global variables and Node.js scoping"
        },
        "phantomjs": {
          "type": "boolean",
          "description": "PhantomJS global variables"
        },
        "prototypejs": {
          "type": "boolean",
          "description": "Prototype.js global variables"
        },
        "protractor": {
          "type": "boolean",
          "description": "Protractor global variables"
        },
        "qunit": {
          "type": "boolean",
          "description": "QUnit global variables"
        },
        "serviceworker": {
          "type": "boolean",
          "description": "Service Worker global variables"
        },
        "shelljs": {
          "type": "boolean",
          "description": "ShellJS global variables"
        },
        "webextensions": {
          "type": "boolean",
          "description": "WebExtensions globals"
        },
        "worker": {
          "type": "boolean",
          "description": "web workers global variables"
        }
      }
    },
    "extends": {
      "description": "If you want to extend a specific configuration file, you can use the extends property and specify the path to the file. The path can be either relative or absolute.",
      "type": [ "string", "array" ],
      "items": {
        "type": "string"
      }
    },
    "globals": {
      "description": "Set each global variable name equal to true to allow the variable to be overwritten or false to disallow overwriting.",
      "type": "object",

      "additionalProperties": {
        "type": "boolean"
      }
    },
    "ignore": {
      "description": "A list of file paths/globs that eslint should ignore",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "parser": {
      "type": "string"
    },
    "parserOptions": {
      "properties": {
        "ecmaFeatures": {
          "$ref": "#/properties/ecmaFeatures"
        },
        "ecmaVersion": {
          "enum": [ 3, 5, 6 ],
          "default": 5
        },
        "sourceType": {
          "enum": [ "script", "module" ],
          "default": "script"
        }
      }
    },
    "plugins": {
      "description": "ESLint supports the use of third-party plugins. Before using the plugin you have to install it using npm.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "rules": {
      "description": "ESLint comes with a large number of rules. You can modify which rules your project uses either using configuration comments or configuration files.",
      "type": "object",

      "allOf": [
        { "$ref": "#/definitions/possibleErrors" },
        { "$ref": "#/definitions/bestPractices" },
        { "$ref": "#/definitions/strictMode" },
        { "$ref": "#/definitions/variables" },
        { "$ref": "#/definitions/nodeAndCommonJs" },
        { "$ref": "#/definitions/stylisticIssues" },
        { "$ref": "#/definitions/ecmaScript6" },
        { "$ref": "#/definitions/legacy" }
      ]
    },
    "settings": {
      "description": "ESLint supports adding shared settings into configuration file. You can add settings object to ESLint configuration file and it will be supplied to every rule that will be executed. This may be useful if you are adding custom rules and want them to have access to the same information and be easily configurable.",
      "type": "object"
    }
  }
}
