{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "allRules": {
      "allOf": [
        {
          "$ref": "#/definitions/atRule"
        },
        {
          "$ref": "#/definitions/block"
        },
        {
          "$ref": "#/definitions/color"
        },
        {
          "$ref": "#/definitions/comment"
        },
        {
          "$ref": "#/definitions/customMedia"
        },
        {
          "$ref": "#/definitions/customProperty"
        },
        {
          "$ref": "#/definitions/declaration"
        },
        {
          "$ref": "#/definitions/declarationBlock"
        },
        {
          "$ref": "#/definitions/font"
        },
        {
          "$ref": "#/definitions/function"
        },
        {
          "$ref": "#/definitions/generalSheet"
        },
        {
          "$ref": "#/definitions/keyframeDeclaration"
        },
        {
          "$ref": "#/definitions/length"
        },
        {
          "$ref": "#/definitions/mediaFeature"
        },
        {
          "$ref": "#/definitions/mediaQueryList"
        },
        {
          "$ref": "#/definitions/number"
        },
        {
          "$ref": "#/definitions/property"
        },
        {
          "$ref": "#/definitions/rootRule"
        },
        {
          "$ref": "#/definitions/rule"
        },
        {
          "$ref": "#/definitions/selector"
        },
        {
          "$ref": "#/definitions/selectorList"
        },
        {
          "$ref": "#/definitions/shorthandProperty"
        },
        {
          "$ref": "#/definitions/string"
        },
        {
          "$ref": "#/definitions/stylelintDisableComment"
        },
        {
          "$ref": "#/definitions/time"
        },
        {
          "$ref": "#/definitions/unit"
        },
        {
          "$ref": "#/definitions/value"
        },
        {
          "$ref": "#/definitions/valueList"
        }
      ],
      "type": "object"
    },
    "alwaysMultiLineRule": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "enum": ["always", "always-multi-line", []],
          "type": "string"
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": ["always", "always-multi-line", {}],
                "type": "string"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["string", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "alwaysNeverRule": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "enum": ["always", "never", []],
          "type": "string"
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": ["always", "never", {}],
                "type": "string"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["string", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "arrayStringRule": {
      "oneOf": [
        {
          "type": ["null", "string"]
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": [[], {}],
                "type": "string"
              },
              {
                "$ref": "#/definitions/simpleArrayStringRule"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["string", "array", "object"]
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "atRule": {
      "properties": {
        "at-rule-blacklist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a blacklist of disallowed at-rules"
        },
        "at-rule-empty-line-before": {
          "description": "Require or disallow an empty line before at-rules",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["always", "never", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["always", "never", {}],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "except": {
                        "items": {
                          "enum": [
                            "after-same-name",
                            "inside-block",
                            "blockless-after-same-name-blockless",
                            "blockless-after-blockless",
                            "first-nested"
                          ],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignore": {
                        "items": {
                          "enum": [
                            "after-comment",
                            "first-nested",
                            "inside-block",
                            "blockless-after-same-name-blockless",
                            "blockless-after-blockless"
                          ],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignoreAtRules": {
                        "$ref": "#/definitions/simpleStringOrArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "at-rule-name-case": {
          "$ref": "#/definitions/lowerUpperRule",
          "description": "Specify lowercase or uppercase for at-rules names"
        },
        "at-rule-name-newline-after": {
          "$ref": "#/definitions/alwaysMultiLineRule",
          "description": "Require a newline after at-rule names"
        },
        "at-rule-name-space-after": {
          "description": "Require a single space after at-rule names",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["always", "always-single-line", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["always", "always-single-line", {}],
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "at-rule-no-unknown": {
          "description": "Disallow unknown at-rules",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignoreAtRules": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "at-rule-no-vendor-prefix": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow vendor prefixes for at-rules"
        },
        "at-rule-semicolon-newline-after": {
          "description": "Require a newline after the semicolon of at-rules",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["always", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["always", {}],
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "at-rule-whitelist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a whitelist of allowed at-rules"
        }
      }
    },
    "block": {
      "properties": {
        "block-closing-brace-empty-line-before": {
          "description": "Require or disallow an empty line before the closing brace of blocks",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["always-multi-line", "never", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["always-multi-line", "never", {}],
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "block-closing-brace-newline-after": {
          "$ref": "#/definitions/newlineSpaceWithIgnoreRule",
          "description": "Require a newline or disallow whitespace after the closing brace of blocks"
        },
        "block-closing-brace-newline-before": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace before the closing brace of blocks"
        },
        "block-closing-brace-space-afte": {
          "$ref": "#/definitions/newlineSpaceRule",
          "description": "Require a single space or disallow whitespace after the closing brace of blocks"
        },
        "block-closing-brace-space-before": {
          "$ref": "#/definitions/newlineSpaceRule",
          "description": "Require a single space or disallow whitespace before the closing brace of blocks"
        },
        "block-no-empty": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow empty blocks"
        },
        "block-no-single-line": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow single-line blocks"
        },
        "block-opening-brace-newline-after": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline after the opening brace of blocks"
        },
        "block-opening-brace-newline-before": {
          "description": "Require a newline or disallow whitespace before the opening brace of blocks",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "always",
                "always-single-line",
                "never-single-line",
                "always-multi-line",
                "never-multi-line",
                []
              ],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "always",
                      "always-single-line",
                      "never-single-line",
                      "always-multi-line",
                      "never-multi-line",
                      {}
                    ],
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "block-opening-brace-space-after": {
          "$ref": "#/definitions/newlineSpaceRule",
          "description": "Require a single space or disallow whitespace after the opening brace of blocks"
        },
        "block-opening-brace-space-before": {
          "$ref": "#/definitions/newlineSpaceWithIgnoreRule",
          "description": "Require a single space or disallow whitespace before the opening brace of blocks"
        }
      }
    },
    "booleanRule": {
      "default": true,
      "oneOf": [
        {
          "type": "null"
        },
        {
          "enum": [true, []],
          "type": "boolean"
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": [true, {}],
                "type": "boolean"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["boolean", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "boolean", "array"]
    },
    "color": {
      "properties": {
        "color-hex-case": {
          "$ref": "#/definitions/lowerUpperRule",
          "description": "Specify lowercase or uppercase for hex colors"
        },
        "color-hex-length": {
          "description": "Specify short or long notation for hex colors",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["short", "long", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["short", "long", {}],
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "color-named": {
          "description": "Require (where possible) or disallow named colors",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["always-where-possible", "never", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["always-where-possible", "never", {}],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignore": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "color-no-hex": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow hex colors"
        },
        "color-no-invalid-hex": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow invalid hex colors"
        }
      }
    },
    "comment": {
      "properties": {
        "comment-empty-line-before": {
          "description": "Require or disallow an empty line before comments",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["always", "never", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["always", "never", {}],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "except": {
                        "description": "Reverse the primary option for comments that are nested and the first child of their parent node",
                        "items": {
                          "enum": ["first-nested"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignore": {
                        "description": "Don't require an empty line between comments",
                        "items": {
                          "enum": [
                            "between-comments",
                            "after-comment",
                            "stylelint-commands"
                          ],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "comment-no-empty": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow empty comments"
        },
        "comment-whitespace-inside": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require or disallow whitespace on the inside of comment markers"
        },
        "comment-word-blacklist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a blacklist of disallowed words within comments"
        }
      }
    },
    "coreRule": {
      "properties": {
        "disableFix": {
          "type": "boolean"
        },
        "message": {
          "description": "Custom message that will be used in errors and warnings",
          "type": "string"
        },
        "reportDisables": {
          "type": "boolean"
        },
        "severity": {
          "description": "Message status",
          "enum": ["warning", "error"],
          "type": "string"
        }
      }
    },
    "customMedia": {
      "properties": {
        "custom-media-pattern": {
          "$ref": "#/definitions/stringRule",
          "description": "Specify a pattern for custom media query names"
        }
      }
    },
    "customProperty": {
      "properties": {
        "custom-property-empty-line-before": {
          "description": "Require or disallow an empty line before custom properties",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["always", "never", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["always", "never", {}],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "except": {
                        "description": "Reverse the primary option for custom properties that come after a comment, custom property or first child of their parent node",
                        "items": {
                          "enum": [
                            "after-comment",
                            "after-custom-property",
                            "first-nested"
                          ],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignore": {
                        "description": "Ignore custom properties that are preceded by comments or inside single-line blocks",
                        "items": {
                          "enum": ["after-comment", "inside-single-line-block"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "custom-property-no-outside-root": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow custom properties outside of `:root` rules"
        },
        "custom-property-pattern": {
          "$ref": "#/definitions/stringRule",
          "description": "Specify a pattern for custom properties"
        }
      }
    },
    "declaration": {
      "properties": {
        "declaration-bang-space-after": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace after the bang of declarations"
        },
        "declaration-bang-space-before": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace before the bang of declarations"
        },
        "declaration-colon-newline-after": {
          "$ref": "#/definitions/alwaysMultiLineRule",
          "description": "Require a newline or disallow whitespace after the colon of declarations"
        },
        "declaration-colon-space-after": {
          "description": "Require a single space or disallow whitespace after the colon of declarations",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["always", "never", "always-single-line", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["always", "never", "always-single-line", {}],
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "declaration-colon-space-before": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace before the colon of declarations"
        },
        "declaration-empty-line-before": {
          "description": "Require or disallow an empty line before declarations",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["always", "never", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["always", "never", {}],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "except": {
                        "items": {
                          "enum": [
                            "after-comment",
                            "after-declaration",
                            "first-nested"
                          ],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignore": {
                        "items": {
                          "enum": [
                            "after-comment",
                            "after-declaration",
                            "inside-single-line-block"
                          ],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "declaration-no-important": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow `!important` within declarations"
        },
        "declaration-property-unit-blacklist": {
          "$ref": "#/definitions/objectRule",
          "description": "Specify a blacklist of disallowed property and unit pairs within declarations"
        },
        "declaration-property-unit-whitelist": {
          "$ref": "#/definitions/objectRule",
          "description": "Specify a whitelist of allowed property and unit pairs within declarations"
        },
        "declaration-property-value-blacklist": {
          "$ref": "#/definitions/objectRule",
          "description": "Specify a blacklist of disallowed property and value pairs within declarations"
        },
        "declaration-property-value-whitelist": {
          "$ref": "#/definitions/objectRule",
          "description": "Specify a whitelist of allowed property and value pairs within declarations"
        }
      }
    },
    "declarationBlock": {
      "properties": {
        "declaration-block-no-duplicate-properties": {
          "description": "Disallow duplicate properties within declaration blocks",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignore": {
                        "items": {
                          "enum": [
                            "consecutive-duplicates",
                            "consecutive-duplicates-with-different-values"
                          ],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignoreProperties": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "declaration-block-no-ignored-properties": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow property values that are ignored due to another property value in the same rule"
        },
        "declaration-block-no-redundant-longhand-properties": {
          "description": "Disallow longhand properties that can be combined into one shorthand property",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignoreShorthands": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "declaration-block-no-shorthand-property-overrides": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow shorthand properties that override related longhand properties"
        },
        "declaration-block-properties-order": {
          "description": "Specify the order of properties within declaration blocks",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["alphabetical", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["alphabetical", [], {}],
                    "type": "string"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/simpleArrayStringRule"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "dependencies": {
                      "order": ["properties"],
                      "properties": ["order"]
                    },
                    "properties": {
                      "order": {
                        "enum": ["strict", "flexible"],
                        "type": "string"
                      },
                      "properties": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      },
                      "unspecified": {
                        "description": "These options only apply if you've defined your own array of properties",
                        "enum": [
                          "top",
                          "bottom",
                          "bottomAlphabetical",
                          "ignore"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "array", "object"]
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "declaration-block-semicolon-newline-after": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace after the semicolons of declaration blocks"
        },
        "declaration-block-semicolon-newline-before": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace before the semicolons of declaration blocks"
        },
        "declaration-block-semicolon-space-after": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace after the semicolons of declaration blocks"
        },
        "declaration-block-semicolon-space-before": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace before the semicolons of declaration blocks"
        },
        "declaration-block-single-line-max-declarations": {
          "$ref": "#/definitions/integerRule",
          "description": "Limit the number of declaration within a single line declaration block"
        },
        "declaration-block-trailing-semicolon": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require or disallow a trailing semicolon within declaration blocks"
        }
      }
    },
    "font": {
      "properties": {
        "font-family-name-quotes": {
          "description": "Specify whether or not quotation marks should be used around font family names",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "always-where-required",
                "always-where-recommended",
                "always-unless-keyword",
                []
              ],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "always-where-required",
                      "always-where-recommended",
                      "always-unless-keyword",
                      {}
                    ],
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "font-weight-notation": {
          "description": "Require numeric or named (where possible) `font-weight` values. Also, when named values are expected, require only valid names",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["numeric", "named-where-possible", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["numeric", "named-where-possible", {}],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignore": {
                        "items": {
                          "enum": ["relative"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        }
      }
    },
    "function": {
      "properties": {
        "function-blacklist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a blacklist of disallowed functions"
        },
        "function-calc-no-unspaced-operator": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow an unspaced operator within `calc` functions"
        },
        "function-comma-newline-after": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace after the commas of functions"
        },
        "function-comma-newline-before": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace before the commas of functions"
        },
        "function-comma-space-after": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace after the commas of functions"
        },
        "function-comma-space-before": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace before the commas of functions"
        },
        "function-linear-gradient-no-nonstandard-direction": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow direction values in `linear-gradient()` calls that are not valid according to the standard syntax"
        },
        "function-max-empty-lines": {
          "$ref": "#/definitions/integerRule",
          "description": "Limit the number of adjacent empty lines within functions"
        },
        "function-name-case": {
          "description": "Specify lowercase or uppercase for function names",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["lower", "upper", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["lower", "upper", {}],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "description": "Ignore case of function names",
                    "properties": {
                      "ignoreFunctions": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "function-parentheses-newline-inside": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace on the inside of the parentheses of functions"
        },
        "function-parentheses-space-inside": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace on the inside of the parentheses of functions"
        },
        "function-url-data-uris": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require or disallow data URIs for urls"
        },
        "function-url-no-scheme-relative": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow scheme-relative urls"
        },
        "function-url-quotes": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require or disallow quotes for urls"
        },
        "function-url-scheme-whitelist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a whitelist of allowed url schemes"
        },
        "function-whitelist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a whitelist of allowed functions"
        },
        "function-whitespace-after": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require or disallow whitespace after functions"
        }
      }
    },
    "generalSheet": {
      "properties": {
        "indentation": {
          "description": "Specify indentation",
          "oneOf": [
            {
              "type": ["null", "integer"]
            },
            {
              "enum": ["tab", []],
              "type": "string"
            },
            {
              "items": {
                "type": "integer"
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true
            },
            {
              "items": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "enum": ["tab", {}],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "except": {
                        "description": "Do not indent for these things",
                        "items": {
                          "enum": ["block", "param", "value"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignore": {
                        "description": "Ignore the indentation inside parentheses",
                        "items": {
                          "enum": ["inside-parens", "param", "value"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "indentInsideParens": {
                        "description": "If `true`, the closing brace of a block (rule or at-rule) will be expected at the same indentation level as the block's inner nodes",
                        "enum": ["twice", "once-at-root-twice-in-block"],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["integer", "string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "integer", "string", "array"]
        },
        "max-empty-lines": {
          "$ref": "#/definitions/integerRule",
          "description": "Limit the number of adjacent empty lines"
        },
        "max-line-length": {
          "description": "Limit the length of a line",
          "oneOf": [
            {
              "type": ["null", "integer"]
            },
            {
              "items": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignore": {
                        "anyOf": [
                          {
                            "enum": ["non-comments", "comments"],
                            "type": "string"
                          },
                          {
                            "items": {
                              "enum": ["non-comments", "comments"],
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          }
                        ],
                        "type": ["string", "array"]
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["integer", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "integer", "array"]
        },
        "max-nesting-depth": {
          "description": "Limit the allowed nesting depth",
          "oneOf": [
            {
              "type": ["null", "integer"]
            },
            {
              "items": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignore": {
                        "items": {
                          "enum": ["blockless-at-rules", "pseudo-classes"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignoreAtRules": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["integer", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "integer", "array"]
        },
        "no-browser-hacks": {
          "description": "Disallow browser hacks that are irrelevant to the browsers you are targeting",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "browsers": {
                        "$ref": "#/definitions/simpleStringOrArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "no-descending-specificity": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow selectors of lower specificity from coming after overriding selectors of higher specificity"
        },
        "no-duplicate-selectors": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow duplicate selectors within a stylesheet"
        },
        "no-empty-source": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow empty sources"
        },
        "no-eol-whitespace": {
          "description": "Disallow end-of-line whitespace",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignore": {
                        "items": {
                          "enum": ["empty-lines"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "no-extra-semicolons": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow extra semicolons"
        },
        "no-indistinguishable-colors": {
          "description": "Disallow colors that are suspiciously close to being identical",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignore": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      },
                      "threshold": {
                        "default": 3,
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer"
                      },
                      "whitelist": {
                        "description": "An array of color pairs to ignore. Each pair is an array with two items",
                        "items": {
                          "$ref": "#/definitions/simpleArrayStringRule"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "no-invalid-double-slash-comments": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow double-slash comments `(//...)` which are not supported by CSS and could lead to unexpected results"
        },
        "no-missing-end-of-source-newline": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow missing end-of-source newlines"
        },
        "no-unknown-animations": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow animation names that do not correspond to a `@keyframes` declaration"
        },
        "no-unsupported-browser-features": {
          "description": "Disallow features that are unsupported by the browsers that you are targeting",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "browsers": {
                        "type": "string"
                      },
                      "ignore": {
                        "$ref": "#/definitions/simpleStringOrArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "unicode-bom": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require or disallow Unicode BOM"
        }
      }
    },
    "integerRule": {
      "oneOf": [
        {
          "type": ["null", "integer"]
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": [{}],
                "type": "integer"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["integer", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "integer", "array"]
    },
    "keyframeDeclaration": {
      "properties": {
        "keyframe-declaration-no-important": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow !important within keyframe declarations"
        }
      }
    },
    "length": {
      "properties": {
        "length-zero-no-unit": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow units for zero lengths"
        }
      }
    },
    "lowerUpperRule": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "enum": ["lower", "upper", []],
          "type": "string"
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": ["lower", "upper", {}],
                "type": "string"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["string", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "mediaFeature": {
      "properties": {
        "media-feature-colon-space-after": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace after the colon in media features"
        },
        "media-feature-colon-space-before": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace before the colon in media features"
        },
        "media-feature-name-case": {
          "$ref": "#/definitions/lowerUpperRule",
          "description": "Specify lowercase or uppercase for media feature names"
        },
        "media-feature-name-no-unknown": {
          "description": "Disallow unknown media feature names",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignoreMediaFeatureNames": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "media-feature-name-no-vendor-prefix": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow vendor prefixes for media feature names"
        },
        "media-feature-no-missing-punctuation": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow missing punctuation for non-boolean media features"
        },
        "media-feature-parentheses-space-inside": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace on the inside of the parentheses within media features"
        },
        "media-feature-range-operator-space-after": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace after the range operator in media features"
        },
        "media-feature-range-operator-space-before": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace before the range operator in media features"
        }
      }
    },
    "mediaQueryList": {
      "properties": {
        "media-query-list-comma-newline-after": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace after the commas of media query lists"
        },
        "media-query-list-comma-newline-before": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace before the commas of media query lists"
        },
        "media-query-list-comma-space-after": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace after the commas of media query lists"
        },
        "media-query-list-comma-space-before": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace before the commas of media query lists"
        }
      }
    },
    "newlineRule": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "enum": ["always", "always-multi-line", "never-multi-line", []],
          "type": "string"
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": ["always", "always-multi-line", "never-multi-line", {}],
                "type": "string"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["string", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "newlineSpaceRule": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "enum": [
            "always",
            "never",
            "always-single-line",
            "never-single-line",
            "always-multi-line",
            "never-multi-line",
            []
          ],
          "type": "string"
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": [
                  "always",
                  "never",
                  "always-single-line",
                  "never-single-line",
                  "always-multi-line",
                  "never-multi-line",
                  {}
                ],
                "type": "string"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["string", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "newlineSpaceWithIgnoreRule": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "enum": [
            "always",
            "never",
            "always-single-line",
            "never-single-line",
            "always-multi-line",
            "never-multi-line",
            []
          ],
          "type": "string"
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": [
                  "always",
                  "always-single-line",
                  "never-single-line",
                  "always-multi-line",
                  "never-multi-line",
                  {}
                ],
                "type": "string"
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "properties": {
                  "ignoreAtRules": {
                    "$ref": "#/definitions/simpleStringOrArrayStringRule"
                  }
                },
                "type": "object"
              }
            ],
            "type": ["string", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "number": {
      "properties": {
        "number-leading-zero": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require or disallow a leading zero for fractional numbers less than 1"
        },
        "number-max-precision": {
          "$ref": "#/definitions/integerRule",
          "description": "Limit the number of decimal places allowed in numbers"
        },
        "number-no-trailing-zeros": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow trailing zeros in numbers"
        }
      }
    },
    "objectRule": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "patternProperties": {
            ".*": {
              "$ref": "#/definitions/simpleArrayStringRule"
            }
          },
          "type": "object"
        },
        {
          "items": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "patternProperties": {
                  "^((?!message|severity).)*$": {
                    "$ref": "#/definitions/simpleArrayStringRule"
                  }
                },
                "type": "object"
              }
            ],
            "type": ["object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "object", "array"]
    },
    "property": {
      "properties": {
        "property-blacklist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a blacklist of disallowed properties"
        },
        "property-case": {
          "$ref": "#/definitions/lowerUpperRule",
          "description": "Specify lowercase or uppercase for properties"
        },
        "property-no-unknown": {
          "description": "Disallow unknown properties",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "checkPrefixed": {
                        "description": "If `true`, this rule will check vendor-prefixed properties",
                        "type": "boolean"
                      },
                      "ignoreProperties": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "property-no-vendor-prefix": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow vendor prefixes for properties"
        },
        "property-whitelist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a whitelist of allowed properties"
        }
      }
    },
    "rootRule": {
      "properties": {
        "root-no-standard-properties": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow standard properties inside `:root` rules"
        }
      }
    },
    "rule": {
      "properties": {
        "rule-nested-empty-line-before": {
          "description": "Require or disallow an empty line before nested rules",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "always",
                "never",
                "always-multi-line",
                "never-multi-line",
                []
              ],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "always",
                      "never",
                      "always-multi-line",
                      "never-multi-line",
                      {}
                    ],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "except": {
                        "description": "Reverse the primary option if the rule is the first in a block",
                        "items": {
                          "enum": ["first-nested"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignore": {
                        "description": "Ignore rules that come after a comment",
                        "items": {
                          "enum": ["after-comment"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "rule-non-nested-empty-line-before": {
          "description": "Require or disallow an empty line before non-nested rules",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "always",
                "never",
                "always-multi-line",
                "never-multi-line",
                []
              ],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "always",
                      "never",
                      "always-multi-line",
                      "never-multi-line",
                      {}
                    ],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "except": {
                        "description": "Reverse the primary option if the rule is the first in a block",
                        "items": {
                          "enum": ["after-single-line-comment"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignore": {
                        "description": "Ignore rules that come after a comment",
                        "items": {
                          "enum": ["after-comment"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        }
      }
    },
    "selector": {
      "properties": {
        "selector-attribute-brackets-space-inside": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace on the inside of the brackets within attribute selector"
        },
        "selector-attribute-operator-blacklist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a blacklist of disallowed attribute operators"
        },
        "selector-attribute-operator-space-after": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace after operators within attribute selectors"
        },
        "selector-attribute-operator-space-before": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace before operators within attribute selectors"
        },
        "selector-attribute-operator-whitelist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a whitelist of allowed attribute operators"
        },
        "selector-attribute-quotes": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require or disallow quotes for attribute values"
        },
        "selector-class-pattern": {
          "description": "Specify a pattern for class selectors",
          "oneOf": [
            {
              "type": ["null", "string"]
            },
            {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "resolveNestedSelectors": {
                        "default": false,
                        "description": "This option will resolve nested selectors with `&` interpolation",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "selector-combinator-space-after": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace after the combinators of selectors"
        },
        "selector-combinator-space-before": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace before the combinators of selectors"
        },
        "selector-descendant-combinator-no-non-space": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow non-space characters for descendant combinators of selectors"
        },
        "selector-id-pattern": {
          "$ref": "#/definitions/stringRule",
          "description": "Specify a pattern for id selectors"
        },
        "selector-max-compound-selectors": {
          "$ref": "#/definitions/integerRule",
          "description": "Limit the number of compound selectors in a selector"
        },
        "selector-max-empty-lines": {
          "$ref": "#/definitions/integerRule",
          "description": "Limit the number of adjacent empty lines within selectors"
        },
        "selector-max-specificity": {
          "$ref": "#/definitions/stringRule",
          "description": "Limit the specificity of selectors"
        },
        "selector-nested-pattern": {
          "$ref": "#/definitions/stringRule",
          "description": "Specify a pattern for the selectors of rules nested within rules"
        },
        "selector-no-attribute": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow attribute selectors"
        },
        "selector-no-combinator": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow combinators in selectors"
        },
        "selector-no-id": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow id selectors"
        },
        "selector-no-qualifying-type": {
          "description": "Disallow qualifying a selector by type",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignore": {
                        "items": {
                          "enum": ["attribute", "class", "id"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "selector-no-type": {
          "description": "Disallow type selectors",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignore": {
                        "items": {
                          "enum": ["compounded", "descendant"],
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ignoreTypes": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "selector-no-universal": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow the universal selector"
        },
        "selector-no-vendor-prefix": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow vendor prefixes for selectors"
        },
        "selector-pseudo-class-case": {
          "$ref": "#/definitions/lowerUpperRule",
          "description": "Specify lowercase or uppercase for pseudo-class selectors"
        },
        "selector-pseudo-class-no-unknown": {
          "description": "Disallow unknown pseudo-class selectors",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignorePseudoClasses": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "selector-pseudo-class-parentheses-space-inside": {
          "$ref": "#/definitions/alwaysNeverRule",
          "description": "Require a single space or disallow whitespace on the inside of the parentheses within pseudo-class selectors"
        },
        "selector-pseudo-class-whitelist": {
          "$ref": "#/definitions/arrayStringRule",
          "description": "Specify a whitelist of allowed pseudo-class selectors"
        },
        "selector-pseudo-element-case": {
          "$ref": "#/definitions/lowerUpperRule",
          "description": "Specify lowercase or uppercase for pseudo-element selectors"
        },
        "selector-pseudo-element-colon-notation": {
          "$ref": "#/definitions/singleDoubleRule",
          "description": "Specify single or double colon notation for applicable pseudo-elements"
        },
        "selector-pseudo-element-no-unknown": {
          "description": "Disallow unknown pseudo-element selectors",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignorePseudoElements": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "selector-root-no-composition": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow the composition of :root in selectors"
        },
        "selector-type-case": {
          "$ref": "#/definitions/lowerUpperRule",
          "description": "Specify lowercase or uppercase for type selectors"
        },
        "selector-type-no-unknown": {
          "description": "Disallow unknown type selectors",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignoreTypes": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        }
      }
    },
    "selectorList": {
      "properties": {
        "selector-list-comma-newline-after": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace after the commas of selector lists"
        },
        "selector-list-comma-newline-before": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace before the commas of selector lists"
        },
        "selector-list-comma-space-after": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace after the commas of selector lists"
        },
        "selector-list-comma-space-before": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace before the commas of selector lists"
        }
      }
    },
    "shorthandProperty": {
      "properties": {
        "shorthand-property-no-redundant-values": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow redundant values in shorthand properties"
        }
      }
    },
    "simpleArrayStringRule": {
      "items": {
        "type": "string"
      },
      "minItems": 1,
      "type": "array",
      "uniqueItems": true
    },
    "simpleStringOrArrayStringRule": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/simpleArrayStringRule"
        }
      ],
      "type": ["string", "array"]
    },
    "singleDoubleRule": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "enum": ["single", "double", []],
          "type": "string"
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": ["single", "double", {}],
                "type": "string"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["string", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "spaceRule": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "enum": [
            "always",
            "never",
            "always-single-line",
            "never-single-line",
            []
          ],
          "type": "string"
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": [
                  "always",
                  "never",
                  "always-single-line",
                  "never-single-line",
                  {}
                ],
                "type": "string"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["string", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "string": {
      "properties": {
        "string-no-newline": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow (unescaped) newlines in strings"
        },
        "string-quotes": {
          "$ref": "#/definitions/singleDoubleRule",
          "description": "Specify single or double quotes around strings"
        }
      }
    },
    "stringRule": {
      "oneOf": [
        {
          "type": ["null", "string"]
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": [{}],
                "type": "string"
              },
              {
                "$ref": "#/definitions/coreRule"
              }
            ],
            "type": ["string", "object"]
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "stylelintDisableComment": {
      "properties": {
        "stylelint-disable-reason": {
          "description": "Require a reason comment before or after `stylelint-disable` comments",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["always-before", "always-after", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["always-before", "always-after", {}],
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        }
      }
    },
    "time": {
      "properties": {
        "time-no-imperceptible": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow `animation` and `transition` less than or equal to 100ms"
        }
      }
    },
    "unit": {
      "properties": {
        "unit-blacklist": {
          "$ref": "#/definitions/unitRule",
          "description": "Specify a blacklist of disallowed units"
        },
        "unit-case": {
          "$ref": "#/definitions/lowerUpperRule",
          "description": "Specify lowercase or uppercase for units"
        },
        "unit-no-unknown": {
          "description": "Disallow unknown units",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [true, []],
              "type": "boolean"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": [true, {}],
                    "type": "boolean"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignoreUnits": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["boolean", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "boolean", "array"]
        },
        "unit-whitelist": {
          "$ref": "#/definitions/unitRule",
          "description": "Specify a whitelist of allowed units"
        }
      }
    },
    "unitRule": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "enum": [
            "em",
            "ex",
            "px",
            "%",
            "rem",
            "vw",
            "vh",
            "vm",
            "vmin",
            "vmax",
            "ch",
            "in",
            "cm",
            "mm",
            "q",
            "pt",
            "pc",
            "deg",
            "grad",
            "rad",
            "turn",
            "ms",
            "s",
            "Hz",
            "kHz",
            "dpi",
            "dpcm",
            "dppx",
            "fr",
            []
          ],
          "type": "string"
        },
        {
          "items": {
            "anyOf": [
              {
                "enum": [
                  "em",
                  "ex",
                  "px",
                  "%",
                  "rem",
                  "vw",
                  "vh",
                  "vm",
                  "vmin",
                  "vmax",
                  "ch",
                  "in",
                  "cm",
                  "mm",
                  "q",
                  "pt",
                  "pc",
                  "deg",
                  "grad",
                  "rad",
                  "turn",
                  "ms",
                  "s",
                  "Hz",
                  "kHz",
                  "dpi",
                  "dpcm",
                  "dppx",
                  "fr",
                  [],
                  {}
                ],
                "type": "string"
              },
              {
                "items": {
                  "enum": [
                    "em",
                    "ex",
                    "px",
                    "%",
                    "rem",
                    "vw",
                    "vh",
                    "vm",
                    "vmin",
                    "vmax",
                    "ch",
                    "in",
                    "cm",
                    "mm",
                    "q",
                    "pt",
                    "pc",
                    "deg",
                    "grad",
                    "rad",
                    "turn",
                    "ms",
                    "s",
                    "Hz",
                    "kHz",
                    "dpi",
                    "dpcm",
                    "dppx",
                    "fr"
                  ],
                  "type": "string"
                },
                "minItems": 1,
                "type": "array",
                "uniqueItems": true
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/coreRule"
                  }
                ],
                "properties": {
                  "ignoreProperties": {
                    "description": "Ignore units in the values of declarations with the specified properties",
                    "patternProperties": {
                      "(em|ex|ch|vw|vh|cm|mm|in|pt|pc|px|rem|vmin|vmax|%)": {
                        "$ref": "#/definitions/simpleArrayStringRule"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ],
            "type": ["string", "array", "object"]
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        }
      ],
      "type": ["null", "string", "array"]
    },
    "value": {
      "properties": {
        "value-keyword-case": {
          "description": "Specify lowercase or uppercase for keywords values",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": ["lower", "upper", []],
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "enum": ["lower", "upper", {}],
                    "type": "string"
                  },
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/coreRule"
                      }
                    ],
                    "properties": {
                      "ignoreKeywords": {
                        "$ref": "#/definitions/simpleArrayStringRule",
                        "description": "Ignore case of keywords values"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": ["string", "object"]
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "uniqueItems": true
            }
          ],
          "type": ["null", "string", "array"]
        },
        "value-no-vendor-prefix": {
          "$ref": "#/definitions/booleanRule",
          "description": "Disallow vendor prefixes for values"
        }
      }
    },
    "valueList": {
      "properties": {
        "value-list-comma-newline-after": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace after the commas of value lists"
        },
        "value-list-comma-newline-before": {
          "$ref": "#/definitions/newlineRule",
          "description": "Require a newline or disallow whitespace before the commas of value lists"
        },
        "value-list-comma-space-after": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace after the commas of value lists"
        },
        "value-list-comma-space-before": {
          "$ref": "#/definitions/spaceRule",
          "description": "Require a single space or disallow whitespace before the commas of value lists"
        },
        "value-list-max-empty-lines": {
          "$ref": "#/definitions/integerRule",
          "description": "Limit the number of adjacent empty lines within value lists"
        }
      }
    }
  },
  "id": "https://json.schemastore.org/stylelintrc.json",
  "properties": {
    "customSyntax": {
      "description": "Specify a custom syntax to use on your code.",
      "type": "string"
    },
    "defaultSeverity": {
      "description": "The default severity level for all rules that do not have a severity specified in their secondary options",
      "enum": ["warning", "error"],
      "type": "string"
    },
    "extends": {
      "$ref": "#/definitions/simpleStringOrArrayStringRule",
      "description": "Your configuration can extend an existing configuration(s) (whether your own or a third-party config)"
    },
    "ignoreDisables": {
      "description": "Ignore stylelint-disable (e.g. /* stylelint-disable block-no-empty */) comments.",
      "type": "boolean"
    },
    "ignoreFiles": {
      "$ref": "#/definitions/simpleStringOrArrayStringRule",
      "description": "Provide a glob or array of globs to ignore specific files"
    },
    "overrides": {
      "description": "Provide rule and behavior overrides for files that match particular glob patterns.",
      "items": {
        "properties": {
          "customSyntax": {
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rules": {
            "$ref": "#/definitions/allRules"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "plugins": {
      "$ref": "#/definitions/simpleArrayStringRule",
      "description": "Plugins are rules or sets of rules built by the community that support methodologies, toolsets, non-standard CSS features, or very specific use cases"
    },
    "processors": {
      "description": "Processors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifying results on their way out",
      "items": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "additionalItems": {
              "type": "object"
            },
            "items": [
              {
                "type": "string"
              }
            ],
            "type": "array"
          }
        ]
      },
      "type": "array"
    },
    "reportDescriptionlessDisables": {
      "$ref": "#/definitions/booleanRule",
      "description": "Report stylelint-disable comments without a description."
    },
    "reportInvalidScopeDisables": {
      "$ref": "#/definitions/booleanRule",
      "description": "Report stylelint-disable comments that don't match rules that are specified in the configuration object."
    },
    "reportNeedlessDisables": {
      "$ref": "#/definitions/booleanRule",
      "description": "Report stylelint-disable comments that don't actually match any lints that need to be disabled"
    },
    "rules": {
      "$ref": "#/definitions/allRules"
    }
  },
  "title": "JSON schema for the Stylelint configuration files",
  "type": "object"
}
