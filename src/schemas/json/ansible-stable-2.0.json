{
  "description": "Auto-Generated JSON Schema for Ansible-stable 2.0",
  "title": "Ansible 2.0",
  "items": {
    "anyOf": [
      {
        "required": [
          "command"
        ],
        "type": "object",
        "properties": {
          "args": {
            "type": "object",
            "properties": {
              "warn": {
                "type": "string"
              },
              "creates": {
                "type": "string"
              },
              "executable": {
                "type": "string"
              },
              "chdir": {
                "type": "string"
              },
              "removes": {
                "type": "string"
              }
            }
          },
          "command": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      {
        "required": [
          "script"
        ],
        "type": "object",
        "properties": {
          "args": {
            "type": "object",
            "properties": {
              "creates": {
                "type": "string"
              },
              "removes": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          },
          "script": {
            "type": "string"
          }
        }
      },
      {
        "required": [
          "shell"
        ],
        "type": "object",
        "properties": {
          "shell": {
            "type": "string"
          },
          "args": {
            "type": "object",
            "properties": {
              "warn": {
                "type": "string"
              },
              "creates": {
                "type": "string"
              },
              "executable": {
                "type": "string"
              },
              "chdir": {
                "type": "string"
              },
              "removes": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      {
        "required": [
          "raw"
        ],
        "type": "object",
        "properties": {
          "raw": {
            "type": "string"
          },
          "args": {
            "type": "object",
            "properties": {
              "executable": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "ecs_taskdefinition": {
            "required": [
              "state"
            ],
            "type": "object",
            "description": "Creates or terminates task definitions",
            "properties": {
              "family": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "containers": {
                "type": "string"
              },
              "volumes": {
                "type": "string"
              },
              "arn": {
                "type": "string"
              },
              "revision": {
                "description": "A revision number for the task definition",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "selinux": {
            "required": [
              "state"
            ],
            "type": "object",
            "description": "Configures the SELinux mode and policy. A reboot may be required after usage. Ansible will not issue this reboot but will let you know when it is required.",
            "properties": {
              "policy": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "conf": {
                "type": "string"
              }
            }
          },
          "consul": {
            "required": [
              "state"
            ],
            "type": "object",
            "description": "Registers services and checks for an agent with a consul cluster. A service is some process running on the agent node that should be advertised by consul's discovery mechanism. It may optionally supply a check definition, a periodic service test to notify the consul cluster of service's health.\nChecks may also be registered per node e.g. disk usage, or cpu usage and notify the health of the entire node to the cluster. Service level checks do not require a check name or id as these are derived by Consul from the Service name and id respectively by appending 'service:' Node level checks require a check_name and optionally a check_id.\nCurrently, there is no complete way to retrieve the script, interval or ttl metadata for a registered check. Without this metadata it is  not possible to tell if the data supplied with ansible represents a change to a check. As a result this does not attempt to determine changes and will always report a changed occurred. An api method is planned to supply this metadata so at that stage change management will be added.\nSee http://consul.io for more details.",
            "properties": {
              "interval": {
                "type": "string"
              },
              "http": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "check_name": {
                "type": "string"
              },
              "service_name": {
                "type": "string"
              },
              "notes": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "check_id": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "service_port": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "ttl": {
                "type": "string"
              },
              "service_id": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "alternatives": {
            "required": [
              "path",
              "name"
            ],
            "type": "object",
            "description": "Manages symbolic links using the 'update-alternatives' tool\nUseful when multiple programs are installed but provide similar functionality (e.g. different editors).",
            "properties": {
              "path": {
                "type": "string"
              },
              "link": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "gce_lb": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "members",
                        "nodes"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module can create and destroy Google Compute Engine C(loadbalancer) and C(httphealthcheck) resources.  The primary LB resource is the C(load_balancer) resource and the health check parameters are all prefixed with I(httphealthcheck). The full documentation for Google Compute Engine load balancing is at U(https://developers.google.com/compute/docs/load-balancing/).  However, the ansible module simplifies the configuration by following the libcloud model. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.",
            "properties": {
              "httphealthcheck_host": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "external_ip": {
                "type": "string"
              },
              "service_account_email": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "httphealthcheck_unhealthy_count": {
                "type": "string"
              },
              "httphealthcheck_healthy_count": {
                "type": "string"
              },
              "pem_file": {
                "type": "string"
              },
              "httphealthcheck_path": {
                "type": "string"
              },
              "port_range": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "httphealthcheck_timeout": {
                "type": "string"
              },
              "members": {
                "type": "string"
              },
              "httphealthcheck_port": {
                "type": "string"
              },
              "httphealthcheck_name": {
                "type": "string"
              },
              "nodes": {
                "type": "string"
              },
              "project_id": {
                "type": "string"
              },
              "httphealthcheck_interval": {
                "type": "string"
              }
            }
          },
          "ecs_cluster": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Creates or terminates ecs clusters.",
            "properties": {
              "delay": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "repeat": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "gce_tag": {
            "required": [
              "instance_name",
              "tags"
            ],
            "type": "object",
            "description": "This module can add or remove tags U(https://cloud.google.com/compute/docs/instances/#tags) to/from GCE instance.",
            "properties": {
              "zone": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "service_account_email": {
                "type": "string"
              },
              "pem_file": {
                "type": "string"
              },
              "instance_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "project_id": {
                "type": "string"
              }
            }
          },
          "zabbix_maintenance": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host_names",
                        "host_name"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_url",
                        "url"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "server_url"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "url"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host_groups",
                        "host_group"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will let you create Zabbix maintenance windows.",
            "properties": {
              "name": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "server_url": {
                "type": "string"
              },
              "host_names": {
                "type": "string"
              },
              "host_group": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "host_name": {
                "type": "string"
              },
              "host_groups": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "collect_data": {
                "type": "string"
              },
              "minutes": {
                "type": "string"
              },
              "desc": {
                "type": "string"
              }
            }
          },
          "kernel_blacklist": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or remove kernel modules from blacklist.",
            "properties": {
              "blacklist_file": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "virt_pool": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pool"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage I(libvirt) storage pools.",
            "properties": {
              "xml": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "uri": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "mode": {
                "type": "string"
              },
              "autostart": {
                "type": "string"
              },
              "pool": {
                "type": "string"
              }
            }
          },
          "rabbitmq_parameter": {
            "required": [
              "name",
              "component"
            ],
            "type": "object",
            "description": "Manage dynamic, cluster-wide parameters for RabbitMQ",
            "properties": {
              "node": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "component": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "vhost": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          },
          "logentries": {
            "required": [
              "path"
            ],
            "type": "object",
            "description": "Sends logs to LogEntries in realtime",
            "properties": {
              "path": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "logtype": {
                "type": "string"
              }
            }
          },
          "bigip_pool_member": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host",
                        "address",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "host"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "address"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages F5 BIG-IP LTM pool members via iControl SOAP API",
            "properties": {
              "session_state": {
                "type": "string"
              },
              "ratio": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "monitor_state": {
                "type": "string"
              },
              "partition": {
                "type": "string"
              },
              "connection_limit": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "rate_limit": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "pool": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "os_floating_ip": {
            "required": [
              "server"
            ],
            "type": "object",
            "description": "Add or Remove a floating IP to an instance",
            "properties": {
              "fixed_address": {
                "type": "string"
              },
              "network": {
                "type": "string"
              },
              "reuse": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "floating_ip_address": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "win_feature": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Installs or uninstalls Windows Roles or Features",
            "properties": {
              "include_management_tools": {
                "type": "string"
              },
              "include_sub_features": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "restart": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "win_service": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manages Windows services",
            "properties": {
              "start_mode": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "ec2_elb": {
            "required": [
              "instance_id",
              "state"
            ],
            "type": "object",
            "description": "This module de-registers or registers an AWS EC2 instance from the ELBs that it belongs to.\nReturns fact \"ec2_elbs\" which is a list of elbs attached to the instance if state=absent is passed as an argument.\nWill be marked changed when called only if there are ELBs found to operate on.",
            "properties": {
              "instance_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "ec2_elbs": {
                "type": "array"
              },
              "validate_certs": {
                "type": "string"
              },
              "enable_availability_zone": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "rax_identity": {
            "type": "object",
            "description": "Verifies Rackspace Cloud credentials and returns identity information",
            "properties": {
              "state": {
                "type": "string"
              }
            }
          },
          "cs_portforward": {
            "required": [
              "public_port",
              "private_port",
              "ip_address"
            ],
            "type": "object",
            "description": "Create, update and remove port forwarding rules.",
            "properties": {
              "vm_guest_ip": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "open_firewall": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "public_port": {
                "type": "string"
              },
              "vm": {
                "type": "string"
              },
              "public_end_port": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "private_port": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "private_end_port": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              }
            }
          },
          "iam_policy": {
            "required": [
              "state",
              "iam_name",
              "iam_type",
              "policy_name"
            ],
            "type": "object",
            "description": "Allows uploading or removing IAM policies for IAM users, groups or roles.",
            "properties": {
              "policy_document": {
                "type": "string"
              },
              "iam_name": {
                "type": "string"
              },
              "iam_type": {
                "type": "string"
              },
              "policy_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "policy_json": {
                "type": "string"
              },
              "skip_duplicates": {
                "type": "string"
              }
            }
          },
          "rax_files_objects": {
            "required": [
              "container"
            ],
            "type": "object",
            "description": "Upload, download, and delete objects in Rackspace Cloud Files",
            "properties": {
              "src": {
                "type": "string"
              },
              "container": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "expires": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "clear_meta": {
                "type": "string"
              },
              "meta": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "structure": {
                "type": "string"
              }
            }
          },
          "quantum_router_interface": {
            "required": [
              "login_tenant_name",
              "login_password",
              "login_username",
              "subnet_name",
              "router_name"
            ],
            "type": "object",
            "description": "Attach/Dettach a subnet interface to a router, to provide a gateway for the subnet.",
            "properties": {
              "region_name": {
                "type": "string"
              },
              "tenant_name": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "auth_url": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "login_username": {
                "type": "string"
              },
              "subnet_name": {
                "type": "string"
              },
              "router_name": {
                "type": "string"
              }
            }
          },
          "win_acl": {
            "required": [
              "user",
              "rights",
              "path",
              "type"
            ],
            "type": "object",
            "description": "Add or remove rights/permissions for a given user or group for the specified src file or folder.",
            "properties": {
              "rights": {
                "type": "string"
              },
              "inherit": {
                "type": "string"
              },
              "propagation": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "supervisorctl": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manage the state of a program or group of programs running via supervisord",
            "properties": {
              "username": {
                "type": "string"
              },
              "supervisorctl_path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "server_url": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "config": {
                "type": "string"
              }
            }
          },
          "rax_cbs_attachments": {
            "required": [
              "volume",
              "state",
              "device",
              "server"
            ],
            "type": "object",
            "description": "Manipulate Rackspace Cloud Block Storage Volume Attachments",
            "properties": {
              "server": {
                "type": "string"
              },
              "volume": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "device": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "mysql_user": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Adds or removes a user from a MySQL database.",
            "properties": {
              "update_password": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "encrypted": {
                "type": "string"
              },
              "append_privs": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "check_implicit_admin": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "priv": {
                "type": "string"
              }
            }
          },
          "ec2_group": {
            "required": [
              "name",
              "description"
            ],
            "type": "object",
            "description": "maintains ec2 security groups. This module has a dependency on python-boto >= 2.5",
            "properties": {
              "rules_egress": {
                "type": "array"
              },
              "name": {
                "type": "string"
              },
              "purge_rules": {
                "type": "string"
              },
              "rules": {
                "type": "array"
              },
              "state": {
                "type": "string"
              },
              "vpc_id": {
                "type": "string"
              },
              "purge_rules_egress": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "glance_image": {
            "required": [
              "login_password",
              "login_username",
              "name",
              "login_tenant_name"
            ],
            "type": "object",
            "description": "Add or Remove images from the glance repository.",
            "properties": {
              "region_name": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "container_format": {
                "type": "string"
              },
              "min_ram": {
                "type": "string"
              },
              "disk_format": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "copy_from": {
                "type": "string"
              },
              "min_disk": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "endpoint_type": {
                "type": "string"
              },
              "auth_url": {
                "type": "string"
              },
              "file": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "is_public": {
                "type": "string"
              },
              "login_username": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "consul_session": {
            "type": "object",
            "description": "allows the addition, modification and deletion of sessions in a consul cluster. These sessions can then be used in conjunction with key value pairs to implement distributed locks. In depth documentation for working with sessions can be found here http://www.consul.io/docs/internals/sessions.html",
            "properties": {
              "node": {
                "type": "string"
              },
              "datacenter": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "delay": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "checks": {
                "type": "string"
              }
            }
          },
          "ec2_win_password": {
            "required": [
              "instance_id",
              "key_file"
            ],
            "type": "object",
            "description": "Gets the default administrator password from any EC2 Windows instance.  The instance is referenced by its id (e.g. i-XXXXXXX). This module has a dependency on python-boto.",
            "properties": {
              "instance_id": {
                "type": "string"
              },
              "key_file": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "key_passphrase": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "ec2_snapshot": {
            "type": "object",
            "description": "creates an EC2 snapshot from an existing EBS volume",
            "properties": {
              "description": {
                "type": "string"
              },
              "snapshot_tags": {
                "type": "string"
              },
              "snapshot_id": {
                "type": "string"
              },
              "device_name": {
                "type": "string"
              },
              "instance_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "volume_id": {
                "type": "string"
              },
              "last_snapshot_min_age": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "cron": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "day",
                        "dom"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "weekday",
                        "dow"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Use this module to manage crontab entries. This module allows you to create named crontab entries, update, or delete them.\nThe module includes one line with the description of the crontab entry C(\"#Ansible: <name>\") corresponding to the \"name\" passed to the module, which is used by future ansible/module calls to find/check the state.  The \"name\" parameter should be unique, and changing the \"name\" value will result in a new cron task being created (or a different one being removed)",
            "properties": {
              "name": {
                "type": "string"
              },
              "hour": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "dow": {
                "type": "string"
              },
              "dom": {
                "type": "string"
              },
              "cron_file": {
                "type": "string"
              },
              "reboot": {
                "type": "string"
              },
              "month": {
                "type": "string"
              },
              "disabled": {
                "type": "string"
              },
              "job": {
                "type": "string"
              },
              "special_time": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              },
              "day": {
                "type": "string"
              },
              "minute": {
                "type": "string"
              },
              "weekday": {
                "type": "string"
              }
            }
          },
          "rax_cdb": {
            "type": "object",
            "description": "creates / deletes or resize a Rackspace Cloud Databases instance and optionally waits for it to be 'running'. The name option needs to be unique since it's used to identify the instance.",
            "properties": {
              "cdb_type": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "cdb_version": {
                "type": "string"
              },
              "volume": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "flavor": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "ec2_vpc_subnet_facts": {
            "type": "object",
            "description": "Gather facts about ec2 VPC subnets in AWS",
            "properties": {
              "filters": {
                "type": "string"
              }
            }
          },
          "airbrake_deployment": {
            "required": [
              "environment",
              "token"
            ],
            "type": "object",
            "description": "Notify airbrake about app deployments (see http://help.airbrake.io/kb/api-2/deploy-tracking)",
            "properties": {
              "environment": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "repo": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "revision": {
                "type": "string"
              }
            }
          },
          "find": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "paths",
                        "name",
                        "path"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "paths"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "patterns",
                        "pattern"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Return a list files based on specific criteria. Multiple criteria are AND'd together.",
            "properties": {
              "paths": {
                "type": "array"
              },
              "name": {
                "type": "array"
              },
              "file_type": {
                "type": "string"
              },
              "pattern": {
                "type": "string"
              },
              "age": {
                "type": "string"
              },
              "contains": {
                "type": "string"
              },
              "recurse": {
                "type": "string"
              },
              "age_stamp": {
                "type": "string"
              },
              "patterns": {
                "type": "string"
              },
              "get_checksum": {
                "type": "string"
              },
              "follow": {
                "type": "string"
              },
              "use_regex": {
                "type": "string"
              },
              "path": {
                "type": "array"
              },
              "hidden": {
                "type": "string"
              },
              "size": {
                "type": "string"
              }
            }
          },
          "jboss": {
            "required": [
              "deployment"
            ],
            "type": "object",
            "description": "Deploy applications to JBoss standalone using the filesystem",
            "properties": {
              "src": {
                "type": "string"
              },
              "deploy_path": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "deployment": {
                "type": "string"
              }
            }
          },
          "template": {
            "required": [
              "dest",
              "src"
            ],
            "type": "object",
            "description": "Templates are processed by the Jinja2 templating language (U(http://jinja.pocoo.org/docs/)) - documentation on the template formatting can be found in the Template Designer Documentation (U(http://jinja.pocoo.org/docs/templates/)).\nSix additional variables can be used in templates: C(ansible_managed) (configurable via the C(defaults) section of C(ansible.cfg)) contains a string which can be used to describe the template name, host, modification time of the template file and the owner uid, C(template_host) contains the node name of the template's machine, C(template_uid) the owner, C(template_path) the absolute path of the template, C(template_fullpath) is the absolute path of the template, and C(template_run_date) is the date that the template was rendered. Note that including a string that uses a date in the template will result in the template being marked 'changed' each time.",
            "properties": {
              "dest": {
                "type": "string"
              },
              "src": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              }
            }
          },
          "ec2_ami_find": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "region"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "aws_region"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "ec2_region"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Returns list of matching AMIs with AMI ID, along with other useful information\nCan search AMIs with different owners\nCan search by matching tag(s), by AMI name and/or other criteria\nResults can be sorted and sliced",
            "properties": {
              "sort": {
                "type": "string"
              },
              "no_result_action": {
                "type": "string"
              },
              "sort_end": {
                "type": "string"
              },
              "ami_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "platform": {
                "type": "string"
              },
              "hypervisor": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "aws_region": {
                "type": "string"
              },
              "sort_start": {
                "type": "string"
              },
              "virtualization_type": {
                "type": "string"
              },
              "ami_tags": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "sort_order": {
                "type": "string"
              },
              "architecture": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "is_public": {
                "type": "string"
              },
              "sort_tag": {
                "type": "string"
              },
              "ec2_region": {
                "type": "string"
              }
            }
          },
          "ec2_ami_search": {
            "required": [
              "release",
              "distro"
            ],
            "type": "object",
            "description": "Look up the most recent AMI on AWS for a given operating system.\nReturns C(ami), C(aki), C(ari), C(serial), C(tag)\nIf there is no AKI or ARI associated with an image, these will be C(null).\nOnly supports images from cloud-images.ubuntu.com\nExample output: C({\"ami\": \"ami-69f5a900\", \"changed\": false, \"aki\": \"aki-88aa75e1\", \"tag\": \"release\", \"ari\": null, \"serial\": \"20131024\"})",
            "properties": {
              "stream": {
                "type": "string"
              },
              "virt": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "release": {
                "type": "string"
              },
              "arch": {
                "type": "string"
              },
              "store": {
                "type": "string"
              },
              "distro": {
                "type": "string"
              }
            }
          },
          "rds_param_group": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Creates, modifies, and deletes RDS parameter groups. This module has a dependency on python-boto >= 2.5.",
            "properties": {
              "engine": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "immediate": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "params": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "xenserver_facts": {
            "type": "object",
            "description": "Reads data out of XenAPI, can be used instead of multiple xe commands.",
            "properties": {}
          },
          "elasticache_subnet_group": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Creates, modifies, and deletes Elasticache subnet groups. This module has a dependency on python-boto >= 2.5.",
            "properties": {
              "subnets": {
                "type": "array"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "vertica_configuration": {
            "required": [
              "name",
              "value"
            ],
            "type": "object",
            "description": "Updates Vertica configuration parameters.",
            "properties": {
              "name": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "db": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "cluster": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "vmware_host": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module can be used to add/remove an ESXi host to/from vCenter",
            "properties": {
              "username": {
                "type": "string"
              },
              "datacenter_name": {
                "type": "string"
              },
              "esxi_password": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "esxi_username": {
                "type": "string"
              },
              "cluster_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "esxi_hostname": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              }
            }
          },
          "webfaction_domain": {
            "required": [
              "login_name",
              "name",
              "login_password"
            ],
            "type": "object",
            "description": "Add or remove domains or subdomains on a Webfaction host. Further documentation at http://github.com/quentinsf/ansible-webfaction.",
            "properties": {
              "state": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "login_name": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "subdomains": {
                "type": "string"
              }
            }
          },
          "rds": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "zone",
                        "aws_zone",
                        "ec2_zone"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "region"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "aws_region"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "ec2_region"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates, deletes, or modifies rds instances.  When creating an instance it can be either a new instance or a read-only replica of an existing instance. This module has a dependency on python-boto >= 2.5. The 'promote' command requires boto >= 2.18.0. Certain features such as tags rely on boto.rds2 (boto >= 2.26.0)",
            "properties": {
              "db_engine": {
                "type": "string"
              },
              "force_failover": {
                "type": "string"
              },
              "iops": {
                "type": "string"
              },
              "backup_window": {
                "type": "string"
              },
              "backup_retention": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "security_groups": {
                "type": "string"
              },
              "size": {
                "type": "string"
              },
              "aws_secret_key": {
                "type": "string"
              },
              "subnet": {
                "type": "string"
              },
              "vpc_security_groups": {
                "type": "string"
              },
              "upgrade": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "source_instance": {
                "type": "string"
              },
              "parameter_group": {
                "type": "string"
              },
              "snapshot": {
                "type": "string"
              },
              "multi_zone": {
                "type": "string"
              },
              "new_instance_name": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "access_key": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "aws_region": {
                "type": "string"
              },
              "db_name": {
                "type": "string"
              },
              "license_model": {
                "type": "string"
              },
              "ec2_access_key": {
                "type": "string"
              },
              "ec2_secret_key": {
                "type": "string"
              },
              "apply_immediately": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "aws_zone": {
                "type": "string"
              },
              "aws_access_key": {
                "type": "string"
              },
              "ec2_region": {
                "type": "string"
              },
              "character_set_name": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "option_group": {
                "type": "string"
              },
              "engine_version": {
                "type": "string"
              },
              "ec2_zone": {
                "type": "string"
              },
              "instance_name": {
                "type": "string"
              },
              "instance_type": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "publicly_accessible": {
                "type": "string"
              },
              "secret_key": {
                "type": "string"
              },
              "maint_window": {
                "type": "string"
              }
            }
          },
          "consul_kv": {
            "required": [
              "value",
              "key"
            ],
            "type": "object",
            "description": "Allows the addition, modification and deletion of key/value entries in a consul cluster via the agent. The entire contents of the record, including the indices, flags and session are returned as 'value'.\nIf the key represents a prefix then Note that when a value is removed, the existing value if any is returned as part of the results.\nSee http://www.consul.io/docs/agent/http.html#kv for more details.",
            "properties": {
              "cas": {
                "type": "string"
              },
              "recurse": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "session": {
                "type": "string"
              },
              "flags": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "ejabberd_user": {
            "required": [
              "username",
              "host"
            ],
            "type": "object",
            "description": "This module provides user management for ejabberd servers",
            "properties": {
              "username": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "logging": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          },
          "webfaction_mailbox": {
            "required": [
              "mailbox_password",
              "login_name",
              "mailbox_name",
              "login_password"
            ],
            "type": "object",
            "description": "Add or remove mailboxes on a Webfaction account. Further documentation at http://github.com/quentinsf/ansible-webfaction.",
            "properties": {
              "mailbox_password": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "login_name": {
                "type": "string"
              },
              "mailbox_name": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              }
            }
          },
          "sns_topic": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "The M(sns_topic) module allows you to create, delete, and manage subscriptions for AWS SNS topics.",
            "properties": {
              "display_name": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "subscriptions": {
                "type": "array"
              },
              "delivery_policy": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "policy": {
                "type": "string"
              },
              "purge_subscriptions": {
                "type": "string"
              }
            }
          },
          "win_iis_website": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Creates, Removes and configures a IIS Web site",
            "properties": {
              "hostname": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "parameters": {
                "type": "string"
              },
              "ip": {
                "type": "string"
              },
              "physical_path": {
                "type": "string"
              },
              "application_pool": {
                "type": "string"
              },
              "ssl": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "win_dotnet_ngen": {
            "type": "object",
            "description": "After .NET framework is installed/updated, Windows will probably want to recompile things to optimise for the host.\nThis happens via scheduled task, usually at some inopportune time.\nThis module allows you to run this task on your own schedule, so you incur the CPU hit at some more convenient and controlled time.\nhttp://blogs.msdn.com/b/dotnet/archive/2013/08/06/wondering-why-mscorsvw-exe-has-high-cpu-usage-you-can-speed-it-up.aspx",
            "properties": {}
          },
          "cloudformation": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "region"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "aws_region"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "ec2_region"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Launches an AWS CloudFormation stack and waits for it complete.",
            "properties": {
              "disable_rollback": {
                "type": "string"
              },
              "notification_arns": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "stack_name": {
                "type": "string"
              },
              "stack_policy": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "template_format": {
                "type": "string"
              },
              "aws_region": {
                "type": "string"
              },
              "template_parameters": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "template_url": {
                "type": "string"
              },
              "template": {
                "type": "string"
              },
              "ec2_region": {
                "type": "string"
              }
            }
          },
          "replace": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "name",
                        "destfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "destfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will replace all instances of a pattern within a file.\nIt is up to the user to maintain idempotence by ensuring that the same pattern would never match any replacements made.",
            "properties": {
              "name": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "others": {
                "type": "string"
              },
              "destfile": {
                "type": "string"
              },
              "replace": {
                "type": "string"
              },
              "regexp": {
                "type": "string"
              },
              "follow": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              }
            }
          },
          "expect": {
            "required": [
              "command",
              "responses"
            ],
            "type": "object",
            "description": "The M(expect) module executes a command and responds to prompts\nThe given command will be executed on all selected nodes. It will not be processed through the shell, so variables like C($HOME) and operations like C(\"<\"), C(\">\"), C(\"|\"), and C(\"&\") will not work",
            "properties": {
              "chdir": {
                "type": "string"
              },
              "responses": {
                "type": "string"
              },
              "removes": {
                "type": "string"
              },
              "echo": {
                "type": "string"
              },
              "creates": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              }
            }
          },
          "apk": {
            "type": "object",
            "description": "Manages I(apk) packages for Alpine Linux.",
            "properties": {
              "state": {
                "type": "string"
              },
              "upgrade": {
                "type": "string"
              },
              "update_cache": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "bigpanda": {
            "required": [
              "component",
              "token",
              "state",
              "version"
            ],
            "type": "object",
            "description": "Notify BigPanda when deployments start and end (successfully or not). Returns a deployment object containing all the parameters for future module calls.",
            "properties": {
              "description": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "component": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "hosts": {
                "type": "string"
              },
              "env": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "win_iis_webapplication": {
            "required": [
              "name",
              "site"
            ],
            "type": "object",
            "description": "Creates, Removes and configures a IIS Web applications",
            "properties": {
              "state": {
                "type": "string"
              },
              "application_pool": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "physical_path": {
                "type": "string"
              },
              "site": {
                "type": "string"
              }
            }
          },
          "win_get_url": {
            "required": [
              "url",
              "dest"
            ],
            "type": "object",
            "description": "Fetches a file from a URL and saves to locally",
            "properties": {
              "username": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "skip_certificate_validation": {
                "type": "string"
              },
              "proxy_url": {
                "type": "string"
              },
              "proxy_password": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "proxy_username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "rpm_key": {
            "required": [
              "key"
            ],
            "type": "object",
            "description": "Adds or removes (rpm --import) a gpg key to your rpm database.",
            "properties": {
              "state": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "key": {
                "type": "string"
              }
            }
          },
          "hipchat": {
            "required": [
              "room",
              "token",
              "msg"
            ],
            "type": "object",
            "description": "Send a message to hipchat",
            "properties": {
              "from": {
                "type": "string"
              },
              "room": {
                "type": "string"
              },
              "color": {
                "type": "string"
              },
              "msg_format": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "api": {
                "type": "string"
              },
              "notify": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "dnf": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Installs, upgrade, removes, and lists packages and groups with the I(dnf) package manager.",
            "properties": {
              "name": {
                "type": "string"
              },
              "list": {
                "type": "string"
              },
              "disable_gpg_check": {
                "type": "string"
              },
              "conf_file": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "disablerepo": {
                "type": "string"
              },
              "enablerepo": {
                "type": "string"
              }
            }
          },
          "win_nssm": {
            "required": [
              "name",
              "start_mode"
            ],
            "type": "object",
            "description": "nssm is a service helper which doesn't suck. See https://nssm.cc/ for more information.",
            "properties": {
              "name": {
                "type": "string"
              },
              "start_mode": {
                "type": "string"
              },
              "stderr_file": {
                "type": "string"
              },
              "application": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "dependencies": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "stdout_file": {
                "type": "string"
              },
              "app_parameters": {
                "type": "string"
              }
            }
          },
          "bundler": {
            "type": "object",
            "description": "Manage installation and Gem version dependencies for Ruby using the Bundler gem",
            "properties": {
              "executable": {
                "type": "string"
              },
              "chdir": {
                "type": "string"
              },
              "gemfile": {
                "type": "string"
              },
              "deployment_mode": {
                "type": "string"
              },
              "user_install": {
                "type": "string"
              },
              "extra_args": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "clean": {
                "type": "string"
              },
              "binstub_directory": {
                "type": "string"
              },
              "exclude_groups": {
                "type": "string"
              },
              "local": {
                "type": "string"
              },
              "gem_path": {
                "type": "string"
              }
            }
          },
          "urpmi": {
            "required": [
              "pkg"
            ],
            "type": "object",
            "description": "Manages packages with I(urpmi) (such as for Mageia or Mandriva)",
            "properties": {
              "force": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "update_cache": {
                "type": "string"
              },
              "pkg": {
                "type": "string"
              },
              "no-recommends": {
                "type": "string"
              }
            }
          },
          "docker_login": {
            "required": [
              "username",
              "password"
            ],
            "type": "object",
            "description": "Ansible version of the \"docker login\" CLI command.\nThis module allows you to login to a Docker registry without directly pulling an image or performing any other actions.\nIt will write your login credentials to your local .dockercfg file that is compatible to the Docker CLI client as well as docker-py and all other Docker related modules that are based on docker-py.",
            "properties": {
              "username": {
                "type": "string"
              },
              "dockercfg_path": {
                "type": "string"
              },
              "reauth": {
                "type": "string"
              },
              "docker_url": {
                "type": "string"
              },
              "registry": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "vmware_vm_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Return basic facts pertaining to a vSphere virtual machine guest",
            "properties": {
              "username": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "vmware_cluster": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create VMware vSphere Cluster",
            "properties": {
              "username": {
                "type": "string"
              },
              "enable_ha": {
                "type": "string"
              },
              "enable_vsan": {
                "type": "string"
              },
              "datacenter_name": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "cluster_name": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "enable_drs": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "ec2_remote_facts": {
            "type": "object",
            "description": "Gather facts about ec2 instances in AWS",
            "properties": {
              "filters": {
                "type": "string"
              }
            }
          },
          "os_keypair": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or Remove key pair from OpenStack",
            "properties": {
              "public_key": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "public_key_file": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "quantum_subnet": {
            "required": [
              "login_password",
              "login_username",
              "cidr",
              "network_name",
              "name",
              "login_tenant_name"
            ],
            "type": "object",
            "description": "Add/remove subnet from a network",
            "properties": {
              "region_name": {
                "type": "string"
              },
              "enable_dhcp": {
                "type": "string"
              },
              "tenant_name": {
                "type": "string"
              },
              "dns_nameservers": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "allocation_pool_start": {
                "type": "string"
              },
              "auth_url": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "login_username": {
                "type": "string"
              },
              "gateway_ip": {
                "type": "string"
              },
              "cidr": {
                "type": "string"
              },
              "network_name": {
                "type": "string"
              },
              "ip_version": {
                "type": "string"
              },
              "allocation_pool_end": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "ec2_vpc_route_table_facts": {
            "type": "object",
            "description": "Gather facts about ec2 VPC route tables in AWS",
            "properties": {
              "filters": {
                "type": "string"
              }
            }
          },
          "known_hosts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "host"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "host"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The M(known_hosts) module lets you add or remove a host from the C(known_hosts) file. This is useful if you're going to want to use the M(git) module over ssh, for example. If you have a very large number of host keys to manage, you will find the M(template) module more useful.",
            "properties": {
              "host": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "key": {
                "type": "string"
              }
            }
          },
          "snmp_facts": {
            "required": [
              "host",
              "version"
            ],
            "type": "object",
            "description": "Retrieve facts for a device using SNMP, the facts will be inserted to the ansible_facts key.",
            "properties": {
              "username": {
                "type": "string"
              },
              "privacy": {
                "type": "string"
              },
              "level": {
                "type": "string"
              },
              "community": {
                "type": "string"
              },
              "authkey": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "integrity": {
                "type": "string"
              },
              "privkey": {
                "type": "string"
              }
            }
          },
          "setup": {
            "type": "object",
            "description": "This module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks. It can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host. Ansible provides many I(facts) about the system, automatically.",
            "properties": {
              "filter": {
                "type": "string"
              },
              "fact_path": {
                "type": "string"
              }
            }
          },
          "cs_instance": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "networks",
                        "network"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_groups",
                        "security_group"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ip_to_networks",
                        "ip_to_network"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "affinity_groups",
                        "affinity_group"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Deploy, start, update, scale, restart, restore, stop and destroy instances.",
            "properties": {
              "domain": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "disk_offering": {
                "type": "string"
              },
              "keyboard": {
                "type": "string"
              },
              "user_data": {
                "type": "string"
              },
              "root_disk_size": {
                "type": "string"
              },
              "cpu_speed": {
                "type": "string"
              },
              "ip6_address": {
                "type": "string"
              },
              "networks": {
                "type": "array"
              },
              "security_groups": {
                "type": "array"
              },
              "group": {
                "type": "string"
              },
              "network": {
                "type": "array"
              },
              "zone": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "template": {
                "type": "string"
              },
              "memory": {
                "type": "string"
              },
              "iso": {
                "type": "string"
              },
              "ip_to_network": {
                "type": "array"
              },
              "tags": {
                "type": "array"
              },
              "ssh_key": {
                "type": "string"
              },
              "affinity_group": {
                "type": "string"
              },
              "display_name": {
                "type": "string"
              },
              "service_offering": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "disk_size": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "hypervisor": {
                "type": "string"
              },
              "ip_to_networks": {
                "type": "array"
              },
              "project": {
                "type": "string"
              },
              "affinity_groups": {
                "type": "string"
              },
              "security_group": {
                "type": "array"
              },
              "poll_async": {
                "type": "string"
              },
              "cpu": {
                "type": "string"
              }
            }
          },
          "ec2_tag": {
            "required": [
              "resource",
              "tags"
            ],
            "type": "object",
            "description": "Creates, removes and lists tags from any EC2 resource.  The resource is referenced by its resource id (e.g. an instance being i-XXXXXXX). It is designed to be used with complex args (tags), see the examples.  This module has a dependency on python-boto.",
            "properties": {
              "state": {
                "type": "string"
              },
              "resource": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              }
            }
          },
          "rds_subnet_group": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Creates, modifies, and deletes RDS database subnet groups. This module has a dependency on python-boto >= 2.5.",
            "properties": {
              "subnets": {
                "type": "array"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "fetch": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "validate_checksum",
                        "validate_md5"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module works like M(copy), but in reverse. It is used for fetching files from remote machines and storing them locally in a file tree, organized by hostname. Note that this module is written to transfer log files that might not be present, so a missing remote file won't be an error unless fail_on_missing is set to 'yes'.",
            "properties": {
              "src": {
                "type": "string"
              },
              "flat": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "validate_md5": {
                "type": "string"
              },
              "validate_checksum": {
                "type": "string"
              },
              "fail_on_missing": {
                "type": "string"
              }
            }
          },
          "pushbullet": {
            "required": [
              "title",
              "api_key"
            ],
            "type": "object",
            "description": "This module sends push notifications via Pushbullet to channels or devices.",
            "properties": {
              "body": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "push_type": {
                "type": "string"
              },
              "device": {
                "type": "string"
              },
              "api_key": {
                "type": "string"
              },
              "channel": {
                "type": "string"
              }
            }
          },
          "ec2_ami": {
            "type": "object",
            "description": "Creates or deletes ec2 images.",
            "properties": {
              "device_mapping": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "launch_permissions": {
                "type": "string"
              },
              "delete_snapshot": {
                "type": "string"
              },
              "no_reboot": {
                "type": "string"
              },
              "instance_id": {
                "type": "string"
              },
              "image_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "cloudtrail": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates or deletes CloudTrail configuration. Ensures logging is also enabled.",
            "properties": {
              "aws_secret_key": {
                "type": "string"
              },
              "access_key": {
                "type": "string"
              },
              "aws_access_key": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "include_global_events": {
                "type": "string"
              },
              "aws_region": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "s3_bucket_prefix": {
                "type": "string"
              },
              "ec2_access_key": {
                "type": "string"
              },
              "secret_key": {
                "type": "string"
              },
              "ec2_secret_key": {
                "type": "string"
              },
              "s3_key_prefix": {
                "type": "string"
              },
              "ec2_region": {
                "type": "string"
              }
            }
          },
          "os_ironic": {
            "required": [
              "nics",
              "driver"
            ],
            "type": "object",
            "description": "Create or Remove Ironic nodes from OpenStack.",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "driver_info": {
                "type": "string"
              },
              "nics": {
                "type": "string"
              },
              "driver": {
                "type": "string"
              },
              "ironic_url": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "chassis_uuid": {
                "type": "string"
              },
              "skip_update_of_driver_password": {
                "type": "string"
              },
              "properties": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "lineinfile": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "name",
                        "destfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "destfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will search a file for a line, and ensure that it is present or absent.\nThis is primarily useful when you want to change a single line in a file only. See the M(replace) module if you want to change multiple, similar lines; for other cases, see the M(copy) or M(template) modules.",
            "properties": {
              "name": {
                "type": "string"
              },
              "insertbefore": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "create": {
                "type": "string"
              },
              "destfile": {
                "type": "string"
              },
              "backrefs": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "others": {
                "type": "string"
              },
              "insertafter": {
                "type": "string"
              },
              "regexp": {
                "type": "string"
              },
              "line": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              }
            }
          },
          "gce_net": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "fwname",
                        "fwrule"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "src_range",
                        "src_cidr"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ipv4_range",
                        "cidr"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module can create and destroy Google Compute Engine networks and firewall rules U(https://developers.google.com/compute/docs/networking). The I(name) parameter is reserved for referencing a network while the I(fwname) parameter is used to reference firewall rules. IPv4 Address ranges must be specified using the CIDR U(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) format. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.",
            "properties": {
              "fwname": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "src_range": {
                "type": "string"
              },
              "ipv4_range": {
                "type": "string"
              },
              "src_tags": {
                "type": "string"
              },
              "pem_file": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "allowed": {
                "type": "string"
              },
              "service_account_email": {
                "type": "string"
              },
              "cidr": {
                "type": "string"
              },
              "project_id": {
                "type": "string"
              },
              "target_tags": {
                "type": "string"
              },
              "fwrule": {
                "type": "string"
              },
              "src_cidr": {
                "type": "string"
              }
            }
          },
          "apt_rpm": {
            "required": [
              "pkg"
            ],
            "type": "object",
            "description": "Manages packages with I(apt-rpm). Both low-level (I(rpm)) and high-level (I(apt-get)) package manager binaries required.",
            "properties": {
              "state": {
                "type": "string"
              },
              "update_cache": {
                "type": "string"
              },
              "pkg": {
                "type": "string"
              }
            }
          },
          "s3_logging": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manage logging facility of an s3 bucket in AWS",
            "properties": {
              "target_bucket": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "target_prefix": {
                "type": "string"
              }
            }
          },
          "gce": {
            "required": [
              "zone"
            ],
            "type": "object",
            "description": "Creates or terminates Google Compute Engine (GCE) instances.  See U(https://cloud.google.com/products/compute-engine) for an overview. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.",
            "properties": {
              "disks": {
                "type": "string"
              },
              "network": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "ip_forward": {
                "type": "string"
              },
              "external_ip": {
                "type": "string"
              },
              "service_account_email": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "service_account_permissions": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              },
              "persistent_boot_disk": {
                "type": "string"
              },
              "pem_file": {
                "type": "string"
              },
              "project_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "machine_type": {
                "type": "string"
              },
              "disk_auto_delete": {
                "type": "string"
              },
              "instance_names": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "s3": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "s3_url",
                        "S3_URL"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module allows the user to manage S3 buckets and the objects within them. Includes support for creating and deleting both objects and buckets, retrieving objects as files or strings and generating download links. This module has a dependency on python-boto.",
            "properties": {
              "prefix": {
                "type": "string"
              },
              "marker": {
                "type": "string"
              },
              "overwrite": {
                "type": "string"
              },
              "aws_secret_key": {
                "type": "string"
              },
              "encrypt": {
                "type": "string"
              },
              "expiration": {
                "type": "string"
              },
              "retries": {
                "type": "string"
              },
              "max_keys": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "s3_url": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              },
              "permission": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "object": {
                "type": "string"
              },
              "ec2_access_key": {
                "type": "string"
              },
              "ec2_secret_key": {
                "type": "string"
              },
              "S3_URL": {
                "type": "string"
              },
              "access_key": {
                "type": "string"
              },
              "src": {
                "type": "string"
              },
              "aws_access_key": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "bucket": {
                "type": "string"
              },
              "headers": {
                "type": "string"
              },
              "mode": {
                "type": "string"
              },
              "secret_key": {
                "type": "string"
              }
            }
          },
          "portage": {
            "type": "object",
            "description": "Manages Gentoo packages",
            "properties": {
              "nodeps": {
                "type": "string"
              },
              "getbinpkg": {
                "type": "string"
              },
              "onlydeps": {
                "type": "string"
              },
              "newuse": {
                "type": "string"
              },
              "package": {
                "type": "string"
              },
              "oneshot": {
                "type": "string"
              },
              "update": {
                "type": "string"
              },
              "deep": {
                "type": "string"
              },
              "sync": {
                "type": "string"
              },
              "changed_use": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "quiet": {
                "type": "string"
              },
              "usepkgonly": {
                "type": "string"
              },
              "depclean": {
                "type": "string"
              },
              "noreplace": {
                "type": "string"
              },
              "verbose": {
                "type": "string"
              }
            }
          },
          "pkgin": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "The standard package manager for SmartOS, but also usable on NetBSD or any OS that uses C(pkgsrc).  (Home: U(http://pkgin.net/))",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "ping": {
            "type": "object",
            "description": "A trivial test module, this module always returns C(pong) on successful contact. It does not make sense in playbooks, but it is useful from C(/usr/bin/ansible) to verify the ability to login and that a usable python is configured.\nThis is NOT ICMP ping, this is just a trivial test module.",
            "properties": {}
          },
          "route53_zone": {
            "required": [
              "zone"
            ],
            "type": "object",
            "description": "Creates and deletes Route53 private and public zones",
            "properties": {
              "comment": {
                "type": "string"
              },
              "vpc_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "vpc_region": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              }
            }
          },
          "cs_securitygroup": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create and remove security groups.",
            "properties": {
              "account": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "bigip_facts": {
            "required": [
              "include",
              "user",
              "password",
              "server"
            ],
            "type": "object",
            "description": "Collect facts from F5 BIG-IP devices via iControl SOAP API",
            "properties": {
              "include": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "filter": {
                "type": "string"
              },
              "session": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "os_volume": {
            "required": [
              "display_name",
              "size"
            ],
            "type": "object",
            "description": "Create or Remove cinder block storage volumes",
            "properties": {
              "display_name": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "volume_type": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "display_description": {
                "type": "string"
              },
              "snapshot_id": {
                "type": "string"
              },
              "size": {
                "type": "string"
              }
            }
          },
          "async_status": {
            "required": [
              "jid"
            ],
            "type": "object",
            "description": "This module gets the status of an asynchronous task.",
            "properties": {
              "jid": {
                "type": "string"
              },
              "mode": {
                "type": "string"
              }
            }
          },
          "npm": {
            "type": "object",
            "description": "Manage node.js packages with Node Package Manager (npm)",
            "properties": {
              "executable": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "global": {
                "type": "string"
              },
              "ignore_scripts": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "production": {
                "type": "string"
              },
              "registry": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            }
          },
          "set_fact": {
            "required": [
              "key_value"
            ],
            "type": "object",
            "description": "This module allows setting new variables.  Variables are set on a host-by-host basis just like facts discovered by the setup module.\nThese variables will survive between plays during an Ansible run, but will not be saved across executions even if you use a fact cache.",
            "properties": {
              "key_value": {
                "type": "string"
              }
            }
          },
          "vmware_vmkernel_ip_config": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Configure the VMkernel IP Address",
            "properties": {
              "username": {
                "type": "string"
              },
              "vmk_name": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "subnet_mask": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              }
            }
          },
          "ec2_eni_facts": {
            "type": "object",
            "description": "Gather facts about ec2 ENI interfaces in AWS",
            "properties": {
              "filters": {
                "type": "string"
              }
            }
          },
          "win_ping": {
            "type": "object",
            "description": "Checks management connectivity of a windows host",
            "properties": {
              "data": {
                "type": "string"
              }
            }
          },
          "os_server_volume": {
            "required": [
              "volume",
              "server"
            ],
            "type": "object",
            "description": "Attach or Detach volumes from OpenStack VM's",
            "properties": {
              "volume": {
                "type": "string"
              },
              "device": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "server": {
                "type": "string"
              }
            }
          },
          "os_object": {
            "required": [
              "container"
            ],
            "type": "object",
            "description": "Create or Delete objects and containers from OpenStack",
            "properties": {
              "state": {
                "type": "string"
              },
              "container": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "container_access": {
                "type": "string"
              },
              "filename": {
                "type": "string"
              }
            }
          },
          "clc_blueprint_package": {
            "required": [
              "server_ids",
              "package_id"
            ],
            "type": "object",
            "description": "An Ansible module to deploy blue print package on a set of servers in CenturyLink Cloud.",
            "properties": {
              "server_ids": {
                "type": "string"
              },
              "package_id": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "package_params": {
                "type": "string"
              }
            }
          },
          "vca_nat": {
            "required": [
              "nat_rules"
            ],
            "type": "object",
            "description": "Adds or removes nat rules from a gateway in a vca environment",
            "properties": {
              "username": {
                "type": "string"
              },
              "gateway_name": {
                "type": "string"
              },
              "purge_rules": {
                "type": "string"
              },
              "nat_rules": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "instance_id": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "service_type": {
                "type": "string"
              },
              "org": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "vdc_name": {
                "type": "string"
              },
              "api_version": {
                "type": "string"
              },
              "verify_certs": {
                "type": "string"
              }
            }
          },
          "fireball": {
            "type": "object",
            "description": "Modern SSH clients support ControlPersist which is just as fast as fireball was.  Please enable that in ansible.cfg as a replacement for fireball.\nRemoved in ansible 2.0.",
            "properties": {}
          },
          "jira": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "project",
                        "prj"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "operation",
                        "command"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "operation"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "command"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create and modify issues in a JIRA instance.",
            "properties": {
              "username": {
                "type": "string"
              },
              "comment": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fields": {
                "type": "string"
              },
              "uri": {
                "type": "string"
              },
              "summary": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "assignee": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "issuetype": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "operation": {
                "type": "string"
              },
              "prj": {
                "type": "string"
              },
              "issue": {
                "type": "string"
              }
            }
          },
          "hostname": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Set system's hostname.\nCurrently implemented on Debian, Ubuntu, Fedora, RedHat, openSUSE, Linaro, ScientificLinux, Arch, CentOS, AMI.\nAny distribution that uses systemd as their init system.\nNote, this module does *NOT* modify /etc/hosts. You need to modify it yourself using other modules like template or replace.",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          },
          "sysctl": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "key"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "key"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "value",
                        "val"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module manipulates sysctl entries and optionally performs a C(/sbin/sysctl -p) after changing them.",
            "properties": {
              "name": {
                "type": "string"
              },
              "val": {
                "type": "string"
              },
              "ignoreerrors": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "reload": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "sysctl_set": {
                "type": "string"
              },
              "sysctl_file": {
                "type": "string"
              }
            }
          },
          "nova_compute": {
            "required": [
              "image_name",
              "image_id",
              "login_password",
              "login_username",
              "name",
              "login_tenant_name"
            ],
            "type": "object",
            "description": "Create or Remove virtual machines from Openstack.",
            "properties": {
              "availability_zone": {
                "type": "string"
              },
              "image_exclude": {
                "type": "string"
              },
              "flavor_include": {
                "type": "string"
              },
              "meta": {
                "type": "string"
              },
              "auth_url": {
                "type": "string"
              },
              "login_username": {
                "type": "string"
              },
              "wait_for": {
                "type": "string"
              },
              "security_groups": {
                "type": "string"
              },
              "scheduler_hints": {
                "type": "string"
              },
              "nics": {
                "type": "string"
              },
              "floating_ips": {
                "type": "array"
              },
              "flavor_ram": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "auto_floating_ip": {
                "type": "string"
              },
              "config_drive": {
                "type": "string"
              },
              "region_name": {
                "type": "string"
              },
              "key_name": {
                "type": "string"
              },
              "image_name": {
                "type": "string"
              },
              "user_data": {
                "type": "string"
              },
              "image_id": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "flavor_id": {
                "type": "string"
              },
              "floating_ip_pools": {
                "type": "array"
              }
            }
          },
          "win_webpicmd": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Installs packages using Web Platform Installer command-line (http://www.iis.net/learn/install/web-platform-installer/web-platform-installer-v4-command-line-webpicmdexe-rtw-release).\nMust be installed and present in PATH (see win_chocolatey module; 'webpicmd' is the package name, and you must install 'lessmsi' first too)\nInstall IIS first (see win_feature module)",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          },
          "postgresql_privs": {
            "required": [
              "roles",
              "database"
            ],
            "type": "object",
            "description": "Grant or revoke privileges on PostgreSQL database objects.\nThis module is basically a wrapper around most of the functionality of PostgreSQL's GRANT and REVOKE statements with detection of changes (GRANT/REVOKE I(privs) ON I(type) I(objs) TO/FROM I(roles))",
            "properties": {
              "objs": {
                "type": "string"
              },
              "roles": {
                "type": "string"
              },
              "database": {
                "type": "string"
              },
              "privs": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "unix_socket": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "login": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "grant_option": {
                "type": "string"
              },
              "schema": {
                "type": "string"
              }
            }
          },
          "svr4pkg": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manages SVR4 packages on Solaris 10 and 11.\nThese were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.\nNote that this is a very basic packaging system. It will not enforce dependencies on install or remove.",
            "properties": {
              "category": {
                "type": "string"
              },
              "src": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "proxy": {
                "type": "string"
              },
              "response_file": {
                "type": "string"
              }
            }
          },
          "gluster_volume": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "bricks",
                        "brick"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create, remove, start, stop and tune GlusterFS volumes",
            "properties": {
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "replicas": {
                "type": "string"
              },
              "bricks": {
                "type": "string"
              },
              "quota": {
                "type": "string"
              },
              "stripes": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "cluster": {
                "type": "array"
              },
              "state": {
                "type": "string"
              },
              "start_on_create": {
                "type": "string"
              },
              "directory": {
                "type": "string"
              },
              "brick": {
                "type": "string"
              },
              "rebalance": {
                "type": "string"
              },
              "options": {
                "type": "string"
              },
              "transport": {
                "type": "string"
              }
            }
          },
          "cs_sshkeypair": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, register and remove SSH keys.\nIf no key was found and no public key was provided and a new SSH private/public key pair will be created and the private key will be returned.",
            "properties": {
              "public_key": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          },
          "group": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manage presence of groups on a host.",
            "properties": {
              "state": {
                "type": "string"
              },
              "gid": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "system": {
                "type": "string"
              }
            }
          },
          "a10_server": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_name",
                        "server"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "server_name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "server"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_status",
                        "status"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_ip",
                        "ip",
                        "address"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage slb server objects on A10 Networks devices via aXAPI",
            "properties": {
              "username": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "server_name": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "ip": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "server_ports": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "server_ip": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "server_status": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              }
            }
          },
          "webfaction_app": {
            "required": [
              "name",
              "login_password",
              "type",
              "login_name"
            ],
            "type": "object",
            "description": "Add or remove applications on a Webfaction host.  Further documentation at http://github.com/quentinsf/ansible-webfaction.",
            "properties": {
              "name": {
                "type": "string"
              },
              "machine": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "autostart": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "open_port": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "login_name": {
                "type": "string"
              },
              "extra_info": {
                "type": "string"
              }
            }
          },
          "mqtt": {
            "required": [
              "topic",
              "payload"
            ],
            "type": "object",
            "description": "Publish a message on an MQTT topic.",
            "properties": {
              "username": {
                "type": "string"
              },
              "qos": {
                "type": "string"
              },
              "payload": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "topic": {
                "type": "string"
              },
              "client_id": {
                "type": "string"
              },
              "retain": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "mail": {
            "required": [
              "subject"
            ],
            "type": "object",
            "description": "This module is useful for sending emails from playbooks.\nOne may wonder why automate sending emails?  In complex environments there are from time to time processes that cannot be automated, either because you lack the authority to make it so, or because not everyone agrees to a common approach.\nIf you cannot automate a specific step, but the step is non-blocking, sending out an email to the responsible party to make him perform his part of the bargain is an elegant way to put the responsibility in someone else's lap.\nOf course sending out a mail can be equally useful as a way to notify one or more people in a team that a specific action has been (successfully) taken.",
            "properties": {
              "body": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "from": {
                "type": "string"
              },
              "to": {
                "type": "string"
              },
              "cc": {
                "type": "string"
              },
              "charset": {
                "type": "string"
              },
              "bcc": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "headers": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "subtype": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "attach": {
                "type": "string"
              },
              "subject": {
                "type": "string"
              }
            }
          },
          "win_iis_webbinding": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Creates, Removes and configures a binding to an existing IIS Web site",
            "properties": {
              "protocol": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "certificate_hash": {
                "type": "string"
              },
              "ip": {
                "type": "string"
              },
              "host_header": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "certificate_store_name": {
                "type": "string"
              }
            }
          },
          "rhn_channel": {
            "required": [
              "sysname",
              "name",
              "url",
              "password",
              "user"
            ],
            "type": "object",
            "description": "Adds or removes Red Hat software channels",
            "properties": {
              "sysname": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "ec2_eip": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "device_id",
                        "instance_id"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module associates AWS EC2 elastic IP addresses with instances",
            "properties": {
              "release_on_disassociation": {
                "type": "string"
              },
              "instance_id": {
                "type": "string"
              },
              "reuse_existing_ip_allowed": {
                "type": "string"
              },
              "public_ip": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "in_vpc": {
                "type": "string"
              },
              "device_id": {
                "type": "string"
              }
            }
          },
          "pushover": {
            "required": [
              "msg",
              "user_key",
              "app_token"
            ],
            "type": "object",
            "description": "Send notifications via pushover, to subscriber list of devices, and email addresses. Requires pushover app on devices.",
            "properties": {
              "msg": {
                "type": "string"
              },
              "user_key": {
                "type": "string"
              },
              "app_token": {
                "type": "string"
              },
              "pri": {
                "type": "string"
              }
            }
          },
          "sts_assume_role": {
            "required": [
              "role_session_name",
              "role_arn"
            ],
            "type": "object",
            "description": "Assume a role using AWS Security Token Service and obtain temporary credentials",
            "properties": {
              "role_arn": {
                "type": "string"
              },
              "duration_seconds": {
                "type": "string"
              },
              "mfa_serial_number": {
                "type": "string"
              },
              "role_session_name": {
                "type": "string"
              },
              "mfa_token": {
                "type": "string"
              },
              "policy": {
                "type": "string"
              },
              "external_id": {
                "type": "string"
              }
            }
          },
          "rax_cdb_user": {
            "type": "object",
            "description": "create / delete a database in the Cloud Databases.",
            "properties": {
              "db_password": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "cdb_id": {
                "type": "string"
              },
              "db_username": {
                "type": "string"
              },
              "databases": {
                "type": "string"
              }
            }
          },
          "proxmox": {
            "required": [
              "vmid",
              "api_host",
              "api_user"
            ],
            "type": "object",
            "description": "allows you to create/delete/stop instances in Proxmox VE cluster",
            "properties": {
              "force": {
                "type": "string"
              },
              "cpus": {
                "type": "string"
              },
              "ostemplate": {
                "type": "string"
              },
              "disk": {
                "type": "string"
              },
              "searchdomain": {
                "type": "string"
              },
              "api_user": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "storage": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "swap": {
                "type": "string"
              },
              "memory": {
                "type": "string"
              },
              "node": {
                "type": "string"
              },
              "cpuunits": {
                "type": "string"
              },
              "api_password": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              },
              "netif": {
                "type": "string"
              },
              "api_host": {
                "type": "string"
              },
              "vmid": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "nameserver": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "onboot": {
                "type": "string"
              }
            }
          },
          "pkg5_publisher": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "publisher"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "publisher"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "IPS packages are the native packages in Solaris 11 and higher.\nThis modules will configure which publishers a client will download IPS packages from.",
            "properties": {
              "origin": {
                "type": "string"
              },
              "publisher": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "enabled": {
                "type": "string"
              },
              "sticky": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "mirror": {
                "type": "string"
              }
            }
          },
          "openbsd_pkg": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manage packages on OpenBSD using the pkg tools.",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "hall": {
            "required": [
              "msg",
              "room_token",
              "title"
            ],
            "type": "object",
            "description": "The M(hall) module connects to the U(https://hall.com) messaging API and allows you to deliver notication messages to rooms.",
            "properties": {
              "msg": {
                "type": "string"
              },
              "room_token": {
                "type": "string"
              },
              "picture": {
                "type": "string"
              },
              "title": {
                "type": "string"
              }
            }
          },
          "dnsimple": {
            "type": "object",
            "description": "Manages domains and records via the DNSimple API, see the docs: U(http://developer.dnsimple.com/)",
            "properties": {
              "solo": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "account_email": {
                "type": "string"
              },
              "record_ids": {
                "type": "array"
              },
              "value": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "record": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "ttl": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "account_api_token": {
                "type": "string"
              }
            }
          },
          "vmware_migrate_vmk": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Migrate a VMK interface from VSS to VDS",
            "properties": {
              "username": {
                "type": "string"
              },
              "current_switch_name": {
                "type": "string"
              },
              "migrate_portgroup_name": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "esxi_hostname": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "device": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "current_portgroup_name": {
                "type": "string"
              },
              "migrate_switch_name": {
                "type": "string"
              }
            }
          },
          "win_scheduled_task": {
            "required": [
              "name",
              "state"
            ],
            "type": "object",
            "description": "Manage scheduled tasks",
            "properties": {
              "execute": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "days_of_week": {
                "type": "string"
              },
              "enabled": {
                "type": "string"
              },
              "argument": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "frequency": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "time": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "rax_mon_alarm": {
            "required": [
              "entity_id",
              "notification_plan_id",
              "check_id",
              "label"
            ],
            "type": "object",
            "description": "Create or delete a Rackspace Cloud Monitoring alarm that associates an existing rax_mon_entity, rax_mon_check, and rax_mon_notification_plan with criteria that specify what conditions will trigger which levels of notifications. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> *rax_mon_alarm*",
            "properties": {
              "entity_id": {
                "type": "string"
              },
              "notification_plan_id": {
                "type": "string"
              },
              "check_id": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "disabled": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "criteria": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          },
          "clc_server": {
            "type": "object",
            "description": "An Ansible module to Create, Delete, Start and Stop servers in CenturyLink Cloud.",
            "properties": {
              "anti_affinity_policy_name": {
                "type": "string"
              },
              "storage_type": {
                "type": "string"
              },
              "anti_affinity_policy_id": {
                "type": "string"
              },
              "ttl": {
                "type": "string"
              },
              "count_group": {
                "type": "string"
              },
              "secondary_dns": {
                "type": "string"
              },
              "custom_fields": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "group": {
                "type": "string"
              },
              "exact_count": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "cpu_autoscale_policy_id": {
                "type": "string"
              },
              "template": {
                "type": "string"
              },
              "memory": {
                "type": "string"
              },
              "server_ids": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "managed_os": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "additional_disks": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "add_public_ip": {
                "type": "string"
              },
              "alert_policy_id": {
                "type": "string"
              },
              "alert_policy_name": {
                "type": "string"
              },
              "packages": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              },
              "os_type": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "count": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "network_id": {
                "type": "string"
              },
              "primary_dns": {
                "type": "string"
              },
              "alias": {
                "type": "string"
              },
              "public_ip_ports": {
                "type": "string"
              },
              "source_server_password": {
                "type": "string"
              },
              "public_ip_protocol": {
                "type": "string"
              },
              "configuration_id": {
                "type": "string"
              },
              "cpu": {
                "type": "string"
              }
            }
          },
          "win_chocolatey": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Installs packages using Chocolatey (http://chocolatey.org/). If Chocolatey is missing from the system, the module will install it. List of packages can be found at http://chocolatey.org/packages",
            "properties": {
              "upgrade": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "version": {
                "type": "string"
              }
            }
          },
          "synchronize": {
            "required": [
              "src",
              "dest"
            ],
            "type": "object",
            "description": "C(synchronize) is a wrapper around the rsync command, meant to make common tasks with rsync easier. It is run and originates on the local host where Ansible is being run. Of course, you could just use the command action to call rsync yourself, but you also have to add a fair number of boilerplate options and host facts. You `still` may need to call rsync directly via C(command) or C(shell) depending on your use case. C(synchronize) does not provide access to the full power of rsync, but does make most invocations easier to follow.",
            "properties": {
              "partial": {
                "type": "string"
              },
              "links": {
                "type": "string"
              },
              "copy_links": {
                "type": "string"
              },
              "perms": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "archive": {
                "type": "string"
              },
              "dest_port": {
                "type": "string"
              },
              "group": {
                "type": "string"
              },
              "existing_only": {
                "type": "string"
              },
              "rsync_path": {
                "type": "string"
              },
              "verify_host": {
                "type": "string"
              },
              "use_ssh_args": {
                "type": "string"
              },
              "dirs": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "compress": {
                "type": "string"
              },
              "rsync_timeout": {
                "type": "string"
              },
              "rsync_opts": {
                "type": "string"
              },
              "set_remote_user": {
                "type": "string"
              },
              "recursive": {
                "type": "string"
              },
              "src": {
                "type": "string"
              },
              "checksum": {
                "type": "string"
              },
              "times": {
                "type": "string"
              },
              "mode": {
                "type": "string"
              },
              "delete": {
                "type": "string"
              }
            }
          },
          "zabbix_hostmacro": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_url",
                        "url"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "server_url"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "url"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "manages Zabbix host macros, it can create, update or delete them.",
            "properties": {
              "macro_value": {
                "type": "string"
              },
              "macro_name": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "server_url": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "host_name": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              }
            }
          },
          "opkg": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manages OpenWrt packages",
            "properties": {
              "update_cache": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "debug": {
            "type": "object",
            "description": "This module prints statements during execution and can be useful for debugging variables or expressions without necessarily halting the playbook. Useful for debugging together with the 'when:' directive.",
            "properties": {
              "msg": {
                "type": "string"
              },
              "var": {
                "type": "string"
              }
            }
          },
          "ec2_vpc_route_table": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "tags",
                        "resource_tags"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage route tables for AWS virtual private clouds",
            "properties": {
              "subnets": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "routes": {
                "type": "array"
              },
              "state": {
                "type": "string"
              },
              "lookup": {
                "type": "string"
              },
              "vpc_id": {
                "type": "string"
              },
              "route_table_id": {
                "type": "string"
              },
              "resource_tags": {
                "type": "string"
              },
              "propagating_vgw_ids": {
                "type": "string"
              }
            }
          },
          "homebrew_cask": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manages Homebrew casks.",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "vertica_role": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "assigned_roles",
                        "assigned_role"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds or removes Vertica database role and, optionally, assign other roles.",
            "properties": {
              "assigned_roles": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "db": {
                "type": "string"
              },
              "cluster": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "assigned_role": {
                "type": "string"
              }
            }
          },
          "cs_instancegroup": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create and remove instance groups.",
            "properties": {
              "project": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "cs_vmsnapshot": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "display_name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "display_name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create, remove and revert VM from snapshots.",
            "properties": {
              "snapshot_memory": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "vm": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "display_name": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "facter": {
            "type": "object",
            "description": "Runs the I(facter) discovery program (U(https://github.com/puppetlabs/facter)) on the remote system, returning JSON data that can be useful for inventory purposes.",
            "properties": {}
          },
          "vca_fw": {
            "required": [
              "fw_rules"
            ],
            "type": "object",
            "description": "Adds or removes firewall rules from a gateway in a vca environment",
            "properties": {
              "username": {
                "type": "string"
              },
              "gateway_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "instance_id": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "fw_rules": {
                "type": "string"
              },
              "service_type": {
                "type": "string"
              },
              "org": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "vdc_name": {
                "type": "string"
              },
              "api_version": {
                "type": "string"
              },
              "verify_certs": {
                "type": "string"
              }
            }
          },
          "os_subnet": {
            "required": [
              "name",
              "cidr",
              "network_name"
            ],
            "type": "object",
            "description": "Add or Remove a subnet to an OpenStack network",
            "properties": {
              "name": {
                "type": "string"
              },
              "enable_dhcp": {
                "type": "string"
              },
              "dns_nameservers": {
                "type": "array"
              },
              "ipv6_ra_mode": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "allocation_pool_start": {
                "type": "string"
              },
              "host_routes": {
                "type": "string"
              },
              "ipv6_address_mode": {
                "type": "string"
              },
              "ip_version": {
                "type": "string"
              },
              "gateway_ip": {
                "type": "string"
              },
              "cidr": {
                "type": "string"
              },
              "network_name": {
                "type": "string"
              },
              "allocation_pool_end": {
                "type": "string"
              }
            }
          },
          "cs_loadbalancer_rule_member": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ip_address",
                        "public_ip"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "vms",
                        "vm"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "vms"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "vm"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add and remove load balancer rule members.",
            "properties": {
              "public_ip": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "vm": {
                "type": "array"
              },
              "project": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              },
              "vms": {
                "type": "array"
              }
            }
          },
          "rax_queue": {
            "type": "object",
            "description": "creates / deletes a Rackspace Public Cloud queue.",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "a10_virtual_server": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "virtual_server_status",
                        "status"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "virtual_server_ip",
                        "ip",
                        "address"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "virtual_server",
                        "vip",
                        "virtual"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "virtual_server"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "vip"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "virtual"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage slb virtual server objects on A10 Networks devices via aXAPI",
            "properties": {
              "username": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "virtual_server": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "ip": {
                "type": "string"
              },
              "vip": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "virtual_server_ports": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "virtual": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "virtual_server_status": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "write_config": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "virtual_server_ip": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "ec2_vpc_igw": {
            "required": [
              "vpc_id"
            ],
            "type": "object",
            "description": "Manage an AWS VPC Internet gateway",
            "properties": {
              "vpc_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          },
          "proxmox_template": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "src",
                        "path"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "allows you to upload/delete templates in Proxmox VE cluster",
            "properties": {
              "node": {
                "type": "string"
              },
              "src": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "api_host": {
                "type": "string"
              },
              "api_user": {
                "type": "string"
              },
              "storage": {
                "type": "string"
              },
              "api_password": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "content_type": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "template": {
                "type": "string"
              }
            }
          },
          "os_image_facts": {
            "required": [
              "image"
            ],
            "type": "object",
            "description": "Retrieve facts about a image image from OpenStack.",
            "properties": {
              "image": {
                "type": "string"
              }
            }
          },
          "ec2_metric_alarm": {
            "required": [
              "name",
              "state"
            ],
            "type": "object",
            "description": "Can create or delete AWS metric alarms\nMetrics you wish to alarm on must already exist",
            "properties": {
              "comparison": {
                "type": "string"
              },
              "alarm_actions": {
                "type": "string"
              },
              "ok_actions": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "evaluation_periods": {
                "type": "string"
              },
              "metric": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "period": {
                "type": "string"
              },
              "dimensions": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "insufficient_data_actions": {
                "type": "string"
              },
              "statistic": {
                "type": "string"
              },
              "threshold": {
                "type": "string"
              },
              "unit": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "vmware_vsan_cluster": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module can be used to configure VSAN clustering on an ESXi host",
            "properties": {
              "username": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "cluster_uuid": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "quantum_network": {
            "required": [
              "login_tenant_name",
              "login_password",
              "login_username",
              "name"
            ],
            "type": "object",
            "description": "Add or Remove network from OpenStack.",
            "properties": {
              "region_name": {
                "type": "string"
              },
              "provider_network_type": {
                "type": "string"
              },
              "admin_state_up": {
                "type": "string"
              },
              "router_external": {
                "type": "string"
              },
              "tenant_name": {
                "type": "string"
              },
              "provider_physical_network": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "auth_url": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "login_username": {
                "type": "string"
              },
              "shared": {
                "type": "string"
              },
              "provider_segmentation_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "deploy_helper": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "path",
                        "dest"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The Deploy Helper manages some of the steps common in deploying software. It creates a folder structure, manages a symlink for the current release and cleans up old releases.\nRunning it with the C(state=query) or C(state=present) will return the C(deploy_helper) fact. C(project_path), whatever you set in the path parameter, C(current_path), the path to the symlink that points to the active release, C(releases_path), the path to the folder to keep releases in, C(shared_path), the path to the folder to keep shared resources in, C(unfinished_filename), the file to check for to recognize unfinished builds, C(previous_release), the release the 'current' symlink is pointing to, C(previous_release_path), the full path to the 'current' symlink target, C(new_release), either the 'release' parameter or a generated timestamp, C(new_release_path), the path to the new release folder (not created by the module).",
            "properties": {
              "unfinished_filename": {
                "type": "string"
              },
              "keep_releases": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "current_path": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "shared_path": {
                "type": "string"
              },
              "releases_path": {
                "type": "string"
              },
              "clean": {
                "type": "string"
              },
              "release": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            }
          },
          "rax_scaling_policy": {
            "required": [
              "name",
              "scaling_group",
              "policy_type"
            ],
            "type": "object",
            "description": "Manipulate Rackspace Cloud Autoscale Scaling Policy",
            "properties": {
              "is_percent": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "scaling_group": {
                "type": "string"
              },
              "cron": {
                "type": "string"
              },
              "desired_capacity": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "cooldown": {
                "type": "string"
              },
              "at": {
                "type": "string"
              },
              "policy_type": {
                "type": "string"
              },
              "change": {
                "type": "string"
              }
            }
          },
          "librato_annotation": {
            "required": [
              "links",
              "title",
              "api_key",
              "user"
            ],
            "type": "object",
            "description": "Create an annotation event on the given annotation stream :name. If the annotation stream does not exist, it will be created automatically",
            "properties": {
              "user": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "links": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "start_time": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "end_time": {
                "type": "string"
              },
              "api_key": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "gc_storage": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "overwrite"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module allows users to manage their objects/buckets in Google Cloud Storage.  It allows upload and download operations and can set some canned permissions. It also allows retrieval of URLs for objects for use in playbooks, and retrieval of string contents of objects.  This module requires setting the default project in GCS prior to playbook usage.  See U(https://developers.google.com/storage/docs/reference/v1/apiversion1) for information about setting the default project.",
            "properties": {
              "src": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "permission": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "gcs_secret_key": {
                "type": "string"
              },
              "object": {
                "type": "string"
              },
              "bucket": {
                "type": "string"
              },
              "gcs_access_key": {
                "type": "string"
              },
              "headers": {
                "type": "string"
              },
              "expiration": {
                "type": "string"
              },
              "overwrite": {
                "type": "string"
              },
              "mode": {
                "type": "string"
              }
            }
          },
          "vmware_dvs_host": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add or remove a host from distributed virtual switch",
            "properties": {
              "username": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "esxi_hostname": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "vmnics": {
                "type": "string"
              },
              "switch_name": {
                "type": "string"
              }
            }
          },
          "s3_bucket": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "s3_url",
                        "S3_URL"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage s3 buckets in AWS",
            "properties": {
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "S3_URL": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "policy": {
                "type": "string"
              },
              "requester_pays": {
                "type": "string"
              },
              "s3_url": {
                "type": "string"
              },
              "versioning": {
                "type": "string"
              }
            }
          },
          "rabbitmq_policy": {
            "required": [
              "name",
              "tags",
              "pattern"
            ],
            "type": "object",
            "description": "Manage the state of a virtual host in RabbitMQ.",
            "properties": {
              "node": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "pattern": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "vhost": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          },
          "route53_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "resource_id",
                        "resource_ids"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gets various details related to Route53 zone, record set or health check details",
            "properties": {
              "start_record_name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "resource_id": {
                "type": "string"
              },
              "hosted_zone_method": {
                "type": "string"
              },
              "dns_name": {
                "type": "string"
              },
              "health_check_method": {
                "type": "string"
              },
              "max_items": {
                "type": "string"
              },
              "hosted_zone_id": {
                "type": "string"
              },
              "health_check_id": {
                "type": "string"
              },
              "change_id": {
                "type": "string"
              },
              "query": {
                "type": "string"
              },
              "resource_ids": {
                "type": "string"
              },
              "delegation_set_id": {
                "type": "string"
              },
              "next_marker": {
                "type": "string"
              }
            }
          },
          "homebrew_tap": {
            "required": [
              "tap"
            ],
            "type": "object",
            "description": "Tap external Homebrew repositories.",
            "properties": {
              "state": {
                "type": "string"
              },
              "tap": {
                "type": "string"
              }
            }
          },
          "easy_install": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Installs Python libraries, optionally in a I(virtualenv)",
            "properties": {
              "virtualenv": {
                "type": "string"
              },
              "virtualenv_command": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "executable": {
                "type": "string"
              },
              "virtualenv_site_packages": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          },
          "yum": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Installs, upgrade, removes, and lists packages and groups with the I(yum) package manager.",
            "properties": {
              "name": {
                "type": "string"
              },
              "list": {
                "type": "string"
              },
              "disable_gpg_check": {
                "type": "string"
              },
              "conf_file": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "disablerepo": {
                "type": "string"
              },
              "update_cache": {
                "type": "string"
              },
              "pkg": {
                "type": "string"
              },
              "enablerepo": {
                "type": "string"
              },
              "exclude": {
                "type": "string"
              }
            }
          },
          "rax_mon_notification_plan": {
            "required": [
              "label"
            ],
            "type": "object",
            "description": "Create or delete a Rackspace Cloud Monitoring notification plan by associating existing rax_mon_notifications with severity levels. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> *rax_mon_notification_plan* -> rax_mon_alarm",
            "properties": {
              "ok_state": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "warning_state": {
                "type": "string"
              },
              "critical_state": {
                "type": "string"
              },
              "label": {
                "type": "string"
              }
            }
          },
          "elasticache": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "cache_parameter_group",
                        "parameter_group"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage cache clusters in Amazon Elasticache.\nReturns information about the specified cache cluster.",
            "properties": {
              "engine": {
                "type": "string"
              },
              "cache_port": {
                "type": "string"
              },
              "security_group_ids": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "cache_engine_version": {
                "type": "string"
              },
              "node_type": {
                "type": "string"
              },
              "parameter_group": {
                "type": "string"
              },
              "num_nodes": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "cache_security_groups": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "hard_modify": {
                "type": "string"
              },
              "cache_subnet_group": {
                "type": "string"
              },
              "cache_parameter_group": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "sns": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "msg",
                        "default"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "msg"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "default"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The M(sns) module sends notifications to a topic on your Amazon SNS account",
            "properties": {
              "aws_secret_key": {
                "type": "string"
              },
              "access_key": {
                "type": "string"
              },
              "aws_access_key": {
                "type": "string"
              },
              "http": {
                "type": "string"
              },
              "sqs": {
                "type": "string"
              },
              "sms": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "aws_region": {
                "type": "string"
              },
              "subject": {
                "type": "string"
              },
              "topic": {
                "type": "string"
              },
              "default": {
                "type": "string"
              },
              "https": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              },
              "ec2_access_key": {
                "type": "string"
              },
              "secret_key": {
                "type": "string"
              },
              "ec2_secret_key": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "ec2_region": {
                "type": "string"
              }
            }
          },
          "route53_health_check": {
            "required": [
              "request_interval",
              "type",
              "state",
              "failure_threshold"
            ],
            "type": "object",
            "description": "Creates and deletes DNS Health checks in Amazons Route53 service\nOnly the port, resource_path, string_match and request_interval are considered when updating existing health-checks.",
            "properties": {
              "request_interval": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              },
              "fqdn": {
                "type": "string"
              },
              "string_match": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "resource_path": {
                "type": "string"
              },
              "failure_threshold": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "clc_firewall_policy": {
            "required": [
              "location",
              "source_account_alias"
            ],
            "type": "object",
            "description": "Create or delete or update firewall polices on Centurylink Cloud",
            "properties": {
              "destination_account_alias": {
                "type": "string"
              },
              "destination": {
                "type": "string"
              },
              "enabled": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "source_account_alias": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "ports": {
                "type": "string"
              },
              "firewall_policy_id": {
                "type": "string"
              }
            }
          },
          "apt_repository": {
            "required": [
              "repo"
            ],
            "type": "object",
            "description": "Add or remove an APT repositories in Ubuntu and Debian.",
            "properties": {
              "repo": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "update_cache": {
                "type": "string"
              },
              "mode": {
                "type": "string"
              }
            }
          },
          "puppet": {
            "type": "object",
            "description": "Runs I(puppet) agent or apply in a reliable manner",
            "properties": {
              "puppetmaster": {
                "type": "string"
              },
              "facter_basename": {
                "type": "string"
              },
              "manifest": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "facts": {
                "type": "string"
              }
            }
          },
          "jabber": {
            "required": [
              "to",
              "user",
              "msg",
              "password"
            ],
            "type": "object",
            "description": "Send a message to jabber",
            "properties": {
              "encoding": {
                "type": "string"
              },
              "to": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "iam": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Allows for the management of IAM users, groups, roles and access keys.",
            "properties": {
              "new_name": {
                "type": "string"
              },
              "aws_secret_key": {
                "type": "string"
              },
              "update_password": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "new_path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "key_count": {
                "type": "string"
              },
              "access_key_state": {
                "type": "string"
              },
              "aws_access_key": {
                "type": "string"
              },
              "iam_type": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "access_key_ids": {
                "type": "string"
              },
              "groups": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "access_key": {
                "type": "string"
              },
              "ec2_access_key": {
                "type": "string"
              },
              "secret_key": {
                "type": "string"
              },
              "ec2_secret_key": {
                "type": "string"
              }
            }
          },
          "vsphere_copy": {
            "required": [
              "src",
              "datacenter",
              "host",
              "path",
              "login",
              "password",
              "datastore"
            ],
            "type": "object",
            "description": "Upload files to a vCenter datastore",
            "properties": {
              "src": {
                "type": "string"
              },
              "datacenter": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "login": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "datastore": {
                "type": "string"
              }
            }
          },
          "os_client_config": {
            "type": "object",
            "description": "Get I(openstack) client config data from clouds.yaml or environment",
            "properties": {
              "clouds": {
                "type": "array"
              }
            }
          },
          "service": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "arguments",
                        "args"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Controls services on remote hosts. Supported init systems include BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart.",
            "properties": {
              "name": {
                "type": "string"
              },
              "pattern": {
                "type": "string"
              },
              "args": {
                "type": "string"
              },
              "enabled": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "sleep": {
                "type": "string"
              },
              "arguments": {
                "type": "string"
              },
              "runlevel": {
                "type": "string"
              }
            }
          },
          "ec2_elb_lb": {
            "required": [
              "name",
              "state"
            ],
            "type": "object",
            "description": "Returns information about the load balancer.\nWill be marked changed when called only if state is changed.",
            "properties": {
              "subnets": {
                "type": "string"
              },
              "connection_draining_timeout": {
                "type": "string"
              },
              "health_check": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "scheme": {
                "type": "string"
              },
              "purge_subnets": {
                "type": "string"
              },
              "listeners": {
                "type": "array"
              },
              "access_logs": {
                "type": "string"
              },
              "zones": {
                "type": "array"
              },
              "idle_timeout": {
                "type": "string"
              },
              "security_group_names": {
                "type": "string"
              },
              "purge_listeners": {
                "type": "string"
              },
              "stickiness": {
                "type": "string"
              },
              "cross_az_load_balancing": {
                "type": "string"
              },
              "security_group_ids": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "purge_zones": {
                "type": "string"
              }
            }
          },
          "rax_network": {
            "type": "object",
            "description": "creates / deletes a Rackspace Public Cloud isolated network.",
            "properties": {
              "state": {
                "type": "string"
              },
              "cidr": {
                "type": "string"
              },
              "label": {
                "type": "string"
              }
            }
          },
          "include_vars": {
            "required": [
              "free-form"
            ],
            "type": "object",
            "description": "Loads variables from a YAML/JSON file dynamically during task runtime.  It can work with conditionals, or use host specific variables to determine the path name to load from.",
            "properties": {
              "free-form": {
                "type": "string"
              }
            }
          },
          "add_host": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "hostname",
                        "host"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "hostname"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "host"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "groups",
                        "groupname",
                        "group"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Use variables to create new hosts and groups in inventory for use in later plays of the same playbook. Takes variables so you can define the new hosts more fully.",
            "properties": {
              "group": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "groupname": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "groups": {
                "type": "string"
              }
            }
          },
          "nova_keypair": {
            "required": [
              "login_tenant_name",
              "login_password",
              "login_username",
              "name"
            ],
            "type": "object",
            "description": "Add or Remove key pair from nova .",
            "properties": {
              "public_key": {
                "type": "string"
              },
              "region_name": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "auth_url": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "login_username": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "bower": {
            "required": [
              "path"
            ],
            "type": "object",
            "description": "Manage bower packages with bower",
            "properties": {
              "name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "production": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "offline": {
                "type": "string"
              }
            }
          },
          "solaris_zone": {
            "required": [
              "name",
              "state"
            ],
            "type": "object",
            "description": "Create, start, stop and delete Solaris zones. This module doesn't currently allow changing of options for a zone that's already been created.",
            "properties": {
              "install_options": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "create_options": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "root_password": {
                "type": "string"
              },
              "sparse": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "config": {
                "type": "string"
              },
              "attach_options": {
                "type": "string"
              }
            }
          },
          "copy": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "thirsty"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The M(copy) module copies a file on the local box to remote locations. Use the M(fetch) module to copy files from remote locations to the local box. If you need variable interpolation in copied files, use the M(template) module.",
            "properties": {
              "src": {
                "type": "string"
              },
              "directory_mode": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "thirsty": {
                "type": "string"
              },
              "remote_src": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "content": {
                "type": "string"
              },
              "follow": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              }
            }
          },
          "unarchive": {
            "required": [
              "dest",
              "src"
            ],
            "type": "object",
            "description": "The M(unarchive) module unpacks an archive. By default, it will copy the source file from the local system to the target before unpacking - set copy=no to unpack an archive which already exists on the target..",
            "properties": {
              "dest": {
                "type": "string"
              },
              "src": {
                "type": "string"
              },
              "list_files": {
                "type": "string"
              },
              "copy": {
                "type": "string"
              },
              "creates": {
                "type": "string"
              }
            }
          },
          "vmware_vm_vss_dvs_migrate": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Migrates a virtual machine from a standard vswitch to distributed",
            "properties": {
              "username": {
                "type": "string"
              },
              "vm_name": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "dvportgroup_name": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "pam_limits": {
            "required": [
              "domain",
              "value",
              "limit_item",
              "limit_type"
            ],
            "type": "object",
            "description": "The M(pam_limits) module modify PAM limits, default in /etc/security/limits.conf. For the full documentation, see man limits.conf(5).",
            "properties": {
              "comment": {
                "type": "string"
              },
              "use_max": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "use_min": {
                "type": "string"
              },
              "limit_item": {
                "type": "string"
              },
              "limit_type": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              }
            }
          },
          "osx_say": {
            "required": [
              "msg"
            ],
            "type": "object",
            "description": "makes an OS computer speak!  Amuse your friends, annoy your coworkers!",
            "properties": {
              "msg": {
                "type": "string"
              },
              "voice": {
                "type": "string"
              }
            }
          },
          "win_template": {
            "required": [
              "dest",
              "src"
            ],
            "type": "object",
            "description": "Templates are processed by the Jinja2 templating language (U(http://jinja.pocoo.org/docs/)) - documentation on the template formatting can be found in the Template Designer Documentation (U(http://jinja.pocoo.org/docs/templates/)).\nSix additional variables can be used in templates: C(ansible_managed) (configurable via the C(defaults) section of C(ansible.cfg)) contains a string which can be used to describe the template name, host, modification time of the template file and the owner uid, C(template_host) contains the node name of the template's machine, C(template_uid) the owner, C(template_path) the absolute path of the template, C(template_fullpath) is the absolute path of the template, and C(template_run_date) is the date that the template was rendered. Note that including a string that uses a date in the template will result in the template being marked 'changed' each time.",
            "properties": {
              "dest": {
                "type": "string"
              },
              "src": {
                "type": "string"
              }
            }
          },
          "ini_file": {
            "required": [
              "dest",
              "section"
            ],
            "type": "object",
            "description": "Manage (add, remove, change) individual settings in an INI-style file without having to manage the file as a whole with, say, M(template) or M(assemble). Adds missing sections if they don't exist.\nBefore version 2.0, comments are discarded when the source file is read, and therefore will not show up in the destination file.",
            "properties": {
              "option": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "section": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "others": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              }
            }
          },
          "vmware_datacenter": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage VMware vSphere Datacenters",
            "properties": {
              "username": {
                "type": "string"
              },
              "datacenter_name": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "ec2_scaling_policy": {
            "required": [
              "state",
              "name",
              "asg_name"
            ],
            "type": "object",
            "description": "Can create or delete scaling policies for autoscaling groups\nReferenced autoscaling groups must already exist",
            "properties": {
              "name": {
                "type": "string"
              },
              "asg_name": {
                "type": "string"
              },
              "adjustment_type": {
                "type": "string"
              },
              "min_adjustment_step": {
                "type": "string"
              },
              "scaling_adjustment": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "cooldown": {
                "type": "string"
              }
            }
          },
          "rax_clb": {
            "type": "object",
            "description": "creates / deletes a Rackspace Public Cloud load balancer.",
            "properties": {
              "protocol": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "algorithm": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "meta": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "vip_id": {
                "type": "string"
              }
            }
          },
          "os_network": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or remove network from OpenStack.",
            "properties": {
              "shared": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "external": {
                "type": "string"
              },
              "admin_state_up": {
                "type": "string"
              }
            }
          },
          "clc_modify_server": {
            "required": [
              "server_ids"
            ],
            "type": "object",
            "description": "An Ansible module to modify servers in CenturyLink Cloud.",
            "properties": {
              "alert_policy_name": {
                "type": "string"
              },
              "anti_affinity_policy_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "anti_affinity_policy_id": {
                "type": "string"
              },
              "alert_policy_id": {
                "type": "string"
              },
              "memory": {
                "type": "string"
              },
              "server_ids": {
                "type": "string"
              },
              "cpu": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "bigip_monitor_tcp": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "monitor"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "monitor"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages F5 BIG-IP LTM tcp monitors via iControl SOAP API",
            "properties": {
              "parent_partition": {
                "type": "string"
              },
              "partition": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "parent": {
                "type": "string"
              },
              "receive": {
                "type": "string"
              },
              "ip": {
                "type": "string"
              },
              "interval": {
                "type": "string"
              },
              "send": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "time_until_up": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "monitor": {
                "type": "string"
              }
            }
          },
          "osx_defaults": {
            "required": [
              "key"
            ],
            "type": "object",
            "description": "osx_defaults allows users to read, write, and delete Mac OS X user defaults from Ansible scripts. Mac OS X applications and other programs use the defaults system to record user preferences and other information that must be maintained when the applications aren't running (such as default font for new documents, or the position of an Info panel).",
            "properties": {
              "domain": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "array_add": {
                "type": "string"
              }
            }
          },
          "cs_staticnat": {
            "required": [
              "ip_address"
            ],
            "type": "object",
            "description": "Create, update and remove static NATs.",
            "properties": {
              "vm_guest_ip": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "vm": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              }
            }
          },
          "apache2_module": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Enables or disables a specified module of the Apache2 webserver.",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "lxc_container": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Management of LXC containers",
            "properties": {
              "zfs_root": {
                "type": "string"
              },
              "clone_name": {
                "type": "string"
              },
              "container_config": {
                "type": "array"
              },
              "fs_type": {
                "type": "string"
              },
              "archive": {
                "type": "string"
              },
              "container_log": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "template": {
                "type": "string"
              },
              "config": {
                "type": "string"
              },
              "archive_path": {
                "type": "string"
              },
              "container_log_level": {
                "type": "string"
              },
              "template_options": {
                "type": "string"
              },
              "container_command": {
                "type": "string"
              },
              "lxc_path": {
                "type": "string"
              },
              "archive_compression": {
                "type": "string"
              },
              "thinpool": {
                "type": "string"
              },
              "clone_snapshot": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "lv_name": {
                "type": "string"
              },
              "fs_size": {
                "type": "string"
              },
              "backing_store": {
                "type": "string"
              },
              "vg_name": {
                "type": "string"
              },
              "directory": {
                "type": "string"
              }
            }
          },
          "win_file": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "path",
                        "dest",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates (empty) files, updates file modification stamps of existing files, and can create or remove directories. Unlike M(file), does not modify ownership, permissions or manipulate links.",
            "properties": {
              "dest": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "stackdriver": {
            "required": [
              "key"
            ],
            "type": "object",
            "description": "Send code deploy and annotation events to Stackdriver",
            "properties": {
              "repository": {
                "type": "string"
              },
              "level": {
                "type": "string"
              },
              "annotated_by": {
                "type": "string"
              },
              "deployed_by": {
                "type": "string"
              },
              "deployed_to": {
                "type": "string"
              },
              "instance_id": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              },
              "event_epoch": {
                "type": "string"
              },
              "revision_id": {
                "type": "string"
              },
              "event": {
                "type": "string"
              }
            }
          },
          "win_updates": {
            "type": "object",
            "description": "Searches, downloads, and installs Windows updates synchronously by automating the Windows Update client",
            "properties": {
              "log_path": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "category_names": {
                "type": "string"
              }
            }
          },
          "znode": {
            "required": [
              "hosts",
              "name"
            ],
            "type": "object",
            "description": "",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "hosts": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "op": {
                "type": "string"
              }
            }
          },
          "xattr": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "path"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages filesystem user defined extended attributes, requires that they are enabled on the target filesystem and that the setfattr/getfattr utilities are present.",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "follow": {
                "type": "string"
              }
            }
          },
          "os_subnets_facts": {
            "type": "object",
            "description": "Retrieve facts about one or more subnets from OpenStack.",
            "properties": {
              "subnet": {
                "type": "string"
              },
              "filters": {
                "type": "string"
              }
            }
          },
          "docker_image": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, check and remove docker images",
            "properties": {
              "tls_ca_cert": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "nocache": {
                "type": "string"
              },
              "docker_url": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "use_tls": {
                "type": "string"
              },
              "tls_hostname": {
                "type": "string"
              },
              "docker_api_version": {
                "type": "string"
              },
              "tls_client_cert": {
                "type": "string"
              },
              "tls_client_key": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "tag": {
                "type": "string"
              },
              "dockerfile": {
                "type": "string"
              }
            }
          },
          "vertica_facts": {
            "type": "object",
            "description": "Gathers Vertica database facts.",
            "properties": {
              "login_user": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "db": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "cluster": {
                "type": "string"
              }
            }
          },
          "cs_ip_address": {
            "type": "object",
            "description": "Acquires and associates a public IP to an account or project. Due to API limitations this is not an idempotent call, so be sure to only conditionally call this when C(state=present)",
            "properties": {
              "account": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "network": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              }
            }
          },
          "mysql_replication": {
            "type": "object",
            "description": "Manages MySQL server replication, slave, master status get and change master host.",
            "properties": {
              "master_ssl_cert": {
                "type": "string"
              },
              "master_auto_position": {
                "type": "string"
              },
              "master_log_pos": {
                "type": "string"
              },
              "master_password": {
                "type": "string"
              },
              "master_host": {
                "type": "string"
              },
              "master_ssl": {
                "type": "string"
              },
              "master_ssl_capath": {
                "type": "string"
              },
              "master_ssl_ca": {
                "type": "string"
              },
              "master_ssl_key": {
                "type": "string"
              },
              "master_connect_retry": {
                "type": "string"
              },
              "master_user": {
                "type": "string"
              },
              "mode": {
                "type": "string"
              },
              "master_port": {
                "type": "string"
              },
              "master_log_file": {
                "type": "string"
              },
              "master_ssl_cipher": {
                "type": "string"
              },
              "relay_log_pos": {
                "type": "string"
              },
              "relay_log_file": {
                "type": "string"
              }
            }
          },
          "ec2_vpc_net": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "tags",
                        "resource_tags"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or terminate AWS virtual private clouds.  This module has a dependency on python-boto.",
            "properties": {
              "name": {
                "type": "string"
              },
              "dns_support": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "multi_ok": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "tenancy": {
                "type": "string"
              },
              "dns_hostnames": {
                "type": "string"
              },
              "resource_tags": {
                "type": "string"
              },
              "cidr_block": {
                "type": "string"
              },
              "dhcp_opts_id": {
                "type": "string"
              }
            }
          },
          "zypper_repository": {
            "type": "object",
            "description": "Add or remove Zypper repositories on SUSE and openSUSE",
            "properties": {
              "description": {
                "type": "string"
              },
              "disable_gpg_check": {
                "type": "string"
              },
              "refresh": {
                "type": "string"
              },
              "repo": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "os_image": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or Remove images from the OpenStack Image Repository",
            "properties": {
              "ramdisk": {
                "type": "string"
              },
              "kernel": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "container_format": {
                "type": "string"
              },
              "min_ram": {
                "type": "string"
              },
              "disk_format": {
                "type": "string"
              },
              "filename": {
                "type": "string"
              },
              "min_disk": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "is_public": {
                "type": "string"
              },
              "properties": {
                "type": "string"
              }
            }
          },
          "rax_keypair": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create a keypair for use with Rackspace Cloud Servers",
            "properties": {
              "public_key": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "datadog_event": {
            "required": [
              "text",
              "title",
              "api_key"
            ],
            "type": "object",
            "description": "Allows to post events to DataDog (www.datadoghq.com) service.\nUses http://docs.datadoghq.com/api/#events API.",
            "properties": {
              "date_happened": {
                "type": "string"
              },
              "alert_type": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "text": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "aggregation_key": {
                "type": "string"
              },
              "api_key": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "rhn_register": {
            "type": "object",
            "description": "Manage registration to the Red Hat Network.",
            "properties": {
              "username": {
                "type": "string"
              },
              "server_url": {
                "type": "string"
              },
              "channels": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "activationkey": {
                "type": "string"
              },
              "profilename": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "elasticsearch_plugin": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manages Elasticsearch plugins.",
            "properties": {
              "version": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "plugin_dir": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "plugin_bin": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "ec2_eni": {
            "required": [
              "subnet_id"
            ],
            "type": "object",
            "description": "Create and optionally attach an Elastic Network Interface (ENI) to an instance. If an ENI ID is provided, an attempt is made to update the existing ENI. By passing 'None' as the instance_id, an ENI can be detached from an instance.",
            "properties": {
              "description": {
                "type": "string"
              },
              "subnet_id": {
                "type": "string"
              },
              "device_index": {
                "type": "string"
              },
              "force_detach": {
                "type": "string"
              },
              "instance_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "source_dest_check": {
                "type": "string"
              },
              "private_ip_address": {
                "type": "string"
              },
              "eni_id": {
                "type": "string"
              },
              "delete_on_termination": {
                "type": "string"
              },
              "security_groups": {
                "type": "array"
              }
            }
          },
          "ec2_lc": {
            "required": [
              "name",
              "instance_type",
              "state"
            ],
            "type": "object",
            "description": "Can create or delete AwS Autoscaling Configurations\nWorks with the ec2_asg module to manage Autoscaling Groups",
            "properties": {
              "ebs_optimized": {
                "type": "string"
              },
              "spot_price": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "instance_profile_name": {
                "type": "string"
              },
              "instance_type": {
                "type": "string"
              },
              "kernel_id": {
                "type": "string"
              },
              "key_name": {
                "type": "string"
              },
              "ramdisk_id": {
                "type": "string"
              },
              "user_data": {
                "type": "string"
              },
              "image_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "volumes": {
                "type": "string"
              },
              "assign_public_ip": {
                "type": "string"
              },
              "instance_monitoring": {
                "type": "string"
              },
              "classic_link_vpc_id": {
                "type": "string"
              },
              "security_groups": {
                "type": "string"
              },
              "classic_link_vpc_security_groups": {
                "type": "string"
              }
            }
          },
          "docker": {
            "required": [
              "image"
            ],
            "type": "object",
            "description": "Manage the life cycle of docker containers.",
            "properties": {
              "publish_all_ports": {
                "type": "string"
              },
              "tty": {
                "type": "string"
              },
              "cap_add": {
                "type": "string"
              },
              "insecure_registry": {
                "type": "string"
              },
              "links": {
                "type": "array"
              },
              "memory_limit": {
                "type": "string"
              },
              "lxc_conf": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "pid": {
                "type": "string"
              },
              "docker_api_version": {
                "type": "string"
              },
              "stop_timeout": {
                "type": "string"
              },
              "tls_client_key": {
                "type": "string"
              },
              "read_only": {
                "type": "string"
              },
              "tls_ca_cert": {
                "type": "string"
              },
              "detach": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "docker_url": {
                "type": "string"
              },
              "use_tls": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "tls_client_cert": {
                "type": "string"
              },
              "env": {
                "type": "string"
              },
              "volumes_from": {
                "type": "array"
              },
              "net": {
                "type": "string"
              },
              "privileged": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "docker_user": {
                "type": "string"
              },
              "extra_hosts": {
                "type": "string"
              },
              "log_driver": {
                "type": "string"
              },
              "expose": {
                "type": "array"
              },
              "stdin_open": {
                "type": "string"
              },
              "tls_hostname": {
                "type": "string"
              },
              "domainname": {
                "type": "string"
              },
              "registry": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "cpu_set": {
                "type": "string"
              },
              "pull": {
                "type": "string"
              },
              "dns": {
                "type": "array"
              },
              "name": {
                "type": "string"
              },
              "signal": {
                "type": "string"
              },
              "log_opt": {
                "type": "string"
              },
              "restart_policy": {
                "type": "string"
              },
              "count": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "restart_policy_retry": {
                "type": "string"
              },
              "volumes": {
                "type": "array"
              },
              "cap_drop": {
                "type": "string"
              },
              "ports": {
                "type": "array"
              }
            }
          },
          "os_project": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "domain_id",
                        "domain"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage OpenStack Projects. Projects can be created, updated or deleted using this module. A project will be updated if I(name) matches an existing project and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the project.",
            "properties": {
              "domain": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "enabled": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "domain_id": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "bzr": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "parent"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "parent"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage I(bzr) branches to deploy files or software.",
            "properties": {
              "executable": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "parent": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "version": {
                "type": "string"
              }
            }
          },
          "cs_user": {
            "required": [
              "username"
            ],
            "type": "object",
            "description": "Create, update, disable, lock, enable and remove users.",
            "properties": {
              "username": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "cs_loadbalancer_rule": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ip_address",
                        "public_ip"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "ip_address"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "public_ip"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add, update and remove load balancer rules.",
            "properties": {
              "public_ip": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "open_firewall": {
                "type": "string"
              },
              "public_port": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "private_port": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "algorithm": {
                "type": "string"
              },
              "cidr": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "vmware_dvswitch": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or remove a distributed vSwitch",
            "properties": {
              "username": {
                "type": "string"
              },
              "datacenter_name": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "discovery_operation": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "discovery_proto": {
                "type": "string"
              },
              "mtu": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "switch_name": {
                "type": "string"
              },
              "uplink_quantity": {
                "type": "string"
              }
            }
          },
          "htpasswd": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "username"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "path",
                        "dest",
                        "destfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "destfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add and remove username/password entries in a password file using htpasswd.\nThis is used by web servers such as Apache and Nginx for basic authentication.",
            "properties": {
              "username": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "create": {
                "type": "string"
              },
              "destfile": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "crypt_scheme": {
                "type": "string"
              }
            }
          },
          "github_hooks": {
            "required": [
              "repo",
              "oauthkey",
              "user",
              "action"
            ],
            "type": "object",
            "description": "Adds service hooks and removes service hooks that have an error status.",
            "properties": {
              "oauthkey": {
                "type": "string"
              },
              "hookurl": {
                "type": "string"
              },
              "repo": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "content_type": {
                "type": "string"
              },
              "action": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "os_server_actions": {
            "required": [
              "server"
            ],
            "type": "object",
            "description": "Perform server actions on an existing compute instance from OpenStack. This module does not return any data other than changed true/false.",
            "properties": {
              "action": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "server": {
                "type": "string"
              }
            }
          },
          "rax_clb_nodes": {
            "required": [
              "load_balancer_id"
            ],
            "type": "object",
            "description": "Adds, modifies and removes nodes from a Rackspace Cloud Load Balancer",
            "properties": {
              "node_id": {
                "type": "string"
              },
              "weight": {
                "type": "string"
              },
              "load_balancer_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "condition": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "mysql_db": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "db"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "db"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add or remove MySQL databases from a remote host.",
            "properties": {
              "target": {
                "type": "string"
              },
              "encoding": {
                "type": "string"
              },
              "db": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "collation": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "taiga_issue": {
            "required": [
              "project",
              "issue_type",
              "subject"
            ],
            "type": "object",
            "description": "Creates/deletes an issue in a Taiga Project Management Platform (U(https://taiga.io)).\nAn issue is identified by the combination of project, issue subject and issue type.\nThis module implements the creation or deletion of issues (not the update).",
            "properties": {
              "status": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "severity": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "taiga_host": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "attachment": {
                "type": "string"
              },
              "issue_type": {
                "type": "string"
              },
              "attachment_description": {
                "type": "string"
              },
              "subject": {
                "type": "string"
              }
            }
          },
          "bigip_monitor_http": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "monitor"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "monitor"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages F5 BIG-IP LTM monitors via iControl SOAP API",
            "properties": {
              "parent_partition": {
                "type": "string"
              },
              "partition": {
                "type": "string"
              },
              "receive_disable": {
                "type": "string"
              },
              "parent": {
                "type": "string"
              },
              "receive": {
                "type": "string"
              },
              "ip": {
                "type": "string"
              },
              "interval": {
                "type": "string"
              },
              "monitor": {
                "type": "string"
              },
              "send": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "time_until_up": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "rax_cbs": {
            "required": [
              "size",
              "volume_type",
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manipulate Rackspace Cloud Block Storage Volumes",
            "properties": {
              "description": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "volume_type": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "meta": {
                "type": "string"
              },
              "snapshot_id": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "size": {
                "type": "string"
              }
            }
          },
          "zfs": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manages ZFS file systems on Solaris and FreeBSD. Can manage file systems, volumes and snapshots. See zfs(1M) for more information about the properties.",
            "properties": {
              "origin": {
                "type": "string"
              },
              "setuid": {
                "type": "string"
              },
              "zoned": {
                "type": "string"
              },
              "primarycache": {
                "type": "string"
              },
              "logbias": {
                "type": "string"
              },
              "sync": {
                "type": "string"
              },
              "dedup": {
                "type": "string"
              },
              "sharenfs": {
                "type": "string"
              },
              "sharesmb": {
                "type": "string"
              },
              "reservation": {
                "type": "string"
              },
              "mountpoint": {
                "type": "string"
              },
              "casesensitivity": {
                "type": "string"
              },
              "utf8only": {
                "type": "string"
              },
              "xattr": {
                "type": "string"
              },
              "compression": {
                "type": "string"
              },
              "shareiscsi": {
                "type": "string"
              },
              "snapdir": {
                "type": "string"
              },
              "aclmode": {
                "type": "string"
              },
              "copies": {
                "type": "string"
              },
              "aclinherit": {
                "type": "string"
              },
              "readonly": {
                "type": "string"
              },
              "recordsize": {
                "type": "string"
              },
              "jailed": {
                "type": "string"
              },
              "secondarycache": {
                "type": "string"
              },
              "exec": {
                "type": "string"
              },
              "refquota": {
                "type": "string"
              },
              "quota": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "volsize": {
                "type": "string"
              },
              "vscan": {
                "type": "string"
              },
              "canmount": {
                "type": "string"
              },
              "atime": {
                "type": "string"
              },
              "normalization": {
                "type": "string"
              },
              "volblocksize": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "checksum": {
                "type": "string"
              },
              "devices": {
                "type": "string"
              },
              "refreservation": {
                "type": "string"
              },
              "nbmand": {
                "type": "string"
              }
            }
          },
          "blockinfile": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "name",
                        "destfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "destfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "block",
                        "content"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will insert/update/remove a block of multi-line text surrounded by customizable marker lines.",
            "properties": {
              "name": {
                "type": "string"
              },
              "insertbefore": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "create": {
                "type": "string"
              },
              "destfile": {
                "type": "string"
              },
              "content": {
                "type": "string"
              },
              "insertafter": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "marker": {
                "type": "string"
              },
              "follow": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              },
              "block": {
                "type": "string"
              }
            }
          },
          "ec2_vpc": {
            "required": [
              "state",
              "resource_tags",
              "cidr_block"
            ],
            "type": "object",
            "description": "Create or terminates AWS virtual private clouds.  This module has a dependency on python-boto.",
            "properties": {
              "subnets": {
                "type": "string"
              },
              "route_tables": {
                "type": "string"
              },
              "dns_support": {
                "type": "string"
              },
              "internet_gateway": {
                "type": "string"
              },
              "instance_tenancy": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "dns_hostnames": {
                "type": "string"
              },
              "resource_tags": {
                "type": "string"
              },
              "vpc_id": {
                "type": "string"
              },
              "cidr_block": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "pause": {
            "type": "object",
            "description": "Pauses playbook execution for a set amount of time, or until a prompt is acknowledged. All parameters are optional. The default behavior is to pause with a prompt.\nYou can use C(ctrl+c) if you wish to advance a pause earlier than it is set to expire or if you need to abort a playbook run entirely. To continue early: press C(ctrl+c) and then C(c). To abort a playbook: press C(ctrl+c) and then C(a).\nThe pause module integrates into async/parallelized playbooks without any special considerations (see also: Rolling Updates). When using pauses with the C(serial) playbook parameter (as in rolling updates) you are only prompted once for the current group of hosts.",
            "properties": {
              "seconds": {
                "type": "string"
              },
              "prompt": {
                "type": "string"
              },
              "minutes": {
                "type": "string"
              }
            }
          },
          "openvswitch_db": {
            "required": [
              "record",
              "key",
              "column",
              "table",
              "value"
            ],
            "type": "object",
            "description": "Set column values in record in database table.",
            "properties": {
              "timeout": {
                "type": "string"
              },
              "column": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "record": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "table": {
                "type": "string"
              }
            }
          },
          "layman": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Uses Layman to manage an additional repositories for the Portage package manager on Gentoo Linux. Please note that Layman must be installed on a managed node prior using this module.",
            "properties": {
              "list_url": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          },
          "win_iis_webapppool": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Creates, Removes and configures a IIS Web Application Pool",
            "properties": {
              "attributes": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "ec2_facts": {
            "type": "object",
            "description": "This module fetches data from the metadata servers in ec2 (aws) as per http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html. The module must be called from within the EC2 instance itself.",
            "properties": {
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "iptables": {
            "required": [
              "chain"
            ],
            "type": "object",
            "description": "Iptables is used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel. This module does not handle the saving and/or loading of rules, but rather only manipulates the current rules that are present in memory. This is the same as the behaviour of the \"iptables\" and \"ip6tables\" command which this module uses internally.",
            "properties": {
              "comment": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "goto": {
                "type": "string"
              },
              "chain": {
                "type": "string"
              },
              "fragment": {
                "type": "string"
              },
              "out_interface": {
                "type": "string"
              },
              "destination": {
                "type": "string"
              },
              "ctstate": {
                "type": "string"
              },
              "jump": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "limit": {
                "type": "string"
              },
              "source_port": {
                "type": "string"
              },
              "to_ports": {
                "type": "string"
              },
              "ip_version": {
                "type": "string"
              },
              "table": {
                "type": "string"
              },
              "destination_port": {
                "type": "string"
              },
              "set_counters": {
                "type": "string"
              },
              "in_interface": {
                "type": "string"
              },
              "match": {
                "type": "string"
              }
            }
          },
          "rax_scaling_group": {
            "required": [
              "image",
              "min_entities",
              "flavor",
              "max_entities",
              "name",
              "server_name"
            ],
            "type": "object",
            "description": "Manipulate Rackspace Cloud Autoscale Groups",
            "properties": {
              "files": {
                "type": "string"
              },
              "max_entities": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "server_name": {
                "type": "string"
              },
              "loadbalancers": {
                "type": "array"
              },
              "key_name": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "disk_config": {
                "type": "string"
              },
              "user_data": {
                "type": "string"
              },
              "min_entities": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "cooldown": {
                "type": "string"
              },
              "meta": {
                "type": "string"
              },
              "flavor": {
                "type": "string"
              },
              "config_drive": {
                "type": "string"
              },
              "networks": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "rax_mon_entity": {
            "required": [
              "label"
            ],
            "type": "object",
            "description": "Create or delete a Rackspace Cloud Monitoring entity, which represents a device to monitor. Entities associate checks and alarms with a target system and provide a convenient, centralized place to store IP addresses. Rackspace monitoring module flow | *rax_mon_entity* -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm",
            "properties": {
              "state": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              },
              "agent_id": {
                "type": "string"
              },
              "named_ip_addresses": {
                "type": "string"
              },
              "label": {
                "type": "string"
              }
            }
          },
          "newrelic_deployment": {
            "required": [
              "token"
            ],
            "type": "object",
            "description": "Notify newrelic about app deployments (see https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/deployment-notifications#api)",
            "properties": {
              "application_id": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "appname": {
                "type": "string"
              },
              "changelog": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "app_name": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "revision": {
                "type": "string"
              }
            }
          },
          "webfaction_db": {
            "required": [
              "name",
              "login_password",
              "type",
              "login_name"
            ],
            "type": "object",
            "description": "Add or remove a database on a Webfaction host. Further documentation at http://github.com/quentinsf/ansible-webfaction.",
            "properties": {
              "name": {
                "type": "string"
              },
              "machine": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "login_name": {
                "type": "string"
              }
            }
          },
          "twilio": {
            "required": [
              "from_number",
              "msg",
              "auth_token",
              "to_number",
              "account_sid"
            ],
            "type": "object",
            "description": "Sends a text message to a phone number through the Twilio messaging API.",
            "properties": {
              "auth_token": {
                "type": "string"
              },
              "to_number": {
                "type": "string"
              },
              "account_sid": {
                "type": "string"
              },
              "from_number": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              },
              "media_url": {
                "type": "string"
              }
            }
          },
          "gem": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "repository",
                        "source"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage installation and uninstallation of Ruby gems.",
            "properties": {
              "include_dependencies": {
                "type": "string"
              },
              "executable": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "repository": {
                "type": "string"
              },
              "build_flags": {
                "type": "string"
              },
              "include_doc": {
                "type": "string"
              },
              "user_install": {
                "type": "string"
              },
              "pre_release": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "gem_source": {
                "type": "string"
              }
            }
          },
          "slack": {
            "required": [
              "token"
            ],
            "type": "object",
            "description": "The M(slack) module sends notifications to U(http://slack.com) via the Incoming WebHook integration",
            "properties": {
              "username": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "attachments": {
                "type": "string"
              },
              "color": {
                "type": "string"
              },
              "icon_url": {
                "type": "string"
              },
              "parse": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "icon_emoji": {
                "type": "string"
              },
              "link_names": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "channel": {
                "type": "string"
              }
            }
          },
          "quantum_router": {
            "required": [
              "login_tenant_name",
              "login_password",
              "login_username",
              "name"
            ],
            "type": "object",
            "description": "Create or Delete routers from OpenStack",
            "properties": {
              "region_name": {
                "type": "string"
              },
              "admin_state_up": {
                "type": "string"
              },
              "tenant_name": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "auth_url": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "login_username": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "pagerduty": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "service",
                        "services"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will let you create PagerDuty maintenance windows",
            "properties": {
              "name": {
                "type": "string"
              },
              "service": {
                "type": "string"
              },
              "passwd": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "hours": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "services": {
                "type": "string"
              },
              "requester_id": {
                "type": "string"
              },
              "minutes": {
                "type": "string"
              },
              "desc": {
                "type": "string"
              }
            }
          },
          "pkgng": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manage binary packages for FreeBSD using 'pkgng' which is available in versions after 9.0.",
            "properties": {
              "name": {
                "type": "string"
              },
              "cached": {
                "type": "string"
              },
              "pkgsite": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "rootdir": {
                "type": "string"
              },
              "annotation": {
                "type": "string"
              }
            }
          },
          "patch": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "src",
                        "patchfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "src"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "patchfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "originalfile"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Apply patch files using the GNU patch tool.",
            "properties": {
              "src": {
                "type": "string"
              },
              "basedir": {
                "type": "string"
              },
              "patchfile": {
                "type": "string"
              },
              "remote_src": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "strip": {
                "description": "Number that indicates the smallest prefix containing leading slashes that will be stripped from each file name found in the patch file. For more information see the strip parameter of the GNU patch tool.",
                "$ref": "#/definitions/ansible_number"
              },
              "binary": {
                "description": "Setting to C(yes) will disable patch's heuristic for transforming CRLF line endings into LF. Line endings of src and dest must match. If set to C(no), patch will replace CRLF in src files on POSIX.",
                "$ref": "#/definitions/ansible_truth"
              },
              "originalfile": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              }
            }
          },
          "os_networks_facts": {
            "type": "object",
            "description": "Retrieve facts about one or more networks from OpenStack.",
            "properties": {
              "name": {
                "type": "string"
              },
              "filters": {
                "type": "string"
              }
            }
          },
          "nexmo": {
            "required": [
              "src",
              "dest",
              "api_secret",
              "api_key",
              "msg"
            ],
            "type": "object",
            "description": "Send a SMS message via nexmo",
            "properties": {
              "src": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "api_secret": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              },
              "api_key": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "open_iscsi": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "auto_node_startup",
                        "automatic"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "target",
                        "name",
                        "targetname"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "portal",
                        "ip"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Discover targets on given portal, (dis)connect targets, mark targets to manually or auto start, return device nodes of connected targets.",
            "properties": {
              "auto_node_startup": {
                "type": "string"
              },
              "target": {
                "type": "string"
              },
              "show_nodes": {
                "type": "string"
              },
              "node_auth": {
                "type": "string"
              },
              "automatic": {
                "type": "string"
              },
              "node_pass": {
                "type": "string"
              },
              "discover": {
                "type": "string"
              },
              "portal": {
                "type": "string"
              },
              "ip": {
                "type": "string"
              },
              "login": {
                "type": "string"
              },
              "node_user": {
                "type": "string"
              },
              "targetname": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "a10_service_group": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "service_group",
                        "service",
                        "pool",
                        "group"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "service_group"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "service"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pool"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "group"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "service_group_protocol",
                        "proto",
                        "protocol"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "service_group_method",
                        "method"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage slb service-group objects on A10 Networks devices via aXAPI",
            "properties": {
              "username": {
                "type": "string"
              },
              "service_group": {
                "type": "string"
              },
              "group": {
                "type": "string"
              },
              "service": {
                "type": "string"
              },
              "proto": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "service_group_protocol": {
                "type": "string"
              },
              "servers": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "write_config": {
                "type": "string"
              },
              "service_group_method": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "pool": {
                "type": "string"
              }
            }
          },
          "bigip_gtm_wide_ip": {
            "required": [
              "password",
              "lb_method",
              "wide_ip",
              "user",
              "server"
            ],
            "type": "object",
            "description": "Manages F5 BIG-IP GTM wide ip",
            "properties": {
              "lb_method": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "wide_ip": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "server": {
                "type": "string"
              }
            }
          },
          "clc_loadbalancer": {
            "required": [
              "name",
              "alias",
              "location"
            ],
            "type": "object",
            "description": "An Ansible module to Create, Delete shared loadbalancers in CenturyLink Cloud.",
            "properties": {
              "status": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "alias": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "nodes": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "persistence": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "gce_img": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "This module can create and delete GCE private images from gzipped compressed tarball containing raw disk data or from existing detached disks in any zone. U(https://cloud.google.com/compute/docs/images)",
            "properties": {
              "name": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "service_account_email": {
                "type": "string"
              },
              "pem_file": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "project_id": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "rax_clb_ssl": {
            "required": [
              "loadbalancer"
            ],
            "type": "object",
            "description": "Set up, reconfigure, or remove SSL termination for an existing load balancer.",
            "properties": {
              "private_key": {
                "type": "string"
              },
              "certificate": {
                "type": "string"
              },
              "enabled": {
                "type": "string"
              },
              "https_redirect": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "intermediate_certificate": {
                "type": "string"
              },
              "secure_traffic_only": {
                "type": "string"
              },
              "secure_port": {
                "type": "string"
              },
              "loadbalancer": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "pingdom": {
            "required": [
              "checkid",
              "passwd",
              "state",
              "uid",
              "key"
            ],
            "type": "object",
            "description": "This module will let you pause/unpause Pingdom alerts",
            "properties": {
              "checkid": {
                "type": "string"
              },
              "passwd": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "uid": {
                "type": "string"
              },
              "key": {
                "type": "string"
              }
            }
          },
          "zabbix_group": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host_groups",
                        "host_group"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "host_groups"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "host_group"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_url",
                        "url"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "server_url"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "url"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create host groups if they do not exist.\nDelete existing host groups if they exist.",
            "properties": {
              "host_groups": {
                "type": "array"
              },
              "url": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "server_url": {
                "type": "string"
              },
              "host_group": {
                "type": "array"
              },
              "state": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              }
            }
          },
          "win_user": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manages local Windows user accounts",
            "properties": {
              "update_password": {
                "type": "string"
              },
              "password_never_expires": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "groups_action": {
                "type": "string"
              },
              "password_expired": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "groups": {
                "type": "string"
              },
              "account_disabled": {
                "type": "string"
              },
              "fullname": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "account_locked": {
                "type": "string"
              },
              "user_cannot_change_password": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "irc": {
            "required": [
              "msg",
              "channel"
            ],
            "type": "object",
            "description": "Send a message to an IRC channel. This is a very simplistic implementation.",
            "properties": {
              "style": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "nick": {
                "type": "string"
              },
              "passwd": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "topic": {
                "type": "string"
              },
              "color": {
                "type": "string"
              },
              "part": {
                "type": "string"
              },
              "nick_to": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              },
              "use_ssl": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "channel": {
                "type": "string"
              }
            }
          },
          "vmware_vmkernel": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create a VMware VMkernel Interface",
            "properties": {
              "username": {
                "type": "string"
              },
              "portgroup_name": {
                "type": "string"
              },
              "vland_id": {
                "type": "string"
              },
              "enable_vmotion": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "enable_mgmt": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "mtu": {
                "type": "string"
              },
              "subnet_mask": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "enable_vsan": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "vswitch_name": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              },
              "enable_ft": {
                "type": "string"
              }
            }
          },
          "ec2_vol": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "zone",
                        "aws_zone",
                        "ec2_zone"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates an EBS volume and optionally attaches it to an instance.  If both an instance ID and a device name is given and the instance has a device at the device name, then no volume is created and no attachment is made.  This module has a dependency on python-boto.",
            "properties": {
              "aws_zone": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "volume_size": {
                "type": "string"
              },
              "encrypted": {
                "type": "string"
              },
              "volume_type": {
                "type": "string"
              },
              "ec2_zone": {
                "type": "string"
              },
              "instance": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "iops": {
                "type": "string"
              },
              "snapshot": {
                "type": "string"
              },
              "device_name": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          },
          "netscaler": {
            "required": [
              "name",
              "nsc_host",
              "user",
              "password"
            ],
            "type": "object",
            "description": "Manages Citrix NetScaler server and service entities.",
            "properties": {
              "name": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "nsc_protocol": {
                "type": "string"
              },
              "nsc_host": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "action": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "rabbitmq_queue": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "This module uses rabbitMQ Rest API to create/delete queues",
            "properties": {
              "login_port": {
                "type": "string"
              },
              "dead_letter_exchange": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "login_host": {
                "type": "string"
              },
              "message_ttl": {
                "type": "string"
              },
              "vhost": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "max_length": {
                "type": "string"
              },
              "arguments": {
                "type": "string"
              },
              "auto_delete": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "auto_expires": {
                "type": "string"
              },
              "dead_letter_routing_key": {
                "type": "string"
              },
              "durable": {
                "type": "string"
              }
            }
          },
          "postgresql_ext": {
            "required": [
              "name",
              "db"
            ],
            "type": "object",
            "description": "Add or remove PostgreSQL extensions from a database.",
            "properties": {
              "name": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "login_host": {
                "type": "string"
              },
              "db": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "homebrew": {
            "type": "object",
            "description": "Manages Homebrew packages",
            "properties": {
              "install_options": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "update_homebrew": {
                "type": "string"
              },
              "upgrade_all": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            }
          },
          "modprobe": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or remove kernel modules.",
            "properties": {
              "state": {
                "type": "string"
              },
              "params": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "postgresql_user": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or remove PostgreSQL users (roles) from a remote host and, optionally, grant the users access to an existing database or tables.\nThe fundamental function of the module is to create, or delete, roles from a PostgreSQL cluster. Privilege assignment, or removal, is an optional step, which works on one database at a time. This allows for the module to be called several times in the same module to modify the permissions on different databases, or to grant permissions to already existing users.\nA user cannot be removed until all the privileges have been stripped from the user. In such situation, if the module tries to remove the user it will fail. To avoid this from happening the fail_on_user option signals the module to try to remove the user, but if not possible keep going; the module will report if changes happened and separately if the user was removed or not.",
            "properties": {
              "name": {
                "type": "string"
              },
              "no_password_changes": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "login_host": {
                "type": "string"
              },
              "expires": {
                "type": "string"
              },
              "db": {
                "type": "string"
              },
              "role_attr_flags": {
                "type": "string"
              },
              "login_unix_socket": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "encrypted": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "fail_on_user": {
                "type": "string"
              },
              "priv": {
                "type": "string"
              }
            }
          },
          "rax_facts": {
            "type": "object",
            "description": "Gather facts for Rackspace Cloud Servers.",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              }
            }
          },
          "cs_affinitygroup": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create and remove affinity groups.",
            "properties": {
              "account": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "affinty_type": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "bigip_pool": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pool"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pool"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host",
                        "address"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages F5 BIG-IP LTM pools via iControl SOAP API",
            "properties": {
              "monitors": {
                "type": "string"
              },
              "lb_method": {
                "type": "string"
              },
              "quorum": {
                "type": "string"
              },
              "partition": {
                "type": "string"
              },
              "slow_ramp_time": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "service_down_action": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "monitor_type": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "pool": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "profitbricks": {
            "required": [
              "image",
              "name"
            ],
            "type": "object",
            "description": "Create, destroy, update, start, stop, and reboot a ProfitBricks virtual machine. When the virtual machine is created it can optionally wait for it to be 'running' before returning. This module has a dependency on profitbricks >= 1.0.0",
            "properties": {
              "count": {
                "type": "string"
              },
              "datacenter": {
                "type": "string"
              },
              "lan": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "subscription_user": {
                "type": "string"
              },
              "auto_increment": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "ram": {
                "type": "string"
              },
              "remove_boot_volume": {
                "type": "string"
              },
              "instance_ids": {
                "type": "array"
              },
              "subscription_password": {
                "type": "string"
              },
              "volume_size": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "assign_public_ip": {
                "type": "string"
              },
              "cores": {
                "type": "string"
              },
              "bus": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "rax_dns": {
            "type": "object",
            "description": "Manage domains on Rackspace Cloud DNS",
            "properties": {
              "comment": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "ttl": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "slackpkg": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manage binary packages for Slackware using 'slackpkg' which is available in versions after 12.2.",
            "properties": {
              "state": {
                "type": "string"
              },
              "update_cache": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "rabbitmq_vhost": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "tracing",
                        "trace"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "vhost"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "vhost"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage the state of a virtual host in RabbitMQ",
            "properties": {
              "node": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "trace": {
                "type": "string"
              },
              "tracing": {
                "type": "string"
              },
              "vhost": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          },
          "os_ironic_node": {
            "type": "object",
            "description": "Deploy to nodes controlled by Ironic.",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "power": {
                "type": "string"
              },
              "deploy": {
                "type": "string"
              },
              "ironic_url": {
                "type": "string"
              },
              "maintenance_reason": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "maintenance": {
                "type": "string"
              },
              "instance_info": {
                "type": "string"
              },
              "config_drive": {
                "type": "string"
              }
            }
          },
          "ec2_vpc_net_facts": {
            "type": "object",
            "description": "Gather facts about ec2 VPCs in AWS",
            "properties": {
              "filters": {
                "type": "string"
              }
            }
          },
          "virt_net": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "network"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "network"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage I(libvirt) networks.",
            "properties": {
              "xml": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "uri": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "autostart": {
                "type": "string"
              },
              "network": {
                "type": "string"
              }
            }
          },
          "digital_ocean": {
            "type": "object",
            "description": "Create/delete a droplet in DigitalOcean and optionally wait for it to be 'running', or deploy an SSH key.",
            "properties": {
              "unique_name": {
                "type": "string"
              },
              "virtio": {
                "type": "string"
              },
              "region_id": {
                "type": "string"
              },
              "size_id": {
                "type": "string"
              },
              "backups_enabled": {
                "type": "string"
              },
              "user_data": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "image_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "ssh_key_ids": {
                "type": "string"
              },
              "api_token": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "private_networking": {
                "type": "string"
              },
              "ssh_pub_key": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "cs_securitygroup_rule": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "start_port",
                        "port"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add and remove security group rules.",
            "properties": {
              "icmp_code": {
                "type": "string"
              },
              "start_port": {
                "type": "string"
              },
              "user_security_group": {
                "type": "string"
              },
              "end_port": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "security_group": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "cidr": {
                "type": "string"
              },
              "icmp_type": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "rabbitmq_user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "user",
                        "username",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add or remove users to RabbitMQ and assign permissions",
            "properties": {
              "node": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "write_priv": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "read_priv": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "configure_priv": {
                "type": "string"
              },
              "vhost": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "pkgutil": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manages CSW packages (SVR4 format) on Solaris 10 and 11.\nThese were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.\nPkgutil is an advanced packaging system, which resolves dependency on installation. It is designed for CSW packages.",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "site": {
                "type": "string"
              }
            }
          },
          "win_copy": {
            "required": [
              "dest"
            ],
            "type": "object",
            "description": "The M(win_copy) module copies a file on the local box to remote windows locations.",
            "properties": {
              "dest": {
                "type": "string"
              },
              "src": {
                "type": "string"
              }
            }
          },
          "boundary_meter": {
            "required": [
              "apikey",
              "apiid",
              "name"
            ],
            "type": "object",
            "description": "This module manages boundary meters",
            "properties": {
              "state": {
                "type": "string"
              },
              "apikey": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "apiid": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "apt_key": {
            "type": "object",
            "description": "Add or remove an I(apt) key, optionally downloading it",
            "properties": {
              "keyserver": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "keyring": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "file": {
                "type": "string"
              },
              "data": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          },
          "zypper": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage packages on SUSE and openSUSE using the zypper and rpm tools.",
            "properties": {
              "name": {
                "type": "string"
              },
              "disable_gpg_check": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "pkg": {
                "type": "string"
              },
              "disable_recommends": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "assert": {
            "required": [
              "that"
            ],
            "type": "object",
            "description": "This module asserts that a given expression is true and can be a simpler alternative to the 'fail' module in some cases.",
            "properties": {
              "that": {
                "type": "string"
              }
            }
          },
          "nagios": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "services",
                        "service"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "services"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "service"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The M(nagios) module has two basic functions: scheduling downtime and toggling alerts for services or hosts.\nAll actions require the I(host) parameter to be given explicitly. In playbooks you can use the C({{inventory_hostname}}) variable to refer to the host the playbook is currently running on.\nYou can specify multiple services at once by separating them with commas, .e.g., C(services=httpd,nfs,puppet).\nWhen specifying what service to handle there is a special service value, I(host), which will handle alerts/downtime for the I(host itself), e.g., C(service=host). This keyword may not be given with other services at the same time. I(Setting alerts/downtime for a host does not affect alerts/downtime for any of the services running on it.) To schedule downtime for all services on particular host use keyword \"all\", e.g., C(service=all).\nWhen using the M(nagios) module you will need to specify your Nagios server using the C(delegate_to) parameter.",
            "properties": {
              "comment": {
                "type": "string"
              },
              "servicegroup": {
                "type": "string"
              },
              "service": {
                "type": "string"
              },
              "author": {
                "type": "string"
              },
              "services": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "action": {
                "type": "string"
              },
              "minutes": {
                "type": "string"
              },
              "cmdfile": {
                "type": "string"
              }
            }
          },
          "mount": {
            "required": [
              "src",
              "name",
              "fstype",
              "state"
            ],
            "type": "object",
            "description": "This module controls active and configured mount points in C(/etc/fstab).",
            "properties": {
              "src": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "dump": {
                "type": "string"
              },
              "fstab": {
                "type": "string"
              },
              "passno": {
                "type": "string"
              },
              "fstype": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "opts": {
                "type": "string"
              }
            }
          },
          "authorized_key": {
            "required": [
              "user",
              "key"
            ],
            "type": "object",
            "description": "Adds or removes SSH authorized keys for particular user accounts",
            "properties": {
              "exclusive": {
                "type": "string"
              },
              "key_options": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "manage_dir": {
                "type": "string"
              }
            }
          },
          "vmware_dns_config": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage VMware ESXi DNS Configuration",
            "properties": {
              "username": {
                "type": "string"
              },
              "dns_servers": {
                "type": "string"
              },
              "domainname": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "change_hostname_to": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "flowdock": {
            "required": [
              "type",
              "token",
              "msg"
            ],
            "type": "object",
            "description": "Send a message to a flowdock team inbox or chat using the push API (see https://www.flowdock.com/api/team-inbox and https://www.flowdock.com/api/chat)",
            "properties": {
              "from_name": {
                "type": "string"
              },
              "from_address": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "external_user_name": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "link": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              },
              "reply_to": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "subject": {
                "type": "string"
              }
            }
          },
          "locale_gen": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manages locales by editing /etc/locale.gen and invoking locale-gen.",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "cs_domain": {
            "required": [
              "path"
            ],
            "type": "object",
            "description": "Create, update and remove domains.",
            "properties": {
              "path": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "network_domain": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "clean_up": {
                "type": "string"
              }
            }
          },
          "win_msi": {
            "required": [
              "path"
            ],
            "type": "object",
            "description": "Installs or uninstalls a Windows MSI file that is already located on the target server",
            "properties": {
              "extra_args": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "creates": {
                "type": "string"
              }
            }
          },
          "rax_cdb_database": {
            "type": "object",
            "description": "create / delete a database in the Cloud Databases.",
            "properties": {
              "cdb_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "character_set": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "collate": {
                "type": "string"
              }
            }
          },
          "cronvar": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Use this module to manage crontab variables. This module allows you to create, update, or delete cron variable definitions.",
            "properties": {
              "name": {
                "type": "string"
              },
              "insertbefore": {
                "type": "string"
              },
              "cron_file": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "insertafter": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              }
            }
          },
          "virt": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manages virtual machines supported by I(libvirt).",
            "properties": {
              "xml": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "uri": {
                "type": "string"
              }
            }
          },
          "pagerduty_alert": {
            "required": [
              "name",
              "state",
              "service_key",
              "api_key"
            ],
            "type": "object",
            "description": "This module will let you trigger, acknowledge or resolve a PagerDuty incident by sending events",
            "properties": {
              "client_url": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "incident_key": {
                "type": "string"
              },
              "client": {
                "type": "string"
              },
              "service_key": {
                "type": "string"
              },
              "api_key": {
                "type": "string"
              },
              "desc": {
                "type": "string"
              }
            }
          },
          "cs_template": {
            "required": [
              "name",
              "display_text"
            ],
            "type": "object",
            "description": "Register a template from URL, create a template from a ROOT volume of a stopped VM or its snapshot, extract and delete templates.",
            "properties": {
              "is_featured": {
                "type": "string"
              },
              "vm": {
                "type": "string"
              },
              "is_extractable": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "password_enabled": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "sshkey_enabled": {
                "type": "string"
              },
              "is_dynamically_scalable": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "template_filter": {
                "type": "string"
              },
              "is_ready": {
                "type": "string"
              },
              "details": {
                "type": "string"
              },
              "is_routing": {
                "type": "string"
              },
              "template_tag": {
                "type": "string"
              },
              "bits": {
                "type": "string"
              },
              "format": {
                "type": "string"
              },
              "is_public": {
                "type": "string"
              },
              "requires_hvm": {
                "type": "string"
              },
              "display_text": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "hypervisor": {
                "type": "string"
              },
              "cross_zones": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "snapshot": {
                "type": "string"
              },
              "checksum": {
                "type": "string"
              },
              "os_type": {
                "type": "string"
              }
            }
          },
          "profitbricks_volume_attachments": {
            "required": [
              "datacenter",
              "server",
              "volume"
            ],
            "type": "object",
            "description": "Allows you to attach or detach a volume from a ProfitBricks server. This module has a dependency on profitbricks >= 1.0.0",
            "properties": {
              "datacenter": {
                "type": "string"
              },
              "subscription_user": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "volume": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "subscription_password": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "os_auth": {
            "type": "object",
            "description": "Retrieve an auth token from an OpenStack Cloud",
            "properties": {}
          },
          "rollbar_deployment": {
            "required": [
              "environment",
              "token",
              "revision"
            ],
            "type": "object",
            "description": "Notify Rollbar about app deployments (see https://rollbar.com/docs/deploys_other/)",
            "properties": {
              "comment": {
                "type": "string"
              },
              "rollbar_user": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "revision": {
                "type": "string"
              }
            }
          },
          "wait_for": {
            "type": "object",
            "description": "You can wait for a set amount of time C(timeout), this is the default if nothing is specified.\nWaiting for a port to become available is useful for when services are not immediately available after their init scripts return which is true of certain Java application servers. It is also useful when starting guests with the M(virt) module and needing to pause until they are ready.\nThis module can also be used to wait for a regex match a string to be present in a file.\nIn 1.6 and later, this module can also be used to wait for a file to be available or absent on the filesystem.\nIn 1.8 and later, this module can also be used to wait for active connections to be closed before continuing, useful if a node is being rotated out of a load balancer pool.",
            "properties": {
              "state": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "delay": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "exclude_hosts": {
                "type": "array"
              },
              "search_regex": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "connect_timeout": {
                "type": "string"
              }
            }
          },
          "sendgrid": {
            "required": [
              "username",
              "to_addresses",
              "password",
              "from_address",
              "subject"
            ],
            "type": "object",
            "description": "Sends an email with a SendGrid account through their API, not through the SMTP service.",
            "properties": {
              "username": {
                "type": "string"
              },
              "to_addresses": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "from_address": {
                "type": "string"
              },
              "subject": {
                "type": "string"
              }
            }
          },
          "profitbricks_datacenter": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "This is a simple module that supports creating or removing vDCs. A vDC is required before you can create servers. This module has a dependency on profitbricks >= 1.0.0",
            "properties": {
              "name": {
                "type": "string"
              },
              "subscription_user": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "subscription_password": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "vmware_portgroup": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create a VMware portgroup",
            "properties": {
              "username": {
                "type": "string"
              },
              "portgroup_name": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "switch_name": {
                "type": "string"
              },
              "vlan_id": {
                "type": "string"
              }
            }
          },
          "rax": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "key_name",
                        "keypair"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates / deletes a Rackspace Public Cloud instance and optionally waits for it to be 'running'.",
            "properties": {
              "boot_volume_terminate": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "user_data": {
                "type": "string"
              },
              "keypair": {
                "type": "string"
              },
              "meta": {
                "type": "string"
              },
              "flavor": {
                "type": "string"
              },
              "networks": {
                "type": "string"
              },
              "boot_from_volume": {
                "type": "string"
              },
              "group": {
                "type": "string"
              },
              "exact_count": {
                "type": "string"
              },
              "disk_config": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "key_name": {
                "type": "string"
              },
              "boot_volume_size": {
                "type": "string"
              },
              "config_drive": {
                "type": "string"
              },
              "files": {
                "type": "string"
              },
              "auto_increment": {
                "type": "string"
              },
              "count_offset": {
                "type": "string"
              },
              "boot_volume": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "instance_ids": {
                "type": "array"
              },
              "wait": {
                "type": "string"
              },
              "count": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "extra_client_args": {
                "type": "string"
              },
              "extra_create_args": {
                "type": "string"
              }
            }
          },
          "clc_group": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create or delete Server Groups at Centurylink Centurylink Cloud",
            "properties": {
              "description": {
                "type": "string"
              },
              "parent": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "user"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage user accounts and user attributes.",
            "properties": {
              "comment": {
                "type": "string"
              },
              "ssh_key_bits": {
                "type": "string"
              },
              "update_password": {
                "type": "string"
              },
              "non_unique": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "ssh_key_type": {
                "type": "string"
              },
              "ssh_key_passphrase": {
                "type": "string"
              },
              "home": {
                "type": "string"
              },
              "skeleton": {
                "type": "string"
              },
              "append": {
                "type": "string"
              },
              "uid": {
                "type": "string"
              },
              "ssh_key_comment": {
                "type": "string"
              },
              "group": {
                "type": "string"
              },
              "system": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "shell": {
                "type": "string"
              },
              "expires": {
                "type": "string"
              },
              "ssh_key_file": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "groups": {
                "type": "string"
              },
              "move_home": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "createhome": {
                "type": "string"
              },
              "remove": {
                "type": "string"
              },
              "login_class": {
                "type": "string"
              },
              "generate_ssh_key": {
                "type": "string"
              }
            }
          },
          "quantum_router_gateway": {
            "required": [
              "router_name",
              "login_tenant_name",
              "login_password",
              "login_username",
              "network_name"
            ],
            "type": "object",
            "description": "Creates/Removes a gateway interface from the router, used to associate a external network with a router to route external traffic.",
            "properties": {
              "region_name": {
                "type": "string"
              },
              "network_name": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "auth_url": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "login_username": {
                "type": "string"
              },
              "router_name": {
                "type": "string"
              }
            }
          },
          "webfaction_site": {
            "required": [
              "name",
              "host",
              "login_password",
              "login_name"
            ],
            "type": "object",
            "description": "Add or remove a website on a Webfaction host.  Further documentation at http://github.com/quentinsf/ansible-webfaction.",
            "properties": {
              "name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "subdomains": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "https": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "login_name": {
                "type": "string"
              },
              "site_apps": {
                "type": "string"
              }
            }
          },
          "uri": {
            "required": [
              "url"
            ],
            "type": "object",
            "description": "Interacts with HTTP and HTTPS web services and supports Digest, Basic and WSSE HTTP authentication mechanisms.",
            "properties": {
              "body": {
                "type": "string"
              },
              "status_code": {
                "type": "string"
              },
              "headers": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "follow_redirects": {
                "type": "string"
              },
              "force_basic_auth": {
                "type": "string"
              },
              "removes": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "creates": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "others": {
                "type": "string"
              },
              "body_format": {
                "type": "string"
              },
              "return_content": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "HEADER_": {
                "type": "string"
              }
            }
          },
          "debconf": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "value",
                        "answer"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "question",
                        "setting",
                        "selection"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Configure a .deb package using debconf-set-selections. Or just query existing selections.",
            "properties": {
              "selection": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "question": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "vtype": {
                "type": "string"
              },
              "pkg": {
                "type": "string"
              },
              "unseen": {
                "type": "string"
              },
              "answer": {
                "type": "string"
              },
              "setting": {
                "type": "string"
              }
            }
          },
          "rabbitmq_exchange": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "exchange_type",
                        "type"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module uses rabbitMQ Rest API to create/delete exchanges",
            "properties": {
              "login_port": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "login_host": {
                "type": "string"
              },
              "exchange_type": {
                "type": "string"
              },
              "vhost": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "internal": {
                "type": "string"
              },
              "arguments": {
                "type": "string"
              },
              "auto_delete": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "durable": {
                "type": "string"
              }
            }
          },
          "bigip_node": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host",
                        "address",
                        "ip"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "host"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "address"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "ip"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages F5 BIG-IP LTM nodes via iControl SOAP API",
            "properties": {
              "ip": {
                "type": "string"
              },
              "session_state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "monitor_state": {
                "type": "string"
              },
              "partition": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "maven_artifact": {
            "required": [
              "group_id",
              "artifact_id",
              "dest",
              "state"
            ],
            "type": "object",
            "description": "Downloads an artifact from a maven repository given the maven coordinates provided to the module. Can retrieve\nsnapshots or release versions of the artifact and will resolve the latest available version if one is not\navailable.",
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "artifact_id": {
                "type": "string"
              },
              "extension": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "repository_url": {
                "type": "string"
              },
              "group_id": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "classifier": {
                "type": "string"
              }
            }
          },
          "pkg5": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "accept_licenses",
                        "accept_licences",
                        "accept"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "IPS packages are the native packages in Solaris 11 and higher.",
            "properties": {
              "accept_licenses": {
                "type": "string"
              },
              "accept_licences": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "accept": {
                "type": "string"
              }
            }
          },
          "rax_files": {
            "required": [
              "container"
            ],
            "type": "object",
            "description": "Manipulate Rackspace Cloud Files Containers",
            "properties": {
              "web_index": {
                "type": "string"
              },
              "container": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "private": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "clear_meta": {
                "type": "string"
              },
              "meta": {
                "type": "string"
              },
              "ttl": {
                "type": "string"
              },
              "web_error": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "public": {
                "type": "string"
              }
            }
          },
          "filesystem": {
            "required": [
              "dev",
              "fstype"
            ],
            "type": "object",
            "description": "This module creates file system.",
            "properties": {
              "resizefs": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "opts": {
                "type": "array"
              },
              "dev": {
                "type": "string"
              },
              "fstype": {
                "type": "string"
              }
            }
          },
          "fail": {
            "type": "object",
            "description": "This module fails the progress with a custom message. It can be useful for bailing out when a certain condition is met using C(when).",
            "properties": {
              "msg": {
                "type": "string"
              }
            }
          },
          "quantum_floating_ip_associate": {
            "required": [
              "instance_name",
              "login_tenant_name",
              "login_password",
              "login_username",
              "ip_address"
            ],
            "type": "object",
            "description": "Associates or disassociates a specific floating IP with a particular instance",
            "properties": {
              "region_name": {
                "type": "string"
              },
              "instance_name": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "auth_url": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "login_username": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              }
            }
          },
          "django_manage": {
            "required": [
              "app_path",
              "command"
            ],
            "type": "object",
            "description": "Manages a Django application using the I(manage.py) application frontend to I(django-admin). With the I(virtualenv) parameter, all management commands will be executed by the given I(virtualenv) installation.",
            "properties": {
              "virtualenv": {
                "type": "string"
              },
              "app_path": {
                "type": "string"
              },
              "database": {
                "type": "string"
              },
              "pythonpath": {
                "type": "string"
              },
              "settings": {
                "type": "string"
              },
              "apps": {
                "type": "string"
              },
              "cache_table": {
                "type": "string"
              },
              "merge": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "skip": {
                "type": "string"
              },
              "link": {
                "type": "string"
              },
              "fixtures": {
                "type": "string"
              },
              "failfast": {
                "type": "string"
              }
            }
          },
          "ec2_asg": {
            "required": [
              "name",
              "state",
              "launch_config_name"
            ],
            "type": "object",
            "description": "Can create or delete AWS Autoscaling Groups\nWorks with the ec2_lc module to manage Launch Configurations",
            "properties": {
              "replace_instances": {
                "type": "array"
              },
              "lc_check": {
                "type": "string"
              },
              "availability_zones": {
                "type": "array"
              },
              "default_cooldown": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "replace_all_instances": {
                "type": "string"
              },
              "vpc_zone_identifier": {
                "type": "array"
              },
              "name": {
                "type": "string"
              },
              "min_size": {
                "type": "string"
              },
              "desired_capacity": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "launch_config_name": {
                "type": "string"
              },
              "health_check_period": {
                "type": "string"
              },
              "replace_batch_size": {
                "type": "string"
              },
              "load_balancers": {
                "type": "array"
              },
              "termination_policies": {
                "type": "string"
              },
              "wait_for_instances": {
                "type": "string"
              },
              "max_size": {
                "type": "string"
              },
              "health_check_type": {
                "type": "string"
              }
            }
          },
          "dynamodb_table": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create or delete AWS Dynamo DB tables.\nCan update the provisioned throughput on existing tables.\nReturns the status of the specified table.",
            "properties": {
              "read_capacity": {
                "type": "string"
              },
              "hash_key_name": {
                "type": "string"
              },
              "range_key_type": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "write_capacity": {
                "type": "string"
              },
              "range_key_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "hash_key_type": {
                "type": "string"
              }
            }
          },
          "route53": {
            "required": [
              "zone",
              "record",
              "command",
              "type"
            ],
            "type": "object",
            "description": "Creates and deletes DNS records in Amazons Route53 service",
            "properties": {
              "health_check": {
                "type": "string"
              },
              "alias_hosted_zone_id": {
                "type": "string"
              },
              "weight": {
                "type": "string"
              },
              "alias": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "retry_interval": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "hosted_zone_id": {
                "type": "string"
              },
              "record": {
                "type": "string"
              },
              "private_zone": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "ttl": {
                "type": "string"
              },
              "identifier": {
                "type": "string"
              },
              "vpc_id": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "failover": {
                "type": "string"
              },
              "overwrite": {
                "type": "string"
              }
            }
          },
          "ovirt": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_mem",
                        "vmmem"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_cores",
                        "vmcores"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_cpus",
                        "vmcpus"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_disksize",
                        "vm_disksize"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_nic",
                        "vmnic"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_network",
                        "vmnetwork"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_os",
                        "vmos"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_name",
                        "vmname"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "instance_name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "vmname"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_type",
                        "vmtype"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "allows you to create new instances, either from scratch or an image, in addition to deleting or stopping instances on the oVirt/RHEV platform",
            "properties": {
              "vmcores": {
                "type": "string"
              },
              "instance_mem": {
                "type": "string"
              },
              "vmnic": {
                "type": "string"
              },
              "vmmem": {
                "type": "string"
              },
              "instance_cpus": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "instance_disksize": {
                "type": "string"
              },
              "instance_nic": {
                "type": "string"
              },
              "vmnetwork": {
                "type": "string"
              },
              "vmname": {
                "type": "string"
              },
              "vm_disksize": {
                "type": "string"
              },
              "instance_cores": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "instance_type": {
                "type": "string"
              },
              "vmtype": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "vmcpus": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "instance_network": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "sdomain": {
                "type": "string"
              },
              "instance_os": {
                "type": "string"
              },
              "disk_alloc": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "instance_name": {
                "type": "string"
              },
              "vmos": {
                "type": "string"
              },
              "resource_type": {
                "type": "string"
              },
              "disk_int": {
                "type": "string"
              }
            }
          },
          "profitbricks_volume": {
            "required": [
              "datacenter",
              "name",
              "image"
            ],
            "type": "object",
            "description": "Allows you to create or remove a volume from a ProfitBricks datacenter. This module has a dependency on profitbricks >= 1.0.0",
            "properties": {
              "count": {
                "type": "string"
              },
              "datacenter": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "subscription_user": {
                "type": "string"
              },
              "licence_type": {
                "type": "string"
              },
              "bus": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "instance_ids": {
                "type": "array"
              },
              "subscription_password": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "auto_increment": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "disk_type": {
                "type": "string"
              },
              "size": {
                "type": "string"
              }
            }
          },
          "redhat_subscription": {
            "type": "object",
            "description": "Manage registration and subscription to the Red Hat Network entitlement platform.",
            "properties": {
              "username": {
                "type": "string"
              },
              "server_hostname": {
                "type": "string"
              },
              "org_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "pool": {
                "type": "string"
              },
              "activationkey": {
                "type": "string"
              },
              "server_insecure": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "rhsm_baseurl": {
                "type": "string"
              },
              "autosubscribe": {
                "type": "string"
              }
            }
          },
          "capabilities": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "capability",
                        "cap"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "capability"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "cap"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module manipulates files privileges using the Linux capabilities(7) system.",
            "properties": {
              "capability": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "cap": {
                "type": "string"
              }
            }
          },
          "subversion": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "repo",
                        "name",
                        "repository"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "repo"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "repository"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "revision",
                        "version"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Deploy given repository URL / revision to dest. If dest exists, update to the specified revision, otherwise perform a checkout.",
            "properties": {
              "username": {
                "type": "string"
              },
              "executable": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "repository": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "repo": {
                "type": "string"
              },
              "switch": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "export": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "revision": {
                "type": "string"
              }
            }
          },
          "group_by": {
            "required": [
              "key"
            ],
            "type": "object",
            "description": "Use facts to create ad-hoc groups that can be used later in a playbook.",
            "properties": {
              "key": {
                "type": "string"
              }
            }
          },
          "rax_mon_notification": {
            "required": [
              "notification_type",
              "details",
              "label"
            ],
            "type": "object",
            "description": "Create or delete a Rackspace Cloud Monitoring notification that specifies a channel that can be used to communicate alarms, such as email, webhooks, or PagerDuty. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> *rax_mon_notification* -> rax_mon_notification_plan -> rax_mon_alarm",
            "properties": {
              "notification_type": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "details": {
                "type": "string"
              },
              "label": {
                "type": "string"
              }
            }
          },
          "ec2_elb_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "names",
                        "elb_ids",
                        "ec2_elbs"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gather facts about EC2 Elastic Load Balancers in AWS",
            "properties": {
              "elb_ids": {
                "type": "array"
              },
              "names": {
                "type": "array"
              },
              "ec2_elbs": {
                "type": "array"
              }
            }
          },
          "uptimerobot": {
            "required": [
              "monitorid",
              "state",
              "apikey"
            ],
            "type": "object",
            "description": "This module will let you start and pause Uptime Robot Monitoring",
            "properties": {
              "monitorid": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "apikey": {
                "type": "string"
              }
            }
          },
          "rax_mon_check": {
            "required": [
              "entity_id",
              "check_type",
              "label"
            ],
            "type": "object",
            "description": "Create or delete a Rackspace Cloud Monitoring check associated with an existing rax_mon_entity. A check is a specific test or measurement that is performed, possibly from different monitoring zones, on the systems you monitor. Rackspace monitoring module flow | rax_mon_entity -> *rax_mon_check* -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm",
            "properties": {
              "entity_id": {
                "type": "string"
              },
              "check_type": {
                "type": "string"
              },
              "target_alias": {
                "type": "string"
              },
              "target_hostname": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "disabled": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "period": {
                "type": "string"
              },
              "details": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "monitoring_zones_poll": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              }
            }
          },
          "ohai": {
            "type": "object",
            "description": "Similar to the M(facter) module, this runs the I(Ohai) discovery program (U(http://wiki.opscode.com/display/chef/Ohai)) on the remote host and returns JSON inventory data. I(Ohai) data is a bit more verbose and nested than I(facter).",
            "properties": {}
          },
          "win_environment": {
            "required": [
              "name",
              "level"
            ],
            "type": "object",
            "description": "Uses .net Environment to set or remove environment variables and can set at User, Machine or Process level.\nUser level environment variables will be set, but not available until the user has logged off and on again.",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "level": {
                "type": "string"
              }
            }
          },
          "apt": {
            "type": "object",
            "description": "Manages I(apt) packages (such as for Debian/Ubuntu).",
            "properties": {
              "dpkg_options": {
                "type": "string"
              },
              "upgrade": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "purge": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "update_cache": {
                "type": "string"
              },
              "default_release": {
                "type": "string"
              },
              "install_recommends": {
                "type": "string"
              },
              "deb": {
                "type": "string"
              },
              "cache_valid_time": {
                "type": "string"
              }
            }
          },
          "sqs_queue": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create or delete AWS SQS queues.\nUpdate attributes on existing queues.",
            "properties": {
              "message_retention_period": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "delivery_delay": {
                "type": "string"
              },
              "default_visibility_timeout": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "maximum_message_size": {
                "type": "string"
              },
              "receive_message_wait_time": {
                "type": "string"
              }
            }
          },
          "rabbitmq_binding": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "src",
                        "source"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "src"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "source"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "destination",
                        "dst",
                        "dest"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "destination"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dst"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "destination_type",
                        "type",
                        "dest_type"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "destination_type"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest_type"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module uses rabbitMQ Rest API to create/delete bindings",
            "properties": {
              "login_port": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "dest_type": {
                "type": "string"
              },
              "src": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "login_host": {
                "type": "string"
              },
              "destination": {
                "type": "string"
              },
              "routing_key": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "arguments": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "destination_type": {
                "type": "string"
              },
              "vhost": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "dst": {
                "type": "string"
              }
            }
          },
          "s3_lifecycle": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manage s3 bucket lifecycle rules in AWS",
            "properties": {
              "status": {
                "type": "string"
              },
              "transition_days": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "expiration_date": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "prefix": {
                "type": "string"
              },
              "storage_class": {
                "type": "string"
              },
              "expiration_days": {
                "type": "string"
              },
              "rule_id": {
                "type": "string"
              },
              "transition_date": {
                "type": "string"
              }
            }
          },
          "os_port": {
            "required": [
              "network"
            ],
            "type": "object",
            "description": "Add, Update or Remove ports from an OpenStack cloud.  A state=present, will ensure the port is created or updated if required.",
            "properties": {
              "name": {
                "type": "string"
              },
              "allowed_address_pairs": {
                "type": "string"
              },
              "admin_state_up": {
                "type": "string"
              },
              "extra_dhcp_opt": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "device_owner": {
                "type": "string"
              },
              "no_security_groups": {
                "type": "string"
              },
              "mac_address": {
                "type": "string"
              },
              "device_id": {
                "type": "string"
              },
              "fixed_ips": {
                "type": "string"
              },
              "security_groups": {
                "type": "string"
              },
              "network": {
                "type": "string"
              }
            }
          },
          "seport": {
            "required": [
              "setype",
              "proto",
              "state",
              "ports"
            ],
            "type": "object",
            "description": "Manages SELinux network port type definitions.",
            "properties": {
              "ports": {
                "type": "string"
              },
              "reload": {
                "type": "string"
              },
              "setype": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "proto": {
                "type": "string"
              }
            }
          },
          "os_security_group": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or Remove security groups from an OpenStack cloud.",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "sensu_check": {
            "required": [
              "name",
              "command"
            ],
            "type": "object",
            "description": "Manage the checks that should be run on a machine by I(Sensu).\nMost options do not have a default and will not be added to the check definition unless specified.\nAll defaults except I(path), I(state), I(backup) and I(metric) are not managed by this module,\nthey are simply specified for your convenience.",
            "properties": {
              "interval": {
                "type": "string"
              },
              "handle": {
                "type": "string"
              },
              "low_flap_threshold": {
                "type": "string"
              },
              "standalone": {
                "type": "string"
              },
              "publish": {
                "type": "string"
              },
              "subdue_end": {
                "type": "string"
              },
              "metric": {
                "type": "string"
              },
              "handlers": {
                "type": "array"
              },
              "timeout": {
                "type": "string"
              },
              "subdue_begin": {
                "type": "string"
              },
              "occurrences": {
                "type": "string"
              },
              "high_flap_threshold": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "dependencies": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "refresh": {
                "type": "string"
              },
              "subscribers": {
                "type": "array"
              },
              "aggregate": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "typetalk": {
            "required": [
              "topic",
              "client_secret",
              "client_id",
              "msg"
            ],
            "type": "object",
            "description": "Send a message to typetalk using typetalk API ( http://developers.typetalk.in/ )",
            "properties": {
              "topic": {
                "type": "string"
              },
              "client_secret": {
                "type": "string"
              },
              "client_id": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              }
            }
          },
          "iam_cert": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Allows for the management of server certificates",
            "properties": {
              "new_name": {
                "type": "string"
              },
              "aws_secret_key": {
                "type": "string"
              },
              "dup_ok": {
                "type": "string"
              },
              "new_path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "aws_access_key": {
                "type": "string"
              },
              "cert": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "ec2_access_key": {
                "type": "string"
              },
              "access_key": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "secret_key": {
                "type": "string"
              },
              "ec2_secret_key": {
                "type": "string"
              },
              "cert_chain": {
                "type": "string"
              }
            }
          },
          "postgresql_db": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or remove PostgreSQL databases from a remote host.",
            "properties": {
              "login_host": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "encoding": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "lc_collate": {
                "type": "string"
              },
              "lc_ctype": {
                "type": "string"
              },
              "login_unix_socket": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "template": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "quantum_floating_ip": {
            "required": [
              "login_password",
              "instance_name",
              "login_tenant_name",
              "login_username",
              "network_name"
            ],
            "type": "object",
            "description": "Add or Remove a floating IP to an instance",
            "properties": {
              "region_name": {
                "type": "string"
              },
              "internal_network_name": {
                "type": "string"
              },
              "instance_name": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "auth_url": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "login_username": {
                "type": "string"
              },
              "network_name": {
                "type": "string"
              }
            }
          },
          "composer": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "no_scripts",
                        "no-scripts"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "prefer_source",
                        "prefer-source"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "prefer_dist",
                        "prefer-dist"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "working_dir",
                        "working-dir"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "working_dir"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "working-dir"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ignore_platform_reqs",
                        "ignore-platform-reqs"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "no_dev",
                        "no-dev"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "no_plugins",
                        "no-plugins"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "optimize_autoloader",
                        "optimize-autoloader"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Composer is a tool for dependency management in PHP. It allows you to declare the dependent libraries your project needs and it will install them in your project for you",
            "properties": {
              "prefer-source": {
                "type": "string"
              },
              "prefer-dist": {
                "type": "string"
              },
              "no-plugins": {
                "type": "string"
              },
              "no_scripts": {
                "type": "string"
              },
              "no_plugins": {
                "type": "string"
              },
              "optimize_autoloader": {
                "type": "string"
              },
              "working-dir": {
                "type": "string"
              },
              "optimize-autoloader": {
                "type": "string"
              },
              "working_dir": {
                "type": "string"
              },
              "ignore-platform-reqs": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "arguments": {
                "type": "string"
              },
              "no-dev": {
                "type": "string"
              },
              "ignore_platform_reqs": {
                "type": "string"
              },
              "no_dev": {
                "type": "string"
              },
              "no-scripts": {
                "type": "string"
              },
              "prefer_dist": {
                "type": "string"
              },
              "prefer_source": {
                "type": "string"
              }
            }
          },
          "ec2_key": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "maintains ec2 key pairs. This module has a dependency on python-boto >= 2.5",
            "properties": {
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "key_material": {
                "type": "string"
              }
            }
          },
          "ipify_facts": {
            "type": "object",
            "description": "If behind NAT and need to know the public IP of your internet gateway.",
            "properties": {
              "api_url": {
                "type": "string"
              }
            }
          },
          "cs_network": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, update, restart and delete networks.",
            "properties": {
              "domain": {
                "type": "string"
              },
              "end_ipv6": {
                "type": "string"
              },
              "gateway": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "start_ipv6": {
                "type": "string"
              },
              "cidr_ipv6": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "end_ip": {
                "type": "string"
              },
              "vlan": {
                "type": "string"
              },
              "clean_up": {
                "type": "string"
              },
              "netmask": {
                "type": "string"
              },
              "network_offering": {
                "type": "string"
              },
              "vpc": {
                "type": "string"
              },
              "start_ip": {
                "type": "string"
              },
              "gateway_ipv6": {
                "type": "string"
              },
              "display_text": {
                "type": "string"
              },
              "isolated_pvlan": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "network_domain": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "acl_type": {
                "type": "string"
              }
            }
          },
          "accelerate": {
            "type": "object",
            "description": "This modules launches an ephemeral I(accelerate) daemon on the remote node which Ansible can use to communicate with nodes at high speed.\nThe daemon listens on a configurable port for a configurable amount of time.\nFireball mode is AES encrypted",
            "properties": {
              "ipv6": {
                "type": "string"
              },
              "minutes": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "multi_key": {
                "type": "string"
              }
            }
          },
          "cpanm": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "system_lib",
                        "use_sudo"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage Perl library dependencies.",
            "properties": {
              "name": {
                "type": "string"
              },
              "installdeps": {
                "type": "string"
              },
              "system_lib": {
                "type": "string"
              },
              "use_sudo": {
                "type": "string"
              },
              "mirror_only": {
                "type": "string"
              },
              "from_path": {
                "type": "string"
              },
              "pkg": {
                "type": "string"
              },
              "mirror": {
                "type": "string"
              },
              "locallib": {
                "type": "string"
              },
              "notest": {
                "type": "string"
              }
            }
          },
          "os_router": {
            "required": [
              "network",
              "name"
            ],
            "type": "object",
            "description": "Create or Delete routers from OpenStack. Although Neutron allows routers to share the same name, this module enforces name uniqueness to be more user friendly.",
            "properties": {
              "enable_snat": {
                "type": "string"
              },
              "network": {
                "type": "string"
              },
              "admin_state_up": {
                "type": "string"
              },
              "interfaces": {
                "type": "array"
              },
              "name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "external_fixed_ips": {
                "type": "string"
              }
            }
          },
          "openvswitch_bridge": {
            "required": [
              "bridge"
            ],
            "type": "object",
            "description": "Manage Open vSwitch bridges",
            "properties": {
              "bridge": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "fail_mode": {
                "type": "string"
              },
              "external_ids": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              }
            }
          },
          "digital_ocean_domain": {
            "type": "object",
            "description": "Create/delete a DNS record in DigitalOcean.",
            "properties": {
              "ip": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "api_token": {
                "type": "string"
              }
            }
          },
          "redis": {
            "required": [
              "command"
            ],
            "type": "object",
            "description": "Unified utility to interact with redis instances. 'slave' sets a redis instance in slave or master mode. 'flush' flushes all the instance or a specified db. 'config' (new in 1.6), ensures a configuration setting on an instance.",
            "properties": {
              "login_port": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "flush_mode": {
                "type": "string"
              },
              "db": {
                "type": "string"
              },
              "login_host": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "master_host": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "master_port": {
                "type": "string"
              },
              "slave_mode": {
                "type": "string"
              }
            }
          },
          "campfire": {
            "required": [
              "msg",
              "token",
              "subscription",
              "room"
            ],
            "type": "object",
            "description": "Send a message to Campfire.\nMessages with newlines will result in a \"Paste\" message being sent.",
            "properties": {
              "msg": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "room": {
                "type": "string"
              },
              "notify": {
                "type": "string"
              },
              "subscription": {
                "type": "string"
              }
            }
          },
          "lvol": {
            "required": [
              "lv",
              "vg"
            ],
            "type": "object",
            "description": "This module creates, removes or resizes logical volumes.",
            "properties": {
              "force": {
                "type": "string"
              },
              "vg": {
                "type": "string"
              },
              "lv": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "opts": {
                "type": "string"
              },
              "size": {
                "type": "string"
              }
            }
          },
          "os_server_facts": {
            "type": "object",
            "description": "Retrieve facts about server instances from OpenStack.",
            "properties": {
              "detailed": {
                "type": "string"
              },
              "server": {
                "type": "string"
              }
            }
          },
          "vertica_user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "roles",
                        "role"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds or removes Vertica database user and, optionally, assigns roles.\nA user will not be removed until all the dependencies have been dropped.\nIn such a situation, if the module tries to remove the user it will fail and only remove roles granted to the user.",
            "properties": {
              "profile": {
                "type": "string"
              },
              "resource_pool": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "roles": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "db": {
                "type": "string"
              },
              "cluster": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "role": {
                "type": "string"
              },
              "ldap": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "expired": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "os_nova_flavor": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or remove flavors from OpenStack.",
            "properties": {
              "flavorid": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "ram": {
                "type": "string"
              },
              "ephemeral": {
                "type": "string"
              },
              "vcpus": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "swap": {
                "type": "string"
              },
              "rxtx_factor": {
                "type": "string"
              },
              "is_public": {
                "type": "string"
              },
              "disk": {
                "type": "string"
              }
            }
          },
          "assemble": {
            "required": [
              "src",
              "dest"
            ],
            "type": "object",
            "description": "Assembles a configuration file from fragments. Often a particular program will take a single configuration file and does not support a C(conf.d) style structure where it is easy to build up the configuration from multiple sources. M(assemble) will take a directory of files that can be local or have already been transferred to the system, and concatenate them together to produce a destination file. Files are assembled in string sorting order. Puppet calls this idea I(fragments).",
            "properties": {
              "ignore_hidden": {
                "type": "string"
              },
              "src": {
                "type": "string"
              },
              "remote_src": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "delimiter": {
                "type": "string"
              },
              "regexp": {
                "type": "string"
              },
              "validate": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              }
            }
          },
          "os_security_group_rule": {
            "required": [
              "security_group"
            ],
            "type": "object",
            "description": "Add or Remove rule from an existing security group",
            "properties": {
              "direction": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "remote_ip_prefix": {
                "type": "string"
              },
              "port_range_max": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "port_range_min": {
                "type": "string"
              },
              "ethertype": {
                "type": "string"
              },
              "security_group": {
                "type": "string"
              },
              "remote_group": {
                "type": "string"
              }
            }
          },
          "ufw": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "to_ip",
                        "to",
                        "dest"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "to_port",
                        "port"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "from_ip",
                        "from",
                        "src"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "interface",
                        "if"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "app"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage firewall with UFW.",
            "properties": {
              "to_port": {
                "type": "string"
              },
              "app": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "if": {
                "type": "string"
              },
              "from": {
                "type": "string"
              },
              "log": {
                "type": "string"
              },
              "proto": {
                "type": "string"
              },
              "to": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "policy": {
                "type": "string"
              },
              "direction": {
                "type": "string"
              },
              "from_port": {
                "type": "string"
              },
              "to_ip": {
                "type": "string"
              },
              "insert": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "from_ip": {
                "type": "string"
              },
              "interface": {
                "type": "string"
              },
              "src": {
                "type": "string"
              },
              "logging": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "route": {
                "type": "string"
              },
              "rule": {
                "type": "string"
              },
              "delete": {
                "type": "string"
              }
            }
          },
          "haproxy": {
            "required": [
              "state",
              "host"
            ],
            "type": "object",
            "description": "Enable, disable, and set weights for HAProxy backend servers using socket commands.",
            "properties": {
              "socket": {
                "type": "string"
              },
              "weight": {
                "type": "string"
              },
              "wait_interval": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "backend": {
                "type": "string"
              },
              "wait_retries": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "shutdown_sessions": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "cs_facts": {
            "type": "object",
            "description": "This module fetches data from the metadata API in CloudStack. The module must be called from within the instance itself.",
            "properties": {
              "filter": {
                "type": "string"
              }
            }
          },
          "package": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Installs, upgrade and removes packages using the underlying OS package manager.",
            "properties": {
              "state": {
                "type": "string"
              },
              "use": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "get_url": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "thirsty"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Downloads files from HTTP, HTTPS, or FTP to the remote server. The remote server I(must) have direct access to the remote resource.\nBy default, if an environment variable C(<protocol>_proxy) is set on the target host, requests will be sent through that proxy. This behaviour can be overridden by setting a variable for this task (see `setting the environment <http://docs.ansible.com/playbooks_environment.html>`_), or by using the use_proxy option.\nHTTP redirects can redirect from HTTP to HTTPS so you should be sure that your proxy environment for both protocols is correct.",
            "properties": {
              "url_password": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "use_proxy": {
                "type": "string"
              },
              "thirsty": {
                "type": "string"
              },
              "headers": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "checksum": {
                "type": "string"
              },
              "force_basic_auth": {
                "type": "string"
              },
              "sha256sum": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "others": {
                "type": "string"
              },
              "url_username": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "acl": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "path"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Sets and retrieves file ACL information.",
            "properties": {
              "entry": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "default": {
                "type": "string"
              },
              "recursive": {
                "type": "string"
              },
              "entity": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "follow": {
                "type": "string"
              },
              "etype": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "permissions": {
                "type": "string"
              }
            }
          },
          "selinux_permissive": {
            "required": [
              "domain",
              "permissive"
            ],
            "type": "object",
            "description": "Add and remove domain from the list of permissive domain.",
            "properties": {
              "domain": {
                "type": "string"
              },
              "store": {
                "type": "string"
              },
              "no_reload": {
                "type": "string"
              },
              "permissive": {
                "type": "string"
              }
            }
          },
          "azure": {
            "required": [
              "image",
              "storage_account",
              "name",
              "location"
            ],
            "type": "object",
            "description": "Creates or terminates azure instances. When created optionally waits for it to be 'running'.",
            "properties": {
              "endpoints": {
                "type": "string"
              },
              "role_size": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "virtual_network_name": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "enable_winrm": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout_redirects": {
                "type": "string"
              },
              "management_cert_path": {
                "type": "string"
              },
              "ssh_cert_path": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "reset_pass_atlogon": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "auto_updates": {
                "type": "string"
              },
              "storage_account": {
                "type": "string"
              },
              "os_type": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "subscription_id": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "ecs_task": {
            "required": [
              "operation"
            ],
            "type": "object",
            "description": "Creates or deletes instances of task definitions.",
            "properties": {
              "count": {
                "type": "string"
              },
              "task": {
                "type": "string"
              },
              "overrides": {
                "type": "string"
              },
              "started_by": {
                "type": "string"
              },
              "cluster": {
                "type": "string"
              },
              "task_definition": {
                "type": "string"
              },
              "container_instances": {
                "type": "string"
              },
              "operation": {
                "type": "string"
              }
            }
          },
          "zabbix_host": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_url",
                        "url"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "server_url"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "url"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module allows you to create, modify and delete Zabbix host entries and associated group and template data.",
            "properties": {
              "status": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "interfaces": {
                "type": "array"
              },
              "server_url": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "host_name": {
                "type": "string"
              },
              "host_groups": {
                "type": "array"
              },
              "login_password": {
                "type": "string"
              },
              "link_templates": {
                "type": "array"
              },
              "proxy": {
                "type": "string"
              }
            }
          },
          "swdepot": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Will install, upgrade and remove packages with swdepot package manager (HP-UX)",
            "properties": {
              "state": {
                "type": "string"
              },
              "depot": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "linode": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "linode_id",
                        "lid"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates / deletes a Linode Public Cloud instance and optionally waits for it to be 'running'.",
            "properties": {
              "lid": {
                "type": "string"
              },
              "datacenter": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "payment_term": {
                "type": "string"
              },
              "linode_id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "swap": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "distribution": {
                "type": "string"
              },
              "api_key": {
                "type": "string"
              },
              "ssh_pub_key": {
                "type": "string"
              },
              "plan": {
                "type": "string"
              }
            }
          },
          "rax_dns_record": {
            "required": [
              "name",
              "data",
              "type"
            ],
            "type": "object",
            "description": "Manage DNS records on Rackspace Cloud DNS",
            "properties": {
              "comment": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "ttl": {
                "type": "string"
              },
              "data": {
                "type": "string"
              },
              "loadbalancer": {
                "type": "string"
              }
            }
          },
          "keystone_user": {
            "type": "object",
            "description": "Manage users,tenants, roles from OpenStack.",
            "properties": {
              "tenant_description": {
                "type": "string"
              },
              "endpoint": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "login_tenant_name": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "role": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "tenant": {
                "type": "string"
              }
            }
          },
          "gce_pd": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "This module can create and destroy unformatted GCE persistent disks U(https://developers.google.com/compute/docs/disks#persistentdisks). It also supports attaching and detaching disks from running instances. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.",
            "properties": {
              "size_gb": {
                "type": "string"
              },
              "disk_type": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "service_account_email": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "pem_file": {
                "type": "string"
              },
              "instance_name": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "snapshot": {
                "type": "string"
              },
              "detach_only": {
                "type": "string"
              },
              "project_id": {
                "type": "string"
              },
              "mode": {
                "type": "string"
              }
            }
          },
          "profitbricks_nic": {
            "required": [
              "datacenter",
              "lan",
              "name",
              "server"
            ],
            "type": "object",
            "description": "This module allows you to create or restore a volume snapshot. This module has a dependency on profitbricks >= 1.0.0",
            "properties": {
              "datacenter": {
                "type": "string"
              },
              "lan": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "subscription_user": {
                "type": "string"
              },
              "server": {
                "type": "string"
              },
              "subscription_password": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "ec2_ami_copy": {
            "required": [
              "source_region",
              "source_image_id"
            ],
            "type": "object",
            "description": "Copies AMI from a source region to a destination region. This module has a dependency on python-boto >= 2.5",
            "properties": {
              "name": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "source_image_id": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "source_region": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "slurp": {
            "required": [
              "src"
            ],
            "type": "object",
            "description": "This module works like M(fetch). It is used for fetching a base64- encoded blob containing the data in a remote file.",
            "properties": {
              "src": {
                "type": "string"
              }
            }
          },
          "os_user": {
            "required": [
              "name",
              "password"
            ],
            "type": "object",
            "description": "Manage OpenStack Identity users. Users can be created, updated or deleted using this module. A user will be updated if I(name) matches an existing user and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the user.",
            "properties": {
              "default_project": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "enabled": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "cs_account": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, disable, lock, enable and remove accounts.",
            "properties": {
              "username": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "account_type": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "network_domain": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "seboolean": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Toggles SELinux booleans.",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "persistent": {
                "type": "string"
              }
            }
          },
          "postgresql_lang": {
            "required": [
              "lang"
            ],
            "type": "object",
            "description": "Adds, removes or changes procedural languages with a PostgreSQL database.\nThis module allows you to add a language, remote a language or change the trust relationship with a PostgreSQL database. The module can be used on the machine where executed or on a remote host.\nWhen removing a language from a database, it is possible that dependencies prevent the database from being removed. In that case, you can specify casade to automatically drop objects that depend on the language (such as functions in the language). In case the language can't be deleted because it is required by the database system, you can specify fail_on_drop=no to ignore the error.\nBe carefull when marking a language as trusted since this could be a potential security breach. Untrusted languages allow only users with the PostgreSQL superuser privilege to use this language to create new functions.",
            "properties": {
              "lang": {
                "type": "string"
              },
              "cascade": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "login_host": {
                "type": "string"
              },
              "db": {
                "type": "string"
              },
              "force_trust": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "trust": {
                "type": "string"
              },
              "fail_on_drop": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "consul_acl": {
            "type": "object",
            "description": "allows the addition, modification and deletion of ACL keys and associated rules in a consul cluster via the agent. For more details on using and configuring ACLs, see https://www.consul.io/docs/internals/acl.html.",
            "properties": {
              "name": {
                "type": "string"
              },
              "rules": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "mgmt_token": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "lldp": {
            "type": "object",
            "description": "Reads data out of lldpctl",
            "properties": {}
          },
          "git": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "repo",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "repo"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage I(git) checkouts of repositories to deploy files or software.",
            "properties": {
              "executable": {
                "type": "string"
              },
              "refspec": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "track_submodules": {
                "type": "string"
              },
              "reference": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "recursive": {
                "type": "string"
              },
              "clone": {
                "type": "string"
              },
              "verify_commit": {
                "type": "string"
              },
              "update": {
                "type": "string"
              },
              "accept_hostkey": {
                "type": "string"
              },
              "ssh_opts": {
                "type": "string"
              },
              "repo": {
                "type": "string"
              },
              "depth": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "bare": {
                "type": "string"
              },
              "remote": {
                "type": "string"
              },
              "key_file": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "vmware_vswitch": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add a VMware Standard Switch to an ESXi host",
            "properties": {
              "username": {
                "type": "string"
              },
              "number_of_ports": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "mtu": {
                "type": "string"
              },
              "nic_name": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "switch_name": {
                "type": "string"
              }
            }
          },
          "vertica_schema": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "create_roles",
                        "create_role"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "usage_roles",
                        "usage_role"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds or removes Vertica database schema and, optionally, roles with schema access privileges.\nA schema will not be removed until all the objects have been dropped.\nIn such a situation, if the module tries to remove the schema it will fail and only remove roles created for the schema if they have no dependencies.",
            "properties": {
              "create_roles": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "db": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "usage_roles": {
                "type": "string"
              },
              "cluster": {
                "type": "string"
              },
              "usage_role": {
                "type": "string"
              },
              "create_role": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "win_firewall_rule": {
            "required": [
              "direction",
              "name",
              "state",
              "action"
            ],
            "type": "object",
            "description": "allows you to create/remove/update firewall rules",
            "properties": {
              "profile": {
                "type": "string"
              },
              "remoteport": {
                "type": "string"
              },
              "direction": {
                "type": "string"
              },
              "enable": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "service": {
                "type": "string"
              },
              "localport": {
                "type": "string"
              },
              "localip": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "program": {
                "type": "string"
              },
              "remoteip": {
                "type": "string"
              },
              "action": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "vsphere_guest": {
            "required": [
              "username",
              "vcenter_hostname",
              "password",
              "guest"
            ],
            "type": "object",
            "description": "Create/delete/reconfigure a guest VM through VMware vSphere. This module has a dependency on pysphere >= 1.7",
            "properties": {
              "username": {
                "type": "string"
              },
              "resource_pool": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "guest": {
                "type": "string"
              },
              "vm_disk": {
                "type": "string"
              },
              "vm_hw_version": {
                "type": "string"
              },
              "esxi": {
                "type": "string"
              },
              "vm_nic": {
                "type": "string"
              },
              "vm_hardware": {
                "type": "string"
              },
              "cluster": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "vmware_guest_facts": {
                "type": "string"
              },
              "vm_extra_config": {
                "type": "string"
              },
              "power_on_after_clone": {
                "type": "string"
              },
              "vcenter_hostname": {
                "type": "string"
              },
              "from_template": {
                "type": "string"
              },
              "template_src": {
                "type": "string"
              },
              "snapshot_to_clone": {
                "type": "string"
              }
            }
          },
          "win_group": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add and remove local groups",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "getent": {
            "required": [
              "database"
            ],
            "type": "object",
            "description": "Runs getent against one of it's various databases and returns information into the host's facts, in a getent_<database> prefixed variable",
            "properties": {
              "fail_key": {
                "type": "string"
              },
              "split": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "database": {
                "type": "string"
              }
            }
          },
          "vca_vapp": {
            "required": [
              "vapp_name"
            ],
            "type": "object",
            "description": "This module will actively managed vCloud Air vApp instances.  Instances can be created and deleted as well as both deployed and undeployed.",
            "properties": {
              "vm_name": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "vm_memory": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "template_name": {
                "type": "string"
              },
              "instance_id": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "network_mode": {
                "type": "string"
              },
              "vapp_name": {
                "type": "string"
              },
              "network_name": {
                "type": "string"
              },
              "service_type": {
                "type": "string"
              },
              "org": {
                "type": "string"
              },
              "operation": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "vm_cpus": {
                "type": "string"
              },
              "vdc_name": {
                "type": "string"
              },
              "api_version": {
                "type": "string"
              }
            }
          },
          "cs_firewall": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "start_port",
                        "port"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates and removes firewall rules.",
            "properties": {
              "icmp_code": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "network": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "ip_address": {
                "type": "string"
              },
              "end_port": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "start_port": {
                "type": "string"
              },
              "cidr": {
                "type": "string"
              },
              "icmp_type": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "hg": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "repo",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "repo"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "revision",
                        "version"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages Mercurial (hg) repositories. Supports SSH, HTTP/S and local address.",
            "properties": {
              "repo": {
                "type": "string"
              },
              "executable": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "update": {
                "type": "string"
              },
              "purge": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "revision": {
                "type": "string"
              }
            }
          },
          "win_package": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "state",
                        "ensure"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "product_id",
                        "productid"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "product_id"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "productid"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Installs or uninstalls a package",
            "properties": {
              "product_id": {
                "type": "string"
              },
              "user_password": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "ensure": {
                "type": "string"
              },
              "arguments": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "productid": {
                "type": "string"
              },
              "user_name": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "zabbix_screen": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_url",
                        "url"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "server_url"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "url"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module allows you to create, modify and delete Zabbix screens and associated graph data.",
            "properties": {
              "url": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "server_url": {
                "type": "string"
              },
              "screens": {
                "type": "array"
              },
              "timeout": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              }
            }
          },
          "pacman": {
            "type": "object",
            "description": "Manage packages with the I(pacman) package manager, which is used by Arch Linux and its variants.",
            "properties": {
              "upgrade": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "recurse": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "update_cache": {
                "type": "string"
              }
            }
          },
          "rabbitmq_plugin": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "names",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "names"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Enables or disables RabbitMQ plugins",
            "properties": {
              "state": {
                "type": "string"
              },
              "names": {
                "type": "string"
              },
              "prefix": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "new_only": {
                "type": "string"
              }
            }
          },
          "firewalld": {
            "required": [
              "state"
            ],
            "type": "object",
            "description": "This module allows for addition or deletion of services and ports either tcp or udp in either running or permanent firewalld rules.",
            "properties": {
              "zone": {
                "type": "string"
              },
              "service": {
                "type": "string"
              },
              "immediate": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "permanent": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "rich_rule": {
                "type": "string"
              }
            }
          },
          "grove": {
            "required": [
              "message",
              "channel_token"
            ],
            "type": "object",
            "description": "The M(grove) module sends a message for a service to a Grove.io channel.",
            "properties": {
              "service": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "icon_url": {
                "type": "string"
              },
              "channel_token": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "lvg": {
            "required": [
              "vg"
            ],
            "type": "object",
            "description": "This module creates, removes or resizes volume groups.",
            "properties": {
              "vg_options": {
                "type": "string"
              },
              "pvs": {
                "type": "array"
              },
              "force": {
                "type": "string"
              },
              "vg": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "pesize": {
                "type": "string"
              }
            }
          },
          "vmware_dvs_portgroup": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or remove a Distributed vSwitch portgroup",
            "properties": {
              "username": {
                "type": "string"
              },
              "portgroup_name": {
                "type": "string"
              },
              "portgroup_type": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "num_ports": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "switch_name": {
                "type": "string"
              },
              "vlan_id": {
                "type": "string"
              }
            }
          },
          "mongodb_user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "user"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds or removes a user from a MongoDB database.",
            "properties": {
              "login_port": {
                "type": "string"
              },
              "update_password": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "roles": {
                "type": "string"
              },
              "database": {
                "type": "string"
              },
              "login_user": {
                "type": "string"
              },
              "login_host": {
                "type": "string"
              },
              "login_password": {
                "type": "string"
              },
              "ssl": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "login_database": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "replica_set": {
                "type": "string"
              }
            }
          },
          "vmware_target_canonical_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Return canonical (NAA) from an ESXi host based on SCSI target ID",
            "properties": {
              "username": {
                "type": "string"
              },
              "admin": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "target_id": {
                "type": "string"
              },
              "pwd": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "pass": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "ec2": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "group",
                        "groups"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "zone",
                        "aws_zone",
                        "ec2_zone"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "key_name",
                        "keypair"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_ids",
                        "instance_id"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "network_interfaces",
                        "network_interface"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates or terminates ec2 instances.",
            "properties": {
              "kernel": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "user_data": {
                "type": "string"
              },
              "termination_protection": {
                "type": "string"
              },
              "private_ip": {
                "type": "string"
              },
              "spot_type": {
                "type": "string"
              },
              "source_dest_check": {
                "type": "string"
              },
              "spot_wait_timeout": {
                "type": "string"
              },
              "monitoring": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "exact_count": {
                "type": "string"
              },
              "ebs_optimized": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "placement_group": {
                "type": "string"
              },
              "count_tag": {
                "type": "string"
              },
              "ec2_region": {
                "type": "string"
              },
              "network_interface": {
                "type": "string"
              },
              "ramdisk": {
                "type": "string"
              },
              "count": {
                "type": "string"
              },
              "key_name": {
                "type": "string"
              },
              "vpc_subnet_id": {
                "type": "string"
              },
              "instance_ids": {
                "type": "array"
              },
              "spot_price": {
                "type": "string"
              },
              "tenancy": {
                "type": "string"
              },
              "groups": {
                "type": "string"
              },
              "assign_public_ip": {
                "type": "string"
              },
              "group": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "aws_zone": {
                "type": "string"
              },
              "aws_region": {
                "type": "string"
              },
              "instance_profile_name": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "network_interfaces": {
                "type": "string"
              },
              "keypair": {
                "type": "string"
              },
              "ec2_zone": {
                "type": "string"
              },
              "instance_id": {
                "type": "array"
              },
              "instance_type": {
                "type": "string"
              },
              "wait_timeout": {
                "type": "string"
              },
              "volumes": {
                "type": "string"
              },
              "instance_tags": {
                "type": "string"
              },
              "group_id": {
                "type": "string"
              }
            }
          },
          "openvswitch_port": {
            "required": [
              "bridge",
              "port"
            ],
            "type": "object",
            "description": "Manage Open vSwitch ports",
            "properties": {
              "bridge": {
                "type": "string"
              },
              "set": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "external_ids": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "cs_project": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, update, suspend, activate and remove projects.",
            "properties": {
              "display_text": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "poll_async": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          },
          "mysql_variables": {
            "required": [
              "variable"
            ],
            "type": "object",
            "description": "Query / Set MySQL variables",
            "properties": {
              "variable": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          },
          "svc": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Controls daemontools services on remote hosts using the svc utility.",
            "properties": {
              "name": {
                "type": "string"
              },
              "downed": {
                "type": "string"
              },
              "enabled": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "service_dir": {
                "type": "string"
              },
              "service_src": {
                "type": "string"
              }
            }
          },
          "circonus_annotation": {
            "required": [
              "category",
              "description",
              "title",
              "api_key"
            ],
            "type": "object",
            "description": "Create an annotation event with a given category, title and description. Optionally start, end or durations can be provided",
            "properties": {
              "category": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "stop": {
                "type": "string"
              },
              "start": {
                "type": "string"
              },
              "duration": {
                "type": "string"
              },
              "api_key": {
                "type": "string"
              }
            }
          },
          "clc_publicip": {
            "required": [
              "server_ids"
            ],
            "type": "object",
            "description": "An Ansible module to add or delete public ip addresses on an existing server or servers in CenturyLink Cloud.",
            "properties": {
              "server_ids": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "ports": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          },
          "at": {
            "required": [
              "count",
              "units"
            ],
            "type": "object",
            "description": "Use this module to schedule a command or script file to run once in the future.\nAll jobs are executed in the 'a' queue.",
            "properties": {
              "count": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "units": {
                "type": "string"
              },
              "unique": {
                "type": "string"
              },
              "script_file": {
                "type": "string"
              }
            }
          },
          "file": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "path",
                        "dest",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Sets attributes of files, symlinks, and directories, or removes files/symlinks/directories. Many other modules support the same options as the M(file) module - including M(copy), M(template), and M(assemble).",
            "properties": {
              "src": {
                "type": "string"
              },
              "force": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "recurse": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "follow": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            }
          },
          "clc_aa_policy": {
            "required": [
              "location",
              "name"
            ],
            "type": "object",
            "description": "An Ansible module to Create or Delete Anti Affinity Policies at CenturyLink Cloud.",
            "properties": {
              "state": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "pip": {
            "type": "object",
            "description": "Manage Python library dependencies. To use this module, one of the following keys is required: C(name) or C(requirements).",
            "properties": {
              "virtualenv": {
                "type": "string"
              },
              "extra_args": {
                "type": "string"
              },
              "virtualenv_command": {
                "type": "string"
              },
              "chdir": {
                "type": "string"
              },
              "requirements": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "virtualenv_python": {
                "type": "string"
              },
              "editable": {
                "type": "string"
              },
              "executable": {
                "type": "string"
              },
              "virtualenv_site_packages": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "version": {
                "type": "string"
              }
            }
          },
          "win_stat": {
            "required": [
              "path"
            ],
            "type": "object",
            "description": "Returns information about a Windows file",
            "properties": {
              "path": {
                "type": "string"
              },
              "get_md5": {
                "type": "string"
              },
              "get_checksum": {
                "type": "string"
              }
            }
          },
          "cs_iso": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Register and remove ISO images.",
            "properties": {
              "is_featured": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "checksum": {
                "type": "string"
              },
              "is_dynamically_scalable": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "bootable": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "is_ready": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "is_public": {
                "type": "string"
              },
              "os_type": {
                "type": "string"
              },
              "iso_filter": {
                "type": "string"
              }
            }
          },
          "ec2_vpc_subnet": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "tags",
                        "resource_tags"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage subnets in AWS virtual private clouds",
            "properties": {
              "tags": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "vpc_id": {
                "type": "string"
              },
              "resource_tags": {
                "type": "string"
              },
              "cidr": {
                "type": "string"
              },
              "az": {
                "type": "string"
              }
            }
          },
          "portinstall": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manage packages for FreeBSD using 'portinstall'.",
            "properties": {
              "state": {
                "type": "string"
              },
              "use_packages": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "win_lineinfile": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "name",
                        "destfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "destfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will search a file for a line, and ensure that it is present or absent.\nThis is primarily useful when you want to change a single line in a file only.",
            "properties": {
              "name": {
                "type": "string"
              },
              "insertbefore": {
                "type": "string"
              },
              "encoding": {
                "type": "string"
              },
              "dest": {
                "type": "string"
              },
              "create": {
                "type": "string"
              },
              "newline": {
                "type": "string"
              },
              "destfile": {
                "type": "string"
              },
              "backrefs": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "insertafter": {
                "type": "string"
              },
              "regexp": {
                "type": "string"
              },
              "line": {
                "type": "string"
              },
              "backup": {
                "type": "string"
              },
              "validate": {
                "type": "string"
              }
            }
          },
          "dpkg_selections": {
            "required": [
              "selection",
              "name"
            ],
            "type": "object",
            "description": "Change dpkg package selection state via --get-selections and --set-selections.",
            "properties": {
              "selection": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "clc_alert_policy": {
            "required": [
              "alias"
            ],
            "type": "object",
            "description": "An Ansible module to Create or Delete Alert Policies at CenturyLink Cloud.",
            "properties": {
              "name": {
                "type": "string"
              },
              "metric": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "alias": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "threshold": {
                "type": "string"
              },
              "alert_recipients": {
                "type": "string"
              },
              "duration": {
                "type": "string"
              }
            }
          },
          "win_iis_virtualdirectory": {
            "required": [
              "name",
              "site"
            ],
            "type": "object",
            "description": "Creates, Removes and configures a virtual directory in IIS.",
            "properties": {
              "application": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "physical_path": {
                "type": "string"
              },
              "site": {
                "type": "string"
              }
            }
          },
          "os_server": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "boot_volume",
                        "root_volume"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "auto_ip",
                        "auto_floating_ip",
                        "public_ip"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or Remove compute instances from OpenStack.",
            "properties": {
              "image": {
                "type": "string"
              },
              "image_exclude": {
                "type": "string"
              },
              "flavor_include": {
                "type": "string"
              },
              "public_ip": {
                "type": "string"
              },
              "meta": {
                "type": "string"
              },
              "flavor": {
                "type": "string"
              },
              "security_groups": {
                "type": "string"
              },
              "boot_from_volume": {
                "type": "string"
              },
              "userdata": {
                "type": "string"
              },
              "network": {
                "type": "string"
              },
              "nics": {
                "type": "string"
              },
              "floating_ips": {
                "type": "array"
              },
              "flavor_ram": {
                "type": "string"
              },
              "volume_size": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "auto_ip": {
                "type": "string"
              },
              "root_volume": {
                "type": "string"
              },
              "config_drive": {
                "type": "string"
              },
              "terminate_volume": {
                "type": "string"
              },
              "key_name": {
                "type": "string"
              },
              "boot_volume": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "auto_floating_ip": {
                "type": "string"
              },
              "timeout": {
                "type": "string"
              },
              "volumes": {
                "type": "string"
              },
              "floating_ip_pools": {
                "type": "array"
              }
            }
          },
          "crypttab": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Control Linux encrypted block devices that are set up during system boot in C(/etc/crypttab).",
            "properties": {
              "name": {
                "type": "string"
              },
              "backing_device": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "opts": {
                "type": "string"
              }
            }
          },
          "riak": {
            "type": "object",
            "description": "This module can be used to join nodes to a cluster, check the status of the cluster.",
            "properties": {
              "target_node": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              },
              "wait_for_service": {
                "type": "string"
              },
              "http_conn": {
                "type": "string"
              },
              "wait_for_ring": {
                "description": "Number of seconds to wait for all nodes to agree on the ring.",
                "$ref": "#/definitions/ansible_number"
              },
              "wait_for_handoffs": {
                "description": "Number of seconds to wait for handoffs to complete.",
                "$ref": "#/definitions/ansible_number"
              },
              "command": {
                "type": "string"
              },
              "config_dir": {
                "type": "string"
              }
            }
          },
          "stat": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "checksum_algorithm",
                        "checksum_algo",
                        "checksum"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Retrieves facts for a file similar to the linux/unix 'stat' command.",
            "properties": {
              "checksum_algorithm": {
                "type": "string"
              },
              "get_checksum": {
                "type": "string"
              },
              "checksum": {
                "type": "string"
              },
              "checksum_algo": {
                "type": "string"
              },
              "follow": {
                "type": "string"
              },
              "get_md5": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            }
          },
          "win_regedit": {
            "required": [
              "key",
              "value"
            ],
            "type": "object",
            "description": "Add, Edit, or Remove Registry Keys and Values using ItemProperties Cmdlets",
            "properties": {
              "datatype": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "data": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "key": {
                "type": "string"
              }
            }
          },
          "pear": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manage PHP packages with the pear package manager.",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "rax_meta": {
            "type": "object",
            "description": "Manipulate metadata for Rackspace Cloud Servers",
            "properties": {
              "meta": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              }
            }
          },
          "win_unzip": {
            "required": [
              "dest",
              "src"
            ],
            "type": "object",
            "description": "Unzips compressed files and archives. For extracting any compression types other than .zip, the PowerShellCommunityExtensions (PSCX) Module is required.  This module (in conjunction with PSCX) has the ability to recursively unzip files within the src zip file provided and also functionality for many other compression types. If the destination directory does not exist, it will be created before unzipping the file.  Specifying rm parameter will force removal of the src file after extraction.",
            "properties": {
              "dest": {
                "type": "string"
              },
              "src": {
                "type": "string"
              },
              "recurse": {
                "type": "string"
              },
              "creates": {
                "type": "string"
              },
              "rm": {
                "type": "string"
              }
            }
          },
          "nmcli": {
            "required": [
              "conn_name",
              "state"
            ],
            "type": "object",
            "description": "Manage the network devices. Create, modify, and manage, ethernet, teams, bonds, vlans etc.",
            "properties": {
              "conn_name": {
                "type": "string"
              },
              "ingress": {
                "type": "string"
              },
              "slavepriority": {
                "type": "string"
              },
              "path_cost": {
                "type": "string"
              },
              "vlandev": {
                "type": "string"
              },
              "forwarddelay": {
                "type": "string"
              },
              "primary": {
                "type": "string"
              },
              "hairpin": {
                "type": "string"
              },
              "egress": {
                "type": "string"
              },
              "ageingtime": {
                "type": "string"
              },
              "mtu": {
                "type": "string"
              },
              "arp_ip_target": {
                "type": "string"
              },
              "maxage": {
                "type": "string"
              },
              "vlanid": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "gw4": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "gw6": {
                "type": "string"
              },
              "master": {
                "type": "string"
              },
              "flags": {
                "type": "string"
              },
              "ifname": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "miimon": {
                "type": "string"
              },
              "hellotime": {
                "type": "string"
              },
              "downdelay": {
                "type": "string"
              },
              "mac": {
                "type": "string"
              },
              "ip6": {
                "type": "string"
              },
              "ip4": {
                "type": "string"
              },
              "autoconnect": {
                "type": "string"
              },
              "dns6": {
                "type": "string"
              },
              "dns4": {
                "type": "string"
              },
              "arp_interval": {
                "type": "string"
              },
              "stp": {
                "type": "string"
              },
              "mode": {
                "type": "string"
              },
              "updelay": {
                "type": "string"
              }
            }
          },
          "macports": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manages MacPorts packages",
            "properties": {
              "state": {
                "type": "string"
              },
              "update_cache": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "digital_ocean_sshkey": {
            "type": "object",
            "description": "Create/delete an SSH key.",
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "client_id": {
                "type": "string"
              },
              "api_key": {
                "type": "string"
              },
              "ssh_pub_key": {
                "type": "string"
              }
            }
          },
          "os_user_group": {
            "required": [
              "group",
              "user"
            ],
            "type": "object",
            "description": "Add and remove users from groups",
            "properties": {
              "state": {
                "type": "string"
              },
              "group": {
                "type": "string"
              },
              "user": {
                "type": "string"
              }
            }
          },
          "dnsmadeeasy": {
            "required": [
              "domain",
              "account_secret",
              "account_key",
              "state"
            ],
            "type": "object",
            "description": "Manages DNS records via the v2 REST API of the DNS Made Easy service.  It handles records only; there is no manipulation of domains or monitor/account support yet. See: U(http://www.dnsmadeeasy.com/services/rest-api/)",
            "properties": {
              "domain": {
                "type": "string"
              },
              "record_name": {
                "type": "string"
              },
              "record_ttl": {
                "type": "string"
              },
              "account_secret": {
                "type": "string"
              },
              "account_key": {
                "type": "string"
              },
              "record_type": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "record_value": {
                "type": "string"
              },
              "validate_certs": {
                "type": "string"
              }
            }
          },
          "monit": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manage the state of a program monitored via I(Monit)",
            "properties": {
              "state": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "datadog_monitor": {
            "required": [
              "name",
              "app_key",
              "state",
              "api_key"
            ],
            "type": "object",
            "description": "Manages monitors within Datadog\nOptions like described on http://docs.datadoghq.com/api/",
            "properties": {
              "notify_audit": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "silenced": {
                "type": "string"
              },
              "no_data_timeframe": {
                "type": "string"
              },
              "app_key": {
                "type": "string"
              },
              "notify_no_data": {
                "type": "string"
              },
              "renotify_interval": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "escalation_message": {
                "type": "string"
              },
              "query": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "api_key": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "thresholds": {
                "type": "string"
              },
              "timeout_h": {
                "type": "string"
              }
            }
          },
          "clc_server_snapshot": {
            "required": [
              "server_ids"
            ],
            "type": "object",
            "description": "An Ansible module to Create, Delete and Restore server snapshots in CenturyLink Cloud.",
            "properties": {
              "server_ids": {
                "type": "string"
              },
              "expiration_days": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "wait": {
                "type": "string"
              }
            }
          }
        }
      }
    ]
  },
  "definitions": {
    "ansible_number": {
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "type": "string"
        }
      ]
    },
    "ansible_truth": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        {
          "enum": [
            "yes",
            "no",
            "Yes",
            "No",
            "YES",
            "NO",
            "on",
            "off",
            "On",
            "Off",
            "ON",
            "OFF",
            "1",
            "0",
            "true",
            "false",
            "True",
            "FalseTRUE",
            "FALSE"
          ],
          "type": "string"
        }
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "array"
}
