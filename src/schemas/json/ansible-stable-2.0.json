{
  "description": "Auto-Generated JSON Schema for Ansible-stable 2.0 (https://github.com/shaded-enmity/ansible-schema-generator)",
  "title": "Ansible 2.0",
  "items": {
    "anyOf": [
      {
        "required": [
          "shell"
        ],
        "type": "object",
        "properties": {
          "shell": {
            "type": "string"
          },
          "args": {
            "type": "object",
            "properties": {
              "warn": {
                "type": "string",
                "description": "Default: True\n\nif command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false."
              },
              "creates": {
                "type": "string",
                "description": "a filename, when it already exists, this step will B(not) be run."
              },
              "executable": {
                "type": "string",
                "description": "change the shell used to execute the command. Should be an absolute path to the executable."
              },
              "chdir": {
                "type": "string",
                "description": "cd into this directory before running the command"
              },
              "removes": {
                "type": "string",
                "description": "a filename, when it does not exist, this step will B(not) be run."
              }
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      {
        "required": [
          "raw"
        ],
        "type": "object",
        "properties": {
          "raw": {
            "type": "string"
          },
          "args": {
            "type": "object",
            "properties": {
              "executable": {
                "type": "string",
                "description": "change the shell used to execute the command. Should be an absolute path to the executable."
              }
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      {
        "required": [
          "command"
        ],
        "type": "object",
        "properties": {
          "args": {
            "type": "object",
            "properties": {
              "warn": {
                "type": "string",
                "description": "Default: True\n\nif command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false."
              },
              "creates": {
                "type": "string",
                "description": "a filename or (since 2.0) glob pattern, when it already exists, this step will B(not) be run."
              },
              "executable": {
                "type": "string",
                "description": "change the shell used to execute the command. Should be an absolute path to the executable."
              },
              "chdir": {
                "type": "string",
                "description": "cd into this directory before running the command"
              },
              "removes": {
                "type": "string",
                "description": "a filename or (since 2.0) glob pattern, when it does not exist, this step will B(not) be run."
              }
            }
          },
          "command": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      {
        "required": [
          "script"
        ],
        "type": "object",
        "properties": {
          "args": {
            "type": "object",
            "properties": {
              "creates": {
                "type": "string",
                "description": "a filename, when it already exists, this step will B(not) be run."
              },
              "removes": {
                "type": "string",
                "description": "a filename, when it does not exist, this step will B(not) be run."
              }
            }
          },
          "name": {
            "type": "string"
          },
          "script": {
            "type": "string"
          }
        }
      },
      {
        "properties": {},
        "required": [
          "include_vars"
        ],
        "name": {
          "type": "string"
        },
        "include_vars": {
          "type": "string"
        }
      },
      {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "ecs_taskdefinition": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates or terminates task definitions",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "family": {
                "type": "string",
                "description": "A Name that would be given to the task definition"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "revision": {
                "description": "A revision number for the task definition",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "State whether the task definition should exist or be deleted"
              },
              "arn": {
                "type": "string",
                "description": "The arn of the task description to delete"
              },
              "volumes": {
                "description": "A list of names of volumes to be attached",
                "$ref": "#/definitions/ansible_array"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "containers": {
                "description": "A list of containers definitions",
                "$ref": "#/definitions/ansible_array"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "selinux": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "configfile",
                        "conf",
                        "file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Configures the SELinux mode and policy. A reboot may be required after usage. Ansible will not issue this reboot but will let you know when it is required.",
            "properties": {
              "policy": {
                "type": "string",
                "description": "name of the SELinux policy to use (example: C(targeted)) will be required if state is not C(disabled)"
              },
              "configfile": {
                "type": "string",
                "description": "Default: /etc/selinux/config\n\npath to the SELinux configuration file, if non-standard"
              },
              "file": {
                "type": "string",
                "description": "Default: /etc/selinux/config\n\npath to the SELinux configuration file, if non-standard"
              },
              "conf": {
                "type": "string",
                "description": "Default: /etc/selinux/config\n\npath to the SELinux configuration file, if non-standard"
              },
              "state": {
                "enum": [
                  "enforcing",
                  "permissive",
                  "disabled"
                ],
                "type": "string",
                "description": "The SELinux mode"
              }
            }
          },
          "consul": {
            "type": "object",
            "description": "Registers services and checks for an agent with a consul cluster. A service is some process running on the agent node that should be advertised by consul's discovery mechanism. It may optionally supply a check definition, a periodic service test to notify the consul cluster of service's health.\nChecks may also be registered per node e.g. disk usage, or cpu usage and notify the health of the entire node to the cluster. Service level checks do not require a check name or id as these are derived by Consul from the Service name and id respectively by appending 'service:' Node level checks require a check_name and optionally a check_id.\nCurrently, there is no complete way to retrieve the script, interval or ttl metadata for a registered check. Without this metadata it is  not possible to tell if the data supplied with ansible represents a change to a check. As a result this does not attempt to determine changes and will always report a changed occurred. An api method is planned to supply this metadata so at that stage change management will be added.\nSee http://consul.io for more details.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Default: None\n\nthe interval at which the service check will be run. This is a number with a s or m suffix to signify the units of seconds or minutes e.g 15s or 1m. If no suffix is supplied, m will be used by default e.g. 1 will be 1m. Required if the script param is specified."
              },
              "http": {
                "type": "string",
                "description": "Default: None\n\nchecks can be registered with an http endpoint. This means that consul will check that the http endpoint returns a successful http status. Interval must also be provided with this option."
              },
              "check_node": {
                "type": "string",
                "description": ""
              },
              "tags": {
                "description": "Default: None\n\na list of tags that will be attached to the service registration.",
                "$ref": "#/definitions/ansible_array"
              },
              "check_name": {
                "type": "string",
                "description": "Default: None\n\na name for the service check, defaults to the check id. required if standalone, ignored if part of service definition."
              },
              "service_name": {
                "type": "string",
                "description": "Unique name for the service on a node, must be unique per node, required if registering a service. May be ommitted if registering a node level check"
              },
              "notes": {
                "type": "string",
                "description": "Default: None\n\nNotes to attach to check when registering it."
              },
              "script": {
                "type": "string",
                "description": "Default: None\n\nthe script/command that will be run periodically to check the health of the service. Scripts require an interval and vise versa"
              },
              "token": {
                "type": "string",
                "description": "Default: None\n\nthe token key indentifying an ACL rule set. May be required to register services."
              },
              "check_id": {
                "type": "string",
                "description": "Default: None\n\nan ID for the service check, defaults to the check name, ignored if part of a service definition."
              },
              "host": {
                "type": "string",
                "description": "Default: localhost\n\nhost of the consul agent defaults to localhost"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "register or deregister the consul service, defaults to present"
              },
              "service_port": {
                "description": "the port on which the service is listening required for registration of a service, i.e. if service_name or service_id is set",
                "$ref": "#/definitions/ansible_number"
              },
              "timeout": {
                "type": "string",
                "description": "Default: None\n\nA custom HTTP check timeout. The consul default is 10 seconds. Similar to the interval this is a number with a s or m suffix to signify the units of seconds or minutes, e.g. 15s or 1m."
              },
              "ttl": {
                "type": "string",
                "description": "Default: None\n\nchecks can be registered with a ttl instead of a script and interval this means that the service will check in with the agent before the ttl expires. If it doesn't the check will be considered failed. Required if registering a check and the script an interval are missing Similar to the interval this is a number with a s or m suffix to signify the units of seconds or minutes e.g 15s or 1m. If no suffix is supplied, m will be used by default e.g. 1 will be 1m"
              },
              "service_id": {
                "type": "string",
                "description": "Default: service_name if supplied\n\nthe ID for the service, must be unique per node, defaults to the service name if the service name is supplied"
              },
              "port": {
                "description": "Default: 8500\n\nthe port on which the consul agent is running",
                "$ref": "#/definitions/ansible_number"
              },
              "check_host": {
                "type": "string",
                "description": ""
              }
            }
          },
          "alternatives": {
            "required": [
              "path",
              "name"
            ],
            "type": "object",
            "description": "Manages symbolic links using the 'update-alternatives' tool\nUseful when multiple programs are installed but provide similar functionality (e.g. different editors).",
            "properties": {
              "path": {
                "type": "string",
                "description": "The path to the real executable that the link should point to."
              },
              "link": {
                "type": "string",
                "description": "The path to the symbolic link that should point to the real executable.\nThis option is required on RHEL-based distributions"
              },
              "name": {
                "type": "string",
                "description": "The generic name of the link."
              }
            }
          },
          "gce_lb": {
            "type": "object",
            "description": "This module can create and destroy Google Compute Engine C(loadbalancer) and C(httphealthcheck) resources.  The primary LB resource is the C(load_balancer) resource and the health check parameters are all prefixed with I(httphealthcheck). The full documentation for Google Compute Engine load balancing is at U(https://developers.google.com/compute/docs/load-balancing/).  However, the ansible module simplifies the configuration by following the libcloud model. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.",
            "properties": {
              "httphealthcheck_host": {
                "type": "string",
                "description": "host header to pass through on HTTP check requests"
              },
              "httphealthcheck_name": {
                "type": "string",
                "description": "the name identifier for the HTTP health check"
              },
              "name": {
                "type": "string",
                "description": "name of the load-balancer resource"
              },
              "external_ip": {
                "type": "string",
                "description": "the external static IPv4 (or auto-assigned) address for the LB"
              },
              "service_account_email": {
                "type": "string",
                "description": "service account email"
              },
              "region": {
                "type": "string",
                "description": "the GCE region where the load-balancer is defined"
              },
              "httphealthcheck_unhealthy_count": {
                "type": "string",
                "description": "Default: 2\n\nnumber of consecutive failed checks before marking a node unhealthy"
              },
              "httphealthcheck_healthy_count": {
                "type": "string",
                "description": "Default: 2\n\nnumber of consecutive successful checks before marking a node healthy"
              },
              "pem_file": {
                "type": "string",
                "description": "path to the pem file associated with the service account email"
              },
              "httphealthcheck_path": {
                "type": "string",
                "description": "Default: /\n\nthe url path to use for HTTP health checking"
              },
              "port_range": {
                "type": "string",
                "description": "the port (range) to forward, e.g. 80 or 8000-8888 defaults to all ports"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\ndesired state of the LB"
              },
              "httphealthcheck_timeout": {
                "type": "string",
                "description": "Default: 5\n\nthe timeout in seconds before a request is considered a failed check"
              },
              "members": {
                "description": "a list of zone/nodename pairs, e.g ['us-central1-a/www-a', ...]",
                "$ref": "#/definitions/ansible_array"
              },
              "httphealthcheck_port": {
                "type": "string",
                "description": "Default: 80\n\nthe TCP port to use for HTTP health checking"
              },
              "protocol": {
                "type": "string",
                "description": "Default: tcp\n\nthe protocol used for the load-balancer packet forwarding, tcp or udp"
              },
              "project_id": {
                "type": "string",
                "description": "your GCE project ID"
              },
              "httphealthcheck_interval": {
                "type": "string",
                "description": "Default: 5\n\nthe duration in seconds between each health check request"
              }
            }
          },
          "ecs_cluster": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates or terminates ecs clusters.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "repeat": {
                "description": "The number of times to wait for the cluster to have an instance",
                "$ref": "#/definitions/ansible_number"
              },
              "name": {
                "type": "string",
                "description": "The cluster name"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "delay": {
                "description": "Number of seconds to wait",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "has_instances"
                ],
                "type": "string",
                "description": "The desired state of the cluster"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "gce_tag": {
            "required": [
              "instance_name"
            ],
            "type": "object",
            "description": "This module can add or remove tags U(https://cloud.google.com/compute/docs/instances/#tags) to/from GCE instance.",
            "properties": {
              "zone": {
                "type": "string",
                "description": "Default: us-central1-a\n\nthe zone of the disk specified by source"
              },
              "tags": {
                "description": "comma-separated list of tags to add or remove",
                "$ref": "#/definitions/ansible_array"
              },
              "service_account_email": {
                "type": "string",
                "description": "service account email"
              },
              "pem_file": {
                "type": "string",
                "description": "path to the pem file associated with the service account email"
              },
              "instance_name": {
                "type": "string",
                "description": "the name of the GCE instance to add/remove tags"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\ndesired state of the tags"
              },
              "project_id": {
                "type": "string",
                "description": "your GCE project ID"
              }
            }
          },
          "zabbix_maintenance": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host_names",
                        "host_name"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_url",
                        "url"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "server_url"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "url"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host_groups",
                        "host_group"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will let you create Zabbix maintenance windows.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Unique name of maintenance window."
              },
              "url": {
                "type": "string",
                "description": "Url of Zabbix server, with protocol (http or https). C(url) is an alias for C(server_url)."
              },
              "login_user": {
                "type": "string",
                "description": "Zabbix user name."
              },
              "server_url": {
                "type": "string",
                "description": "Url of Zabbix server, with protocol (http or https). C(url) is an alias for C(server_url)."
              },
              "host_names": {
                "description": "Hosts to manage maintenance window for. Separate multiple hosts with commas. C(host_name) is an alias for C(host_names). B(Required) option when C(state) is I(present) and no C(host_groups) specified.",
                "$ref": "#/definitions/ansible_array"
              },
              "host_group": {
                "description": "Host groups to manage maintenance window for. Separate multiple groups with commas. C(host_group) is an alias for C(host_groups). B(Required) option when C(state) is I(present) and no C(host_names) specified.",
                "$ref": "#/definitions/ansible_array"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or remove a maintenance window."
              },
              "host_name": {
                "description": "Hosts to manage maintenance window for. Separate multiple hosts with commas. C(host_name) is an alias for C(host_names). B(Required) option when C(state) is I(present) and no C(host_groups) specified.",
                "$ref": "#/definitions/ansible_array"
              },
              "host_groups": {
                "description": "Host groups to manage maintenance window for. Separate multiple groups with commas. C(host_group) is an alias for C(host_groups). B(Required) option when C(state) is I(present) and no C(host_names) specified.",
                "$ref": "#/definitions/ansible_array"
              },
              "login_password": {
                "type": "string",
                "description": "Zabbix user password."
              },
              "collect_data": {
                "description": "Default: true\n\nType of maintenance. With data collection, or without.",
                "$ref": "#/definitions/ansible_truth"
              },
              "minutes": {
                "description": "Default: 10\n\nLength of maintenance window in minutes.",
                "$ref": "#/definitions/ansible_number"
              },
              "desc": {
                "type": "string",
                "description": "Default: Created by Ansible\n\nShort description of maintenance window."
              }
            }
          },
          "kernel_blacklist": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or remove kernel modules from blacklist.",
            "properties": {
              "blacklist_file": {
                "type": "string",
                "description": "If specified, use this blacklist file instead of C(/etc/modprobe.d/blacklist-ansible.conf)."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the module should be present in the blacklist or absent."
              },
              "name": {
                "type": "string",
                "description": "Name of kernel module to black- or whitelist."
              }
            }
          },
          "virt_pool": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pool"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage I(libvirt) storage pools.",
            "properties": {
              "xml": {
                "type": "string",
                "description": "XML document used with the define command."
              },
              "name": {
                "type": "string",
                "description": "name of the storage pool being managed. Note that pool must be previously defined with xml."
              },
              "uri": {
                "type": "string",
                "description": "Default: qemu:///system\n\nI(libvirt) connection uri."
              },
              "state": {
                "enum": [
                  "active",
                  "inactive",
                  "present",
                  "absent",
                  "undefined",
                  "deleted"
                ],
                "type": "string",
                "description": "specify which state you want a storage pool to be in. If 'active', pool will be started. If 'present', ensure that pool is present but do not change its state; if it's missing, you need to specify xml argument. If 'inactive', pool will be stopped. If 'undefined' or 'absent', pool will be removed from I(libvirt) configuration. If 'deleted', pool contents will be deleted and then pool undefined."
              },
              "command": {
                "enum": [
                  "create",
                  "status",
                  "start",
                  "stop",
                  "build",
                  "delete",
                  "undefine",
                  "destroy",
                  "get_xml",
                  "define",
                  "refresh",
                  "list_pools",
                  "facts",
                  "info"
                ],
                "type": "string",
                "description": "in addition to state management, various non-idempotent commands are available. See examples."
              },
              "mode": {
                "enum": [
                  "new",
                  "repair",
                  "resize",
                  "no_overwrite",
                  "overwrite",
                  "normal",
                  "zeroed"
                ],
                "type": "string",
                "description": "Pass additional parameters to 'build' or 'delete' commands."
              },
              "autostart": {
                "enum": [
                  "yes",
                  "no"
                ],
                "type": "string",
                "description": "Specify if a given storage pool should be started automatically on system boot."
              },
              "pool": {
                "type": "string",
                "description": "name of the storage pool being managed. Note that pool must be previously defined with xml."
              }
            }
          },
          "rabbitmq_parameter": {
            "required": [
              "name",
              "component"
            ],
            "type": "object",
            "description": "Manage dynamic, cluster-wide parameters for RabbitMQ",
            "properties": {
              "node": {
                "type": "string",
                "description": "Default: rabbit\n\nerlang node name of the rabbit we wish to configure"
              },
              "name": {
                "type": "string",
                "description": "Name of the parameter being set"
              },
              "component": {
                "type": "string",
                "description": "Name of the component of which the parameter is being set"
              },
              "value": {
                "type": "string",
                "description": "Value of the parameter, as a JSON term"
              },
              "vhost": {
                "type": "string",
                "description": "Default: /\n\nvhost to apply access privileges."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nSpecify if user is to be added or removed"
              }
            }
          },
          "logentries": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "logtype",
                        "type"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Sends logs to LogEntries in realtime",
            "properties": {
              "logtype": {
                "type": "string",
                "description": "type of the log"
              },
              "state": {
                "enum": [
                  "present",
                  "followed",
                  "absent",
                  "unfollowed"
                ],
                "type": "string",
                "description": "Default: present\n\nfollowing state of the log"
              },
              "type": {
                "type": "string",
                "description": "type of the log"
              },
              "name": {
                "type": "string",
                "description": "name of the log"
              },
              "path": {
                "type": "string",
                "description": "path to a log file"
              }
            }
          },
          "bigip_pool_member": {
            "type": "object",
            "description": "Manages F5 BIG-IP LTM pool members via iControl SOAP API",
            "properties": {
              "session_state": {
                "type": "string",
                "description": "Set new session availability status for pool member"
              },
              "ratio": {
                "type": "string",
                "description": "Pool member ratio weight. Valid values range from 1 through 100. New pool members -- unless overriden with this value -- default to 1."
              },
              "description": {
                "type": "string",
                "description": "Pool member description"
              },
              "monitor_state": {
                "type": "string",
                "description": "Set monitor availability status for pool member"
              },
              "partition": {
                "type": "string",
                "description": "Default: Common\n\nPartition"
              },
              "connection_limit": {
                "type": "string",
                "description": "Pool member connection limit. Setting this to 0 disables the limit."
              },
              "host": {
                "type": "string",
                "description": "Pool member IP"
              },
              "server": {
                "type": "string",
                "description": "BIG-IP host"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nPool member state"
              },
              "user": {
                "type": "string",
                "description": "BIG-IP username"
              },
              "rate_limit": {
                "type": "string",
                "description": "Pool member rate limit (connections-per-second). Setting this to 0 disables the limit."
              },
              "password": {
                "type": "string",
                "description": "BIG-IP password"
              },
              "validate_certs": {
                "type": "string",
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8"
              },
              "port": {
                "type": "string",
                "description": "Pool member port"
              },
              "pool": {
                "type": "string",
                "description": "Pool name. This pool must exist."
              }
            }
          },
          "os_floating_ip": {
            "type": "object",
            "description": "Add or Remove a floating IP to an instance",
            "properties": {
              "fixed_address": {
                "type": "string",
                "description": "To which fixed IP of server the floating IP address should be attached to."
              },
              "network": {
                "type": "string",
                "description": "The name or ID of a neutron external network or a nova pool name."
              },
              "reuse": {
                "type": "string",
                "description": "When state is present, and floating_ip_address is not present, this parameter can be used to specify whether we should try to reuse a floating IP address already allocated to the project."
              },
              "server": {
                "type": "string",
                "description": "The name or ID of the instance to which the IP address should be assigned."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "floating_ip_address": {
                "type": "string",
                "description": "A floating IP address to attach or to detach. Required only if state is absent. When state is present can be used to specify a IP address to attach."
              },
              "timeout": {
                "type": "string",
                "description": "Default: 60\n\nTime to wait for an IP address to appear as attached. See wait."
              },
              "wait": {
                "type": "string",
                "description": "When attaching a floating IP address, specify whether we should wait for it to appear as attached."
              }
            }
          },
          "win_feature": {
            "type": "object",
            "description": "Installs or uninstalls Windows Roles or Features",
            "properties": {
              "include_management_tools": {
                "type": "string",
                "description": "Adds the corresponding management tools to the specified feature"
              },
              "include_sub_features": {
                "type": "string",
                "description": "Adds all subfeatures of the specified feature"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nState of the features or roles on the system"
              },
              "restart": {
                "type": "string",
                "description": "Restarts the computer automatically when installation is complete, if restarting is required by the roles or features installed."
              },
              "name": {
                "type": "string",
                "description": "Names of roles or features to install as a single feature or a comma-separated list of features"
              }
            }
          },
          "win_service": {
            "type": "object",
            "description": "Manages Windows services",
            "properties": {
              "start_mode": {
                "type": "string",
                "description": "Set the startup type for the service"
              },
              "state": {
                "type": "string",
                "description": "C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.  C(restarted) will always bounce the service."
              },
              "name": {
                "type": "string",
                "description": "Name of the service"
              }
            }
          },
          "ec2_elb": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module de-registers or registers an AWS EC2 instance from the ELBs that it belongs to.\nReturns fact \"ec2_elbs\" which is a list of elbs attached to the instance if state=absent is passed as an argument.\nWill be marked changed when called only if there are ELBs found to operate on.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_elbs": {
                "description": "Default: None\n\nList of ELB names, required for registration. The ec2_elbs fact should be used if there was a previous de-register.",
                "$ref": "#/definitions/ansible_array"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Default: True\n\nWait for instance registration or deregistration to complete successfully before returning.",
                "$ref": "#/definitions/ansible_truth"
              },
              "instance_id": {
                "type": "string",
                "description": "EC2 Instance ID"
              },
              "state": {
                "type": "string",
                "description": "register or deregister the instance"
              },
              "wait_timeout": {
                "description": "Number of seconds to wait for an instance to change state. If 0 then this module may return an error if a transient error occurs. If non-zero then any transient errors are ignored until the timeout is reached. Ignored when wait=no.",
                "$ref": "#/definitions/ansible_number"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "Default: yes\n\nWhen set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0.",
                "$ref": "#/definitions/ansible_truth"
              },
              "enable_availability_zone": {
                "description": "Default: True\n\nWhether to enable the availability zone of the instance on the target ELB if the availability zone has not already been enabled. If set to no, the task will fail if the availability zone is not enabled on the ELB.",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "rax_identity": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Verifies Rackspace Cloud credentials and returns identity information",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "cs_portforward": {
            "required": [
              "private_port",
              "ip_address",
              "public_port"
            ],
            "type": "object",
            "description": "Create, update and remove port forwarding rules.",
            "properties": {
              "open_firewall": {
                "description": "Whether the firewall rule for public port should be created, while creating the new rule.\nUse M(cs_firewall) for managing firewall rules.",
                "$ref": "#/definitions/ansible_truth"
              },
              "vm_guest_ip": {
                "type": "string",
                "description": "VM guest NIC secondary IP address for the port forwarding rule."
              },
              "domain": {
                "type": "string",
                "description": "Domain the C(vm) is related to."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "protocol": {
                "enum": [
                  "tcp",
                  "udp"
                ],
                "type": "string",
                "description": "Default: tcp\n\nProtocol of the port forwarding rule."
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "public_port": {
                "description": "Start public port for this rule.",
                "$ref": "#/definitions/ansible_number"
              },
              "vm": {
                "type": "string",
                "description": "Name of virtual machine which we make the port forwarding rule for.\nRequired if C(state=present)."
              },
              "public_end_port": {
                "description": "End public port for this rule.\nIf not specified equal C(public_port).",
                "$ref": "#/definitions/ansible_number"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the C(vm) is located in."
              },
              "private_port": {
                "description": "Start private port for this rule.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the port forwarding rule."
              },
              "private_end_port": {
                "description": "End private port for this rule.\nIf not specified equal C(private_port).",
                "$ref": "#/definitions/ansible_number"
              },
              "account": {
                "type": "string",
                "description": "Account the C(vm) is related to."
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone in which the virtual machine is in.\nIf not set, default zone is used."
              },
              "ip_address": {
                "type": "string",
                "description": "Public IP address the rule is assigned to."
              }
            }
          },
          "iam_policy": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Allows uploading or removing IAM policies for IAM users, groups or roles.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "policy_document": {
                "type": "string",
                "description": "The path to the properly json formatted policy file (mutually exclusive with C(policy_json))"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "iam_name": {
                "type": "string",
                "description": "Name of IAM resource you wish to target for policy actions. In other words, the user name, group name or role name."
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "iam_type": {
                "enum": [
                  "user",
                  "group",
                  "role"
                ],
                "type": "string",
                "description": "Type of IAM resource"
              },
              "policy_name": {
                "type": "string",
                "description": "The name label for the policy to create or remove."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Whether to create or delete the IAM policy."
              },
              "policy_json": {
                "type": "string",
                "description": "A properly json formatted policy as string (mutually exclusive with C(policy_document), see https://github.com/ansible/ansible/issues/7005#issuecomment-42894813 on how to use it properly)"
              },
              "skip_duplicates": {
                "description": "Default: /\n\nBy default the module looks for any policies that match the document you pass in, if there is a match it will not make a new policy object with the same rules. You can override this by specifying false which would allow for two policy objects with different names but same rules.",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "rax_files_objects": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Upload, download, and delete objects in Rackspace Cloud Files",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "src": {
                "type": "string",
                "description": "Source from which to upload files.  Used to specify a remote object as a source for an operation, i.e. a file name, \"file1\", or a comma-separated list of remote objects, \"file1,file2,file17\".  src and dest are mutually exclusive on remote-only object operations"
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "container": {
                "type": "string",
                "description": "The container to use for file object operations."
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "expires": {
                "description": "Used to set an expiration on a file or folder uploaded to Cloud Files. Requires an integer, specifying expiration in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "dest": {
                "type": "string",
                "description": "The destination of a \"get\" operation; i.e. a local directory, \"/home/user/myfolder\". Used to specify the destination of an operation on a remote object; i.e. a file name, \"file1\", or a comma-separated list of remote objects, \"file1,file2,file17\""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "clear_meta": {
                "description": "Default: no\n\nOptionally clear existing metadata when applying metadata to existing objects. Selecting this option is only appropriate when setting type=meta",
                "$ref": "#/definitions/ansible_truth"
              },
              "meta": {
                "type": "object",
                "description": "A hash of items to set as metadata values on an uploaded file or folder"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "type": {
                "enum": [
                  "file",
                  "meta"
                ],
                "type": "string",
                "description": "Default: file\n\nType of object to do work on\nMetadata object or a file object"
              },
              "method": {
                "enum": [
                  "get",
                  "put",
                  "delete"
                ],
                "type": "string",
                "description": "Default: get\n\nThe method of operation to be performed.  For example, put to upload files to Cloud Files, get to download files from Cloud Files or delete to delete remote objects in Cloud Files"
              },
              "structure": {
                "description": "Default: yes\n\nUsed to specify whether to maintain nested directory structure when downloading objects from Cloud Files.  Setting to false downloads the contents of a container to a single, flat directory",
                "$ref": "#/definitions/ansible_truth"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "quantum_router_interface": {
            "required": [
              "login_password",
              "subnet_name",
              "router_name"
            ],
            "type": "object",
            "description": "Attach/Dettach a subnet interface to a router, to provide a gateway for the subnet.",
            "properties": {
              "region_name": {
                "type": "string",
                "description": "Default: None\n\nName of the region"
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": "Default: None\n\nName of the tenant whose subnet has to be attached."
              },
              "login_tenant_name": {
                "type": "string",
                "description": "Default: yes\n\nThe tenant name of the login user"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "auth_url": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nThe keystone URL for authentication"
              },
              "login_password": {
                "type": "string",
                "description": "Default: yes\n\nPassword of login user"
              },
              "login_username": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "subnet_name": {
                "type": "string",
                "description": "Default: None\n\nName of the subnet to whose interface should be attached to the router."
              },
              "router_name": {
                "type": "string",
                "description": "Default: None\n\nName of the router to which the subnet's interface should be attached."
              }
            }
          },
          "win_acl": {
            "type": "object",
            "description": "Add or remove rights/permissions for a given user or group for the specified src file or folder.",
            "properties": {
              "rights": {
                "type": "string",
                "description": "Default: none\n\nThe rights/permissions that are to be allowed/denyed for the specified user or group for the given src file or directory.  Can be entered as a comma separated list (Ex. \"Modify, Delete, ExecuteFile\").  For more information on the choices see MSDN FileSystemRights Enumeration."
              },
              "inherit": {
                "type": "string",
                "description": "Default: For Leaf File, None; For Directory, ContainerInherit, ObjectInherit;\n\nInherit flags on the ACL rules.  Can be specified as a comma separated list (Ex. \"ContainerInherit, ObjectInherit\").  For more information on the choices see MSDN InheritanceFlags Enumeration."
              },
              "propagation": {
                "type": "string",
                "description": "Default: None\n\nPropagation flag on the ACL rules.  For more information on the choices see MSDN PropagationFlags Enumeration."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nSpecify whether to add (present) or remove (absent) the specified access rule"
              },
              "user": {
                "type": "string",
                "description": "Default: none\n\nUser or Group to add specified rights to act on src file/folder"
              },
              "path": {
                "type": "string",
                "description": "File or Directory"
              },
              "type": {
                "type": "string",
                "description": "Default: none\n\nSpecify whether to allow or deny the rights specified"
              }
            }
          },
          "supervisorctl": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manage the state of a program or group of programs running via supervisord",
            "properties": {
              "username": {
                "type": "string",
                "description": "username to use for authentication"
              },
              "supervisorctl_path": {
                "type": "string",
                "description": "path to supervisorctl executable"
              },
              "name": {
                "type": "string",
                "description": "The name of the supervisord program or group to manage.\nThe name will be taken as group name when it ends with a colon I(:)\nGroup support is only available in Ansible version 1.6 or later."
              },
              "server_url": {
                "type": "string",
                "description": "URL on which supervisord server is listening"
              },
              "state": {
                "enum": [
                  "present",
                  "started",
                  "stopped",
                  "restarted",
                  "absent"
                ],
                "type": "string",
                "description": "The desired state of program/group."
              },
              "password": {
                "type": "string",
                "description": "password to use for authentication"
              },
              "config": {
                "type": "string",
                "description": "The supervisor configuration file path"
              }
            }
          },
          "rax_cbs_attachments": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manipulate Rackspace Cloud Block Storage Volume Attachments",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "server": {
                "type": "string",
                "description": "Name or id of the server to attach/detach"
              },
              "volume": {
                "type": "string",
                "description": "Name or id of the volume to attach/detach"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "wait_timeout": {
                "description": "Default: 300\n\nhow long before wait gives up, in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "device": {
                "type": "string",
                "description": "The device path to attach the volume to, e.g. /dev/xvde"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Default: no\n\nwait for the volume to be in 'in-use'/'available' state before returning",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "mysql_user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "user",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds or removes a user from a MySQL database.",
            "properties": {
              "ssl_key": {
                "type": "string",
                "description": ""
              },
              "update_password": {
                "enum": [
                  "always",
                  "on_create"
                ],
                "type": "string",
                "description": "Default: always\n\nC(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users."
              },
              "ssl_cert": {
                "type": "string",
                "description": ""
              },
              "config_file": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "name of the user (role) to add or remove"
              },
              "login_port": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "login_user": {
                "type": "string",
                "description": ""
              },
              "login_host": {
                "type": "string",
                "description": ""
              },
              "append_privs": {
                "description": "Default: no\n\nAppend the privileges defined by priv to the existing ones for this user instead of overwriting existing ones.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the user should exist.  When C(absent), removes the user."
              },
              "ssl_ca": {
                "type": "string",
                "description": ""
              },
              "login_unix_socket": {
                "type": "string",
                "description": ""
              },
              "host": {
                "type": "string",
                "description": "Default: localhost\n\nthe 'host' part of the MySQL username"
              },
              "encrypted": {
                "description": "Default: no\n\nIndicate that the 'password' field is a `mysql_native_password` hash",
                "$ref": "#/definitions/ansible_truth"
              },
              "user": {
                "type": "string",
                "description": "name of the user (role) to add or remove"
              },
              "login_password": {
                "type": "string",
                "description": ""
              },
              "check_implicit_admin": {
                "description": "Default: no\n\nCheck if mysql allows login as root/nopassword before trying supplied credentials.",
                "$ref": "#/definitions/ansible_truth"
              },
              "password": {
                "type": "string",
                "description": "set the user's password. (Required when adding a user)"
              },
              "priv": {
                "type": "string",
                "description": "MySQL privileges string in the format: C(db.table:priv1,priv2)"
              }
            }
          },
          "ec2_group": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "maintains ec2 security groups. This module has a dependency on python-boto >= 2.5",
            "properties": {
              "rules_egress": {
                "type": "string",
                "description": "List of firewall outbound rules to enforce in this group (see example). If none are supplied, a default all-out rule is assumed. If an empty list is supplied, no outbound rules will be enabled."
              },
              "purge_rules": {
                "description": "Default: true\n\nPurge existing rules on security group that are not found in rules",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or delete a security group"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "Description of the security group."
              },
              "rules": {
                "type": "string",
                "description": "List of firewall inbound rules to enforce in this group (see example). If none are supplied, a default all-out rule is assumed. If an empty list is supplied, no inbound rules will be enabled."
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "purge_rules_egress": {
                "description": "Default: true\n\nPurge existing rules_egress on security group that are not found in rules_egress",
                "$ref": "#/definitions/ansible_truth"
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the security group."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "vpc_id": {
                "type": "string",
                "description": "ID of the VPC to create the group in."
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "glance_image": {
            "required": [
              "login_password",
              "name"
            ],
            "type": "object",
            "description": "Add or Remove images from the glance repository.",
            "properties": {
              "login_tenant_name": {
                "type": "string",
                "description": "Default: yes\n\nThe tenant name of the login user"
              },
              "region_name": {
                "type": "string",
                "description": "Default: None\n\nName of the region"
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "container_format": {
                "enum": [
                  "aki",
                  "ari",
                  "bare",
                  "ovf"
                ],
                "type": "string",
                "description": "Default: bare\n\nThe format of the container"
              },
              "min_ram": {
                "type": "string",
                "description": "Default: None\n\nThe minimum ram required to deploy this image"
              },
              "disk_format": {
                "enum": [
                  "aki",
                  "vhd",
                  "vmdk",
                  "raw",
                  "qcow2",
                  "vdi",
                  "iso"
                ],
                "type": "string",
                "description": "Default: qcow2\n\nThe format of the disk that is getting uploaded"
              },
              "timeout": {
                "type": "string",
                "description": "Default: 180\n\nThe time to wait for the image process to complete in seconds"
              },
              "copy_from": {
                "type": "string",
                "description": "Default: None\n\nA url from where the image can be downloaded, mutually exclusive with file parameter"
              },
              "owner": {
                "type": "string",
                "description": "Default: None\n\nThe owner of the image"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "endpoint_type": {
                "enum": [
                  "publicURL",
                  "internalURL"
                ],
                "type": "string",
                "description": "Default: publicURL\n\nThe name of the glance service's endpoint URL type"
              },
              "auth_url": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nThe keystone url for authentication"
              },
              "file": {
                "type": "string",
                "description": "Default: None\n\nThe path to the file which has to be uploaded, mutually exclusive with copy_from"
              },
              "login_password": {
                "type": "string",
                "description": "Default: yes\n\nPassword of login user"
              },
              "min_disk": {
                "type": "string",
                "description": "Default: None\n\nThe minimum disk space required to deploy this image"
              },
              "is_public": {
                "type": "string",
                "description": "Default: yes\n\nWhether the image can be accessed publicly"
              },
              "login_username": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nName that has to be given to the image"
              }
            }
          },
          "consul_session": {
            "type": "object",
            "description": "allows the addition, modification and deletion of sessions in a consul cluster. These sessions can then be used in conjunction with key value pairs to implement distributed locks. In depth documentation for working with sessions can be found here http://www.consul.io/docs/internals/sessions.html",
            "properties": {
              "node": {
                "type": "string",
                "description": "Default: None\n\nthe name of the node that with which the session will be associated. by default this is the name of the agent."
              },
              "datacenter": {
                "type": "string",
                "description": "Default: None\n\nname of the datacenter in which the session exists or should be created."
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nthe name that should be associated with the session. This is opaque to Consul and not required."
              },
              "host": {
                "type": "string",
                "description": "Default: localhost\n\nhost of the consul agent defaults to localhost"
              },
              "port": {
                "type": "string",
                "description": "Default: 8500\n\nthe port on which the consul agent is running"
              },
              "delay": {
                "type": "string",
                "description": "Default: 15s\n\nthe optional lock delay that can be attached to the session when it is created. Locks for invalidated sessions ar blocked from being acquired until this delay has expired. Valid units for delays include 'ns', 'us', 'ms', 's', 'm', 'h'"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nwhether the session should be present i.e. created if it doesn't exist, or absent, removed if present. If created, the ID for the session is returned in the output. If absent, the name or ID is required to remove the session. Info for a single session, all the sessions for a node or all available sessions can be retrieved by specifying info, node or list for the state; for node or info, the node name or session id is required as parameter."
              },
              "checks": {
                "type": "string",
                "description": "Default: None\n\na list of checks that will be used to verify the session health. If all the checks fail, the session will be invalidated and any locks associated with the session will be release and can be acquired once the associated lock delay has expired."
              }
            }
          },
          "ec2_win_password": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gets the default administrator password from any EC2 Windows instance.  The instance is referenced by its id (e.g. i-XXXXXXX). This module has a dependency on python-boto.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Default: no\n\nWhether or not to wait for the password to be available before returning.",
                "$ref": "#/definitions/ansible_truth"
              },
              "instance_id": {
                "type": "string",
                "description": "The instance id to get the password data from."
              },
              "key_passphrase": {
                "type": "string",
                "description": "The passphrase for the instance key pair. The key must use DES or 3DES encryption for this module to decrypt it. You can use openssl to convert your password protected keys if they do not use DES or 3DES. ex) openssl rsa -in current_key -out new_key -des3."
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 120\n\nNumber of seconds to wait before giving up."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "key_file": {
                "type": "string",
                "description": "Path to the file containing the key pair used on the instance."
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "ec2_snapshot": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates an EC2 snapshot from an existing EBS volume",
            "properties": {
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "snapshot_id": {
                "type": "string",
                "description": "snapshot id to remove"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "snapshot_tags": {
                "type": "object",
                "description": "a hash/dictionary of tags to add to the snapshot"
              },
              "state": {
                "enum": [
                  "absent",
                  "present"
                ],
                "type": "string",
                "description": "Default: present\n\nwhether to add or create a snapshot"
              },
              "last_snapshot_min_age": {
                "description": "If the volume's most recent snapshot has started less than `last_snapshot_min_age' minutes ago, a new snapshot will not be created.",
                "$ref": "#/definitions/ansible_number"
              },
              "wait": {
                "description": "Default: True\n\nwait for the snapshot to be ready",
                "$ref": "#/definitions/ansible_truth"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "description to be applied to the snapshot"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "wait_timeout": {
                "description": "how long before wait gives up, in seconds\nspecify 0 to wait forever",
                "$ref": "#/definitions/ansible_number"
              },
              "volume_id": {
                "type": "string",
                "description": "volume from which to take the snapshot"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "device_name": {
                "type": "string",
                "description": "device name of a mounted volume to be snapshotted"
              },
              "instance_id": {
                "type": "string",
                "description": "instance that has the required volume to snapshot mounted"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "cron": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "weekday",
                        "dow"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "day",
                        "dom"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Use this module to manage crontab entries. This module allows you to create named crontab entries, update, or delete them.\nThe module includes one line with the description of the crontab entry C(\"#Ansible: <name>\") corresponding to the \"name\" passed to the module, which is used by future ansible/module calls to find/check the state.  The \"name\" parameter should be unique, and changing the \"name\" value will result in a new cron task being created (or a different one being removed)",
            "properties": {
              "name": {
                "type": "string",
                "description": "Description of a crontab entry. Required if state=absent"
              },
              "hour": {
                "type": "string",
                "description": "Default: *\n\nHour when the job should run ( 0-23, *, */2, etc )"
              },
              "dom": {
                "type": "string",
                "description": "Default: *\n\nDay of the month the job should run ( 1-31, *, */2, etc )"
              },
              "job": {
                "type": "string",
                "description": "The command to execute. Required if state=present."
              },
              "user": {
                "type": "string",
                "description": "Default: root\n\nThe specific user whose crontab should be modified."
              },
              "cron_file": {
                "type": "string",
                "description": "If specified, uses this file in cron.d instead of an individual user's crontab. To use the C(cron_file) parameter you must specify the C(user) as well."
              },
              "reboot": {
                "description": "Default: no\n\nIf the job should be run at reboot. This option is deprecated. Users should use special_time.",
                "$ref": "#/definitions/ansible_truth"
              },
              "month": {
                "type": "string",
                "description": "Default: *\n\nMonth of the year the job should run ( 1-12, *, */2, etc )"
              },
              "disabled": {
                "description": "If the job should be disabled (commented out) in the crontab. Only has effect if state=present",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to ensure the job is present or absent."
              },
              "special_time": {
                "enum": [
                  "reboot",
                  "yearly",
                  "annually",
                  "monthly",
                  "weekly",
                  "daily",
                  "hourly"
                ],
                "type": "string",
                "description": "Special time specification nickname."
              },
              "weekday": {
                "type": "string",
                "description": "Default: *\n\nDay of the week that the job should run ( 0-6 for Sunday-Saturday, *, etc )"
              },
              "backup": {
                "description": "If set, create a backup of the crontab before it is modified. The location of the backup is returned in the C(backup_file) variable by this module.",
                "$ref": "#/definitions/ansible_truth"
              },
              "dow": {
                "type": "string",
                "description": "Default: *\n\nDay of the week that the job should run ( 0-6 for Sunday-Saturday, *, etc )"
              },
              "day": {
                "type": "string",
                "description": "Default: *\n\nDay of the month the job should run ( 1-31, *, */2, etc )"
              },
              "minute": {
                "type": "string",
                "description": "Default: *\n\nMinute when the job should run ( 0-59, *, */2, etc )"
              }
            }
          },
          "rax_cdb": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates / deletes or resize a Rackspace Cloud Databases instance and optionally waits for it to be 'running'. The name option needs to be unique since it's used to identify the instance.",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "cdb_type": {
                "type": "string",
                "description": "Default: MySQL\n\ntype of instance (i.e. MySQL, MariaDB, Percona)"
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the databases server instance"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "cdb_version": {
                "type": "string",
                "description": "version of database (MySQL supports 5.1 and 5.6, MariaDB supports 10, Percona supports 5.6)"
              },
              "volume": {
                "description": "Default: 2\n\nVolume size of the database 1-150GB",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "wait_timeout": {
                "description": "Default: 300\n\nhow long before wait gives up, in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "flavor": {
                "description": "Default: 1\n\nflavor to use for the instance 1 to 6 (i.e. 512MB to 16GB)",
                "$ref": "#/definitions/ansible_number"
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Default: no\n\nwait for the instance to be in state 'running' before returning",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "ec2_vpc_subnet_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gather facts about ec2 VPC subnets in AWS",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "filters": {
                "type": "object",
                "description": "A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html) for possible filters."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "airbrake_deployment": {
            "required": [
              "environment",
              "token"
            ],
            "type": "object",
            "description": "Notify airbrake about app deployments (see http://help.airbrake.io/kb/api-2/deploy-tracking)",
            "properties": {
              "repo": {
                "type": "string",
                "description": "URL of the project repository"
              },
              "url": {
                "type": "string",
                "description": "Default: https://airbrake.io/deploys\n\nOptional URL to submit the notification to. Use to send notifications to Airbrake-compliant tools like Errbit."
              },
              "environment": {
                "type": "string",
                "description": "The airbrake environment name, typically 'production', 'staging', etc."
              },
              "token": {
                "type": "string",
                "description": "API token."
              },
              "user": {
                "type": "string",
                "description": "The username of the person doing the deployment"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "revision": {
                "type": "string",
                "description": "A hash, number, tag, or other identifier showing what revision was deployed"
              }
            }
          },
          "find": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "paths",
                        "name",
                        "path"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "paths"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "patterns",
                        "pattern"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Return a list files based on specific criteria. Multiple criteria are AND'd together.",
            "properties": {
              "paths": {
                "description": "List of paths to the file or directory to search. All paths must be fully qualified.",
                "$ref": "#/definitions/ansible_array"
              },
              "name": {
                "description": "List of paths to the file or directory to search. All paths must be fully qualified.",
                "$ref": "#/definitions/ansible_array"
              },
              "file_type": {
                "enum": [
                  "file",
                  "directory"
                ],
                "type": "string",
                "description": "Default: file\n\nType of file to select"
              },
              "pattern": {
                "description": "Default: *\n\nOne or more (shell or regex) patterns, which type is controled by C(use_regex) option.\nThe patterns restrict the list of files to be returned to those whose basenames match at least one of the patterns specified. Multiple patterns can be specified using a list.",
                "$ref": "#/definitions/ansible_array"
              },
              "age": {
                "type": "string",
                "description": "Select files whose age is equal to or greater than the specified time. Use a negative age to find files equal to or less than the specified time. You can choose seconds, minutes, hours, days, or weeks by specifying the first letter of any of those words (e.g., \"1w\")."
              },
              "contains": {
                "type": "string",
                "description": "One or more re patterns which should be matched against the file content"
              },
              "recurse": {
                "description": "Default: no\n\nIf target is a directory, recursively descend into the directory looking for files.",
                "$ref": "#/definitions/ansible_truth"
              },
              "age_stamp": {
                "enum": [
                  "atime",
                  "mtime",
                  "ctime"
                ],
                "type": "string",
                "description": "Default: mtime\n\nChoose the file property against which we compare age. Default is mtime."
              },
              "patterns": {
                "description": "Default: *\n\nOne or more (shell or regex) patterns, which type is controled by C(use_regex) option.\nThe patterns restrict the list of files to be returned to those whose basenames match at least one of the patterns specified. Multiple patterns can be specified using a list.",
                "$ref": "#/definitions/ansible_array"
              },
              "get_checksum": {
                "description": "Default: False\n\nSet this to true to retrieve a file's sha1 checksum",
                "$ref": "#/definitions/ansible_truth"
              },
              "follow": {
                "description": "Default: False\n\nSet this to true to follow symlinks in path for systems with python 2.6+",
                "$ref": "#/definitions/ansible_truth"
              },
              "use_regex": {
                "description": "Default: False\n\nIf false the patterns are file globs (shell) if true they are python regexes",
                "$ref": "#/definitions/ansible_truth"
              },
              "path": {
                "description": "List of paths to the file or directory to search. All paths must be fully qualified.",
                "$ref": "#/definitions/ansible_array"
              },
              "hidden": {
                "description": "Default: False\n\nSet this to true to include hidden files, otherwise they'll be ignored.",
                "$ref": "#/definitions/ansible_truth"
              },
              "size": {
                "type": "string",
                "description": "Select files whose size is equal to or greater than the specified size. Use a negative size to find files equal to or less than the specified size. Unqualified values are in bytes, but b, k, m, g, and t can be appended to specify bytes, kilobytes, megabytes, gigabytes, and terabytes, respectively. Size is not evaluated for directories."
              }
            }
          },
          "jboss": {
            "required": [
              "deployment"
            ],
            "type": "object",
            "description": "Deploy applications to JBoss standalone using the filesystem",
            "properties": {
              "src": {
                "type": "string",
                "description": "The remote path of the application ear or war to deploy"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the application should be deployed or undeployed"
              },
              "deploy_path": {
                "type": "string",
                "description": "Default: /var/lib/jbossas/standalone/deployments\n\nThe location in the filesystem where the deployment scanner listens"
              },
              "deployment": {
                "type": "string",
                "description": "The name of the deployment"
              }
            }
          },
          "template": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "name",
                        "destfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "destfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "line",
                        "value"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Templates are processed by the Jinja2 templating language (U(http://jinja.pocoo.org/docs/)) - documentation on the template formatting can be found in the Template Designer Documentation (U(http://jinja.pocoo.org/docs/templates/)).\nSix additional variables can be used in templates: C(ansible_managed) (configurable via the C(defaults) section of C(ansible.cfg)) contains a string which can be used to describe the template name, host, modification time of the template file and the owner uid, C(template_host) contains the node name of the template's machine, C(template_uid) the owner, C(template_path) the absolute path of the template, C(template_fullpath) is the absolute path of the template, and C(template_run_date) is the date that the template was rendered. Note that including a string that uses a date in the template will result in the template being marked 'changed' each time.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Location to render the template to on the remote machine."
              },
              "insertbefore": {
                "type": "string",
                "description": ""
              },
              "dest": {
                "type": "string",
                "description": "Location to render the template to on the remote machine."
              },
              "create": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "destfile": {
                "type": "string",
                "description": "Location to render the template to on the remote machine."
              },
              "backrefs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "absent",
                  "present"
                ],
                "type": "string",
                "description": ""
              },
              "value": {
                "type": "string",
                "description": ""
              },
              "insertafter": {
                "type": "string",
                "description": ""
              },
              "regexp": {
                "type": "string",
                "description": ""
              },
              "validate": {
                "type": "string",
                "description": ""
              },
              "backup": {
                "description": "Default: no\n\nCreate a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
                "$ref": "#/definitions/ansible_truth"
              },
              "line": {
                "type": "string",
                "description": ""
              }
            }
          },
          "ec2_ami_find": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ami_tags",
                        "search_tags",
                        "image_tags"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Returns list of matching AMIs with AMI ID, along with other useful information\nCan search AMIs with different owners\nCan search by matching tag(s), by AMI name and/or other criteria\nResults can be sorted and sliced",
            "properties": {
              "no_result_action": {
                "enum": [
                  "success",
                  "fail"
                ],
                "type": "string",
                "description": "Default: success\n\nWhat to do when no results are found.\n'success' reports success and returns an empty array\n'fail' causes the module to report failure"
              },
              "sort_order": {
                "enum": [
                  "ascending",
                  "descending"
                ],
                "type": "string",
                "description": "Default: ascending\n\nOrder in which to sort results.\nOnly used when the 'sort' parameter is specified."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "owner": {
                "type": "string",
                "description": "Search AMIs owned by the specified owner\nCan specify an AWS account ID, or one of the special IDs 'self', 'amazon' or 'aws-marketplace'\nIf not specified, all EC2 AMIs in the specified region will be searched.\nYou can include wildcards in many of the search options. An asterisk (*) matches zero or more characters, and a question mark (?) matches exactly one character. You can escape special characters using a backslash (\\) before the character. For example, a value of \\*amazon\\?\\ searches for the literal string *amazon?\\."
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "image_tags": {
                "type": "object",
                "description": "A hash/dictionary of tags to match for the AMI."
              },
              "platform": {
                "type": "string",
                "description": "Platform type to match."
              },
              "state": {
                "type": "string",
                "description": "Default: available\n\nAMI state to match."
              },
              "sort_start": {
                "type": "string",
                "description": "Which result to start with (when sorting).\nCorresponds to Python slice notation."
              },
              "virtualization_type": {
                "type": "string",
                "description": "Virtualization type to match (e.g. hvm)."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "sort_end": {
                "type": "string",
                "description": "Which result to end with (when sorting).\nCorresponds to Python slice notation."
              },
              "search_tags": {
                "type": "object",
                "description": "A hash/dictionary of tags to match for the AMI."
              },
              "aws_region": {
                "type": "string",
                "description": "The AWS region to use."
              },
              "sort": {
                "enum": [
                  "name",
                  "description",
                  "tag"
                ],
                "type": "string",
                "description": "Optional attribute which with to sort the results.\nIf specifying 'tag', the 'tag_name' parameter is required."
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": "The AWS region to use."
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "ami_id": {
                "type": "string",
                "description": "An AMI ID to match."
              },
              "name": {
                "type": "string",
                "description": "An AMI name to match."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "hypervisor": {
                "type": "string",
                "description": "A hypervisor type type to match (e.g. xen)."
              },
              "region": {
                "type": "string",
                "description": "The AWS region to use."
              },
              "is_public": {
                "type": "string",
                "description": "Whether or not the image(s) are public."
              },
              "ami_tags": {
                "type": "object",
                "description": "A hash/dictionary of tags to match for the AMI."
              },
              "architecture": {
                "type": "string",
                "description": "An architecture type to match (e.g. x86_64)."
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "sort_tag": {
                "type": "string",
                "description": "Tag name with which to sort results.\nRequired when specifying 'sort=tag'."
              }
            }
          },
          "ec2_ami_search": {
            "required": [
              "release",
              "distro"
            ],
            "type": "object",
            "description": "Look up the most recent AMI on AWS for a given operating system.\nReturns C(ami), C(aki), C(ari), C(serial), C(tag)\nIf there is no AKI or ARI associated with an image, these will be C(null).\nOnly supports images from cloud-images.ubuntu.com\nExample output: C({\"ami\": \"ami-69f5a900\", \"changed\": false, \"aki\": \"aki-88aa75e1\", \"tag\": \"release\", \"ari\": null, \"serial\": \"20131024\"})",
            "properties": {
              "stream": {
                "enum": [
                  "server",
                  "desktop"
                ],
                "type": "string",
                "description": "Default: server\n\nType of release."
              },
              "virt": {
                "enum": [
                  "paravirtual",
                  "hvm"
                ],
                "type": "string",
                "description": "Default: paravirtual\n\nvirutalization type"
              },
              "region": {
                "enum": [
                  "ap-northeast-1",
                  "ap-southeast-1",
                  "ap-southeast-2",
                  "eu-central-1",
                  "eu-west-1",
                  "sa-east-1",
                  "us-east-1",
                  "us-west-1",
                  "us-west-2",
                  "us-gov-west-1"
                ],
                "type": "string",
                "description": "Default: us-east-1\n\nEC2 region"
              },
              "release": {
                "type": "string",
                "description": "short name of the release (e.g., C(precise))"
              },
              "arch": {
                "enum": [
                  "i386",
                  "amd64"
                ],
                "type": "string",
                "description": "Default: amd64\n\nCPU architecture"
              },
              "store": {
                "enum": [
                  "ebs",
                  "ebs-io1",
                  "ebs-ssd",
                  "instance-store"
                ],
                "type": "string",
                "description": "Default: ebs\n\nBack-end store for instance"
              },
              "distro": {
                "enum": [
                  "ubuntu"
                ],
                "type": "string",
                "description": "Linux distribution (e.g., C(ubuntu))"
              }
            }
          },
          "rds_param_group": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "params",
                        "parameters"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates, modifies, and deletes RDS parameter groups. This module has a dependency on python-boto >= 2.5.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "Database parameter group description. Only set when a new group is added."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "immediate": {
                "description": "Whether to apply the changes immediately, or after the next reboot of any associated instances.",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "Database parameter group identifier."
              },
              "engine": {
                "enum": [
                  "mysql5.1",
                  "mysql5.5",
                  "mysql5.6",
                  "oracle-ee-11.2",
                  "oracle-se-11.2",
                  "oracle-se1-11.2",
                  "postgres9.3",
                  "postgres9.4",
                  "sqlserver-ee-10.5",
                  "sqlserver-ee-11.0",
                  "sqlserver-ex-10.5",
                  "sqlserver-ex-11.0",
                  "sqlserver-se-10.5",
                  "sqlserver-se-11.0",
                  "sqlserver-web-10.5",
                  "sqlserver-web-11.0"
                ],
                "type": "string",
                "description": "The type of database for this group. Required for state=present."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nSpecifies whether the group should be present or absent."
              },
              "params": {
                "type": "object",
                "description": "Map of parameter names and values. Numeric values may be represented as K for kilo (1024), M for mega (1024^2), G for giga (1024^3), or T for tera (1024^4), and these values will be expanded into the appropriate number before being set in the parameter group."
              },
              "parameters": {
                "type": "object",
                "description": "Map of parameter names and values. Numeric values may be represented as K for kilo (1024), M for mega (1024^2), G for giga (1024^3), or T for tera (1024^4), and these values will be expanded into the appropriate number before being set in the parameter group."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "xenserver_facts": {
            "type": "object",
            "description": "Reads data out of XenAPI, can be used instead of multiple xe commands.",
            "properties": {}
          },
          "elasticache_subnet_group": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates, modifies, and deletes Elasticache subnet groups. This module has a dependency on python-boto >= 2.5.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "Elasticache subnet group description. Only set when a new group is added."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "subnets": {
                "description": "List of subnet IDs that make up the Elasticache subnet group.",
                "$ref": "#/definitions/ansible_array"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Database subnet group identifier."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nSpecifies whether the subnet should be present or absent."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "vertica_configuration": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "parameter",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "parameter"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Updates Vertica configuration parameters.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the parameter to update."
              },
              "login_user": {
                "type": "string",
                "description": "Default: dbadmin\n\nThe username used to authenticate with."
              },
              "db": {
                "type": "string",
                "description": "Name of the Vertica database."
              },
              "value": {
                "type": "string",
                "description": "Value of the parameter to be set."
              },
              "cluster": {
                "type": "string",
                "description": "Default: localhost\n\nName of the Vertica cluster."
              },
              "login_password": {
                "type": "string",
                "description": "The password used to authenticate with."
              },
              "parameter": {
                "type": "string",
                "description": "Name of the parameter to update."
              },
              "port": {
                "type": "string",
                "description": "Default: 5433\n\nVertica cluster port to connect to."
              }
            }
          },
          "vmware_host": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module can be used to add/remove an ESXi host to/from vCenter",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "datacenter_name": {
                "type": "string",
                "description": "Name of the datacenter to add the host"
              },
              "esxi_hostname": {
                "type": "string",
                "description": "ESXi hostname to manage"
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter API server"
              },
              "esxi_username": {
                "type": "string",
                "description": "ESXi username"
              },
              "cluster_name": {
                "type": "string",
                "description": "Name of the cluster to add the host"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nAdd or remove the host"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "esxi_password": {
                "type": "string",
                "description": "ESXi password"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              }
            }
          },
          "webfaction_domain": {
            "required": [
              "login_password",
              "login_name",
              "name"
            ],
            "type": "object",
            "description": "Add or remove domains or subdomains on a Webfaction host. Further documentation at http://github.com/quentinsf/ansible-webfaction.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the domain should exist"
              },
              "subdomains": {
                "type": "string",
                "description": "Any subdomains to create."
              },
              "login_name": {
                "type": "string",
                "description": "The webfaction account to use"
              },
              "name": {
                "type": "string",
                "description": "The name of the domain"
              },
              "login_password": {
                "type": "string",
                "description": "The webfaction password to use"
              }
            }
          },
          "rds": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "zone",
                        "aws_zone",
                        "ec2_zone"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_type",
                        "type"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates, deletes, or modifies rds instances.  When creating an instance it can be either a new instance or a read-only replica of an existing instance. This module has a dependency on python-boto >= 2.5. The 'promote' command requires boto >= 2.18.0. Certain features such as tags rely on boto.rds2 (boto >= 2.26.0)",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "db_engine": {
                "enum": [
                  "MySQL",
                  "oracle-se1",
                  "oracle-se",
                  "oracle-ee",
                  "sqlserver-ee",
                  "sqlserver-se",
                  "sqlserver-ex",
                  "sqlserver-web",
                  "postgres"
                ],
                "type": "string",
                "description": "The type of database.  Used only when command=create."
              },
              "force_failover": {
                "description": "Default: no\n\nUsed only when command=reboot.  If enabled, the reboot is done using a MultiAZ failover.",
                "$ref": "#/definitions/ansible_truth"
              },
              "iops": {
                "type": "string",
                "description": "Specifies the number of IOPS for the instance.  Used only when command=create or command=modify. Must be an integer greater than 1000."
              },
              "backup_window": {
                "type": "string",
                "description": "Backup window in format of hh24:mi-hh24:mi.  If not specified then a random backup window is assigned. Used only when command=create or command=modify."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "backup_retention": {
                "type": "string",
                "description": "Number of days backups are retained.  Set to 0 to disable backups.  Default is 1 day.  Valid range: 0-35. Used only when command=create or command=modify."
              },
              "port": {
                "type": "string",
                "description": "Default: 3306 for mysql, 1521 for Oracle, 1433 for SQL Server, 5432 for PostgreSQL.\n\nPort number that the DB instance uses for connections. Used only when command=create or command=replicate.\nPrior to 2.0 it always defaults to null and the API would use 3306, it had to be set to other DB default values when not using MySql. Starting at 2.0 it auotmaticaly defaults to what is expected for each c(db_engine)."
              },
              "security_groups": {
                "type": "string",
                "description": "Comma separated list of one or more security groups.  Used only when command=create or command=modify."
              },
              "size": {
                "type": "string",
                "description": "Size in gigabytes of the initial storage for the DB instance. Used only when command=create or command=modify."
              },
              "aws_secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "subnet": {
                "type": "string",
                "description": "VPC subnet group.  If specified then a VPC instance is created. Used only when command=create."
              },
              "vpc_security_groups": {
                "description": "Comma separated list of one or more vpc security group ids. Also requires `subnet` to be specified. Used only when command=create or command=modify.",
                "$ref": "#/definitions/ansible_array"
              },
              "upgrade": {
                "description": "Indicates that minor version upgrades should be applied automatically. Used only when command=create or command=replicate.",
                "$ref": "#/definitions/ansible_truth"
              },
              "zone": {
                "type": "string",
                "description": "availability zone in which to launch the instance. Used only when command=create, command=replicate or command=restore."
              },
              "source_instance": {
                "type": "string",
                "description": "Name of the database to replicate. Used only when command=replicate."
              },
              "parameter_group": {
                "type": "string",
                "description": "Name of the DB parameter group to associate with this instance.  If omitted then the RDS default DBParameterGroup will be used. Used only when command=create or command=modify."
              },
              "snapshot": {
                "type": "string",
                "description": "Name of snapshot to take. When command=delete, if no snapshot name is provided then no snapshot is taken. If used with command=delete with no instance_name, the snapshot is deleted. Used with command=facts, command=delete or command=snapshot."
              },
              "multi_zone": {
                "description": "Specifies if this is a Multi-availability-zone deployment. Can not be used in conjunction with zone parameter. Used only when command=create or command=modify.",
                "$ref": "#/definitions/ansible_truth"
              },
              "new_instance_name": {
                "type": "string",
                "description": "Name to rename an instance to. Used only when command=modify."
              },
              "type": {
                "type": "string",
                "description": "The instance type of the database.  Must be specified when command=create. Optional when command=replicate, command=modify or command=restore. If not specified then the replica inherits the same instance type as the source instance."
              },
              "username": {
                "type": "string",
                "description": "Master database username. Used only when command=create."
              },
              "access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "tags": {
                "type": "object",
                "description": "tags dict to apply to a resource. Used with command=create, command=replicate, command=restore. Requires boto >= 2.26.0"
              },
              "character_set_name": {
                "type": "string",
                "description": "Associate the DB instance with a specified character set. Used with command=create."
              },
              "aws_region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used."
              },
              "wait_timeout": {
                "description": "Default: 300\n\nhow long before wait gives up, in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "license_model": {
                "enum": [
                  "license-included",
                  "bring-your-own-license",
                  "general-public-license",
                  "postgresql-license"
                ],
                "type": "string",
                "description": "The license model for this DB instance. Used only when command=create or command=restore."
              },
              "ec2_access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "ec2_secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "apply_immediately": {
                "description": "Used only when command=modify.  If enabled, the modifications will be applied as soon as possible rather than waiting for the next preferred maintenance window.",
                "$ref": "#/definitions/ansible_truth"
              },
              "wait": {
                "description": "Default: no\n\nWhen command=create, replicate, modify or restore then wait for the database to enter the 'available' state.  When command=delete wait for the database to be terminated.",
                "$ref": "#/definitions/ansible_truth"
              },
              "aws_zone": {
                "type": "string",
                "description": "availability zone in which to launch the instance. Used only when command=create, command=replicate or command=restore."
              },
              "aws_access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "ec2_region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used."
              },
              "option_group": {
                "type": "string",
                "description": "The name of the option group to use.  If not specified then the default option group is used. Used only when command=create."
              },
              "engine_version": {
                "type": "string",
                "description": "Version number of the database engine to use. Used only when command=create. If not specified then the current Amazon RDS default engine version is used."
              },
              "ec2_zone": {
                "type": "string",
                "description": "availability zone in which to launch the instance. Used only when command=create, command=replicate or command=restore."
              },
              "instance_name": {
                "type": "string",
                "description": "Database instance identifier. Required except when using command=facts or command=delete on just a snapshot"
              },
              "instance_type": {
                "type": "string",
                "description": "The instance type of the database.  Must be specified when command=create. Optional when command=replicate, command=modify or command=restore. If not specified then the replica inherits the same instance type as the source instance."
              },
              "password": {
                "type": "string",
                "description": "Password for the master database username. Used only when command=create or command=modify."
              },
              "db_name": {
                "type": "string",
                "description": "Name of a database to create within the instance.  If not specified then no database is created. Used only when command=create."
              },
              "command": {
                "enum": [
                  "create",
                  "replicate",
                  "delete",
                  "facts",
                  "modify",
                  "promote",
                  "snapshot",
                  "reboot",
                  "restore"
                ],
                "type": "string",
                "description": "Specifies the action to take. The 'reboot' option is available starting at version 2.0"
              },
              "publicly_accessible": {
                "type": "string",
                "description": "explicitly set whether the resource should be publicly accessible or not. Used with command=create, command=replicate. Requires boto >= 2.26.0"
              },
              "secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "maint_window": {
                "type": "string",
                "description": "Maintenance window in format of ddd:hh24:mi-ddd:hh24:mi.  (Example: Mon:22:00-Mon:23:15) If not specified then a random maintenance window is assigned. Used only when command=create or command=modify."
              }
            }
          },
          "consul_kv": {
            "type": "object",
            "description": "Allows the addition, modification and deletion of key/value entries in a consul cluster via the agent. The entire contents of the record, including the indices, flags and session are returned as 'value'.\nIf the key represents a prefix then Note that when a value is removed, the existing value if any is returned as part of the results.\nSee http://www.consul.io/docs/agent/http.html#kv for more details.",
            "properties": {
              "cas": {
                "type": "string",
                "description": "Default: None\n\nused when acquiring a lock with a session. If the cas is 0, then Consul will only put the key if it does not already exist. If the cas value is non-zero, then the key is only set if the index matches the ModifyIndex of that key."
              },
              "recurse": {
                "type": "string",
                "description": "if the key represents a prefix, each entry with the prefix can be retrieved by setting this to true."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nthe action to take with the supplied key and value. If the state is 'present', the key contents will be set to the value supplied, 'changed' will be set to true only if the value was different to the current contents. The state 'absent' will remove the key/value pair, again 'changed' will be set to true only if the key actually existed prior to the removal. An attempt can be made to obtain or free the lock associated with a key/value pair with the states 'acquire' or 'release' respectively. a valid session must be supplied to make the attempt changed will be true if the attempt is successful, false otherwise."
              },
              "value": {
                "type": "string",
                "description": "the value should be associated with the given key, required if state is present"
              },
              "token": {
                "type": "string",
                "description": "Default: None\n\nthe token key indentifying an ACL rule set that controls access to the key value pair"
              },
              "session": {
                "type": "string",
                "description": "Default: None\n\nthe session that should be used to acquire or release a lock associated with a key/value pair"
              },
              "flags": {
                "type": "string",
                "description": "Default: None\n\nopaque integer value that can be passed when setting a value."
              },
              "key": {
                "type": "string",
                "description": "the key at which the value should be stored."
              },
              "host": {
                "type": "string",
                "description": "Default: localhost\n\nhost of the consul agent defaults to localhost"
              },
              "port": {
                "type": "string",
                "description": "Default: 8500\n\nthe port on which the consul agent is running"
              }
            }
          },
          "ejabberd_user": {
            "type": "object",
            "description": "This module provides user management for ejabberd servers",
            "properties": {
              "username": {
                "type": "string",
                "description": "the name of the user to manage"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\ndescribe the desired state of the user to be managed"
              },
              "password": {
                "type": "string",
                "description": "the password to assign to the username"
              },
              "logging": {
                "description": "enables or disables the local syslog facility for this module",
                "$ref": "#/definitions/ansible_truth"
              },
              "host": {
                "type": "string",
                "description": "the ejabberd host associated with this username"
              }
            }
          },
          "webfaction_mailbox": {
            "required": [
              "mailbox_password",
              "login_name",
              "mailbox_name",
              "login_password"
            ],
            "type": "object",
            "description": "Add or remove mailboxes on a Webfaction account. Further documentation at http://github.com/quentinsf/ansible-webfaction.",
            "properties": {
              "mailbox_password": {
                "type": "string",
                "description": "The password for the mailbox"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the mailbox should exist"
              },
              "login_name": {
                "type": "string",
                "description": "The webfaction account to use"
              },
              "mailbox_name": {
                "type": "string",
                "description": "The name of the mailbox"
              },
              "login_password": {
                "type": "string",
                "description": "The webfaction password to use"
              }
            }
          },
          "sns_topic": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The M(sns_topic) module allows you to create, delete, and manage subscriptions for AWS SNS topics.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "display_name": {
                "type": "string",
                "description": "Default: None\n\nDisplay name of the topic"
              },
              "name": {
                "type": "string",
                "description": "The name or ARN of the SNS topic to converge"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "subscriptions": {
                "description": "List of subscriptions to apply to the topic. Note that AWS requires subscriptions to be confirmed, so you will need to confirm any new subscriptions.",
                "$ref": "#/definitions/ansible_array"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "absent",
                  "present"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to create or destroy an SNS topic"
              },
              "purge_subscriptions": {
                "description": "Default: True\n\nWhether to purge any subscriptions not listed here. NOTE: AWS does not allow you to purge any PendingConfirmation subscriptions, so if any exist and would be purged, they are silently skipped. This means that somebody could come back later and confirm the subscription. Sorry. Blame Amazon.",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "policy": {
                "type": "object",
                "description": "Default: None\n\nPolicy to apply to the SNS topic"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "delivery_policy": {
                "type": "object",
                "description": "Default: None\n\nDelivery policy to apply to the SNS topic"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "win_iis_website": {
            "type": "object",
            "description": "Creates, Removes and configures a IIS Web site",
            "properties": {
              "hostname": {
                "type": "string",
                "description": "The host header to bind to / use for the new site."
              },
              "name": {
                "type": "string",
                "description": "Names of web site"
              },
              "parameters": {
                "type": "string",
                "description": "Custom site Parameters from string where properties are seperated by a pipe and property name/values by colon Ex. \"foo:1|bar:2\""
              },
              "ip": {
                "type": "string",
                "description": "The IP address to bind to / use for the new site."
              },
              "physical_path": {
                "type": "string",
                "description": "The physical path on the remote host to use for the new site. The specified folder must already exist."
              },
              "application_pool": {
                "type": "string",
                "description": "The application pool in which the new site executes."
              },
              "ssl": {
                "type": "string",
                "description": "Enables HTTPS binding on the site.."
              },
              "state": {
                "type": "string",
                "description": "State of the web site"
              },
              "port": {
                "type": "string",
                "description": "The port to bind to / use for the new site."
              }
            }
          },
          "win_dotnet_ngen": {
            "type": "object",
            "description": "After .NET framework is installed/updated, Windows will probably want to recompile things to optimise for the host.\nThis happens via scheduled task, usually at some inopportune time.\nThis module allows you to run this task on your own schedule, so you incur the CPU hit at some more convenient and controlled time.\nhttp://blogs.msdn.com/b/dotnet/archive/2013/08/06/wondering-why-mscorsvw-exe-has-high-cpu-usage-you-can-speed-it-up.aspx",
            "properties": {}
          },
          "cloudformation": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Launches an AWS CloudFormation stack and waits for it complete.",
            "properties": {
              "template_format": {
                "enum": [
                  "json",
                  "yaml"
                ],
                "type": "string",
                "description": "Default: json\n\nFor local templates, allows specification of json or yaml format"
              },
              "stack_name": {
                "type": "string",
                "description": "name of the cloudformation stack"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "stack_policy": {
                "type": "string",
                "description": "the path of the cloudformation stack policy"
              },
              "template_parameters": {
                "type": "object",
                "description": "a list of hashes of all the template variables for the stack"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "If state is \"present\", stack will be created.  If state is \"present\" and if stack exists and template has changed, it will be updated. If state is \"absent\", stack will be removed."
              },
              "template": {
                "type": "string",
                "description": "The local path of the cloudformation template. This parameter is mutually exclusive with 'template_url'. Either one of them is required if \"state\" parameter is \"present\" Must give full path to the file, relative to the working directory. If using roles this may look like \"roles/cloudformation/files/cloudformation-example.json\""
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "disable_rollback": {
                "description": "Default: false\n\nIf a stacks fails to form, rollback will remove the stack",
                "$ref": "#/definitions/ansible_truth"
              },
              "notification_arns": {
                "type": "string",
                "description": "The Simple Notification Service (SNS) topic ARNs to publish stack related events."
              },
              "tags": {
                "type": "string",
                "description": "Dictionary of tags to associate with stack and it's resources during stack creation. Cannot be updated later. Requires at least Boto version 2.6.0."
              },
              "aws_region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used."
              },
              "template_url": {
                "type": "string",
                "description": "Location of file containing the template body. The URL must point to a template (max size 307,200 bytes) located in an S3 bucket in the same region as the stack. This parameter is mutually exclusive with 'template'. Either one of them is required if \"state\" parameter is \"present\""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used."
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used."
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "replace": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "name",
                        "destfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "destfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will replace all instances of a pattern within a file.\nIt is up to the user to maintain idempotence by ensuring that the same pattern would never match any replacements made.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The file to modify."
              },
              "dest": {
                "type": "string",
                "description": "The file to modify."
              },
              "destfile": {
                "type": "string",
                "description": "The file to modify."
              },
              "replace": {
                "type": "string",
                "description": "The string to replace regexp matches. May contain backreferences that will get expanded with the regexp capture groups if the regexp matches. If not set, matches are removed entirely."
              },
              "regexp": {
                "type": "string",
                "description": "The regular expression to look for in the contents of the file. Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html). Uses multiline mode, which means C(^) and C($) match the beginning and end respectively of I(each line) of the file."
              },
              "validate": {
                "type": "string",
                "description": ""
              },
              "backup": {
                "description": "Default: no\n\nCreate a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "apk": {
            "type": "object",
            "description": "Manages I(apk) packages for Alpine Linux.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "absent",
                  "removed",
                  "latest"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicates the desired package(s) state.\nC(present) ensures the package(s) is/are present.\nC(absent) ensures the package(s) is/are absent.\nC(latest) ensures the package(s) is/are present and the latest version(s)."
              },
              "upgrade": {
                "description": "Upgrade all installed packages to their latest version.",
                "$ref": "#/definitions/ansible_truth"
              },
              "update_cache": {
                "description": "Update repository indexes. Can be run with other steps or on it's own.",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "description": "A package name, like C(foo), or mutliple packages, like C(foo, bar).",
                "$ref": "#/definitions/ansible_array"
              }
            }
          },
          "bigpanda": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "component",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "component"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "hosts",
                        "host"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Notify BigPanda when deployments start and end (successfully or not). Returns a deployment object containing all the parameters for future module calls.",
            "properties": {
              "description": {
                "type": "string",
                "description": "Free text description of the deployment."
              },
              "url": {
                "type": "string",
                "description": "Default: https://api.bigpanda.io\n\nBase URL of the API server."
              },
              "component": {
                "type": "string",
                "description": "The name of the component being deployed. Ex: billing"
              },
              "token": {
                "type": "string",
                "description": "API token."
              },
              "owner": {
                "type": "string",
                "description": "The person responsible for the deployment."
              },
              "source_system": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "started",
                  "finished",
                  "failed"
                ],
                "type": "string",
                "description": "State of the deployment."
              },
              "version": {
                "type": "string",
                "description": "The deployment version."
              },
              "hosts": {
                "type": "string",
                "description": "Default: machine's hostname\n\nName of affected host name. Can be a list."
              },
              "env": {
                "type": "string",
                "description": "The environment name, typically 'production', 'staging', etc."
              },
              "host": {
                "type": "string",
                "description": "Default: machine's hostname\n\nName of affected host name. Can be a list."
              },
              "message": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "The name of the component being deployed. Ex: billing"
              }
            }
          },
          "win_iis_webapplication": {
            "type": "object",
            "description": "Creates, Removes and configures a IIS Web applications",
            "properties": {
              "state": {
                "type": "string",
                "description": "State of the web application"
              },
              "application_pool": {
                "type": "string",
                "description": "The application pool in which the new site executes."
              },
              "name": {
                "type": "string",
                "description": "Name of the Web applicatio"
              },
              "physical_path": {
                "type": "string",
                "description": "The physical path on the remote host to use for the new applicatiojn. The specified folder must already exist."
              },
              "site": {
                "type": "string",
                "description": "Name of the site on which the application is created."
              }
            }
          },
          "win_get_url": {
            "type": "object",
            "description": "Fetches a file from a URL and saves to locally",
            "properties": {
              "username": {
                "type": "string",
                "description": "Basic authentication username"
              },
              "force": {
                "type": "string",
                "description": "Default: True\n\nIf C(yes), will always download the file.  If C(no), will only download the file if it does not exist or the remote file has been modified more recently than the local file."
              },
              "url": {
                "type": "string",
                "description": "The full URL of a file to download"
              },
              "skip_certificate_validation": {
                "type": "string",
                "description": "Skip SSL certificate validation if true"
              },
              "proxy_url": {
                "type": "string",
                "description": "The full URL of the proxy server to download through."
              },
              "proxy_password": {
                "type": "string",
                "description": "Proxy authentication password"
              },
              "dest": {
                "type": "string",
                "description": "The absolute path of the location to save the file at the URL. Be sure to include a filename and extension as appropriate."
              },
              "proxy_username": {
                "type": "string",
                "description": "Proxy authentication username"
              },
              "password": {
                "type": "string",
                "description": "Basic authentication password"
              }
            }
          },
          "rpm_key": {
            "required": [
              "key"
            ],
            "type": "object",
            "description": "Adds or removes (rpm --import) a gpg key to your rpm database.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWheather the key will be imported or removed from the rpm db."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no) and the C(key) is a url starting with https, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "key": {
                "type": "string",
                "description": "Key that will be modified. Can be a url, a file, or a keyid if the key already exists in the database."
              }
            }
          },
          "hipchat": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "msg_from",
                        "from"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Send a message to hipchat",
            "properties": {
              "msg_from": {
                "type": "string",
                "description": "Default: Ansible\n\nName the message will appear be sent from. max 15 characters. Over 15, will be shorten."
              },
              "from": {
                "type": "string",
                "description": "Default: Ansible\n\nName the message will appear be sent from. max 15 characters. Over 15, will be shorten."
              },
              "room": {
                "type": "string",
                "description": "ID or name of the room."
              },
              "color": {
                "enum": [
                  "yellow",
                  "red",
                  "green",
                  "purple",
                  "gray",
                  "random"
                ],
                "type": "string",
                "description": "Default: yellow\n\nBackground color for the message. Default is yellow."
              },
              "msg_format": {
                "enum": [
                  "text",
                  "html"
                ],
                "type": "string",
                "description": "Default: text\n\nmessage format. html or text. Default is text."
              },
              "token": {
                "type": "string",
                "description": "API token."
              },
              "api": {
                "type": "string",
                "description": "Default: https://api.hipchat.com/v1\n\nAPI url if using a self-hosted hipchat server. For hipchat api version 2 use C(/v2) path in URI"
              },
              "notify": {
                "description": "Default: yes\n\nnotify or not (change the tab color, play a sound, etc)",
                "$ref": "#/definitions/ansible_truth"
              },
              "msg": {
                "type": "string",
                "description": "The message body."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "rax_scaling_policy": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manipulate Rackspace Cloud Autoscale Scaling Policy",
            "properties": {
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "cron": {
                "type": "string",
                "description": "The time when the policy will be executed, as a cron entry. For example, if this is parameter is set to C(1 0 * * *)"
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "cooldown": {
                "description": "The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).",
                "$ref": "#/definitions/ansible_number"
              },
              "at": {
                "type": "string",
                "description": "The UTC time when this policy will be executed. The time must be formatted according to C(yyyy-MM-dd'T'HH:mm:ss.SSS) such as C(2013-05-19T08:07:08Z)"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "is_percent": {
                "description": "Whether the value in I(change) is a percent value",
                "$ref": "#/definitions/ansible_truth"
              },
              "desired_capacity": {
                "description": "The desired server capacity of the scaling the group; that is, how many servers should be in the scaling group.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "username": {
                "type": "string",
                "description": ""
              },
              "policy_type": {
                "enum": [
                  "webhook",
                  "schedule"
                ],
                "type": "string",
                "description": "The type of policy that will be executed for the current release."
              },
              "scaling_group": {
                "type": "string",
                "description": "Name of the scaling group that this policy will be added to"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "change": {
                "description": "The change, either as a number of servers or as a percentage, to make in the scaling group. If this is a percentage, you must set I(is_percent) to C(true) also.",
                "$ref": "#/definitions/ansible_number"
              },
              "name": {
                "type": "string",
                "description": "Name to give the policy"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "dnf": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Installs, upgrade, removes, and lists packages and groups with the I(dnf) package manager.",
            "properties": {
              "name": {
                "description": "Package name, or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file.",
                "$ref": "#/definitions/ansible_array"
              },
              "list": {
                "type": "string",
                "description": "Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. See examples."
              },
              "disable_gpg_check": {
                "description": "Default: no\n\nWhether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).",
                "$ref": "#/definitions/ansible_truth"
              },
              "conf_file": {
                "type": "string",
                "description": "The remote dnf configuration file to use for the transaction."
              },
              "state": {
                "enum": [
                  "absent",
                  "present",
                  "installed",
                  "removed",
                  "latest"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to install (C(present), C(latest)), or remove (C(absent)) a package."
              },
              "disablerepo": {
                "description": "I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\".",
                "$ref": "#/definitions/ansible_array"
              },
              "pkg": {
                "description": "Package name, or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file.",
                "$ref": "#/definitions/ansible_array"
              },
              "enablerepo": {
                "description": "I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\".",
                "$ref": "#/definitions/ansible_array"
              }
            }
          },
          "win_nssm": {
            "type": "object",
            "description": "nssm is a service helper which doesn't suck. See https://nssm.cc/ for more information.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the service to operate on"
              },
              "start_mode": {
                "type": "string",
                "description": "Default: auto\n\nIf C(auto) is selected, the service will start at bootup. C(manual) means that the service will start only when another service needs it. C(disabled) means that the service will stay off, regardless if it is needed or not."
              },
              "stderr_file": {
                "type": "string",
                "description": "Path to receive error output"
              },
              "application": {
                "type": "string",
                "description": "The application binary to run as a service\nSpecify this whenever the service may need to be installed (state: present, started, stopped, restarted)\nNote that the application name must look like the following, if the directory includes spaces:\nnssm install service \"c:\\Program Files\\app.exe\\\" \"C:\\Path with spaces\\\"\nSee commit 0b386fc1984ab74ee59b7bed14b7e8f57212c22b in the nssm.git project for more info (https://git.nssm.cc/?p=nssm.git;a=commit;h=0b386fc1984ab74ee59b7bed14b7e8f57212c22b)"
              },
              "state": {
                "type": "string",
                "description": "Default: started\n\nState of the service on the system\nNote that NSSM actions like \"pause\", \"continue\", \"rotate\" do not fit the declarative style of ansible, so these should be implemented via the ansible command module"
              },
              "dependencies": {
                "type": "string",
                "description": "Service dependencies that has to be started to trigger startup, separated by comma."
              },
              "user": {
                "type": "string",
                "description": "User to be used for service startup"
              },
              "password": {
                "type": "string",
                "description": "Password to be used for service startup"
              },
              "stdout_file": {
                "type": "string",
                "description": "Path to receive output"
              },
              "app_parameters": {
                "type": "string",
                "description": "Parameters to be passed to the application when it starts"
              }
            }
          },
          "bundler": {
            "type": "object",
            "description": "Manage installation and Gem version dependencies for Ruby using the Bundler gem",
            "properties": {
              "executable": {
                "type": "string",
                "description": "The path to the bundler executable"
              },
              "chdir": {
                "type": "string",
                "description": "Default: temporary working directory\n\nThe directory to execute the bundler commands from. This directoy needs to contain a valid Gemfile or .bundle/ directory"
              },
              "gemfile": {
                "type": "string",
                "description": "Default: Gemfile in current directory\n\nOnly applies if state is C(present). The path to the gemfile to use to install gems."
              },
              "clean": {
                "description": "Default: no\n\nOnly applies if state is C(present). If set removes any gems on the target host that are not in the gemfile",
                "$ref": "#/definitions/ansible_truth"
              },
              "user_install": {
                "description": "Default: yes\n\nOnly applies if state is C(present). Installs gems in the local user's cache or for all users",
                "$ref": "#/definitions/ansible_truth"
              },
              "extra_args": {
                "type": "string",
                "description": "A space separated string of additional commands that can be applied to the Bundler command. Refer to the Bundler documentation for more information"
              },
              "state": {
                "enum": [
                  "present",
                  "latest"
                ],
                "type": "string",
                "description": "Default: present\n\nThe desired state of the Gem bundle. C(latest) updates gems to the most recent, acceptable version"
              },
              "deployment_mode": {
                "description": "Default: no\n\nOnly applies if state is C(present). If set it will only install gems that are in the default or production groups. Requires a Gemfile.lock file to have been created prior",
                "$ref": "#/definitions/ansible_truth"
              },
              "binstub_directory": {
                "type": "string",
                "description": "Only applies if state is C(present). Specifies the directory to install any gem bins files to. When executed the bin files will run within the context of the Gemfile and fail if any required gem dependencies are not installed. If C(chdir) is set then this path is relative to C(chdir)"
              },
              "exclude_groups": {
                "description": "A list of Gemfile groups to exclude during operations. This only applies when state is C(present). Bundler considers this a 'remembered' property for the Gemfile and will automatically exclude groups in future operations even if C(exclude_groups) is not set",
                "$ref": "#/definitions/ansible_array"
              },
              "local": {
                "description": "Default: no\n\nIf set only installs gems from the cache on the target host",
                "$ref": "#/definitions/ansible_truth"
              },
              "gem_path": {
                "type": "string",
                "description": "Default: RubyGems gem paths\n\nOnly applies if state is C(present). Specifies the directory to install the gems into. If C(chdir) is set then this path is relative to C(chdir)"
              }
            }
          },
          "urpmi": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "update_cache",
                        "update-cache"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "no_recommends",
                        "no-recommends"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "package",
                        "pkg",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "package"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages packages with I(urpmi) (such as for Mageia or Mandriva)",
            "properties": {
              "force": {
                "description": "Default: True\n\nAssume \"yes\" is the answer to any question urpmi has to ask. Corresponds to the C(--force) option for I(urpmi).",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "name of package to install, upgrade or remove."
              },
              "package": {
                "type": "string",
                "description": "name of package to install, upgrade or remove."
              },
              "state": {
                "enum": [
                  "installed",
                  "removed",
                  "absent",
                  "present"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicates the desired package state"
              },
              "no-recommends": {
                "description": "Default: True\n\nCorresponds to the C(--no-recommends) option for I(urpmi).",
                "$ref": "#/definitions/ansible_truth"
              },
              "update_cache": {
                "description": "update the package database first C(urpmi.update -a).",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkg": {
                "type": "string",
                "description": "name of package to install, upgrade or remove."
              },
              "update-cache": {
                "description": "update the package database first C(urpmi.update -a).",
                "$ref": "#/definitions/ansible_truth"
              },
              "no_recommends": {
                "description": "Default: True\n\nCorresponds to the C(--no-recommends) option for I(urpmi).",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "docker_login": {
            "required": [
              "username",
              "password"
            ],
            "type": "object",
            "description": "Ansible version of the \"docker login\" CLI command.\nThis module allows you to login to a Docker registry without directly pulling an image or performing any other actions.\nIt will write your login credentials to your local .dockercfg file that is compatible to the Docker CLI client as well as docker-py and all other Docker related modules that are based on docker-py.",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username for the registry account"
              },
              "dockercfg_path": {
                "type": "string",
                "description": "Default: ~/.docker/config.json\n\nUse a custom path for the .dockercfg file"
              },
              "reauth": {
                "description": "Whether refresh existing authentication on the Docker server (boolean)",
                "$ref": "#/definitions/ansible_truth"
              },
              "docker_url": {
                "type": "string",
                "description": "Default: unix://var/run/docker.sock\n\n"
              },
              "registry": {
                "type": "string",
                "description": "Default: https://index.docker.io/v1/\n\nURL of the registry, defaults to: https://index.docker.io/v1/"
              },
              "timeout": {
                "description": "Default: 600\n\nThe HTTP request timeout in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "password": {
                "type": "string",
                "description": "The plaintext password for the registry account"
              },
              "email": {
                "type": "string",
                "description": "Default: None\n\nThe email address for the registry account. Note that private registries usually don't need this, but if you want to log into your Docker Hub account (default behaviour) you need to specify this in order to be able to log in."
              }
            }
          },
          "vmware_vm_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Return basic facts pertaining to a vSphere virtual machine guest",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter API server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "vmware_cluster": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create VMware vSphere Cluster",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "enable_ha": {
                "description": "If set to True will enable HA when the cluster is created.",
                "$ref": "#/definitions/ansible_truth"
              },
              "enable_vsan": {
                "description": "If set to True will enable vSAN when the cluster is created.",
                "$ref": "#/definitions/ansible_truth"
              },
              "datacenter_name": {
                "type": "string",
                "description": "The name of the datacenter the cluster will be created in."
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "cluster_name": {
                "type": "string",
                "description": "The name of the cluster that will be created"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": ""
              },
              "enable_drs": {
                "description": "If set to True will enable DRS when the cluster is created.",
                "$ref": "#/definitions/ansible_truth"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "grove": {
            "required": [
              "message",
              "channel_token"
            ],
            "type": "object",
            "description": "The M(grove) module sends a message for a service to a Grove.io channel.",
            "properties": {
              "service": {
                "type": "string",
                "description": "Default: ansible\n\nName of the service (displayed as the \"user\" in the message)"
              },
              "url": {
                "type": "string",
                "description": "Service URL for the web client"
              },
              "icon_url": {
                "type": "string",
                "description": "Icon for the service"
              },
              "channel_token": {
                "type": "string",
                "description": "Token of the channel to post to."
              },
              "message": {
                "type": "string",
                "description": "Message content"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "ec2_remote_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gather facts about ec2 instances in AWS",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "filters": {
                "type": "object",
                "description": "A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html) for possible filters."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "os_keypair": {
            "type": "object",
            "description": "Add or Remove key pair from OpenStack",
            "properties": {
              "public_key": {
                "type": "string",
                "description": "Default: None\n\nThe public key that would be uploaded to nova and injected into VMs upon creation."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "public_key_file": {
                "type": "string",
                "description": "Default: None\n\nPath to local file containing ssh public key. Mutually exclusive with public_key."
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nName that has to be given to the key pair"
              }
            }
          },
          "quantum_subnet": {
            "required": [
              "login_password",
              "cidr",
              "network_name",
              "name"
            ],
            "type": "object",
            "description": "Add/remove subnet from a network",
            "properties": {
              "region_name": {
                "type": "string",
                "description": "Default: None\n\nName of the region"
              },
              "enable_dhcp": {
                "description": "Default: True\n\nWhether DHCP should be enabled for this subnet.",
                "$ref": "#/definitions/ansible_truth"
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the tenant for whom the subnet should be created"
              },
              "dns_nameservers": {
                "type": "string",
                "description": "Default: None\n\nDNS nameservers for this subnet, comma-separated"
              },
              "login_tenant_name": {
                "type": "string",
                "description": "Default: True\n\nThe tenant name of the login user"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "allocation_pool_start": {
                "type": "string",
                "description": "Default: None\n\nFrom the subnet pool the starting address from which the IP should be allocated"
              },
              "auth_url": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nThe keystone URL for authentication"
              },
              "login_password": {
                "type": "string",
                "description": "Default: True\n\nPassword of login user"
              },
              "login_username": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "gateway_ip": {
                "type": "string",
                "description": "Default: None\n\nThe ip that would be assigned to the gateway for this subnet"
              },
              "cidr": {
                "type": "string",
                "description": "Default: None\n\nThe CIDR representation of the subnet that should be assigned to the subnet"
              },
              "network_name": {
                "type": "string",
                "description": "Default: None\n\nName of the network to which the subnet should be attached"
              },
              "ip_version": {
                "enum": [
                  "4",
                  "6"
                ],
                "type": "string",
                "description": "Default: 4\n\nThe IP version of the subnet 4 or 6"
              },
              "allocation_pool_end": {
                "type": "string",
                "description": "Default: None\n\nFrom the subnet pool the last IP that should be assigned to the virtual machines"
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the subnet that should be created"
              }
            }
          },
          "ec2_vpc_route_table_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gather facts about ec2 VPC route tables in AWS",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "filters": {
                "type": "object",
                "description": "A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html) for possible filters."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "known_hosts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "host"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "host"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The M(known_hosts) module lets you add or remove a host from the C(known_hosts) file. This is useful if you're going to want to use the M(git) module over ssh, for example. If you have a very large number of host keys to manage, you will find the M(template) module more useful.",
            "properties": {
              "host": {
                "type": "string",
                "description": "The host to add or remove (must match a host specified in key)"
              },
              "path": {
                "type": "string",
                "description": "Default: (homedir)+/.ssh/known_hosts\n\nThe known_hosts file to edit"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nI(present) to add the host, I(absent) to remove it."
              },
              "name": {
                "type": "string",
                "description": "The host to add or remove (must match a host specified in key)"
              },
              "key": {
                "type": "string",
                "description": "The SSH public host key, as a string (required if state=present, optional when state=absent, in which case all keys for the host are removed)"
              }
            }
          },
          "snmp_facts": {
            "required": [
              "host",
              "version"
            ],
            "type": "object",
            "description": "Retrieve facts for a device using SNMP, the facts will be inserted to the ansible_facts key.",
            "properties": {
              "username": {
                "type": "string",
                "description": "Username for SNMPv3, required if version is v3"
              },
              "privacy": {
                "enum": [
                  "des",
                  "aes"
                ],
                "type": "string",
                "description": "Encryption algoritm, required if level is authPriv"
              },
              "level": {
                "enum": [
                  "authPriv",
                  "authNoPriv"
                ],
                "type": "string",
                "description": "Authentication level, required if version is v3"
              },
              "community": {
                "type": "string",
                "description": "The SNMP community string, required if version is v2/v2c"
              },
              "authkey": {
                "type": "string",
                "description": "Authentication key, required if version is v3"
              },
              "host": {
                "type": "string",
                "description": "Set to target snmp server (normally {{inventory_hostname}})"
              },
              "version": {
                "enum": [
                  "v2",
                  "v2c",
                  "v3"
                ],
                "type": "string",
                "description": "SNMP Version to use, v2/v2c or v3"
              },
              "integrity": {
                "enum": [
                  "md5",
                  "sha"
                ],
                "type": "string",
                "description": "Hashing algoritm, required if version is v3"
              },
              "removeplaceholder": {
                "type": "string",
                "description": ""
              },
              "privkey": {
                "type": "string",
                "description": "Encryption key, required if version is authPriv"
              }
            }
          },
          "setup": {
            "type": "object",
            "description": "This module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks. It can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host. Ansible provides many I(facts) about the system, automatically.",
            "properties": {
              "filter": {
                "type": "string",
                "description": "Default: *\n\nif supplied, only return facts that match this shell-style (fnmatch) wildcard."
              },
              "fact_path": {
                "type": "string",
                "description": "Default: /etc/ansible/facts.d\n\npath used for local ansible facts (*.fact) - files in this dir will be run (if executable) and their results be added to ansible_local facts if a file is not executable it is read. File/results format can be json or ini-format"
              }
            }
          },
          "cs_instance": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "networks",
                        "network"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_groups",
                        "security_group"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "affinity_groups",
                        "affinity_group"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "tags",
                        "tag"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ip_to_networks",
                        "ip_to_network"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Deploy, start, update, scale, restart, restore, stop and destroy instances.",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain the instance is related to."
              },
              "force": {
                "description": "Force stop/start the instance if required to apply changes, otherwise a running instance will not be changed.",
                "$ref": "#/definitions/ansible_truth"
              },
              "disk_offering": {
                "type": "string",
                "description": "Name of the disk offering to be used."
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "cpu_speed": {
                "description": "The clock speed/shares allocated to the instance, used with custom service offerings",
                "$ref": "#/definitions/ansible_number"
              },
              "user_data": {
                "type": "string",
                "description": "Optional data (ASCII) that can be sent to the instance upon a successful deployment.\nThe data will be automatically base64 encoded.\nConsider switching to HTTP_POST by using C(CLOUDSTACK_METHOD=post) to increase the HTTP_GET size limit of 2KB to 32 KB."
              },
              "root_disk_size": {
                "description": "Root disk size in GByte required if deploying instance with KVM hypervisor and want resize the root disk size at startup (need CloudStack >= 4.4, cloud-initramfs-growroot installed and enabled in the template)",
                "$ref": "#/definitions/ansible_number"
              },
              "tag": {
                "description": "List of tags. Tags are a list of dictionaries having keys C(key) and C(value).\nIf you want to delete all tags, set a empty list e.g. C(tags: []).",
                "$ref": "#/definitions/ansible_array"
              },
              "keyboard": {
                "enum": [
                  "de",
                  "de-ch",
                  "es",
                  "fi",
                  "fr",
                  "fr-be",
                  "fr-ch",
                  "is",
                  "it",
                  "jp",
                  "nl-be",
                  "no",
                  "pt",
                  "uk",
                  "us"
                ],
                "type": "string",
                "description": "Keyboard device type for the instance."
              },
              "ip6_address": {
                "type": "string",
                "description": "IPv6 address for default instance's network."
              },
              "networks": {
                "description": "List of networks to use for the new instance.",
                "$ref": "#/definitions/ansible_array"
              },
              "security_groups": {
                "description": "List of security groups the instance to be applied to.",
                "$ref": "#/definitions/ansible_array"
              },
              "group": {
                "type": "string",
                "description": "Group in where the new instance should be in."
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone in which the instance shoud be deployed.\nIf not set, default zone is used."
              },
              "state": {
                "enum": [
                  "deployed",
                  "started",
                  "stopped",
                  "restarted",
                  "restored",
                  "destroyed",
                  "expunged",
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the instance."
              },
              "template": {
                "type": "string",
                "description": "Name or id of the template to be used for creating the new instance.\nRequired when using C(state=present).\nMutually exclusive with C(ISO) option."
              },
              "memory": {
                "description": "The memory allocated to the instance, used with custom service offerings",
                "$ref": "#/definitions/ansible_number"
              },
              "iso": {
                "type": "string",
                "description": "Name or id of the ISO to be used for creating the new instance.\nRequired when using C(state=present).\nMutually exclusive with C(template) option."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "ip_to_network": {
                "description": "List of mappings in the form {'network': NetworkName, 'ip': 1.2.3.4}\nMutually exclusive with C(networks) option.",
                "$ref": "#/definitions/ansible_array"
              },
              "tags": {
                "description": "List of tags. Tags are a list of dictionaries having keys C(key) and C(value).\nIf you want to delete all tags, set a empty list e.g. C(tags: []).",
                "$ref": "#/definitions/ansible_array"
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "ssh_key": {
                "type": "string",
                "description": "Name of the SSH key to be deployed on the new instance."
              },
              "display_name": {
                "type": "string",
                "description": "Custom display name of the instances.\nDisplay name will be set to C(name) if not specified.\nEither C(name) or C(display_name) is required."
              },
              "affinity_group": {
                "description": "Affinity groups names to be applied to the new instance.",
                "$ref": "#/definitions/ansible_array"
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "service_offering": {
                "type": "string",
                "description": "Name or id of the service offering of the new instance.\nIf not set, first found service offering is used."
              },
              "ip_address": {
                "type": "string",
                "description": "IPv4 address for default instance's network during creation."
              },
              "network": {
                "description": "List of networks to use for the new instance.",
                "$ref": "#/definitions/ansible_array"
              },
              "account": {
                "type": "string",
                "description": "Account the instance is related to."
              },
              "disk_size": {
                "description": "Disk size in GByte required if deploying instance from ISO.",
                "$ref": "#/definitions/ansible_number"
              },
              "name": {
                "type": "string",
                "description": "Host name of the instance. C(name) can only contain ASCII letters.\nName will be generated (UUID) by CloudStack if not specified and can not be changed afterwards.\nEither C(name) or C(display_name) is required."
              },
              "hypervisor": {
                "enum": [
                  "KVM",
                  "VMware",
                  "BareMetal",
                  "XenServer",
                  "LXC",
                  "HyperV",
                  "UCS",
                  "OVM",
                  "Simulator"
                ],
                "type": "string",
                "description": "Name the hypervisor to be used for creating the new instance.\nRelevant when using C(state=present), but only considered if not set on ISO/template.\nIf not set or found on ISO/template, first found hypervisor will be used."
              },
              "ip_to_networks": {
                "description": "List of mappings in the form {'network': NetworkName, 'ip': 1.2.3.4}\nMutually exclusive with C(networks) option.",
                "$ref": "#/definitions/ansible_array"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the instance to be deployed in."
              },
              "affinity_groups": {
                "description": "Affinity groups names to be applied to the new instance.",
                "$ref": "#/definitions/ansible_array"
              },
              "security_group": {
                "description": "List of security groups the instance to be applied to.",
                "$ref": "#/definitions/ansible_array"
              },
              "cpu": {
                "description": "The number of CPUs to allocate to the instance, used with custom service offerings",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "ec2_tag": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates, removes and lists tags from any EC2 resource.  The resource is referenced by its resource id (e.g. an instance being i-XXXXXXX). It is designed to be used with complex args (tags), see the examples.  This module has a dependency on python-boto.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "resource": {
                "type": "string",
                "description": "The EC2 resource id."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "tags": {
                "type": "string",
                "description": "a hash/dictionary of tags to add to the resource; '{\"key\":\"value\"}' and '{\"key\":\"value\",\"key\":\"value\"}'"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "list"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the tags should be present or absent on the resource. Use list to interrogate the tags of an instance."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "rds_subnet_group": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates, modifies, and deletes RDS database subnet groups. This module has a dependency on python-boto >= 2.5.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "Database subnet group description. Only set when a new group is added."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "subnets": {
                "description": "List of subnet IDs that make up the database subnet group.",
                "$ref": "#/definitions/ansible_array"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Database subnet group identifier."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nSpecifies whether the subnet should be present or absent."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "fetch": {
            "type": "object",
            "description": "This module works like M(copy), but in reverse. It is used for fetching files from remote machines and storing them locally in a file tree, organized by hostname. Note that this module is written to transfer log files that might not be present, so a missing remote file won't be an error unless fail_on_missing is set to 'yes'.",
            "properties": {
              "dest": {
                "type": "string",
                "description": "A directory to save the file into. For example, if the I(dest) directory is C(/backup) a I(src) file named C(/etc/profile) on host C(host.example.com), would be saved into C(/backup/host.example.com/etc/profile)"
              },
              "src": {
                "type": "string",
                "description": "The file on the remote system to fetch. This I(must) be a file, not a directory. Recursive fetching may be supported in a later release."
              },
              "flat": {
                "type": "string",
                "description": "Allows you to override the default behavior of appending hostname/path/to/file to the destination.  If dest ends with '/', it will use the basename of the source file, similar to the copy module. Obviously this is only handy if the filenames are unique."
              },
              "fail_on_missing": {
                "type": "string",
                "description": "Default: no\n\nMakes it fails when the source file is missing."
              },
              "validate_checksum": {
                "type": "string",
                "description": "Default: yes\n\nVerify that the source and destination checksums match after the files are fetched."
              }
            }
          },
          "pushbullet": {
            "required": [
              "title",
              "api_key"
            ],
            "type": "object",
            "description": "This module sends push notifications via Pushbullet to channels or devices.",
            "properties": {
              "body": {
                "type": "string",
                "description": "Body of the notification, e.g. Details of the fault you're alerting."
              },
              "title": {
                "type": "string",
                "description": "Title of the notification."
              },
              "url": {
                "type": "string",
                "description": ""
              },
              "push_type": {
                "enum": [
                  "note",
                  "link"
                ],
                "type": "string",
                "description": "Default: note\n\nThing you wish to push."
              },
              "device": {
                "type": "string",
                "description": "The device NAME you wish to send a push notification, as seen on the Pushbullet main page."
              },
              "api_key": {
                "type": "string",
                "description": "Push bullet API token"
              },
              "channel": {
                "type": "string",
                "description": "The channel TAG you wish to broadcast a push notification, as seen on the \"My Channels\" > \"Edit your channel\" at Pushbullet page."
              }
            }
          },
          "ec2_ami": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates or deletes ec2 images.",
            "properties": {
              "launch_permissions": {
                "type": "object",
                "description": "Users and groups that should be able to launch the ami. Expects dictionary with a key of user_ids and/or group_names. user_ids should be a list of account ids. group_name should be a list of groups, \"all\" is the only acceptable value currently."
              },
              "no_reboot": {
                "description": "An optional flag indicating that the bundling process should not attempt to shutdown the instance before bundling. If this flag is True, the responsibility of maintaining file system integrity is left to the owner of the instance. The default choice is \"no\".",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\ncreate or deregister/delete image"
              },
              "wait": {
                "description": "Default: no\n\nwait for the AMI to be in state 'available' before returning.",
                "$ref": "#/definitions/ansible_truth"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "An optional human-readable string describing the contents and purpose of the AMI."
              },
              "tags": {
                "type": "object",
                "description": "a hash/dictionary of tags to add to the new image; '{\"key\":\"value\"}' and '{\"key\":\"value\",\"key\":\"value\"}'"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "image_id": {
                "type": "string",
                "description": "Image ID to be deregistered."
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 300\n\nhow long before wait gives up, in seconds"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "The name of the new image to create"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "delete_snapshot": {
                "type": "string",
                "description": "Whether or not to delete an AMI while deregistering it."
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "instance_id": {
                "type": "string",
                "description": "instance id of the image to create"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "device_mapping": {
                "description": "An optional list of device hashes/dictionaries with custom configurations (same block-device-mapping parameters)\nValid properties include: device_name, volume_type, size (in GB), delete_on_termination (boolean), no_device (boolean), snapshot_id, iops (for io1 volume_type)",
                "$ref": "#/definitions/ansible_array"
              }
            }
          },
          "cloudtrail": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates or deletes CloudTrail configuration. Ensures logging is also enabled.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "aws_access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "name": {
                "type": "string",
                "description": "name for given CloudTrail configuration.\nThis is a primary key and is used to identify the configuration."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used."
              },
              "include_global_events": {
                "description": "record API calls from global services such as IAM and STS?",
                "$ref": "#/definitions/ansible_truth"
              },
              "aws_region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used."
              },
              "access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "s3_bucket_name": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "type": "string",
                "description": "add or remove CloudTrail configuration."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "ec2_secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "s3_key_prefix": {
                "type": "string",
                "description": "prefix to keys in bucket. A trailing slash is not necessary and will be removed."
              },
              "ec2_region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used."
              }
            }
          },
          "os_ironic": {
            "type": "object",
            "description": "Create or Remove Ironic nodes from OpenStack.",
            "properties": {
              "uuid": {
                "type": "string",
                "description": "Default: None\n\nglobally unique identifier (UUID) to be given to the resource. Will be auto-generated if not specified, and name is specified.\nDefinition of a UUID will always take precedence to a name value."
              },
              "driver_info": {
                "type": "string",
                "description": "Information for this server's driver. Will vary based on which driver is in use. Any sub-field which is populated will be validated during creation."
              },
              "nics": {
                "type": "string",
                "description": "A list of network interface cards, eg, \" - mac: aa:bb:cc:aa:bb:cc\""
              },
              "driver": {
                "type": "string",
                "description": "Default: None\n\nThe name of the Ironic Driver to use with this node."
              },
              "ironic_url": {
                "type": "string",
                "description": "Default: None\n\nIf noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with \"auth\" and \"auth_type\" settings set to None."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicates desired state of the resource"
              },
              "chassis_uuid": {
                "type": "string",
                "description": "Default: None\n\nAssociate the node with a pre-defined chassis."
              },
              "skip_update_of_driver_password": {
                "type": "string",
                "description": "Allows the code that would assert changes to nodes to skip the update if the change is a single line consisting of the password field.  As of Kilo, by default, passwords are always masked to API requests, which means the logic as a result always attempts to re-assert the password field."
              },
              "properties": {
                "type": "string",
                "description": "Definition of the physical characteristics of this server, used for scheduling purposes"
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nunique name identifier to be given to the resource."
              }
            }
          },
          "lineinfile": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "name",
                        "destfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "destfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "line",
                        "value"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will search a file for a line, and ensure that it is present or absent.\nThis is primarily useful when you want to change a single line in a file only. See the M(replace) module if you want to change multiple, similar lines; for other cases, see the M(copy) or M(template) modules.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The file to modify."
              },
              "insertbefore": {
                "type": "string",
                "description": "Used with C(state=present). If specified, the line will be inserted before the last match of specified regular expression. A value is available; C(BOF) for inserting the line at the beginning of the file. If specified regular expresion has no matches, the line will be inserted at the end of the file.  May not be used with C(backrefs)."
              },
              "dest": {
                "type": "string",
                "description": "The file to modify."
              },
              "create": {
                "description": "Default: no\n\nUsed with C(state=present). If specified, the file will be created if it does not already exist. By default it will fail if the file is missing.",
                "$ref": "#/definitions/ansible_truth"
              },
              "destfile": {
                "type": "string",
                "description": "The file to modify."
              },
              "backrefs": {
                "description": "Default: no\n\nUsed with C(state=present). If set, line can contain backreferences (both positional and named) that will get populated if the C(regexp) matches. This flag changes the operation of the module slightly; C(insertbefore) and C(insertafter) will be ignored, and if the C(regexp) doesn't match anywhere in the file, the file will be left unchanged. If the C(regexp) does match, the last matching line will be replaced by the expanded line parameter.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the line should be there or not."
              },
              "value": {
                "type": "string",
                "description": "Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches."
              },
              "insertafter": {
                "type": "string",
                "description": "Default: EOF\n\nUsed with C(state=present). If specified, the line will be inserted after the last match of specified regular expression. A special value is available; C(EOF) for inserting the line at the end of the file. If specified regular expresion has no matches, EOF will be used instead. May not be used with C(backrefs)."
              },
              "regexp": {
                "type": "string",
                "description": "The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found; only the last line found will be replaced. For C(state=absent), the pattern of the line to remove.  Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html)."
              },
              "validate": {
                "type": "string",
                "description": ""
              },
              "backup": {
                "description": "Default: no\n\nCreate a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
                "$ref": "#/definitions/ansible_truth"
              },
              "line": {
                "type": "string",
                "description": "Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches."
              }
            }
          },
          "gce_net": {
            "type": "object",
            "description": "This module can create and destroy Google Compute Engine networks and firewall rules U(https://developers.google.com/compute/docs/networking). The I(name) parameter is reserved for referencing a network while the I(fwname) parameter is used to reference firewall rules. IPv4 Address ranges must be specified using the CIDR U(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) format. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.",
            "properties": {
              "src_tags": {
                "description": "the source instance tags for creating a firewall rule",
                "$ref": "#/definitions/ansible_array"
              },
              "name": {
                "type": "string",
                "description": "name of the network"
              },
              "src_range": {
                "description": "the source IPv4 address range in CIDR notation",
                "$ref": "#/definitions/ansible_array"
              },
              "allowed": {
                "type": "string",
                "description": "the protocol:ports to allow ('tcp:80' or 'tcp:80,443' or 'tcp:80-800;udp:1-25')"
              },
              "fwname": {
                "type": "string",
                "description": "name of the firewall rule"
              },
              "pem_file": {
                "type": "string",
                "description": "path to the pem file associated with the service account email"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\ndesired state of the network or firewall"
              },
              "service_account_email": {
                "type": "string",
                "description": "service account email"
              },
              "ipv4_range": {
                "type": "string",
                "description": "the IPv4 address range in CIDR notation for the network"
              },
              "project_id": {
                "type": "string",
                "description": "your GCE project ID"
              },
              "target_tags": {
                "description": "the target instance tags for creating a firewall rule",
                "$ref": "#/definitions/ansible_array"
              }
            }
          },
          "apt_rpm": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "update_cache",
                        "update-cache"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "package",
                        "pkg",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "package"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages packages with I(apt-rpm). Both low-level (I(rpm)) and high-level (I(apt-get)) package manager binaries required.",
            "properties": {
              "name": {
                "type": "string",
                "description": "name of package to install, upgrade or remove."
              },
              "package": {
                "type": "string",
                "description": "name of package to install, upgrade or remove."
              },
              "state": {
                "enum": [
                  "installed",
                  "removed",
                  "absent",
                  "present"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicates the desired package state"
              },
              "update_cache": {
                "description": "update the package database first C(apt-get update).",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkg": {
                "type": "string",
                "description": "name of package to install, upgrade or remove."
              },
              "update-cache": {
                "description": "update the package database first C(apt-get update).",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "s3_logging": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage logging facility of an s3 bucket in AWS",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the s3 bucket."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "target_prefix": {
                "type": "string",
                "description": "The prefix that should be prepended to the generated log files written to the target_bucket."
              },
              "target_bucket": {
                "type": "string",
                "description": "The bucket to log to. Required when state=present."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nEnable or disable logging."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "gce": {
            "type": "object",
            "description": "Creates or terminates Google Compute Engine (GCE) instances.  See U(https://cloud.google.com/products/compute-engine) for an overview. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.",
            "properties": {
              "disks": {
                "description": "a list of persistent disks to attach to the instance; a string value gives the name of the disk; alternatively, a dictionary value can define 'name' and 'mode' ('READ_ONLY' or 'READ_WRITE'). The first entry will be the boot disk (which must be READ_WRITE).",
                "$ref": "#/definitions/ansible_array"
              },
              "name": {
                "type": "string",
                "description": "identifier when working with a single instance"
              },
              "zone": {
                "type": "string",
                "description": "Default: us-central1-a\n\nthe GCE zone to use"
              },
              "tags": {
                "description": "a comma-separated list of tags to associate with the instance",
                "$ref": "#/definitions/ansible_array"
              },
              "external_ip": {
                "enum": [
                  "ephemeral",
                  "none"
                ],
                "type": "string",
                "description": "Default: ephemeral\n\ntype of external ip, ephemeral by default"
              },
              "service_account_email": {
                "type": "string",
                "description": "service account email"
              },
              "instance_names": {
                "type": "string",
                "description": "a comma-separated list of instance names to create or destroy"
              },
              "service_account_permissions": {
                "description": "service account permissions (see U(https://cloud.google.com/sdk/gcloud/reference/compute/instances/create), --scopes section for detailed information)",
                "$ref": "#/definitions/ansible_array"
              },
              "ip_forward": {
                "description": "Default: false\n\nset to true if the instance can forward ip packets (useful for gateways)",
                "$ref": "#/definitions/ansible_truth"
              },
              "metadata": {
                "type": "string",
                "description": "a hash/dictionary of custom data for the instance; '{\"key\":\"value\",...}'"
              },
              "persistent_boot_disk": {
                "description": "Default: false\n\nif set, create the instance with a persistent boot disk",
                "$ref": "#/definitions/ansible_truth"
              },
              "pem_file": {
                "type": "string",
                "description": "path to the pem file associated with the service account email"
              },
              "project_id": {
                "type": "string",
                "description": "your GCE project ID"
              },
              "state": {
                "enum": [
                  "active",
                  "present",
                  "absent",
                  "deleted"
                ],
                "type": "string",
                "description": "Default: present\n\ndesired state of the resource"
              },
              "machine_type": {
                "type": "string",
                "description": "Default: n1-standard-1\n\nmachine type to use for the instance, use 'n1-standard-1' by default"
              },
              "disk_auto_delete": {
                "description": "Default: true\n\nif set boot disk will be removed after instance destruction",
                "$ref": "#/definitions/ansible_truth"
              },
              "image": {
                "type": "string",
                "description": "Default: debian-7\n\nimage string to use for the instance"
              },
              "network": {
                "type": "string",
                "description": "Default: default\n\nname of the network, 'default' will be used if not specified"
              }
            }
          },
          "s3": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "expiry",
                        "expiration"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "overwrite",
                        "force"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "retries",
                        "retry"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "s3_url",
                        "S3_URL"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module allows the user to manage S3 buckets and the objects within them. Includes support for creating and deleting both objects and buckets, retrieving objects as files or strings and generating download links. This module has a dependency on python-boto.",
            "properties": {
              "force": {
                "type": "string",
                "description": "Default: True\n\nForce overwrite either locally on the filesystem or remotely with the object/key. Used with PUT and GET operations. Boolean or one of [Always, Never, Different], new in 2.0"
              },
              "prefix": {
                "type": "string",
                "description": "Limits the response to keys that begin with the specified prefix for list mode"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "marker": {
                "type": "string",
                "description": "Specifies the key to start with when using list mode. Object keys are returned in alphabetical order, starting with key after the marker in order."
              },
              "overwrite": {
                "type": "string",
                "description": "Default: True\n\nForce overwrite either locally on the filesystem or remotely with the object/key. Used with PUT and GET operations. Boolean or one of [Always, Never, Different], new in 2.0"
              },
              "aws_secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "retry": {
                "description": "On recoverable failure, how many times to retry before actually failing.",
                "$ref": "#/definitions/ansible_number"
              },
              "encrypt": {
                "description": "When set for PUT mode, asks for server-side encryption",
                "$ref": "#/definitions/ansible_truth"
              },
              "permission": {
                "description": "Default: private\n\nThis option let's the user set the canned permissions on the object/bucket that are created. The permissions that can be set are 'private', 'public-read', 'public-read-write', 'authenticated-read'. Multiple permissions can be specified as a list.",
                "$ref": "#/definitions/ansible_array"
              },
              "max_keys": {
                "type": "string",
                "description": "Default: 1000\n\nMax number of results to return in list mode, set this if you want to retrieve fewer than the default 1000 keys."
              },
              "version": {
                "type": "string",
                "description": "Version ID of the object inside the bucket. Can be used to get a specific version of a file if versioning is enabled in the target bucket."
              },
              "s3_url": {
                "type": "string",
                "description": "S3 URL endpoint for usage with Eucalypus, fakes3, etc.  Otherwise assumes AWS"
              },
              "mode": {
                "enum": [
                  "get",
                  "put",
                  "delete",
                  "create",
                  "geturl",
                  "getstr",
                  "delobj",
                  "list"
                ],
                "type": "string",
                "description": "Switches the module behaviour between put (upload), get (download), geturl (return download url, Ansible 1.3+), getstr (download object as string (1.3+)), list (list keys, Ansible 2.0+), create (bucket), delete (bucket), and delobj (delete object, Ansible 2.0+)."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "retries": {
                "description": "On recoverable failure, how many times to retry before actually failing.",
                "$ref": "#/definitions/ansible_number"
              },
              "dest": {
                "type": "string",
                "description": "The destination file path when downloading an object/key with a GET operation."
              },
              "object": {
                "type": "string",
                "description": "Keyname of the object inside the bucket. Can be used to create \"virtual directories\", see examples."
              },
              "aws_region": {
                "type": "string",
                "description": "AWS region to create the bucket in. If not set then the value of the AWS_REGION and EC2_REGION environment variables are checked, followed by the aws_region and ec2_region settings in the Boto config file.  If none of those are set the region defaults to the S3 Location: US Standard.  Prior to ansible 1.8 this parameter could be specified but had no effect."
              },
              "expiry": {
                "type": "string",
                "description": "Default: 600\n\nTime limit (in seconds) for the URL generated and returned by S3/Walrus when performing a mode=put or mode=geturl operation."
              },
              "ec2_access_key": {
                "type": "string",
                "description": "AWS access key id. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "ec2_secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "S3_URL": {
                "type": "string",
                "description": "S3 URL endpoint for usage with Eucalypus, fakes3, etc.  Otherwise assumes AWS"
              },
              "ec2_region": {
                "type": "string",
                "description": "AWS region to create the bucket in. If not set then the value of the AWS_REGION and EC2_REGION environment variables are checked, followed by the aws_region and ec2_region settings in the Boto config file.  If none of those are set the region defaults to the S3 Location: US Standard.  Prior to ansible 1.8 this parameter could be specified but had no effect."
              },
              "access_key": {
                "type": "string",
                "description": "AWS access key id. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "src": {
                "type": "string",
                "description": "The source file path when performing a PUT operation."
              },
              "aws_access_key": {
                "type": "string",
                "description": "AWS access key id. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": "AWS region to create the bucket in. If not set then the value of the AWS_REGION and EC2_REGION environment variables are checked, followed by the aws_region and ec2_region settings in the Boto config file.  If none of those are set the region defaults to the S3 Location: US Standard.  Prior to ansible 1.8 this parameter could be specified but had no effect."
              },
              "bucket": {
                "type": "string",
                "description": "Bucket name."
              },
              "headers": {
                "type": "object",
                "description": "Custom headers for PUT operation, as a dictionary of 'key=value' and 'key=value,key=value'."
              },
              "expiration": {
                "type": "string",
                "description": "Default: 600\n\nTime limit (in seconds) for the URL generated and returned by S3/Walrus when performing a mode=put or mode=geturl operation."
              },
              "secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "metadata": {
                "type": "object",
                "description": "Metadata for PUT operation, as a dictionary of 'key=value' and 'key=value,key=value'."
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "portage": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "package",
                        "name"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages Gentoo packages",
            "properties": {
              "nodeps": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Only merge packages but not their dependencies (--nodeps)"
              },
              "getbinpkg": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Prefer packages specified at PORTAGE_BINHOST in make.conf"
              },
              "onlydeps": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Only merge packages' dependencies but not the packages (--onlydeps)"
              },
              "verbose": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Run emerge in verbose mode (--verbose)"
              },
              "name": {
                "type": "string",
                "description": "Package atom or set, e.g. C(sys-apps/foo) or C(>foo-2.13) or C(@world)"
              },
              "package": {
                "type": "string",
                "description": "Package atom or set, e.g. C(sys-apps/foo) or C(>foo-2.13) or C(@world)"
              },
              "oneshot": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Do not add the packages to the world file (--oneshot)"
              },
              "update": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Update packages to the best version available (--update)"
              },
              "deep": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Consider the entire dependency tree of packages (--deep)"
              },
              "sync": {
                "enum": [
                  "yes",
                  "web"
                ],
                "type": "string",
                "description": "Sync package repositories first\nIf yes, perform \"emerge --sync\"\nIf web, perform \"emerge-webrsync\""
              },
              "changed_use": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Include installed packages where USE flags have changed, except when\nflags that the user has not enabled are added or removed\n(--changed-use)"
              },
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "emerged",
                  "absent",
                  "removed",
                  "unmerged"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the package atom"
              },
              "quiet": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Run emerge in quiet mode (--quiet)"
              },
              "usepkgonly": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Merge only binaries (no compiling). This sets getbinpkg=yes."
              },
              "depclean": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Remove packages not needed by explicitly merged packages (--depclean)\nIf no package is specified, clean up the world's dependencies\nOtherwise, --depclean serves as a dependency aware version of --unmerge"
              },
              "usepkg": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": ""
              },
              "noreplace": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Do not re-emerge installed packages (--noreplace)"
              },
              "newuse": {
                "enum": [
                  "yes"
                ],
                "type": "string",
                "description": "Include installed packages where USE flags have changed (--newuse)"
              }
            }
          },
          "pkgin": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The standard package manager for SmartOS, but also usable on NetBSD or any OS that uses C(pkgsrc).  (Home: U(http://pkgin.net/))",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIntended state of the package"
              },
              "name": {
                "description": "Name of package to install/remove;\nmultiple names may be given, separated by commas",
                "$ref": "#/definitions/ansible_array"
              },
              "pkg": {
                "description": "Name of package to install/remove;\nmultiple names may be given, separated by commas",
                "$ref": "#/definitions/ansible_array"
              }
            }
          },
          "ping": {
            "type": "object",
            "description": "A trivial test module, this module always returns C(pong) on successful contact. It does not make sense in playbooks, but it is useful from C(/usr/bin/ansible) to verify the ability to login and that a usable python is configured.\nThis is NOT ICMP ping, this is just a trivial test module.",
            "properties": {
              "data": {
                "type": "string",
                "description": ""
              }
            }
          },
          "route53_zone": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates and deletes Route53 private and public zones",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "vpc_region": {
                "type": "string",
                "description": "The VPC Region the zone should be a part of (if this is going to be a private zone)"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "comment": {
                "type": "string",
                "description": "Comment associated with the zone"
              },
              "vpc_id": {
                "type": "string",
                "description": "The VPC ID the zone should be a part of (if this is going to be a private zone)"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: True\n\nwhether or not the zone should exist or not"
              },
              "zone": {
                "type": "string",
                "description": "The DNS zone record (eg: foo.com.)"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "cs_securitygroup": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create and remove security groups.",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain the security group is related to."
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "Description of the security group."
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the security group to be created in."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the security group."
              },
              "account": {
                "type": "string",
                "description": "Account the security group is related to."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the security group."
              }
            }
          },
          "bigip_facts": {
            "type": "object",
            "description": "Collect facts from F5 BIG-IP devices via iControl SOAP API",
            "properties": {
              "include": {
                "type": "string",
                "description": "Fact category or list of categories to collect"
              },
              "server": {
                "type": "string",
                "description": "BIG-IP host"
              },
              "filter": {
                "type": "string",
                "description": "Shell-style glob matching string used to filter fact keys. Not applicable for software and system_info fact categories."
              },
              "session": {
                "type": "string",
                "description": "Default: True\n\nBIG-IP session support; may be useful to avoid concurrency issues in certain circumstances."
              },
              "user": {
                "type": "string",
                "description": "BIG-IP username"
              },
              "password": {
                "type": "string",
                "description": "BIG-IP password"
              },
              "validate_certs": {
                "type": "string",
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8"
              }
            }
          },
          "os_volume": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "display_name",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "display_name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "verify",
                        "validate_certs"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "display_description",
                        "description"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or Remove cinder block storage volumes",
            "properties": {
              "auth_type": {
                "type": "string",
                "description": ""
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "image": {
                "type": "string",
                "description": "Default: None\n\nImage name or id for boot from volume"
              },
              "snapshot_id": {
                "type": "string",
                "description": "Default: None\n\nVolume snapshot id to create from"
              },
              "cloud": {
                "type": "string",
                "description": ""
              },
              "size": {
                "type": "string",
                "description": "Default: None\n\nSize of volume in GB"
              },
              "display_name": {
                "type": "string",
                "description": "Name of volume"
              },
              "verify": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "display_description": {
                "type": "string",
                "description": "Default: None\n\nString describing the volume"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "description": {
                "type": "string",
                "description": "Default: None\n\nString describing the volume"
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "auth": {
                "type": "object",
                "description": ""
              },
              "endpoint_type": {
                "enum": [
                  "public",
                  "internal",
                  "admin"
                ],
                "type": "string",
                "description": ""
              },
              "key": {
                "type": "string",
                "description": ""
              },
              "cacert": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "Name of volume"
              },
              "region_name": {
                "type": "string",
                "description": ""
              },
              "volume_type": {
                "type": "string",
                "description": "Default: None\n\nVolume type for volume"
              },
              "cert": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "async_status": {
            "required": [
              "jid"
            ],
            "type": "object",
            "description": "This module gets the status of an asynchronous task.",
            "properties": {
              "jid": {
                "type": "string",
                "description": "Job or task identifier"
              },
              "mode": {
                "enum": [
                  "status",
                  "cleanup"
                ],
                "type": "string",
                "description": "Default: status\n\nif C(status), obtain the status; if C(cleanup), clean up the async job cache located in C(~/.ansible_async/) for the specified job I(jid)."
              }
            }
          },
          "npm": {
            "type": "object",
            "description": "Manage node.js packages with Node Package Manager (npm)",
            "properties": {
              "executable": {
                "type": "string",
                "description": "The executable location for npm.\nThis is useful if you are using a version manager, such as nvm"
              },
              "name": {
                "type": "string",
                "description": "The name of a node.js library to install"
              },
              "global": {
                "description": "Install the node.js library globally",
                "$ref": "#/definitions/ansible_truth"
              },
              "ignore_scripts": {
                "description": "Use the --ignore-scripts flag when installing.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "latest"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state of the node.js library"
              },
              "production": {
                "description": "Install dependencies in production mode, excluding devDependencies",
                "$ref": "#/definitions/ansible_truth"
              },
              "registry": {
                "type": "string",
                "description": "The registry to install modules from."
              },
              "version": {
                "type": "string",
                "description": "The version to be installed"
              },
              "path": {
                "type": "string",
                "description": "The base path where to install the node.js libraries"
              }
            }
          },
          "set_fact": {
            "type": "object",
            "description": "This module allows setting new variables.  Variables are set on a host-by-host basis just like facts discovered by the setup module.\nThese variables will survive between plays during an Ansible run, but will not be saved across executions even if you use a fact cache.",
            "properties": {
              "key_value": {
                "type": "string",
                "description": "The C(set_fact) module takes key=value pairs as variables to set in the playbook scope. Or alternatively, accepts complex arguments using the C(args:) statement."
              }
            }
          },
          "vmware_vmkernel_ip_config": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Configure the VMkernel IP Address",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the ESXi server"
              },
              "vmk_name": {
                "type": "string",
                "description": "VMkernel interface name"
              },
              "admin": {
                "type": "string",
                "description": "The username of the ESXi server"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the ESXi server"
              },
              "subnet_mask": {
                "type": "string",
                "description": "Subnet Mask to assign to VMkernel interface"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the ESXi server"
              },
              "user": {
                "type": "string",
                "description": "The username of the ESXi server"
              },
              "pass": {
                "type": "string",
                "description": "The password of the ESXi server"
              },
              "password": {
                "type": "string",
                "description": "The password of the ESXi server"
              },
              "ip_address": {
                "type": "string",
                "description": "IP address to assign to VMkernel interface"
              }
            }
          },
          "newrelic_deployment": {
            "required": [
              "token"
            ],
            "type": "object",
            "description": "Notify newrelic about app deployments (see https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/deployment-notifications#api)",
            "properties": {
              "application_id": {
                "type": "string",
                "description": "(one of app_name or application_id are required) The application id, found in the URL when viewing the application in RPM"
              },
              "description": {
                "type": "string",
                "description": "Text annotation for the deployment - notes for you"
              },
              "changelog": {
                "type": "string",
                "description": "A list of changes for this deployment"
              },
              "appname": {
                "type": "string",
                "description": "Name of the application"
              },
              "environment": {
                "type": "string",
                "description": "The environment for this deployment"
              },
              "token": {
                "type": "string",
                "description": "API token, to place in the x-api-key header."
              },
              "user": {
                "type": "string",
                "description": "The name of the user/process that triggered this deployment"
              },
              "app_name": {
                "type": "string",
                "description": "(one of app_name or application_id are required) The value of app_name in the newrelic.yml file used by the application"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "revision": {
                "type": "string",
                "description": "A revision number (e.g., git commit SHA)"
              }
            }
          },
          "win_ping": {
            "type": "object",
            "description": "Checks management connectivity of a windows host",
            "properties": {
              "data": {
                "type": "string",
                "description": "Default: pong\n\nAlternate data to return instead of 'pong'"
              }
            }
          },
          "os_server_volume": {
            "type": "object",
            "description": "Attach or Detach volumes from OpenStack VM's",
            "properties": {
              "volume": {
                "type": "string",
                "description": "Name or id of volume you want to attach to a server"
              },
              "device": {
                "type": "string",
                "description": "Default: None\n\nDevice you want to attach. Defaults to auto finding a device name."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "server": {
                "type": "string",
                "description": "Name or ID of server you want to attach a volume to"
              }
            }
          },
          "os_object": {
            "type": "object",
            "description": "Create or Delete objects and containers from OpenStack",
            "properties": {
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "container": {
                "type": "string",
                "description": "The name of the container in which to create the object"
              },
              "name": {
                "type": "string",
                "description": "Name to be give to the object. If omitted, operations will be on the entire container"
              },
              "container_access": {
                "type": "string",
                "description": "Default: private\n\ndesired container access level."
              },
              "filename": {
                "type": "string",
                "description": "Path to local file to be uploaded."
              }
            }
          },
          "elasticache": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "cache_parameter_group",
                        "parameter_group"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage cache clusters in Amazon Elasticache.\nReturns information about the specified cache cluster.",
            "properties": {
              "engine": {
                "type": "string",
                "description": "Default: memcached\n\nName of the cache engine to be used (memcached or redis)"
              },
              "node_type": {
                "type": "string",
                "description": "Default: cache.m1.small\n\nThe compute and memory capacity of the nodes in the cache cluster"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "security_group_ids": {
                "description": "Default: ['default']\n\nA list of vpc security group names to associate with this cache cluster. Only use if inside a vpc",
                "$ref": "#/definitions/ansible_array"
              },
              "zone": {
                "type": "string",
                "description": "Default: None\n\nThe EC2 Availability Zone in which the cache cluster will be created"
              },
              "parameter_group": {
                "type": "string",
                "description": "Default: None\n\nThe name of the cache parameter group to associate with this cache cluster. If this argument is omitted, the default cache parameter group for the specified engine will be used."
              },
              "num_nodes": {
                "description": "The initial number of cache nodes that the cache cluster will have. Required when state=present.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "rebooted"
                ],
                "type": "string",
                "description": "C(absent) or C(present) are idempotent actions that will create or destroy a cache cluster as needed. C(rebooted) will reboot the cluster, resulting in a momentary outage."
              },
              "cache_subnet_group": {
                "type": "string",
                "description": "Default: None\n\nThe subnet group name to associate with. Only use if inside a vpc. Required if inside a vpc"
              },
              "wait": {
                "description": "Default: True\n\nWait for cache cluster result before returning",
                "$ref": "#/definitions/ansible_truth"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "cache_engine_version": {
                "type": "string",
                "description": "Default: none\n\nThe version number of the cache engine"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "cache_port": {
                "description": "Default: none\n\nThe port number on which each of the cache nodes will accept connections",
                "$ref": "#/definitions/ansible_number"
              },
              "cache_parameter_group": {
                "type": "string",
                "description": "Default: None\n\nThe name of the cache parameter group to associate with this cache cluster. If this argument is omitted, the default cache parameter group for the specified engine will be used."
              },
              "name": {
                "type": "string",
                "description": "The cache cluster identifier"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "hard_modify": {
                "description": "Whether to destroy and recreate an existing cache cluster if necessary in order to modify its state",
                "$ref": "#/definitions/ansible_truth"
              },
              "cache_security_groups": {
                "description": "Default: ['default']\n\nA list of cache security group names to associate with this cache cluster. Must be an empty list if inside a vpc",
                "$ref": "#/definitions/ansible_array"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "clc_blueprint_package": {
            "required": [
              "server_ids",
              "package_id"
            ],
            "type": "object",
            "description": "An Ansible module to deploy blue print package on a set of servers in CenturyLink Cloud.",
            "properties": {
              "server_ids": {
                "description": "A list of server Ids to deploy the blue print package.",
                "$ref": "#/definitions/ansible_array"
              },
              "state": {
                "enum": [
                  "present"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to install or un-install the package. Currently it supports only \"present\" for install action."
              },
              "package_params": {
                "type": "object",
                "description": "The dictionary of arguments required to deploy the blue print."
              },
              "package_id": {
                "type": "string",
                "description": "The package id of the blue print."
              },
              "wait": {
                "type": "string",
                "description": "Default: True\n\nWhether to wait for the tasks to finish before returning."
              }
            }
          },
          "vca_nat": {
            "type": "object",
            "description": "Adds or removes nat rules from a gateway in a vca environment",
            "properties": {
              "username": {
                "type": "string",
                "description": "Default: None\n\nThe vca username or email address, if not set the environment variable VCA_USER is checked for the username."
              },
              "gateway_name": {
                "type": "string",
                "description": "Default: gateway\n\nThe name of the gateway of the vdc where the rule should be added"
              },
              "purge_rules": {
                "type": "string",
                "description": "If set to true, it will delete all rules in the gateway that are not given as paramter to this module."
              },
              "nat_rules": {
                "type": "string",
                "description": "A list of rules to be added to the gateway, Please see examples on valid entries"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nif the object should be added or removed"
              },
              "instance_id": {
                "type": "string",
                "description": "Default: None\n\nThe instance id in a vchs environment to be used for creating the vapp"
              },
              "host": {
                "type": "string",
                "description": "Default: None\n\nThe authentication host to be used when service type  is vcd."
              },
              "service_type": {
                "type": "string",
                "description": "Default: vca\n\nThe type of service we are authenticating against"
              },
              "org": {
                "type": "string",
                "description": "Default: None\n\nThe org to login to for creating vapp, mostly set when the service_type is vdc."
              },
              "password": {
                "type": "string",
                "description": "Default: None\n\nThe vca password, if not set the environment variable VCA_PASS is checked for the password"
              },
              "vdc_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the vdc where the gateway is located."
              },
              "api_version": {
                "type": "string",
                "description": "Default: 5.7\n\nThe api version to be used with the vca"
              },
              "verify_certs": {
                "type": "string",
                "description": "Default: True\n\nIf the certificates of the authentication is to be verified"
              }
            }
          },
          "fireball": {
            "type": "object",
            "description": "Modern SSH clients support ControlPersist which is just as fast as fireball was.  Please enable that in ansible.cfg as a replacement for fireball.\nRemoved in ansible 2.0.",
            "properties": {}
          },
          "jira": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "operation",
                        "command"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "operation"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "command"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "issue",
                        "ticket"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create and modify issues in a JIRA instance.",
            "properties": {
              "status": {
                "type": "string",
                "description": "The desired status; only relevant for the transition operation."
              },
              "comment": {
                "type": "string",
                "description": "The comment text to add."
              },
              "description": {
                "type": "string",
                "description": "The issue description, where appropriate."
              },
              "fields": {
                "type": "string",
                "description": "This is a free-form data structure that can contain arbitrary data. This is passed directly to the JIRA REST API (possibly after merging with other required data, as when passed to create). See examples for more information, and the JIRA REST API for the structure required for various fields."
              },
              "username": {
                "type": "string",
                "description": "The username to log-in with."
              },
              "uri": {
                "type": "string",
                "description": "Base URI for the JIRA instance"
              },
              "summary": {
                "type": "string",
                "description": "The issue summary, where appropriate."
              },
              "project": {
                "type": "string",
                "description": "The project for this operation. Required for issue creation."
              },
              "assignee": {
                "type": "string",
                "description": "Sets the assignee on create or transition operations. Note not all transitions will allow this."
              },
              "command": {
                "enum": [
                  "create",
                  "comment",
                  "edit",
                  "fetch",
                  "transition"
                ],
                "type": "string",
                "description": "The operation to perform."
              },
              "issuetype": {
                "type": "string",
                "description": "The issue type, for issue creation."
              },
              "operation": {
                "enum": [
                  "create",
                  "comment",
                  "edit",
                  "fetch",
                  "transition"
                ],
                "type": "string",
                "description": "The operation to perform."
              },
              "password": {
                "type": "string",
                "description": "The password to log-in with."
              },
              "issue": {
                "type": "string",
                "description": "An existing issue key to operate on."
              },
              "ticket": {
                "type": "string",
                "description": "An existing issue key to operate on."
              }
            }
          },
          "profitbricks_datacenter": {
            "type": "object",
            "description": "This is a simple module that supports creating or removing vDCs. A vDC is required before you can create servers. This module has a dependency on profitbricks >= 1.0.0",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the virtual datacenter."
              },
              "subscription_user": {
                "type": "string",
                "description": "The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable."
              },
              "name": {
                "type": "string",
                "description": "The name of the virtual datacenter."
              },
              "subscription_password": {
                "type": "string",
                "description": "THe ProfitBricks password. Overrides the PB_PASSWORD environement variable."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\ncreate or terminate datacenters"
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 600\n\nhow long before wait gives up, in seconds"
              },
              "location": {
                "enum": [
                  "us/las",
                  "us/lasdev",
                  "de/fra",
                  "de/fkb"
                ],
                "type": "string",
                "description": "Default: us/las\n\nThe datacenter location."
              },
              "wait": {
                "description": "Default: yes\n\nwait for the datacenter to be created before returning",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "sysctl": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "key"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "key"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "value",
                        "val"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module manipulates sysctl entries and optionally performs a C(/sbin/sysctl -p) after changing them.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The dot-separated path (aka I(key)) specifying the sysctl variable."
              },
              "val": {
                "type": "string",
                "description": "Desired value of the sysctl key."
              },
              "ignoreerrors": {
                "description": "Use this option to ignore errors about unknown keys.",
                "$ref": "#/definitions/ansible_truth"
              },
              "value": {
                "type": "string",
                "description": "Desired value of the sysctl key."
              },
              "reload": {
                "description": "Default: yes\n\nIf C(yes), performs a I(/sbin/sysctl -p) if the C(sysctl_file) is updated. If C(no), does not reload I(sysctl) even if the C(sysctl_file) is updated.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the entry should be present or absent in the sysctl file."
              },
              "key": {
                "type": "string",
                "description": "The dot-separated path (aka I(key)) specifying the sysctl variable."
              },
              "sysctl_set": {
                "description": "Verify token value with the sysctl command and set with -w if necessary",
                "$ref": "#/definitions/ansible_truth"
              },
              "sysctl_file": {
                "type": "string",
                "description": "Default: /etc/sysctl.conf\n\nSpecifies the absolute path to C(sysctl.conf), if not C(/etc/sysctl.conf)."
              }
            }
          },
          "nova_compute": {
            "required": [
              "login_password",
              "name"
            ],
            "type": "object",
            "description": "Create or Remove virtual machines from Openstack.",
            "properties": {
              "availability_zone": {
                "type": "string",
                "description": "Default: None\n\nName of the availability zone"
              },
              "image_exclude": {
                "type": "string",
                "description": "Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name. Defaults to \"(deprecated)\""
              },
              "flavor_include": {
                "type": "string",
                "description": "Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name."
              },
              "meta": {
                "type": "string",
                "description": "Default: None\n\nA list of key value pairs that should be provided as a metadata to the new VM"
              },
              "auth_url": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nThe keystone url for authentication"
              },
              "login_username": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "wait_for": {
                "type": "string",
                "description": "Default: 180\n\nThe amount of time the module should wait for the VM to get into active state"
              },
              "auto_floating_ip": {
                "description": "Default: no\n\nShould a floating ip be auto created and assigned",
                "$ref": "#/definitions/ansible_truth"
              },
              "scheduler_hints": {
                "type": "string",
                "description": "Default: None\n\nArbitrary key/value pairs to the scheduler for custom use"
              },
              "nics": {
                "type": "string",
                "description": "Default: None\n\nA list of network id's to which the VM's interface should be attached"
              },
              "floating_ips": {
                "type": "string",
                "description": "Default: None\n\nlist of valid floating IPs that pre-exist to assign to this node"
              },
              "flavor_ram": {
                "description": "Default: 1\n\nThe minimum amount of ram in MB that the flavor in which the new VM has to be created must have. Mutually exclusive with flavor_id",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "security_groups": {
                "type": "string",
                "description": "Default: None\n\nThe name of the security group to which the VM should be added"
              },
              "config_drive": {
                "description": "Default: no\n\nWhether to boot the server with config drive enabled",
                "$ref": "#/definitions/ansible_truth"
              },
              "region_name": {
                "type": "string",
                "description": "Default: None\n\nName of the region"
              },
              "key_name": {
                "type": "string",
                "description": "Default: None\n\nThe key pair name to be used when creating a VM"
              },
              "image_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the base image to boot. Mutually exclusive with image_id"
              },
              "user_data": {
                "type": "string",
                "description": "Default: None\n\nOpaque blob of data which is made available to the instance"
              },
              "image_id": {
                "type": "string",
                "description": "Default: None\n\nThe id of the base image to boot. Mutually exclusive with image_name"
              },
              "login_password": {
                "type": "string",
                "description": "Default: yes\n\nPassword of login user"
              },
              "wait": {
                "enum": [
                  "yes",
                  "no"
                ],
                "type": "string",
                "description": "Default: yes\n\nIf the module should wait for the VM to be created."
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nName that has to be given to the instance"
              },
              "login_tenant_name": {
                "type": "string",
                "description": "Default: yes\n\nThe tenant name of the login user"
              },
              "flavor_id": {
                "type": "string",
                "description": "Default: 1\n\nThe id of the flavor in which the new VM has to be created. Mutually exclusive with flavor_ram"
              },
              "floating_ip_pools": {
                "type": "string",
                "description": "Default: None\n\nlist of floating IP pools from which to choose a floating IP"
              }
            }
          },
          "win_webpicmd": {
            "type": "object",
            "description": "Installs packages using Web Platform Installer command-line (http://www.iis.net/learn/install/web-platform-installer/web-platform-installer-v4-command-line-webpicmdexe-rtw-release).\nMust be installed and present in PATH (see win_chocolatey module; 'webpicmd' is the package name, and you must install 'lessmsi' first too)\nInstall IIS first (see win_feature module)",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the package to be installed"
              }
            }
          },
          "postgresql_privs": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "objs",
                        "obj"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "roles",
                        "role"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "roles"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "role"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "privs",
                        "priv"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "database",
                        "db"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "database"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "db"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host",
                        "login_host"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "unix_socket",
                        "login_unix_socket"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "login",
                        "login_user"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "login_password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "grant_option",
                        "admin_option"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Grant or revoke privileges on PostgreSQL database objects.\nThis module is basically a wrapper around most of the functionality of PostgreSQL's GRANT and REVOKE statements with detection of changes (GRANT/REVOKE I(privs) ON I(type) I(objs) TO/FROM I(roles))",
            "properties": {
              "objs": {
                "type": "string",
                "description": "Comma separated list of database objects to set privileges on.\nIf I(type) is C(table) or C(sequence), the special value C(ALL_IN_SCHEMA) can be provided instead to specify all database objects of type I(type) in the schema specified via I(schema). (This also works with PostgreSQL < 9.0.)\nIf I(type) is C(database), this parameter can be omitted, in which case privileges are set for the database specified via I(database).\nIf I(type) is I(function), colons (\":\") in object names will be replaced with commas (needed to specify function signatures, see examples)\nAlias: I(obj)"
              },
              "login_user": {
                "type": "string",
                "description": "Default: postgres\n\nThe username to authenticate with.\nAlias: I(login_user)"
              },
              "login_password": {
                "type": "string",
                "description": "The password to authenticate with.\nAlias: I(login_password))"
              },
              "port": {
                "description": "Default: 5432\n\nDatabase port to connect to.",
                "$ref": "#/definitions/ansible_number"
              },
              "priv": {
                "type": "string",
                "description": "Comma separated list of privileges to grant/revoke.\nAlias: I(priv)"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIf C(present), the specified privileges are granted, if C(absent) they are revoked."
              },
              "role": {
                "type": "string",
                "description": "Comma separated list of role (user/group) names to set permissions for.\nThe special value C(PUBLIC) can be provided instead to set permissions for the implicitly defined PUBLIC group.\nAlias: I(role)"
              },
              "type": {
                "enum": [
                  "table",
                  "sequence",
                  "function",
                  "database",
                  "schema",
                  "language",
                  "tablespace",
                  "group"
                ],
                "type": "string",
                "description": "Default: table\n\nType of database object to set privileges on."
              },
              "schema": {
                "type": "string",
                "description": "Schema that contains the database objects specified via I(objs).\nMay only be provided if I(type) is C(table), C(sequence) or C(function). Defaults to  C(public) in these cases."
              },
              "login_host": {
                "type": "string",
                "description": "Database host address. If unspecified, connect via Unix socket.\nAlias: I(login_host)"
              },
              "db": {
                "type": "string",
                "description": "Name of database to connect to.\nAlias: I(db)"
              },
              "login_unix_socket": {
                "type": "string",
                "description": "Path to a Unix domain socket for local connections.\nAlias: I(login_unix_socket)"
              },
              "host": {
                "type": "string",
                "description": "Database host address. If unspecified, connect via Unix socket.\nAlias: I(login_host)"
              },
              "admin_option": {
                "description": "Whether C(role) may grant/revoke the specified privileges/group memberships to others.\nSet to C(no) to revoke GRANT OPTION, leave unspecified to make no changes.\nI(grant_option) only has an effect if I(state) is C(present).\nAlias: I(admin_option)",
                "$ref": "#/definitions/ansible_truth"
              },
              "password": {
                "type": "string",
                "description": "The password to authenticate with.\nAlias: I(login_password))"
              },
              "grant_option": {
                "description": "Whether C(role) may grant/revoke the specified privileges/group memberships to others.\nSet to C(no) to revoke GRANT OPTION, leave unspecified to make no changes.\nI(grant_option) only has an effect if I(state) is C(present).\nAlias: I(admin_option)",
                "$ref": "#/definitions/ansible_truth"
              },
              "obj": {
                "type": "string",
                "description": "Comma separated list of database objects to set privileges on.\nIf I(type) is C(table) or C(sequence), the special value C(ALL_IN_SCHEMA) can be provided instead to specify all database objects of type I(type) in the schema specified via I(schema). (This also works with PostgreSQL < 9.0.)\nIf I(type) is C(database), this parameter can be omitted, in which case privileges are set for the database specified via I(database).\nIf I(type) is I(function), colons (\":\") in object names will be replaced with commas (needed to specify function signatures, see examples)\nAlias: I(obj)"
              },
              "roles": {
                "type": "string",
                "description": "Comma separated list of role (user/group) names to set permissions for.\nThe special value C(PUBLIC) can be provided instead to set permissions for the implicitly defined PUBLIC group.\nAlias: I(role)"
              },
              "privs": {
                "type": "string",
                "description": "Comma separated list of privileges to grant/revoke.\nAlias: I(priv)"
              },
              "database": {
                "type": "string",
                "description": "Name of database to connect to.\nAlias: I(db)"
              },
              "unix_socket": {
                "type": "string",
                "description": "Path to a Unix domain socket for local connections.\nAlias: I(login_unix_socket)"
              },
              "login": {
                "type": "string",
                "description": "Default: postgres\n\nThe username to authenticate with.\nAlias: I(login_user)"
              }
            }
          },
          "svr4pkg": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manages SVR4 packages on Solaris 10 and 11.\nThese were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.\nNote that this is a very basic packaging system. It will not enforce dependencies on install or remove.",
            "properties": {
              "category": {
                "description": "Install/Remove category instead of a single package.",
                "$ref": "#/definitions/ansible_truth"
              },
              "src": {
                "type": "string",
                "description": "Specifies the location to install the package from. Required when C(state=present).\nCan be any path acceptable to the C(pkgadd) command's C(-d) option. e.g.: C(somefile.pkg), C(/dir/with/pkgs), C(http:/server/mypkgs.pkg).\nIf using a file or directory, they must already be accessible by the host. See the M(copy) module for a way to get them there."
              },
              "name": {
                "type": "string",
                "description": "Package name, e.g. C(SUNWcsr)"
              },
              "zone": {
                "enum": [
                  "current",
                  "all"
                ],
                "type": "string",
                "description": "Default: all\n\nWhether to install the package only in the current zone, or install it into all zones.\nThe installation into all zones works only if you are working with the global zone."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Whether to install (C(present)), or remove (C(absent)) a package.\nIf the package is to be installed, then I(src) is required.\nThe SVR4 package system doesn't provide an upgrade operation. You need to uninstall the old, then install the new package."
              },
              "proxy": {
                "type": "string",
                "description": "HTTP[s] proxy to be used if C(src) is a URL."
              },
              "response_file": {
                "type": "string",
                "description": "Specifies the location of a response file to be used if package expects input on install. (added in Ansible 1.4)"
              }
            }
          },
          "gluster_volume": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "volume"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "volume"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "bricks",
                        "brick"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create, remove, start, stop and tune GlusterFS volumes",
            "properties": {
              "force": {
                "description": "If brick is being created in the root partition, module will fail. Set force to true to override this behaviour",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "The volume name"
              },
              "replicas": {
                "description": "Replica count for volume",
                "$ref": "#/definitions/ansible_number"
              },
              "bricks": {
                "type": "string",
                "description": "Brick paths on servers. Multiple brick paths can be separated by commas"
              },
              "quota": {
                "type": "string",
                "description": "Quota value for limit-usage (be sure to use 10.0MB instead of 10MB, see quota list)"
              },
              "stripes": {
                "description": "Stripe count for volume",
                "$ref": "#/definitions/ansible_number"
              },
              "volume": {
                "type": "string",
                "description": "The volume name"
              },
              "cluster": {
                "description": "List of hosts to use for probing and brick setup",
                "$ref": "#/definitions/ansible_array"
              },
              "host": {
                "type": "string",
                "description": "Override local hostname (for peer probing purposes)"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "started",
                  "stopped",
                  "rebalanced"
                ],
                "type": "string",
                "description": "Use present/absent ensure if a volume exists or not, use started/stopped to control it's availability."
              },
              "start_on_create": {
                "description": "Controls whether the volume is started after creation or not, defaults to yes",
                "$ref": "#/definitions/ansible_truth"
              },
              "directory": {
                "type": "string",
                "description": "Directory for limit-usage"
              },
              "brick": {
                "type": "string",
                "description": "Brick paths on servers. Multiple brick paths can be separated by commas"
              },
              "rebalance": {
                "description": "Default: no\n\nControls whether the cluster is rebalanced after changes",
                "$ref": "#/definitions/ansible_truth"
              },
              "options": {
                "type": "object",
                "description": "A dictionary/hash with options/settings for the volume"
              },
              "transport": {
                "enum": [
                  "tcp",
                  "rdma",
                  "tcp,rdma"
                ],
                "type": "string",
                "description": "Default: tcp\n\nTransport type for volume"
              }
            }
          },
          "cs_sshkeypair": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, register and remove SSH keys.\nIf no key was found and no public key was provided and a new SSH private/public key pair will be created and the private key will be returned.",
            "properties": {
              "public_key": {
                "type": "string",
                "description": "String of the public key."
              },
              "account": {
                "type": "string",
                "description": "Account the public key is related to."
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the public key to be registered in."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the public key."
              },
              "domain": {
                "type": "string",
                "description": "Domain the public key is related to."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of public key."
              }
            }
          },
          "group": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manage presence of groups on a host.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the group should be present or not on the remote host."
              },
              "gid": {
                "type": "string",
                "description": "Optional I(GID) to set for the group."
              },
              "system": {
                "description": "Default: no\n\nIf I(yes), indicates that the group created is a system group.",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "Name of the group to manage."
              }
            }
          },
          "a10_server": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_ip",
                        "ip",
                        "address"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "thirsty"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_name",
                        "server"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "server_name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "server"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_status",
                        "status"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_ports",
                        "port"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage slb server objects on A10 Networks devices via aXAPI",
            "properties": {
              "status": {
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "type": "string",
                "description": "Default: enable\n\nslb virtual server status"
              },
              "force": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "thirsty": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "server_ports": {
                "description": "A list of ports to create for the server. Each list item should be a dictionary which specifies the C(port:) and C(protocol:), but can also optionally specify the C(status:). See the examples below for details. This parameter is required when C(state) is C(present).",
                "$ref": "#/definitions/ansible_array"
              },
              "ip": {
                "type": "string",
                "description": "slb server IP address"
              },
              "pass": {
                "type": "string",
                "description": "admin password of your A10 Networks device"
              },
              "port": {
                "description": "A list of ports to create for the server. Each list item should be a dictionary which specifies the C(port:) and C(protocol:), but can also optionally specify the C(status:). See the examples below for details. This parameter is required when C(state) is C(present).",
                "$ref": "#/definitions/ansible_array"
              },
              "client_key": {
                "type": "string",
                "description": ""
              },
              "use_proxy": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "server_name": {
                "type": "string",
                "description": "slb server name"
              },
              "server_status": {
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "type": "string",
                "description": "Default: enable\n\nslb virtual server status"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\ncreate, update or remove slb server"
              },
              "write_config": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "client_cert": {
                "type": "string",
                "description": ""
              },
              "username": {
                "type": "string",
                "description": "admin account of your A10 Networks device"
              },
              "server_ip": {
                "type": "string",
                "description": "slb server IP address"
              },
              "force_basic_auth": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "http_agent": {
                "type": "string",
                "description": ""
              },
              "host": {
                "type": "string",
                "description": "hostname or ip of your A10 Networks device"
              },
              "user": {
                "type": "string",
                "description": "admin account of your A10 Networks device"
              },
              "address": {
                "type": "string",
                "description": "slb server IP address"
              },
              "password": {
                "type": "string",
                "description": "admin password of your A10 Networks device"
              },
              "url_password": {
                "type": "string",
                "description": ""
              },
              "admin": {
                "type": "string",
                "description": "admin account of your A10 Networks device"
              },
              "pwd": {
                "type": "string",
                "description": "admin password of your A10 Networks device"
              },
              "server": {
                "type": "string",
                "description": "slb server name"
              },
              "url": {
                "type": "string",
                "description": ""
              },
              "url_username": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "webfaction_app": {
            "required": [
              "name",
              "login_name",
              "login_password",
              "type"
            ],
            "type": "object",
            "description": "Add or remove applications on a Webfaction host.  Further documentation at http://github.com/quentinsf/ansible-webfaction.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the application"
              },
              "port_open": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": ""
              },
              "machine": {
                "type": "string",
                "description": "The machine name to use (optional for accounts with only one machine)"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the application should exist"
              },
              "autostart": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Default: no\n\nWhether the app should restart with an autostart.cgi script"
              },
              "login_password": {
                "type": "string",
                "description": "The webfaction password to use"
              },
              "type": {
                "type": "string",
                "description": "The type of application to create. See the Webfaction docs at http://docs.webfaction.com/xmlrpc-api/apps.html for a list."
              },
              "login_name": {
                "type": "string",
                "description": "The webfaction account to use"
              },
              "extra_info": {
                "type": "string",
                "description": "Any extra parameters required by the app"
              }
            }
          },
          "mqtt": {
            "required": [
              "payload",
              "topic"
            ],
            "type": "object",
            "description": "Publish a message on an MQTT topic.",
            "properties": {
              "username": {
                "type": "string",
                "description": "Username to authenticate against the broker."
              },
              "qos": {
                "enum": [
                  "0",
                  "1",
                  "2"
                ],
                "type": "string",
                "description": "QoS (Quality of Service)"
              },
              "port": {
                "type": "string",
                "description": "Default: 1883\n\nMQTT broker port number"
              },
              "server": {
                "type": "string",
                "description": "Default: localhost\n\nMQTT broker address/name"
              },
              "topic": {
                "type": "string",
                "description": "MQTT topic name"
              },
              "client_id": {
                "type": "string",
                "description": "Default: hostname + pid\n\nMQTT client identifier"
              },
              "retain": {
                "description": "Setting this flag causes the broker to retain (i.e. keep) the message so that applications that subsequently subscribe to the topic can received the last retained message immediately.",
                "$ref": "#/definitions/ansible_truth"
              },
              "password": {
                "type": "string",
                "description": "Password for C(username) to authenticate against the broker."
              },
              "payload": {
                "type": "string",
                "description": "Payload. The special string C(\"None\") may be used to send a NULL (i.e. empty) payload which is useful to simply notify with the I(topic) or to clear previously retained messages."
              }
            }
          },
          "mail": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "sender",
                        "from"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "subject",
                        "msg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "subject"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "msg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "to",
                        "recipients"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module is useful for sending emails from playbooks.\nOne may wonder why automate sending emails?  In complex environments there are from time to time processes that cannot be automated, either because you lack the authority to make it so, or because not everyone agrees to a common approach.\nIf you cannot automate a specific step, but the step is non-blocking, sending out an email to the responsible party to make him perform his part of the bargain is an elegant way to put the responsibility in someone else's lap.\nOf course sending out a mail can be equally useful as a way to notify one or more people in a team that a specific action has been (successfully) taken.",
            "properties": {
              "body": {
                "type": "string",
                "description": "Default: $subject\n\nThe body of the email being sent."
              },
              "username": {
                "type": "string",
                "description": "If SMTP requires username"
              },
              "from": {
                "type": "string",
                "description": "Default: root\n\nThe email-address the mail is sent from. May contain address and phrase."
              },
              "sender": {
                "type": "string",
                "description": "Default: root\n\nThe email-address the mail is sent from. May contain address and phrase."
              },
              "recipients": {
                "type": "string",
                "description": "Default: root\n\nThe email-address(es) the mail is being sent to. This is a comma-separated list, which may contain address and phrase portions."
              },
              "to": {
                "type": "string",
                "description": "Default: root\n\nThe email-address(es) the mail is being sent to. This is a comma-separated list, which may contain address and phrase portions."
              },
              "cc": {
                "type": "string",
                "description": "The email-address(es) the mail is being copied to. This is a comma-separated list, which may contain address and phrase portions."
              },
              "charset": {
                "type": "string",
                "description": "Default: us-ascii\n\nThe character set of email being sent"
              },
              "bcc": {
                "type": "string",
                "description": "The email-address(es) the mail is being 'blind' copied to. This is a comma-separated list, which may contain address and phrase portions."
              },
              "headers": {
                "type": "string",
                "description": "A vertical-bar-separated list of headers which should be added to the message. Each individual header is specified as C(header=value) (see example below)."
              },
              "attach": {
                "type": "string",
                "description": "A space-separated list of pathnames of files to attach to the message. Attached files will have their content-type set to C(application/octet-stream)."
              },
              "host": {
                "type": "string",
                "description": "Default: localhost\n\nThe mail server"
              },
              "subtype": {
                "type": "string",
                "description": "Default: plain\n\nThe minor mime type, can be either text or html. The major type is always text."
              },
              "msg": {
                "type": "string",
                "description": "The subject of the email being sent."
              },
              "password": {
                "type": "string",
                "description": "If SMTP requires password"
              },
              "port": {
                "type": "string",
                "description": "Default: 25\n\nThe mail server port"
              },
              "subject": {
                "type": "string",
                "description": "The subject of the email being sent."
              }
            }
          },
          "win_iis_webbinding": {
            "type": "object",
            "description": "Creates, Removes and configures a binding to an existing IIS Web site",
            "properties": {
              "protocol": {
                "type": "string",
                "description": "The protocol to be used for the Web binding (usually HTTP, HTTPS, or FTP)."
              },
              "name": {
                "type": "string",
                "description": "Names of web site"
              },
              "certificate_hash": {
                "type": "string",
                "description": "Certificate hash for the SSL binding. The certificate hash is the unique identifier for the certificate."
              },
              "ip": {
                "type": "string",
                "description": "The IP address to bind to / use for the new site."
              },
              "host_header": {
                "type": "string",
                "description": "The host header to bind to / use for the new site."
              },
              "state": {
                "type": "string",
                "description": "State of the binding"
              },
              "port": {
                "type": "string",
                "description": "The port to bind to / use for the new site."
              },
              "certificate_store_name": {
                "type": "string",
                "description": "Default: My\n\nName of the certificate store where the certificate for the binding is located."
              }
            }
          },
          "rhn_channel": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds or removes Red Hat software channels",
            "properties": {
              "sysname": {
                "type": "string",
                "description": "name of the system as it is known in RHN/Satellite"
              },
              "name": {
                "type": "string",
                "description": "name of the software channel"
              },
              "url": {
                "type": "string",
                "description": "The full url to the RHN/Satellite api"
              },
              "pwd": {
                "type": "string",
                "description": "the user's password"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nwhether the channel should be present or not"
              },
              "user": {
                "type": "string",
                "description": "RHN/Satellite user"
              },
              "password": {
                "type": "string",
                "description": "the user's password"
              }
            }
          },
          "apt_repository": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "update_cache",
                        "update-cache"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add or remove an APT repositories in Ubuntu and Debian.",
            "properties": {
              "install_python_apt": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "repo": {
                "type": "string",
                "description": "Default: none\n\nA source string for the repository."
              },
              "state": {
                "enum": [
                  "absent",
                  "present"
                ],
                "type": "string",
                "description": "Default: present\n\nA source string state."
              },
              "update_cache": {
                "description": "Default: yes\n\nRun the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes.",
                "$ref": "#/definitions/ansible_truth"
              },
              "mode": {
                "type": "string",
                "description": "Default: 420\n\nThe octal mode for newly created files in sources.list.d"
              },
              "update-cache": {
                "description": "Default: yes\n\nRun the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes.",
                "$ref": "#/definitions/ansible_truth"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "pushover": {
            "required": [
              "msg",
              "user_key",
              "app_token"
            ],
            "type": "object",
            "description": "Send notifications via pushover, to subscriber list of devices, and email addresses. Requires pushover app on devices.",
            "properties": {
              "msg": {
                "type": "string",
                "description": "What message you wish to send."
              },
              "user_key": {
                "type": "string",
                "description": "Pushover issued authentication key for your user."
              },
              "app_token": {
                "type": "string",
                "description": "Pushover issued token identifying your pushover app."
              },
              "pri": {
                "type": "string",
                "description": "Message priority (see u(https://pushover.net) for details.)"
              }
            }
          },
          "sts_assume_role": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Assume a role using AWS Security Token Service and obtain temporary credentials",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "role_arn": {
                "type": "string",
                "description": "The Amazon Resource Name (ARN) of the role that the caller is assuming (http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html#Identifiers_ARNs)"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "duration_seconds": {
                "description": "The duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set to 3600 seconds.",
                "$ref": "#/definitions/ansible_number"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "role_session_name": {
                "type": "string",
                "description": "Name of the role's session - will be used by CloudTrail"
              },
              "mfa_token": {
                "type": "string",
                "description": "The value provided by the MFA device, if the trust policy of the role being assumed requires MFA."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "policy": {
                "type": "string",
                "description": "Supplemental policy to use in addition to assumed role's policies."
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "external_id": {
                "type": "string",
                "description": "A unique identifier that is used by third parties to assume a role in their customers' accounts."
              },
              "mfa_serial_number": {
                "type": "string",
                "description": "he identification number of the MFA device that is associated with the user who is making the AssumeRole call."
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "rax_cdb_user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "create / delete a database in the Cloud Databases.",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "host": {
                "type": "string",
                "description": "Default: %\n\nSpecifies the host from which a user is allowed to connect to the database. Possible values are a string containing an IPv4 address or \"%\" to allow connecting from any host"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "db_password": {
                "type": "string",
                "description": "Database user password"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "cdb_id": {
                "type": "string",
                "description": "The databases server UUID"
              },
              "db_username": {
                "type": "string",
                "description": "Name of the database user"
              },
              "databases": {
                "description": "Name of the databases that the user can access",
                "$ref": "#/definitions/ansible_array"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "proxmox": {
            "required": [
              "vmid",
              "api_host",
              "api_user"
            ],
            "type": "object",
            "description": "allows you to create/delete/stop instances in Proxmox VE cluster",
            "properties": {
              "force": {
                "description": "forcing operations\ncan be used only with states C(present), C(stopped), C(restarted)\nwith C(state=present) force option allow to overwrite existing container\nwith states C(stopped) , C(restarted) allow to force stop instance",
                "$ref": "#/definitions/ansible_truth"
              },
              "cpus": {
                "description": "Default: 1\n\nnumbers of allocated cpus for instance",
                "$ref": "#/definitions/ansible_number"
              },
              "ostemplate": {
                "type": "string",
                "description": "the template for VM creating\nrequired only for C(state=present)"
              },
              "disk": {
                "description": "Default: 3\n\nhard disk size in GB for instance",
                "$ref": "#/definitions/ansible_number"
              },
              "searchdomain": {
                "type": "string",
                "description": "sets DNS search domain for a container"
              },
              "api_user": {
                "type": "string",
                "description": "the user to authenticate with"
              },
              "hostname": {
                "type": "string",
                "description": "the instance hostname\nrequired only for C(state=present)"
              },
              "storage": {
                "type": "string",
                "description": "Default: local\n\ntarget storage"
              },
              "state": {
                "enum": [
                  "present",
                  "started",
                  "absent",
                  "stopped",
                  "restarted"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the instance"
              },
              "swap": {
                "description": "swap memory size in MB for instance",
                "$ref": "#/definitions/ansible_number"
              },
              "memory": {
                "description": "Default: 512\n\nmemory size in MB for instance",
                "$ref": "#/definitions/ansible_number"
              },
              "node": {
                "type": "string",
                "description": "Proxmox VE node, when new VM will be created\nrequired only for C(state=present)\nfor another states will be autodiscovered"
              },
              "cpuunits": {
                "description": "Default: 1000\n\nCPU weight for a VM",
                "$ref": "#/definitions/ansible_number"
              },
              "api_password": {
                "type": "string",
                "description": "the password to authenticate with\nyou can use PROXMOX_PASSWORD environment variable"
              },
              "password": {
                "type": "string",
                "description": "the instance root password\nrequired only for C(state=present)"
              },
              "ip_address": {
                "type": "string",
                "description": "specifies the address the container will be assigned"
              },
              "api_host": {
                "type": "string",
                "description": "the host of the Proxmox VE cluster"
              },
              "netif": {
                "type": "string",
                "description": "specifies network interfaces for the container"
              },
              "vmid": {
                "type": "string",
                "description": "the instance id"
              },
              "timeout": {
                "description": "Default: 30\n\ntimeout for operations",
                "$ref": "#/definitions/ansible_number"
              },
              "nameserver": {
                "type": "string",
                "description": "sets DNS server IP address for a container"
              },
              "validate_certs": {
                "description": "enable / disable https certificate verification",
                "$ref": "#/definitions/ansible_truth"
              },
              "onboot": {
                "description": "specifies whether a VM will be started during system bootup",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "openbsd_pkg": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manage packages on OpenBSD using the pkg tools.",
            "properties": {
              "state": {
                "enum": [
                  "absent",
                  "installed",
                  "latest",
                  "present",
                  "removed"
                ],
                "type": "string",
                "description": "C(present) will make sure the package is installed. C(latest) will make sure the latest version of the package is installed. C(absent) will make sure the specified package is not installed."
              },
              "name": {
                "type": "string",
                "description": "Name of the package."
              }
            }
          },
          "hall": {
            "required": [
              "msg",
              "title",
              "room_token"
            ],
            "type": "object",
            "description": "The M(hall) module connects to the U(https://hall.com) messaging API and allows you to deliver notication messages to rooms.",
            "properties": {
              "msg": {
                "type": "string",
                "description": "The message you wish to deliver as a notifcation"
              },
              "picture": {
                "type": "string",
                "description": "The full URL to the image you wish to use for the Icon of the message. Defaults to U(http://cdn2.hubspot.net/hub/330046/file-769078210-png/Official_Logos/ansible_logo_black_square_small.png?t=1421076128627)"
              },
              "room_token": {
                "type": "string",
                "description": "Room token provided to you by setting up the Ansible room integation on U(https://hall.com)"
              },
              "title": {
                "type": "string",
                "description": "The title of the message"
              }
            }
          },
          "vmware_migrate_vmk": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Migrate a VMK interface from VSS to VDS",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "current_switch_name": {
                "type": "string",
                "description": "Switch VMK interface is currently on"
              },
              "migrate_portgroup_name": {
                "type": "string",
                "description": "Portgroup name to migrate VMK interface to"
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter API server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "esxi_hostname": {
                "type": "string",
                "description": "ESXi hostname to be managed"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "device": {
                "type": "string",
                "description": "VMK interface name"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "current_portgroup_name": {
                "type": "string",
                "description": "Portgroup name VMK interface is currently on"
              },
              "migrate_switch_name": {
                "type": "string",
                "description": "Switch name to migrate VMK interface to"
              }
            }
          },
          "win_scheduled_task": {
            "type": "object",
            "description": "Manage scheduled tasks",
            "properties": {
              "execute": {
                "type": "string",
                "description": "Command the scheduled task should execute"
              },
              "name": {
                "type": "string",
                "description": "Name of the scheduled task"
              },
              "days_of_week": {
                "type": "string",
                "description": "Days of the week to run a weekly task, not idempotent"
              },
              "enabled": {
                "type": "string",
                "description": "Default: True\n\nEnable/disable the task"
              },
              "argument": {
                "type": "string",
                "description": "Arguments to provide scheduled task action"
              },
              "state": {
                "type": "string",
                "description": "State that the task should become"
              },
              "frequency": {
                "type": "string",
                "description": "The frequency of the command, not idempotent"
              },
              "user": {
                "type": "string",
                "description": "User to run scheduled task as"
              },
              "time": {
                "type": "string",
                "description": "Time to execute scheduled task, not idempotent"
              },
              "path": {
                "type": "string",
                "description": "Folder path of scheduled task"
              },
              "description": {
                "type": "string",
                "description": "The description for the scheduled task"
              }
            }
          },
          "rax_mon_alarm": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or delete a Rackspace Cloud Monitoring alarm that associates an existing rax_mon_entity, rax_mon_check, and rax_mon_notification_plan with criteria that specify what conditions will trigger which levels of notifications. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> *rax_mon_alarm*",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "entity_id": {
                "type": "string",
                "description": "ID of the entity this alarm is attached to. May be acquired by registering the value of a rax_mon_entity task."
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "notification_plan_id": {
                "type": "string",
                "description": "ID of the notification plan to trigger if this alarm fires. May be acquired by registering the value of a rax_mon_notification_plan task."
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "label": {
                "type": "string",
                "description": "Friendly name for this alarm, used to achieve idempotence. Must be a String between 1 and 255 characters long."
              },
              "disabled": {
                "description": "If yes, create this alarm, but leave it in an inactive state. Defaults to no.",
                "$ref": "#/definitions/ansible_truth"
              },
              "check_id": {
                "type": "string",
                "description": "ID of the check that should be alerted on. May be acquired by registering the value of a rax_mon_check task."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nEnsure that the alarm with this C(label) exists or does not exist."
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "criteria": {
                "type": "string",
                "description": "Alarm DSL that describes alerting conditions and their output states. Must be between 1 and 16384 characters long. See http://docs.rackspace.com/cm/api/v1.0/cm-devguide/content/alerts-language.html for a reference on the alerting language."
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "object",
                "description": "Arbitrary key/value pairs to accompany the alarm. Must be a hash of String keys and values between 1 and 255 characters long."
              }
            }
          },
          "name": {
            "type": "string"
          },
          "clc_server": {
            "type": "object",
            "description": "An Ansible module to Create, Delete, Start and Stop servers in CenturyLink Cloud.",
            "properties": {
              "anti_affinity_policy_name": {
                "type": "string",
                "description": "Default: None\n\nThe anti-affinity policy to assign to the server. This is mutually exclusive with 'anti_affinity_policy_id'."
              },
              "storage_type": {
                "enum": [
                  "standard",
                  "hyperscale"
                ],
                "type": "string",
                "description": "Default: standard\n\nThe type of storage to attach to the server."
              },
              "anti_affinity_policy_id": {
                "type": "string",
                "description": "Default: None\n\nThe anti-affinity policy to assign to the server. This is mutually exclusive with 'anti_affinity_policy_name'."
              },
              "ttl": {
                "type": "string",
                "description": "Default: None\n\nThe time to live for the server in seconds.  The server will be deleted when this time expires."
              },
              "count_group": {
                "type": "string",
                "description": "Default: None\n\nRequired when exact_count is specified.  The Server Group use to determine how many severs to deploy."
              },
              "secondary_dns": {
                "type": "string",
                "description": "Default: None\n\nSecondary DNS used by the server."
              },
              "custom_fields": {
                "description": "The list of custom fields to set on the server.",
                "$ref": "#/definitions/ansible_array"
              },
              "password": {
                "type": "string",
                "description": "Default: None\n\nPassword for the administrator / root user"
              },
              "packages": {
                "description": "The list of blue print packages to run on the server after its created.",
                "$ref": "#/definitions/ansible_array"
              },
              "group": {
                "type": "string",
                "description": "Default: Default Group\n\nThe Server Group to create servers under."
              },
              "exact_count": {
                "description": "Default: None\n\nRun in idempotent mode.  Will insure that this exact number of servers are running in the provided group, creating and deleting them to reach that count.  Requires count_group to be set.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "started",
                  "stopped"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state to insure that the provided resources are in."
              },
              "cpu_autoscale_policy_id": {
                "type": "string",
                "description": "Default: None\n\nThe autoscale policy to assign to the server."
              },
              "template": {
                "type": "string",
                "description": "Default: None\n\nThe template to use for server creation.  Will search for a template if a partial string is provided. This is required when state is 'present'"
              },
              "memory": {
                "type": "string",
                "description": "Default: 1\n\nMemory in GB."
              },
              "server_ids": {
                "description": "Required for started, stopped, and absent states. A list of server Ids to insure are started, stopped, or absent.",
                "$ref": "#/definitions/ansible_array"
              },
              "type": {
                "enum": [
                  "standard",
                  "hyperscale",
                  "bareMetal"
                ],
                "type": "string",
                "description": "Default: standard\n\nThe type of server to create."
              },
              "managed_os": {
                "description": "Whether to create the server as 'Managed' or not.",
                "$ref": "#/definitions/ansible_truth"
              },
              "location": {
                "type": "string",
                "description": "Default: None\n\nThe Datacenter to create servers in."
              },
              "additional_disks": {
                "description": "The list of additional disks for the server",
                "$ref": "#/definitions/ansible_array"
              },
              "description": {
                "type": "string",
                "description": "Default: None\n\nThe description to set for the server."
              },
              "add_public_ip": {
                "description": "Whether to add a public ip to the server",
                "$ref": "#/definitions/ansible_truth"
              },
              "configuration_id": {
                "type": "string",
                "description": "Default: None\n\nOnly required for bare metal servers. Specifies the identifier for the specific configuration type of bare metal server to deploy."
              },
              "alert_policy_name": {
                "type": "string",
                "description": "Default: None\n\nThe alert policy to assign to the server. This is mutually exclusive with 'alert_policy_id'."
              },
              "alert_policy_id": {
                "type": "string",
                "description": "Default: None\n\nThe alert policy to assign to the server. This is mutually exclusive with 'alert_policy_name'."
              },
              "public_ip_ports": {
                "description": "A list of ports to allow on the firewall to the servers public ip, if add_public_ip is set to True.",
                "$ref": "#/definitions/ansible_array"
              },
              "ip_address": {
                "type": "string",
                "description": "Default: None\n\nThe IP Address for the server. One is assigned if not provided."
              },
              "public_ip_protocol": {
                "enum": [
                  "TCP",
                  "UDP",
                  "ICMP"
                ],
                "type": "string",
                "description": "Default: TCP\n\nThe protocol to use for the public ip if add_public_ip is set to True."
              },
              "wait": {
                "description": "Default: True\n\nWhether to wait for the provisioning tasks to finish before returning.",
                "$ref": "#/definitions/ansible_truth"
              },
              "count": {
                "description": "Default: 1\n\nThe number of servers to build (mutually exclusive with exact_count)",
                "$ref": "#/definitions/ansible_number"
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nA 1 to 6 character identifier to use for the server. This is required when state is 'present'"
              },
              "network_id": {
                "type": "string",
                "description": "Default: None\n\nThe network UUID on which to create servers."
              },
              "primary_dns": {
                "type": "string",
                "description": "Default: None\n\nPrimary DNS used by the server."
              },
              "alias": {
                "type": "string",
                "description": "Default: None\n\nThe account alias to provision the servers under."
              },
              "source_server_password": {
                "type": "string",
                "description": "Default: None\n\nThe password for the source server if a clone is specified."
              },
              "os_type": {
                "enum": [
                  "redHat6_64Bit",
                  "centOS6_64Bit",
                  "windows2012R2Standard_64Bit",
                  "ubuntu14_64Bit"
                ],
                "type": "string",
                "description": "Default: None\n\nOnly required for bare metal servers. Specifies the OS to provision with the bare metal server."
              },
              "cpu": {
                "type": "string",
                "description": "Default: 1\n\nHow many CPUs to provision on the server"
              }
            }
          },
          "win_chocolatey": {
            "type": "object",
            "description": "Installs packages using Chocolatey (http://chocolatey.org/). If Chocolatey is missing from the system, the module will install it. List of packages can be found at http://chocolatey.org/packages",
            "properties": {
              "upgrade": {
                "type": "string",
                "description": "If package is already installed it, try to upgrade to the latest version or to the specified version"
              },
              "force": {
                "type": "string",
                "description": "Forces install of the package (even if it already exists). Using Force will cause ansible to always report that a change was made"
              },
              "name": {
                "type": "string",
                "description": "Name of the package to be installed"
              },
              "source": {
                "type": "string",
                "description": "Specify source rather than using default chocolatey repository"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nState of the package on the system"
              },
              "version": {
                "type": "string",
                "description": "Specific version of the package to be installed\nIgnored when state == 'absent'"
              }
            }
          },
          "synchronize": {
            "required": [
              "src",
              "dest"
            ],
            "type": "object",
            "description": "C(synchronize) is a wrapper around the rsync command, meant to make common tasks with rsync easier. It is run and originates on the local host where Ansible is being run. Of course, you could just use the command action to call rsync yourself, but you also have to add a fair number of boilerplate options and host facts. You `still` may need to call rsync directly via C(command) or C(shell) depending on your use case. C(synchronize) does not provide access to the full power of rsync, but does make most invocations easier to follow.",
            "properties": {
              "partial": {
                "description": "Tells rsync to keep the partial file which should make a subsequent transfer of the rest of the file much faster.",
                "$ref": "#/definitions/ansible_truth"
              },
              "links": {
                "description": "Default: the value of the archive option\n\nCopy symlinks as symlinks.",
                "$ref": "#/definitions/ansible_truth"
              },
              "copy_links": {
                "description": "Default: no\n\nCopy symlinks as the item that they point to (the referent) is copied, rather than the symlink.",
                "$ref": "#/definitions/ansible_truth"
              },
              "perms": {
                "description": "Default: the value of the archive option\n\nPreserve permissions.",
                "$ref": "#/definitions/ansible_truth"
              },
              "owner": {
                "description": "Default: the value of the archive option\n\nPreserve owner (super user only)",
                "$ref": "#/definitions/ansible_truth"
              },
              "archive": {
                "description": "Default: yes\n\nMirrors the rsync archive flag, enables recursive, links, perms, times, owner, group flags and -D.",
                "$ref": "#/definitions/ansible_truth"
              },
              "dest_port": {
                "type": "string",
                "description": "Default: Value of ansible_ssh_port for this host, remote_port config setting, or 22 if none of those are set\n\nPort number for ssh on the destination host. Prior to ansible 2.0, the ansible_ssh_port inventory var took precedence over this value."
              },
              "_local_rsync_path": {
                "type": "string",
                "description": ""
              },
              "group": {
                "description": "Default: the value of the archive option\n\nPreserve group",
                "$ref": "#/definitions/ansible_truth"
              },
              "existing_only": {
                "description": "Default: no\n\nSkip creating new files on receiver.",
                "$ref": "#/definitions/ansible_truth"
              },
              "rsync_path": {
                "type": "string",
                "description": "Specify the rsync command to run on the remote host. See C(--rsync-path) on the rsync man page."
              },
              "dest": {
                "type": "string",
                "description": "Path on the destination host that will be synchronized from the source; The path can be absolute or relative."
              },
              "verify_host": {
                "description": "Verify destination host key.",
                "$ref": "#/definitions/ansible_truth"
              },
              "dirs": {
                "description": "Default: no\n\nTransfer directories without recursing",
                "$ref": "#/definitions/ansible_truth"
              },
              "private_key": {
                "type": "string",
                "description": ""
              },
              "_substitute_controller": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "compress": {
                "description": "Default: yes\n\nCompress file data during the transfer. In most cases, leave this enabled unless it causes problems.",
                "$ref": "#/definitions/ansible_truth"
              },
              "rsync_timeout": {
                "description": "Specify a --timeout for the rsync command in seconds.",
                "$ref": "#/definitions/ansible_number"
              },
              "rsync_opts": {
                "description": "Specify additional rsync options by passing in an array.",
                "$ref": "#/definitions/ansible_array"
              },
              "set_remote_user": {
                "description": "Default: True\n\nput user@ for the remote paths. If you have a custom ssh config to define the remote user for a host that does not match the inventory user, you should set this parameter to \"no\".",
                "$ref": "#/definitions/ansible_truth"
              },
              "recursive": {
                "description": "Default: the value of the archive option\n\nRecurse into directories.",
                "$ref": "#/definitions/ansible_truth"
              },
              "src": {
                "type": "string",
                "description": "Path on the source host that will be synchronized to the destination; The path can be absolute or relative."
              },
              "checksum": {
                "description": "Default: no\n\nSkip based on checksum, rather than mod-time & size; Note that that \"archive\" option is still enabled by default - the \"checksum\" option will not disable it.",
                "$ref": "#/definitions/ansible_truth"
              },
              "times": {
                "description": "Default: the value of the archive option\n\nPreserve modification times",
                "$ref": "#/definitions/ansible_truth"
              },
              "mode": {
                "enum": [
                  "push",
                  "pull"
                ],
                "type": "string",
                "description": "Default: push\n\nSpecify the direction of the synchronization. In push mode the localhost or delegate is the source; In pull mode the remote host in context is the source."
              },
              "ssh_args": {
                "type": "string",
                "description": ""
              },
              "delete": {
                "description": "Default: no\n\nDelete files that don't exist (after transfer, not before) in the C(src) path. This option requires C(recursive=yes).",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "opkg": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "update_cache",
                        "update-cache"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages OpenWrt packages",
            "properties": {
              "force": {
                "enum": [
                  "",
                  "depends",
                  "maintainer",
                  "reinstall",
                  "overwrite",
                  "downgrade",
                  "space",
                  "postinstall",
                  "remove",
                  "checksum",
                  "removal-of-dependent-packages"
                ],
                "type": "string",
                "description": "Default: absent\n\nopkg --force parameter used"
              },
              "name": {
                "type": "string",
                "description": "name of package to install/remove"
              },
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "absent",
                  "removed"
                ],
                "type": "string",
                "description": "Default: present\n\nstate of the package"
              },
              "update_cache": {
                "description": "Default: no\n\nupdate the package db first",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkg": {
                "type": "string",
                "description": "name of package to install/remove"
              },
              "update-cache": {
                "description": "Default: no\n\nupdate the package db first",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "debug": {
            "type": "object",
            "description": "This module prints statements during execution and can be useful for debugging variables or expressions without necessarily halting the playbook. Useful for debugging together with the 'when:' directive.",
            "properties": {
              "msg": {
                "type": "string",
                "description": "Default: Hello world!\n\nThe customized message that is printed. If omitted, prints a generic message."
              },
              "var": {
                "type": "string",
                "description": "A variable name to debug.  Mutually exclusive with the 'msg' option."
              }
            }
          },
          "ec2_vpc_route_table": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "tags",
                        "resource_tags"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage route tables for AWS virtual private clouds",
            "properties": {
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "route_table_id": {
                "type": "string",
                "description": "The ID of the route table to update or delete."
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or destroy the VPC route table"
              },
              "lookup": {
                "enum": [
                  "tag",
                  "id"
                ],
                "type": "string",
                "description": "Default: tag\n\nLook up route table by either tags or by route table ID. Non-unique tag lookup will fail. If no tags are specifed then no lookup for an existing route table is performed and a new route table will be created. To change tags of a route table, you must look up by id."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "subnets": {
                "description": "An array of subnets to add to this route table. Subnets may be specified by either subnet ID, Name tag, or by a CIDR such as '10.0.0.0/24'.",
                "$ref": "#/definitions/ansible_array"
              },
              "tags": {
                "type": "object",
                "description": "A dictionary of resource tags of the form: { tag1: value1, tag2: value2 }. Tags are used to uniquely identify route tables within a VPC when the route_table_id is not supplied."
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "resource_tags": {
                "type": "object",
                "description": "A dictionary of resource tags of the form: { tag1: value1, tag2: value2 }. Tags are used to uniquely identify route tables within a VPC when the route_table_id is not supplied."
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "propagating_vgw_ids": {
                "description": "Enable route propagation from virtual gateways specified by ID.",
                "$ref": "#/definitions/ansible_array"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "routes": {
                "description": "List of routes in the route table. Routes are specified as dicts containing the keys 'dest' and one of 'gateway_id', 'instance_id', 'interface_id', or 'vpc_peering_connection_id'. If 'gateway_id' is specified, you can refer to the VPC's IGW by using the value 'igw'.",
                "$ref": "#/definitions/ansible_array"
              },
              "vpc_id": {
                "type": "string",
                "description": "VPC ID of the VPC in which to create the route table."
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "homebrew_cask": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "cask"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages Homebrew casks.",
            "properties": {
              "path": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "absent",
                  "removed",
                  "uninstalled"
                ],
                "type": "string",
                "description": "Default: present\n\nstate of the cask"
              },
              "name": {
                "type": "string",
                "description": "name of cask to install/remove"
              },
              "cask": {
                "type": "string",
                "description": "name of cask to install/remove"
              }
            }
          },
          "vertica_role": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "assigned_roles",
                        "assigned_role"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "role",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "role"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds or removes Vertica database role and, optionally, assign other roles.",
            "properties": {
              "assigned_roles": {
                "type": "string",
                "description": "Comma separated list of roles to assign to the role."
              },
              "name": {
                "type": "string",
                "description": "Name of the role to add or remove."
              },
              "login_user": {
                "type": "string",
                "description": "Default: dbadmin\n\nThe username used to authenticate with."
              },
              "db": {
                "type": "string",
                "description": "Name of the Vertica database."
              },
              "cluster": {
                "type": "string",
                "description": "Default: localhost\n\nName of the Vertica cluster."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to create C(present), drop C(absent) or lock C(locked) a role."
              },
              "role": {
                "type": "string",
                "description": "Name of the role to add or remove."
              },
              "login_password": {
                "type": "string",
                "description": "The password used to authenticate with."
              },
              "port": {
                "type": "string",
                "description": "Default: 5433\n\nVertica cluster port to connect to."
              },
              "assigned_role": {
                "type": "string",
                "description": "Comma separated list of roles to assign to the role."
              }
            }
          },
          "cs_instancegroup": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create and remove instance groups.",
            "properties": {
              "account": {
                "type": "string",
                "description": "Account the instance group is related to."
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Project the instance group is related to."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the instance group."
              },
              "domain": {
                "type": "string",
                "description": "Domain the instance group is related to."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the instance group."
              }
            }
          },
          "cs_vmsnapshot": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "display_name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "display_name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create, remove and revert VM from snapshots.",
            "properties": {
              "snapshot_memory": {
                "description": "Snapshot memory if set to true.",
                "$ref": "#/definitions/ansible_truth"
              },
              "domain": {
                "type": "string",
                "description": "Domain the VM snapshot is related to."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "display_name": {
                "type": "string",
                "description": "Unique Name of the snapshot. In CloudStack terms display name."
              },
              "description": {
                "type": "string",
                "description": "Description of the snapshot."
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "vm": {
                "type": "string",
                "description": "Name of the virtual machine."
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the VM is assigned to."
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "revert"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the snapshot."
              },
              "account": {
                "type": "string",
                "description": "Account the VM snapshot is related to."
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone in which the VM is in. If not set, default zone is used."
              },
              "name": {
                "type": "string",
                "description": "Unique Name of the snapshot. In CloudStack terms display name."
              }
            }
          },
          "expect": {
            "required": [
              "command",
              "responses"
            ],
            "type": "object",
            "description": "The M(expect) module executes a command and responds to prompts\nThe given command will be executed on all selected nodes. It will not be processed through the shell, so variables like C($HOME) and operations like C(\"<\"), C(\">\"), C(\"|\"), and C(\"&\") will not work",
            "properties": {
              "chdir": {
                "type": "string",
                "description": "cd into this directory before running the command"
              },
              "responses": {
                "type": "object",
                "description": "Mapping of expected string and string to respond with"
              },
              "removes": {
                "type": "string",
                "description": "a filename, when it does not exist, this step will B(not) be run."
              },
              "echo": {
                "description": "Whether or not to echo out your response strings",
                "$ref": "#/definitions/ansible_truth"
              },
              "creates": {
                "type": "string",
                "description": "a filename, when it already exists, this step will B(not) be run."
              },
              "command": {
                "type": "string",
                "description": "the command module takes command to run."
              },
              "timeout": {
                "description": "Default: 30\n\nAmount of time in seconds to wait for the expected strings",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "vca_fw": {
            "type": "object",
            "description": "Adds or removes firewall rules from a gateway in a vca environment",
            "properties": {
              "username": {
                "type": "string",
                "description": "Default: None\n\nThe vca username or email address, if not set the environment variable VCA_USER is checked for the username."
              },
              "gateway_name": {
                "type": "string",
                "description": "Default: gateway\n\nThe name of the gateway of the vdc where the rule should be added"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nif the object should be added or removed"
              },
              "instance_id": {
                "type": "string",
                "description": "Default: None\n\nThe instance id in a vchs environment to be used for creating the vapp"
              },
              "host": {
                "type": "string",
                "description": "Default: None\n\nThe authentication host to be used when service type  is vcd."
              },
              "fw_rules": {
                "type": "string",
                "description": "A list of firewall rules to be added to the gateway, Please see examples on valid entries"
              },
              "service_type": {
                "type": "string",
                "description": "Default: vca\n\nThe type of service we are authenticating against"
              },
              "org": {
                "type": "string",
                "description": "Default: None\n\nThe org to login to for creating vapp, mostly set when the service_type is vdc."
              },
              "password": {
                "type": "string",
                "description": "Default: None\n\nThe vca password, if not set the environment variable VCA_PASS is checked for the password"
              },
              "vdc_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the vdc where the gateway is located."
              },
              "api_version": {
                "type": "string",
                "description": "Default: 5.7\n\nThe api version to be used with the vca"
              },
              "verify_certs": {
                "type": "string",
                "description": "Default: True\n\nIf the certificates of the authentication is to be verified"
              }
            }
          },
          "os_subnet": {
            "type": "object",
            "description": "Add or Remove a subnet to an OpenStack network",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the subnet that should be created. Although Neutron allows for non-unique subnet names, this module enforces subnet name uniqueness."
              },
              "enable_dhcp": {
                "type": "string",
                "description": "Default: True\n\nWhether DHCP should be enabled for this subnet."
              },
              "dns_nameservers": {
                "type": "string",
                "description": "Default: None\n\nList of DNS nameservers for this subnet."
              },
              "ipv6_ra_mode": {
                "type": "string",
                "description": "Default: None\n\nIPv6 router advertisement mode"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "allocation_pool_start": {
                "type": "string",
                "description": "Default: None\n\nFrom the subnet pool the starting address from which the IP should be allocated."
              },
              "host_routes": {
                "type": "string",
                "description": "Default: None\n\nA list of host route dictionaries for the subnet."
              },
              "ipv6_address_mode": {
                "type": "string",
                "description": "Default: None\n\nIPv6 address mode"
              },
              "ip_version": {
                "type": "string",
                "description": "Default: 4\n\nThe IP version of the subnet 4 or 6"
              },
              "gateway_ip": {
                "type": "string",
                "description": "Default: None\n\nThe ip that would be assigned to the gateway for this subnet"
              },
              "cidr": {
                "type": "string",
                "description": "Default: None\n\nThe CIDR representation of the subnet that should be assigned to the subnet."
              },
              "network_name": {
                "type": "string",
                "description": "Name of the network to which the subnet should be attached"
              },
              "allocation_pool_end": {
                "type": "string",
                "description": "Default: None\n\nFrom the subnet pool the last IP that should be assigned to the virtual machines."
              }
            }
          },
          "cs_loadbalancer_rule_member": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ip_address",
                        "public_ip"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "vms",
                        "vm"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "vms"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "vm"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add and remove load balancer rule members.",
            "properties": {
              "public_ip": {
                "type": "string",
                "description": "Public IP address from where the network traffic will be load balanced from.\nOnly needed to find the rule if C(name) is not unique."
              },
              "account": {
                "type": "string",
                "description": "Account the rule is related to."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "poll_async": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "vm": {
                "description": "List of VMs to assign to or remove from the rule.",
                "$ref": "#/definitions/ansible_array"
              },
              "project": {
                "type": "string",
                "description": "Name of the project the firewall rule is related to."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nShould the VMs be present or absent from the rule."
              },
              "domain": {
                "type": "string",
                "description": "Domain the rule is related to."
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone in which the rule should be located.\nIf not set, default zone is used."
              },
              "ip_address": {
                "type": "string",
                "description": "Public IP address from where the network traffic will be load balanced from.\nOnly needed to find the rule if C(name) is not unique."
              },
              "vms": {
                "description": "List of VMs to assign to or remove from the rule.",
                "$ref": "#/definitions/ansible_array"
              },
              "name": {
                "type": "string",
                "description": "The name of the load balancer rule."
              }
            }
          },
          "rax_queue": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates / deletes a Rackspace Public Cloud queue.",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name to give the queue"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "nmcli": {
            "required": [
              "conn_name",
              "state"
            ],
            "type": "object",
            "description": "Manage the network devices. Create, modify, and manage, ethernet, teams, bonds, vlans etc.",
            "properties": {
              "conn_name": {
                "type": "string",
                "description": "Where conn_name will be the name used to call the connection. when not provided a default name is generated: <type>[-<ifname>][-<num>]"
              },
              "ingress": {
                "type": "string",
                "description": "Default: None\n\nThis is only used with VLAN - VLAN ingress priority mapping"
              },
              "slavepriority": {
                "type": "string",
                "description": "Default: 32\n\nThis is only used with 'bridge-slave' - [<0-63>] - STP priority of this slave"
              },
              "vlandev": {
                "type": "string",
                "description": "Default: None\n\nThis is only used with VLAN - parent device this VLAN is on, can use ifname"
              },
              "forwarddelay": {
                "type": "string",
                "description": "Default: 15\n\nThis is only used with bridge - [forward-delay <2-30>] STP forwarding delay, in seconds"
              },
              "egress": {
                "type": "string",
                "description": "Default: None\n\nThis is only used with VLAN - VLAN egress priority mapping"
              },
              "vlanid": {
                "type": "string",
                "description": "Default: None\n\nThis is only used with VLAN - VLAN ID in range <0-4095>"
              },
              "dns4": {
                "type": "string",
                "description": "Default: None\n\nA list of upto 3 dns servers, ipv4 format e.g. To add two IPv4 DNS server addresses: [\"8.8.8.8 8.8.4.4\"]"
              },
              "hellotime": {
                "type": "string",
                "description": "Default: 2\n\nThis is only used with bridge - [hello-time <1-10>] STP hello time, in seconds"
              },
              "maxage": {
                "type": "string",
                "description": "Default: 20\n\nThis is only used with bridge - [max-age <6-42>] STP maximum message age, in seconds"
              },
              "ageingtime": {
                "type": "string",
                "description": "Default: 300\n\nThis is only used with bridge - [ageing-time <0-1000000>] the Ethernet MAC address aging time, in seconds"
              },
              "priority": {
                "type": "string",
                "description": "Default: 128\n\nThis is only used with 'bridge' - sets STP priority"
              },
              "gw4": {
                "type": "string",
                "description": "The IPv4 gateway for this interface using this format ie: \"192.168.100.1\""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Whether the device should exist or not, taking action if the state is different from what is stated."
              },
              "gw6": {
                "type": "string",
                "description": "Default: None\n\nThe IPv6 gateway for this interface using this format ie: \"2001:db8::1\""
              },
              "master": {
                "type": "string",
                "description": "Default: None\n\nmaster <master (ifname, or connection UUID or conn_name) of bridge, team, bond master connection profile."
              },
              "stp": {
                "enum": [
                  "yes",
                  "no"
                ],
                "type": "string",
                "description": "Default: None\n\nThis is only used with bridge and controls whether Spanning Tree Protocol (STP) is enabled for this bridge"
              },
              "ifname": {
                "type": "string",
                "description": "Default: conn_name\n\nWhere IFNAME will be the what we call the interface name.\ninterface to bind the connection to. The connection will only be applicable to this interface name.\nA special value of \"*\" can be used for interface-independent connections.\nThe ifname argument is mandatory for all connection types except bond, team, bridge and vlan."
              },
              "type": {
                "enum": [
                  "ethernet",
                  "team",
                  "team-slave",
                  "bond",
                  "bond-slave",
                  "bridge",
                  "vlan"
                ],
                "type": "string",
                "description": "This is the type of device or network connection that you wish to create."
              },
              "miimon": {
                "type": "string",
                "description": "Default: 100\n\nThis is only used with bond - miimon"
              },
              "arp_ip_target": {
                "type": "string",
                "description": "Default: None\n\nThis is only used with bond - ARP IP target"
              },
              "downdelay": {
                "type": "string",
                "description": "Default: None\n\nThis is only used with bond - downdelay"
              },
              "mac": {
                "type": "string",
                "description": "Default: None\n\nThis is only used with bridge - MAC address of the bridge (note: this requires a recent kernel feature, originally introduced in 3.15 upstream kernel)"
              },
              "ip6": {
                "type": "string",
                "description": "Default: None\n\nThe IPv6 address to this interface using this format ie: \"abbe::cafe\""
              },
              "ip4": {
                "type": "string",
                "description": "Default: None\n\nThe IPv4 address to this interface using this format ie: \"192.168.1.24/24\""
              },
              "autoconnect": {
                "enum": [
                  "yes",
                  "no"
                ],
                "type": "string",
                "description": "Default: yes\n\nWhether the connection should start on boot.\nWhether the connection profile can be automatically activated"
              },
              "dns6": {
                "type": "string",
                "description": "A list of upto 3 dns servers, ipv6 format e.g. To add two IPv6 DNS server addresses: [\"2001:4860:4860::8888 2001:4860:4860::8844\"]"
              },
              "mtu": {
                "type": "string",
                "description": "Default: 1500\n\nThe connection MTU, e.g. 9000. This can't be applied when creating the interface and is done once the interface has been created.\nCan be used when modifying Team, VLAN, Ethernet (Future plans to implement wifi, pppoe, infiniband)"
              },
              "arp_interval": {
                "type": "string",
                "description": "Default: None\n\nThis is only used with bond - ARP interval"
              },
              "flags": {
                "type": "string",
                "description": "Default: None\n\nThis is only used with VLAN - flags"
              },
              "mode": {
                "enum": [
                  "balance-rr",
                  "active-backup",
                  "balance-xor",
                  "broadcast",
                  "802.3ad",
                  "balance-tlb",
                  "balance-alb"
                ],
                "type": "string",
                "description": "Default: balence-rr\n\nThis is the type of device or network connection that you wish to create for a bond, team or bridge."
              },
              "updelay": {
                "type": "string",
                "description": "Default: None\n\nThis is only used with bond - updelay"
              }
            }
          },
          "ec2_vpc_igw": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage an AWS VPC Internet gateway",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "vpc_id": {
                "type": "string",
                "description": "The VPC ID for the VPC in which to manage the Internet Gateway."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or terminate the IGW"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "proxmox_template": {
            "required": [
              "api_host",
              "api_user"
            ],
            "type": "object",
            "description": "allows you to upload/delete templates in Proxmox VE cluster",
            "properties": {
              "node": {
                "type": "string",
                "description": "Proxmox VE node, when you will operate with template"
              },
              "src": {
                "type": "string",
                "description": "path to uploaded file\nrequired only for C(state=present)"
              },
              "force": {
                "description": "can be used only with C(state=present), exists template will be overwritten",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_host": {
                "type": "string",
                "description": "the host of the Proxmox VE cluster"
              },
              "api_user": {
                "type": "string",
                "description": "the user to authenticate with"
              },
              "api_password": {
                "type": "string",
                "description": "the password to authenticate with\nyou can use PROXMOX_PASSWORD environment variable"
              },
              "storage": {
                "type": "string",
                "description": "Default: local\n\ntarget storage"
              },
              "timeout": {
                "description": "Default: 30\n\ntimeout for operations",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the template"
              },
              "content_type": {
                "enum": [
                  "vztmpl",
                  "iso"
                ],
                "type": "string",
                "description": "Default: vztmpl\n\ncontent type\nrequired only for C(state=present)"
              },
              "validate_certs": {
                "description": "enable / disable https certificate verification",
                "$ref": "#/definitions/ansible_truth"
              },
              "template": {
                "type": "string",
                "description": "the template name\nrequired only for states C(absent), C(info)"
              }
            }
          },
          "uri": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "thirsty"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "url_password",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "url_username",
                        "user"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Interacts with HTTP and HTTPS web services and supports Digest, Basic and WSSE HTTP authentication mechanisms.",
            "properties": {
              "force": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "thirsty": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "follow_redirects": {
                "enum": [
                  "all",
                  "safe",
                  "none",
                  "yes",
                  "no"
                ],
                "type": "string",
                "description": "Default: safe\n\nWhether or not the URI module should follow redirects. C(all) will follow all redirects. C(safe) will follow only \"safe\" redirects, where \"safe\" means that the client is only doing a GET or HEAD on the URI to which it is being redirected. C(none) will not follow any redirects. Note that C(yes) and C(no) choices are accepted for backwards compatibility, where C(yes) is the equivalent of C(all) and C(no) is the equivalent of C(safe). C(yes) and C(no) are deprecated and will be removed in some future version of Ansible."
              },
              "body_format": {
                "enum": [
                  "raw",
                  "json"
                ],
                "type": "string",
                "description": "Default: raw\n\nThe serialization format of the body. When set to json, encodes the body argument, if needed, and automatically sets the Content-Type header accordingly."
              },
              "client_key": {
                "type": "string",
                "description": ""
              },
              "use_proxy": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "status_code": {
                "description": "Default: 200\n\nA valid, numeric, HTTP status code that signifies success of the request. Can also be comma separated list of status codes.",
                "$ref": "#/definitions/ansible_array"
              },
              "return_content": {
                "description": "Default: no\n\nWhether or not to return the body of the request as a \"content\" key in the dictionary result. If the reported Content-type is \"application/json\", then the JSON is additionally loaded into a key called C(json) in the dictionary results.",
                "$ref": "#/definitions/ansible_truth"
              },
              "method": {
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "HEAD",
                  "DELETE",
                  "OPTIONS",
                  "PATCH",
                  "TRACE",
                  "CONNECT",
                  "REFRESH"
                ],
                "type": "string",
                "description": "Default: GET\n\nThe HTTP method of the request or response. It MUST be uppercase."
              },
              "body": {
                "type": "string",
                "description": "The body of the http request/response to the web service. If C(body_format) is set to 'json' it will take an already formated JSON string or convert a data structure into JSON."
              },
              "timeout": {
                "description": "Default: 30\n\nThe socket level timeout in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "dest": {
                "type": "string",
                "description": "path of where to download the file to (if desired). If I(dest) is a directory, the basename of the file on the remote server will be used."
              },
              "force_basic_auth": {
                "description": "Default: no\n\nThe library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail. This option forces the sending of the Basic authentication header upon initial request.",
                "$ref": "#/definitions/ansible_truth"
              },
              "removes": {
                "type": "string",
                "description": "a filename, when it does not exist, this step will not be run."
              },
              "http_agent": {
                "type": "string",
                "description": ""
              },
              "user": {
                "type": "string",
                "description": "username for the module to use for Digest, Basic or WSSE authentication."
              },
              "password": {
                "type": "string",
                "description": "password for the module to use for Digest, Basic or WSSE authentication."
              },
              "url_password": {
                "type": "string",
                "description": "password for the module to use for Digest, Basic or WSSE authentication."
              },
              "url": {
                "type": "string",
                "description": "HTTP or HTTPS URL in the form (http|https)://host.domain[:port]/path"
              },
              "client_cert": {
                "type": "string",
                "description": ""
              },
              "creates": {
                "type": "string",
                "description": "a filename, when it already exists, this step will not be run."
              },
              "headers": {
                "type": "object",
                "description": "Add custom HTTP headers to a request in the format of a YAML hash"
              },
              "url_username": {
                "type": "string",
                "description": "username for the module to use for Digest, Basic or WSSE authentication."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated.  This should only set to C(no) used on personally controlled sites using self-signed certificates.  Prior to 1.9.2 the code defaulted to C(no).",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "os_image_facts": {
            "type": "object",
            "description": "Retrieve facts about a image image from OpenStack.",
            "properties": {
              "image": {
                "type": "string",
                "description": "Name or ID of the image"
              }
            }
          },
          "ec2_metric_alarm": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Can create or delete AWS metric alarms\nMetrics you wish to alarm on must already exist",
            "properties": {
              "metric": {
                "type": "string",
                "description": "Name of the monitored metric (e.g. CPUUtilization)\nMetric must already exist"
              },
              "statistic": {
                "enum": [
                  "SampleCount",
                  "Average",
                  "Sum",
                  "Minimum",
                  "Maximum"
                ],
                "type": "string",
                "description": "Operation applied to the metric\nWorks in conjunction with period and evaluation_periods to determine the comparison value"
              },
              "period": {
                "description": "The time (in seconds) between metric evaluations",
                "$ref": "#/definitions/ansible_number"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "threshold": {
                "type": "number",
                "description": "Sets the min/max bound for triggering the alarm"
              },
              "unit": {
                "enum": [
                  "Seconds",
                  "Microseconds",
                  "Milliseconds",
                  "Bytes",
                  "Kilobytes",
                  "Megabytes",
                  "Gigabytes",
                  "Terabytes",
                  "Bits",
                  "Kilobits",
                  "Megabits",
                  "Gigabits",
                  "Terabits",
                  "Percent",
                  "Count",
                  "Bytes/Second",
                  "Kilobytes/Second",
                  "Megabytes/Second",
                  "Gigabytes/Second",
                  "Terabytes/Second",
                  "Bits/Second",
                  "Kilobits/Second",
                  "Megabits/Second",
                  "Gigabits/Second",
                  "Terabits/Second",
                  "Count/Second",
                  "None"
                ],
                "type": "string",
                "description": "The threshold's unit of measurement"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "dimensions": {
                "type": "object",
                "description": "Describes to what the alarm is applied"
              },
              "namespace": {
                "type": "string",
                "description": "Name of the appropriate namespace ('AWS/EC2', 'System/Linux', etc.), which determines the category it will appear under in cloudwatch"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "register or deregister the alarm"
              },
              "insufficient_data_actions": {
                "description": "A list of the names of action(s) to take when the alarm is in the 'insufficient_data' status",
                "$ref": "#/definitions/ansible_array"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "ok_actions": {
                "description": "A list of the names of action(s) to take when the alarm is in the 'ok' status",
                "$ref": "#/definitions/ansible_array"
              },
              "description": {
                "type": "string",
                "description": "A longer description of the alarm"
              },
              "evaluation_periods": {
                "description": "The number of times in which the metric is evaluated before final calculation",
                "$ref": "#/definitions/ansible_number"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "comparison": {
                "enum": [
                  "<=",
                  "<",
                  ">",
                  ">="
                ],
                "type": "string",
                "description": "Determines how the threshold value is compared"
              },
              "alarm_actions": {
                "description": "A list of the names action(s) taken when the alarm is in the 'alarm' status",
                "$ref": "#/definitions/ansible_array"
              },
              "name": {
                "type": "string",
                "description": "Unique name for the alarm"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "vmware_vsan_cluster": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module can be used to configure VSAN clustering on an ESXi host",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the ESXi Server"
              },
              "admin": {
                "type": "string",
                "description": "The username of the ESXi Server"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the ESXi Server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of ESXi Server"
              },
              "user": {
                "type": "string",
                "description": "The username of the ESXi Server"
              },
              "pass": {
                "type": "string",
                "description": "The password of ESXi Server"
              },
              "cluster_uuid": {
                "type": "string",
                "description": "Desired cluster UUID"
              },
              "password": {
                "type": "string",
                "description": "The password of ESXi Server"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "quantum_network": {
            "required": [
              "login_password",
              "name"
            ],
            "type": "object",
            "description": "Add or Remove network from OpenStack.",
            "properties": {
              "region_name": {
                "type": "string",
                "description": "Default: None\n\nName of the region"
              },
              "provider_network_type": {
                "enum": [
                  "local",
                  "vlan",
                  "flat",
                  "gre"
                ],
                "type": "string",
                "description": "Default: None\n\nThe type of the network to be created, gre, vlan, local. Available types depend on the plugin. The Quantum service decides if not specified."
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "router_external": {
                "description": "If 'yes', specifies that the virtual network is a external network (public).",
                "$ref": "#/definitions/ansible_truth"
              },
              "tenant_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the tenant for whom the network is created"
              },
              "admin_state_up": {
                "description": "Default: True\n\nWhether the state should be marked as up or down",
                "$ref": "#/definitions/ansible_truth"
              },
              "provider_physical_network": {
                "type": "string",
                "description": "Default: None\n\nThe physical network which would realize the virtual network for flat and vlan networks."
              },
              "login_tenant_name": {
                "type": "string",
                "description": "Default: yes\n\nThe tenant name of the login user"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "auth_url": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nThe keystone url for authentication"
              },
              "login_password": {
                "type": "string",
                "description": "Default: yes\n\nPassword of login user"
              },
              "login_username": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "shared": {
                "description": "Whether this network is shared or not",
                "$ref": "#/definitions/ansible_truth"
              },
              "provider_segmentation_id": {
                "type": "string",
                "description": "Default: None\n\nThe id that has to be assigned to the network, in case of vlan networks that would be vlan id and for gre the tunnel id"
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nName to be assigned to the nework"
              }
            }
          },
          "deploy_helper": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "path",
                        "dest"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The Deploy Helper manages some of the steps common in deploying software. It creates a folder structure, manages a symlink for the current release and cleans up old releases.\nRunning it with the C(state=query) or C(state=present) will return the C(deploy_helper) fact. C(project_path), whatever you set in the path parameter, C(current_path), the path to the symlink that points to the active release, C(releases_path), the path to the folder to keep releases in, C(shared_path), the path to the folder to keep shared resources in, C(unfinished_filename), the file to check for to recognize unfinished builds, C(previous_release), the release the 'current' symlink is pointing to, C(previous_release_path), the full path to the 'current' symlink target, C(new_release), either the 'release' parameter or a generated timestamp, C(new_release_path), the path to the new release folder (not created by the module).",
            "properties": {
              "unfinished_filename": {
                "type": "string",
                "description": "Default: DEPLOY_UNFINISHED\n\nthe name of the file that indicates a deploy has not finished. All folders in the releases_path that contain this file will be deleted on C(state=finalize) with clean=True, or C(state=clean). This file is automatically deleted from the I(new_release_path) during C(state=finalize)."
              },
              "keep_releases": {
                "description": "Default: 5\n\nthe number of old releases to keep when cleaning. Used in C(finalize) and C(clean). Any unfinished builds will be deleted first, so only correct releases will count. The current version will not count.",
                "$ref": "#/definitions/ansible_number"
              },
              "dest": {
                "type": "string",
                "description": "the root path of the project. Alias I(dest). Returned in the C(deploy_helper.project_path) fact."
              },
              "current_path": {
                "type": "string",
                "description": "Default: current\n\nthe name of the symlink that is created when the deploy is finalized. Used in C(finalize) and C(clean). Returned in the C(deploy_helper.current_path) fact."
              },
              "state": {
                "enum": [
                  "present",
                  "finalize",
                  "absent",
                  "clean",
                  "query"
                ],
                "type": "string",
                "description": "Default: present\n\nthe state of the project. C(query) will only gather facts, C(present) will create the project I(root) folder, and in it the I(releases) and I(shared) folders, C(finalize) will remove the unfinished_filename file, create a symlink to the newly deployed release and optionally clean old releases, C(clean) will remove failed & old releases, C(absent) will remove the project folder (synonymous to the M(file) module with C(state=absent))"
              },
              "shared_path": {
                "type": "string",
                "description": "Default: shared\n\nthe name of the folder that will hold the shared resources. This can be relative to C(path) or absolute. If this is set to an empty string, no shared folder will be created. Returned in the C(deploy_helper.shared_path) fact."
              },
              "releases_path": {
                "type": "string",
                "description": "Default: releases\n\nthe name of the folder that will hold the releases. This can be relative to C(path) or absolute. Returned in the C(deploy_helper.releases_path) fact."
              },
              "clean": {
                "description": "Default: True\n\nWhether to run the clean procedure in case of C(state=finalize).",
                "$ref": "#/definitions/ansible_truth"
              },
              "release": {
                "type": "string",
                "description": "Default: None\n\nthe release version that is being deployed. Defaults to a timestamp format %Y%m%d%H%M%S (i.e. '20141119223359'). This parameter is optional during C(state=present), but needs to be set explicitly for C(state=finalize). You can use the generated fact C(release={{ deploy_helper.new_release }})."
              },
              "path": {
                "type": "string",
                "description": "the root path of the project. Alias I(dest). Returned in the C(deploy_helper.project_path) fact."
              }
            }
          },
          "cs_staticnat": {
            "required": [
              "ip_address"
            ],
            "type": "object",
            "description": "Create, update and remove static NATs.",
            "properties": {
              "vm_guest_ip": {
                "type": "string",
                "description": "VM guest NIC secondary IP address for the static NAT."
              },
              "account": {
                "type": "string",
                "description": "Account the static NAT is related to."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "vm": {
                "type": "string",
                "description": "Name of virtual machine which we make the static NAT for.\nRequired if C(state=present)."
              },
              "project": {
                "type": "string",
                "description": "Name of the project the static NAT is related to."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the static NAT."
              },
              "domain": {
                "type": "string",
                "description": "Domain the static NAT is related to."
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone in which the virtual machine is in.\nIf not set, default zone is used."
              },
              "ip_address": {
                "type": "string",
                "description": "Public IP address the static NAT is assigned to."
              }
            }
          },
          "librato_annotation": {
            "required": [
              "title",
              "user",
              "api_key"
            ],
            "type": "object",
            "description": "Create an annotation event on the given annotation stream :name. If the annotation stream does not exist, it will be created automatically",
            "properties": {
              "name": {
                "type": "string",
                "description": "The annotation stream name\nIf the annotation stream does not exist, it will be created automatically"
              },
              "links": {
                "description": "See examples",
                "$ref": "#/definitions/ansible_array"
              },
              "title": {
                "type": "string",
                "description": "The title of an annotation is a string and may contain spaces\nThe title should be a short, high-level summary of the annotation e.g. v45 Deployment"
              },
              "start_time": {
                "description": "The unix timestamp indicating the the time at which the event referenced by this annotation started",
                "$ref": "#/definitions/ansible_number"
              },
              "source": {
                "type": "string",
                "description": "A string which describes the originating source of an annotation when that annotation is tracked across multiple members of a population"
              },
              "end_time": {
                "description": "The unix timestamp indicating the the time at which the event referenced by this annotation ended\nFor events that have a duration, this is a useful way to annotate the duration of the event",
                "$ref": "#/definitions/ansible_number"
              },
              "user": {
                "type": "string",
                "description": "Librato account username"
              },
              "api_key": {
                "type": "string",
                "description": "Librato account api key"
              },
              "description": {
                "type": "string",
                "description": "The description contains extra meta-data about a particular annotation\nThe description should contain specifics on the individual annotation e.g. Deployed 9b562b2 shipped new feature foo!"
              }
            }
          },
          "gc_storage": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "expiration",
                        "expiry"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "overwrite",
                        "force"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module allows users to manage their objects/buckets in Google Cloud Storage.  It allows upload and download operations and can set some canned permissions. It also allows retrieval of URLs for objects for use in playbooks, and retrieval of string contents of objects.  This module requires setting the default project in GCS prior to playbook usage.  See U(https://developers.google.com/storage/docs/reference/v1/apiversion1) for information about setting the default project.",
            "properties": {
              "src": {
                "type": "string",
                "description": "The source file path when performing a PUT operation."
              },
              "force": {
                "description": "Default: True\n\nForces an overwrite either locally on the filesystem or remotely with the object/key. Used with PUT and GET operations.",
                "$ref": "#/definitions/ansible_truth"
              },
              "permission": {
                "enum": [
                  "private",
                  "public-read",
                  "authenticated-read"
                ],
                "type": "string",
                "description": "Default: private\n\nThis option let's the user set the canned permissions on the object/bucket that are created. The permissions that can be set are 'private', 'public-read', 'authenticated-read'."
              },
              "gs_secret_key": {
                "type": "string",
                "description": ""
              },
              "gs_access_key": {
                "type": "string",
                "description": ""
              },
              "object": {
                "type": "string",
                "description": "Keyname of the object inside the bucket. Can be also be used to create \"virtual directories\" (see examples)."
              },
              "bucket": {
                "type": "string",
                "description": "Bucket name."
              },
              "expiry": {
                "type": "string",
                "description": "Time limit (in seconds) for the URL generated and returned by GCA when performing a mode=put or mode=get_url operation. This url is only available when public-read is the acl for the object."
              },
              "headers": {
                "type": "object",
                "description": "Default: {}\n\nHeaders to attach to object."
              },
              "dest": {
                "type": "string",
                "description": "The destination file path when downloading an object/key with a GET operation."
              },
              "expiration": {
                "type": "string",
                "description": "Time limit (in seconds) for the URL generated and returned by GCA when performing a mode=put or mode=get_url operation. This url is only available when public-read is the acl for the object."
              },
              "overwrite": {
                "description": "Default: True\n\nForces an overwrite either locally on the filesystem or remotely with the object/key. Used with PUT and GET operations.",
                "$ref": "#/definitions/ansible_truth"
              },
              "mode": {
                "enum": [
                  "get",
                  "put",
                  "get_url",
                  "get_str",
                  "delete",
                  "create"
                ],
                "type": "string",
                "description": "Switches the module behaviour between upload, download, get_url (return download url) , get_str (download object as string), create (bucket) and delete (bucket)."
              }
            }
          },
          "vmware_dvs_host": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add or remove a host from distributed virtual switch",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter API server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "If the host should be present or absent attached to the vSwitch"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "esxi_hostname": {
                "type": "string",
                "description": "The ESXi hostname"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "vmnics": {
                "description": "The ESXi hosts vmnics to use with the Distributed vSwitch",
                "$ref": "#/definitions/ansible_array"
              },
              "switch_name": {
                "type": "string",
                "description": "The name of the Distributed vSwitch"
              }
            }
          },
          "os_user_group": {
            "type": "object",
            "description": "Add and remove users from groups",
            "properties": {
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the user be present or absent in the group"
              },
              "group": {
                "type": "string",
                "description": "Name or id for the group."
              },
              "user": {
                "type": "string",
                "description": "Name or id for the user"
              }
            }
          },
          "s3_bucket": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "s3_url",
                        "S3_URL"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage s3 buckets in AWS",
            "properties": {
              "force": {
                "description": "When trying to delete a bucket, delete all keys in the bucket first (an s3 bucket must be empty for a successful deletion)",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or remove the s3 bucket"
              },
              "policy": {
                "type": "string",
                "description": "The JSON policy as a string."
              },
              "S3_URL": {
                "type": "string",
                "description": "S3 URL endpoint for usage with Eucalypus, fakes3, etc.  Otherwise assumes AWS"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "tags": {
                "type": "object",
                "description": "tags dict to apply to bucket"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "s3_url": {
                "type": "string",
                "description": "S3 URL endpoint for usage with Eucalypus, fakes3, etc.  Otherwise assumes AWS"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the s3 bucket"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "requester_pays": {
                "description": "With Requester Pays buckets, the requester instead of the bucket owner pays the cost of the request and the data download from the bucket.",
                "$ref": "#/definitions/ansible_truth"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "versioning": {
                "description": "Whether versioning is enabled or disabled (note that once versioning is enabled, it can only be suspended)",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "rabbitmq_policy": {
            "type": "object",
            "description": "Manage the state of a virtual host in RabbitMQ.",
            "properties": {
              "node": {
                "type": "string",
                "description": "Default: rabbit\n\nErlang node name of the rabbit we wish to configure."
              },
              "name": {
                "type": "string",
                "description": "The name of the policy to manage."
              },
              "tags": {
                "type": "string",
                "description": "A dict or string describing the policy."
              },
              "pattern": {
                "type": "string",
                "description": "A regex of queues to apply the policy to."
              },
              "priority": {
                "type": "string",
                "description": "The priority of the policy."
              },
              "vhost": {
                "type": "string",
                "description": "Default: /\n\nThe name of the vhost to apply to."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nThe state of the policy."
              }
            }
          },
          "route53_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "resource_id",
                        "resource_ids"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gets various details related to Route53 zone, record set or health check details",
            "properties": {
              "resource_id": {
                "description": "The ID/s of the specified resource/s",
                "$ref": "#/definitions/ansible_array"
              },
              "hosted_zone_id": {
                "type": "string",
                "description": "The Hosted Zone ID of the DNS zone"
              },
              "health_check_id": {
                "type": "string",
                "description": "The ID of the health check"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "query": {
                "enum": [
                  "change",
                  "checker_ip_range",
                  "health_check",
                  "hosted_zone",
                  "record_sets",
                  "reusable_delegation_set"
                ],
                "type": "string",
                "description": "specifies the query action to take"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "resource_ids": {
                "description": "The ID/s of the specified resource/s",
                "$ref": "#/definitions/ansible_array"
              },
              "next_marker": {
                "type": "string",
                "description": "Some requests such as list_command: hosted_zones will return a maximum number of entries - EG 100. If the number of entries exceeds this maximum another request can be sent using the NextMarker entry from the first response to get the next page of results"
              },
              "type": {
                "enum": [
                  "A",
                  "CNAME",
                  "MX",
                  "AAAA",
                  "TXT",
                  "PTR",
                  "SRV",
                  "SPF",
                  "NS"
                ],
                "type": "string",
                "description": "The type of DNS record"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "hosted_zone_method": {
                "enum": [
                  "details",
                  "list",
                  "list_by_name",
                  "count",
                  "tags"
                ],
                "type": "string",
                "description": "Default: list\n\nThis is used in conjunction with query: hosted_zone. It allows for listing details, counts or tags of various hosted zone details."
              },
              "health_check_method": {
                "enum": [
                  "list",
                  "details",
                  "status",
                  "failure_reason",
                  "count",
                  "tags"
                ],
                "type": "string",
                "description": "Default: list\n\nThis is used in conjunction with query: health_check. It allows for listing details, counts or tags of various health check details."
              },
              "delegation_set_id": {
                "type": "string",
                "description": "The DNS Zone delegation set ID"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "start_record_name": {
                "type": "string",
                "description": "The first name in the lexicographic ordering of domain names that you want the list_command: record_sets to start listing from"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "change_id": {
                "type": "string",
                "description": "The ID of the change batch request. The value that you specify here is the value that ChangeResourceRecordSets returned in the Id element when you submitted the request."
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "max_items": {
                "type": "string",
                "description": "Maximum number of items to return for various get/list requests"
              },
              "dns_name": {
                "type": "string",
                "description": "The first name in the lexicographic ordering of domain names that you want the list_command to start listing from"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "homebrew_tap": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "tap"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "tap"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Tap external Homebrew repositories.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nstate of the repository."
              },
              "tap": {
                "type": "string",
                "description": "The repository to tap."
              },
              "name": {
                "type": "string",
                "description": "The repository to tap."
              }
            }
          },
          "easy_install": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Installs Python libraries, optionally in a I(virtualenv)",
            "properties": {
              "virtualenv": {
                "type": "string",
                "description": "an optional I(virtualenv) directory path to install into. If the I(virtualenv) does not exist, it is created automatically"
              },
              "executable": {
                "type": "string",
                "description": "The explicit executable or a pathname to the executable to be used to run easy_install for a specific version of Python installed in the system. For example C(easy_install-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run easy_install for the Python 3.3 installation."
              },
              "name": {
                "type": "string",
                "description": "A Python library name"
              },
              "virtualenv_command": {
                "type": "string",
                "description": "Default: virtualenv\n\nThe command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2)."
              },
              "virtualenv_site_packages": {
                "description": "Default: no\n\nWhether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "latest"
                ],
                "type": "string",
                "description": "Default: present\n\nThe desired state of the library. C(latest) ensures that the latest version is installed."
              }
            }
          },
          "yum": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Installs, upgrade, removes, and lists packages and groups with the I(yum) package manager.",
            "properties": {
              "name": {
                "description": "Package name, or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: yum -y update. You can also pass a url or a local path to a rpm file.  To operate on several packages this can accept a comma separated list of packages or (as of 2.0) a list of packages.",
                "$ref": "#/definitions/ansible_array"
              },
              "list": {
                "type": "string",
                "description": "Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. See examples."
              },
              "disable_gpg_check": {
                "description": "Default: no\n\nWhether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).",
                "$ref": "#/definitions/ansible_truth"
              },
              "conf_file": {
                "type": "string",
                "description": "The remote yum configuration file to use for the transaction."
              },
              "install_repoquery": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "latest",
                  "absent",
                  "removed"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package."
              },
              "disablerepo": {
                "type": "string",
                "description": "I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."
              },
              "update_cache": {
                "description": "Default: no\n\nForce updating the cache. Has an effect only if state is I(present) or I(latest).",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkg": {
                "description": "Package name, or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: yum -y update. You can also pass a url or a local path to a rpm file.  To operate on several packages this can accept a comma separated list of packages or (as of 2.0) a list of packages.",
                "$ref": "#/definitions/ansible_array"
              },
              "enablerepo": {
                "type": "string",
                "description": "I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."
              },
              "exclude": {
                "type": "string",
                "description": "Package name(s) to exclude when state=present, or latest"
              }
            }
          },
          "rax_mon_notification_plan": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or delete a Rackspace Cloud Monitoring notification plan by associating existing rax_mon_notifications with severity levels. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> *rax_mon_notification_plan* -> rax_mon_alarm",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "warning_state": {
                "description": "Notification list to use when the alarm state is WARNING. Must be an array of valid rax_mon_notification ids.",
                "$ref": "#/definitions/ansible_array"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "critical_state": {
                "description": "Notification list to use when the alarm state is CRITICAL. Must be an array of valid rax_mon_notification ids.",
                "$ref": "#/definitions/ansible_array"
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "label": {
                "type": "string",
                "description": "Defines a friendly name for this notification plan. String between 1 and 255 characters long."
              },
              "ok_state": {
                "description": "Notification list to use when the alarm state is OK. Must be an array of valid rax_mon_notification ids.",
                "$ref": "#/definitions/ansible_array"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Ensure that the notification plan with this C(label) exists or does not exist."
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "ec2_elb_lb": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Returns information about the load balancer.\nWill be marked changed when called only if state is changed.",
            "properties": {
              "purge_subnets": {
                "description": "Purge existing subnet on ELB that are not found in subnets",
                "$ref": "#/definitions/ansible_truth"
              },
              "zones": {
                "description": "List of availability zones to enable on this ELB",
                "$ref": "#/definitions/ansible_array"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "connection_draining_timeout": {
                "type": "string",
                "description": "Default: None\n\nWait a specified timeout allowing connections to drain before terminating an instance"
              },
              "security_group_ids": {
                "description": "Default: None\n\nA list of security groups to apply to the elb",
                "$ref": "#/definitions/ansible_array"
              },
              "access_logs": {
                "type": "object",
                "description": "Default: None\n\nAn associative array of access logs configuration settings (see example)"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Create or destroy the ELB"
              },
              "purge_listeners": {
                "description": "Default: True\n\nPurge existing listeners on ELB that are not found in listeners",
                "$ref": "#/definitions/ansible_truth"
              },
              "scheme": {
                "type": "string",
                "description": "Default: internet-facing\n\nThe scheme to use when creating the ELB. For a private VPC-visible ELB use 'internal'."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "subnets": {
                "description": "Default: None\n\nA list of VPC subnets to use when creating ELB. Zones should be empty if using this.",
                "$ref": "#/definitions/ansible_array"
              },
              "health_check": {
                "type": "object",
                "description": "Default: None\n\nAn associative array of health check configuration settings (see example)"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "idle_timeout": {
                "type": "string",
                "description": "ELB connections from clients and to servers are timed out after this amount of time"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "cross_az_load_balancing": {
                "type": "string",
                "description": "Default: no\n\nDistribute load across all configured Availability Zones"
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "purge_zones": {
                "description": "Purge existing availability zones on ELB that are not found in zones",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "The name of the ELB"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "listeners": {
                "description": "List of ports/protocols for this ELB to listen on (see example)",
                "$ref": "#/definitions/ansible_array"
              },
              "security_group_names": {
                "description": "Default: None\n\nA list of security group names to apply to the elb",
                "$ref": "#/definitions/ansible_array"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "Default: yes\n\nWhen set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0.",
                "$ref": "#/definitions/ansible_truth"
              },
              "stickiness": {
                "type": "object",
                "description": "An associative array of stickness policy settings. Policy will be applied to all listeners ( see example )"
              }
            }
          },
          "sns": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "msg",
                        "default"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "msg"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "default"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The M(sns) module sends notifications to a topic on your Amazon SNS account",
            "properties": {
              "topic": {
                "type": "string",
                "description": "The topic you want to publish to."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "subject": {
                "type": "string",
                "description": "Subject line for email delivery."
              },
              "aws_secret_key": {
                "type": "string",
                "description": "Default: None\n\nAWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "sms": {
                "type": "string",
                "description": "Message to send to SMS-only subscription"
              },
              "https": {
                "type": "string",
                "description": "Message to send to HTTPS-only subscription"
              },
              "msg": {
                "type": "string",
                "description": "Default message to send."
              },
              "email": {
                "type": "string",
                "description": "Message to send to email-only subscription"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "http": {
                "type": "string",
                "description": "Message to send to HTTP-only subscription"
              },
              "sqs": {
                "type": "string",
                "description": "Message to send to SQS-only subscription"
              },
              "aws_region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used."
              },
              "ec2_access_key": {
                "type": "string",
                "description": "Default: None\n\nAWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "ec2_secret_key": {
                "type": "string",
                "description": "Default: None\n\nAWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "ec2_region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used."
              },
              "access_key": {
                "type": "string",
                "description": "Default: None\n\nAWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "aws_access_key": {
                "type": "string",
                "description": "Default: None\n\nAWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": "The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used."
              },
              "default": {
                "type": "string",
                "description": "Default message to send."
              },
              "secret_key": {
                "type": "string",
                "description": "Default: None\n\nAWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "route53_health_check": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates and deletes DNS Health checks in Amazons Route53 service\nOnly the port, resource_path, string_match and request_interval are considered when updating existing health-checks.",
            "properties": {
              "request_interval": {
                "description": "Default: 30\n\nThe number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.",
                "$ref": "#/definitions/ansible_number"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "port": {
                "description": "The port on the endpoint on which you want Amazon Route 53 to perform health checks. Required for TCP checks.",
                "$ref": "#/definitions/ansible_number"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Specifies the action to take."
              },
              "resource_path": {
                "type": "string",
                "description": "The path that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example the file /docs/route53-health-check.html.\nRequired for all checks except TCP.\nThe path must begin with a /\nMaximum 255 characters."
              },
              "failure_threshold": {
                "description": "Default: 3\n\nThe number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa.",
                "$ref": "#/definitions/ansible_number"
              },
              "type": {
                "enum": [
                  "HTTP",
                  "HTTPS",
                  "HTTP_STR_MATCH",
                  "HTTPS_STR_MATCH",
                  "TCP"
                ],
                "type": "string",
                "description": "The type of health check that you want to create, which indicates how Amazon Route 53 determines whether an endpoint is healthy."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ip_address": {
                "type": "string",
                "description": "IP address of the end-point to check. Either this or `fqdn` has to be provided."
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "fqdn": {
                "type": "string",
                "description": "Domain name of the endpoint to check. Either this or `ip_address` has to be provided. When both are given the `fqdn` is used in the `Host:` header of the HTTP request."
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "string_match": {
                "type": "string",
                "description": "If the check type is HTTP_STR_MATCH or HTTP_STR_MATCH, the string that you want Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the first 5120 bytes of the response body, Amazon Route 53 considers the resource healthy."
              }
            }
          },
          "clc_firewall_policy": {
            "required": [
              "location",
              "source_account_alias"
            ],
            "type": "object",
            "description": "Create or delete or update firewall polices on Centurylink Cloud",
            "properties": {
              "destination_account_alias": {
                "type": "string",
                "description": "Default: None\n\nCLC alias for the destination account"
              },
              "destination": {
                "description": "Default: None\n\nThe list of destination addresses for traffic on the terminating firewall. This is required when state is 'present'",
                "$ref": "#/definitions/ansible_array"
              },
              "enabled": {
                "enum": [
                  true,
                  false
                ],
                "type": "string",
                "description": "Default: True\n\nWhether the firewall policy is enabled or disabled"
              },
              "source": {
                "description": "Default: None\n\nThe list  of source addresses for traffic on the originating firewall. This is required when state is 'present\"",
                "$ref": "#/definitions/ansible_array"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to create or delete the firewall policy"
              },
              "location": {
                "type": "string",
                "description": "Target datacenter for the firewall policy"
              },
              "source_account_alias": {
                "type": "string",
                "description": "CLC alias for the source account"
              },
              "firewall_policy_id": {
                "type": "string",
                "description": "Default: None\n\nId of the firewall policy. This is required to update or delete an existing firewall policy"
              },
              "ports": {
                "description": "Default: None\n\nThe list of ports associated with the policy. TCP and UDP can take in single ports or port ranges.",
                "$ref": "#/definitions/ansible_array"
              },
              "wait": {
                "type": "string",
                "description": "Default: True\n\nWhether to wait for the provisioning tasks to finish before returning."
              }
            }
          },
          "ec2_eip": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "public_ip",
                        "ip"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "device_id",
                        "instance_id"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module associates AWS EC2 elastic IP addresses with instances",
            "properties": {
              "release_on_disassociation": {
                "description": "whether or not to automatically release the EIP when it is disassociated",
                "$ref": "#/definitions/ansible_truth"
              },
              "ip": {
                "type": "string",
                "description": "The elastic IP address to associate with the instance.\nIf absent, allocate a new address"
              },
              "public_ip": {
                "type": "string",
                "description": "The elastic IP address to associate with the instance.\nIf absent, allocate a new address"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIf present, associate the IP with the instance.\nIf absent, disassociate the IP with the instance."
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "wait_timeout": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "device_id": {
                "type": "string",
                "description": "The id of the device for the EIP. Can be an EC2 Instance id or Elastic Network Interface (ENI) id."
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "instance_id": {
                "type": "string",
                "description": "The id of the device for the EIP. Can be an EC2 Instance id or Elastic Network Interface (ENI) id."
              },
              "reuse_existing_ip_allowed": {
                "description": "Reuse an EIP that is not associated to an instance (when available), instead of allocating a new one.",
                "$ref": "#/definitions/ansible_truth"
              },
              "in_vpc": {
                "description": "allocate an EIP inside a VPC or not",
                "$ref": "#/definitions/ansible_truth"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "puppet": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "show_diff",
                        "show-diff"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Runs I(puppet) agent or apply in a reliable manner",
            "properties": {
              "show-diff": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "puppetmaster": {
                "type": "string",
                "description": "Default: None\n\nThe hostname of the puppetmaster to contact."
              },
              "show_diff": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "facter_basename": {
                "type": "string",
                "description": "Default: ansible\n\nBasename of the facter output file"
              },
              "manifest": {
                "type": "string",
                "description": "Default: None\n\nPath to the manifest file to run puppet apply on."
              },
              "environment": {
                "type": "string",
                "description": "Default: None\n\nPuppet environment to be used."
              },
              "timeout": {
                "type": "string",
                "description": "Default: 30m\n\nHow long to wait for I(puppet) to finish."
              },
              "facts": {
                "type": "string",
                "description": "Default: None\n\nA dict of values to pass in as persistent external facter facts"
              }
            }
          },
          "jabber": {
            "required": [
              "to",
              "user",
              "msg",
              "password"
            ],
            "type": "object",
            "description": "Send a message to jabber",
            "properties": {
              "encoding": {
                "type": "string",
                "description": "message encoding"
              },
              "to": {
                "type": "string",
                "description": "user ID or name of the room, when using room use a slash to indicate your nick."
              },
              "host": {
                "type": "string",
                "description": "host to connect, overrides user info"
              },
              "user": {
                "type": "string",
                "description": "User as which to connect"
              },
              "msg": {
                "type": "string",
                "description": "The message body."
              },
              "password": {
                "type": "string",
                "description": "password for user to connect"
              },
              "port": {
                "type": "string",
                "description": "Default: 5222\n\nport to connect to, overrides default"
              }
            }
          },
          "zabbix_group": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host_groups",
                        "host_group"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "host_groups"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "host_group"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "server_url",
                        "url"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "server_url"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "url"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create host groups if they do not exist.\nDelete existing host groups if they exist.",
            "properties": {
              "host_groups": {
                "type": "string",
                "description": "List of host groups to create or delete."
              },
              "url": {
                "type": "string",
                "description": "Url of Zabbix server, with protocol (http or https). C(url) is an alias for C(server_url)."
              },
              "login_user": {
                "type": "string",
                "description": "Zabbix user name."
              },
              "server_url": {
                "type": "string",
                "description": "Url of Zabbix server, with protocol (http or https). C(url) is an alias for C(server_url)."
              },
              "host_group": {
                "type": "string",
                "description": "List of host groups to create or delete."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or delete host group."
              },
              "timeout": {
                "description": "Default: 10\n\nThe timeout of API request(seconds).",
                "$ref": "#/definitions/ansible_number"
              },
              "login_password": {
                "type": "string",
                "description": "Zabbix user password."
              }
            }
          },
          "iam": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Allows for the management of IAM users, groups, roles and access keys.",
            "properties": {
              "update_password": {
                "enum": [
                  "always",
                  "on_create"
                ],
                "type": "string",
                "description": "Default: always\n\nC(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users."
              },
              "access_key_ids": {
                "description": "A list of the keys that you want impacted by the access_key_state paramter.",
                "$ref": "#/definitions/ansible_array"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "password": {
                "type": "string",
                "description": "When type is user and state is present, define the users login password. Also works with update. Note that always returns changed."
              },
              "new_path": {
                "type": "string",
                "description": "When state is update, will replace the path with new_path on the IAM resource"
              },
              "access_key_state": {
                "enum": [
                  "active",
                  "inactive",
                  "create",
                  "remove",
                  "Active",
                  "Inactive",
                  "Create",
                  "Remove"
                ],
                "type": "string",
                "description": "When type is user, it creates, removes, deactivates or activates a user's access key(s). Note that actions apply only to keys specified."
              },
              "iam_type": {
                "enum": [
                  "user",
                  "group",
                  "role"
                ],
                "type": "string",
                "description": "Type of IAM resource"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "update"
                ],
                "type": "string",
                "description": "Whether to create, delete or update the IAM resource. Note, roles cannot be updated."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "key_count": {
                "description": "Default: 1\n\nWhen access_key_state is create it will ensure this quantity of keys are present. Defaults to 1.",
                "$ref": "#/definitions/ansible_number"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "groups": {
                "description": "A list of groups the user should belong to. When update, will gracefully remove groups not listed.",
                "$ref": "#/definitions/ansible_array"
              },
              "ec2_access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "ec2_secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "new_name": {
                "type": "string",
                "description": "When state is update, will replace name with new_name on IAM resource"
              },
              "aws_access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "name": {
                "type": "string",
                "description": "Name of IAM resource to create or identify"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "path": {
                "type": "string",
                "description": "Default: /\n\nWhen creating or updating, specify the desired path of the resource. If state is present, it will replace the current path to match what is passed in when they do not match."
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "vsphere_copy": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "src",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "src"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "path"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "host",
                        "hostname"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "host"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "hostname"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "login",
                        "username"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "login"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Upload files to a vCenter datastore",
            "properties": {
              "username": {
                "type": "string",
                "description": "The login name to authenticate on the vCenter server."
              },
              "datacenter": {
                "type": "string",
                "description": "The datacenter on the vCenter server that holds the datastore."
              },
              "name": {
                "type": "string",
                "description": "The file to push to vCenter"
              },
              "src": {
                "type": "string",
                "description": "The file to push to vCenter"
              },
              "dest": {
                "type": "string",
                "description": "The file to push to the datastore on the vCenter server."
              },
              "hostname": {
                "type": "string",
                "description": "The vCenter server on which the datastore is available."
              },
              "host": {
                "type": "string",
                "description": "The vCenter server on which the datastore is available."
              },
              "path": {
                "type": "string",
                "description": "The file to push to the datastore on the vCenter server."
              },
              "datastore": {
                "type": "string",
                "description": "The datastore on the vCenter server to push files to."
              },
              "password": {
                "type": "string",
                "description": "The password to authenticate on the vCenter server."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be set to C(no) when no other option exists.",
                "$ref": "#/definitions/ansible_truth"
              },
              "login": {
                "type": "string",
                "description": "The login name to authenticate on the vCenter server."
              }
            }
          },
          "os_client_config": {
            "type": "object",
            "description": "Get I(openstack) client config data from clouds.yaml or environment",
            "properties": {
              "clouds": {
                "type": "string",
                "description": "List of clouds to limit the return list to. No value means return information on all configured clouds"
              }
            }
          },
          "service": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "arguments",
                        "args"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Controls services on remote hosts. Supported init systems include BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the service."
              },
              "pattern": {
                "type": "string",
                "description": "If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.  If the string is found, the service will be assumed to be running."
              },
              "args": {
                "type": "string",
                "description": "Additional arguments provided on the command line"
              },
              "enabled": {
                "description": "Whether the service should start on boot. B(At least one of state and enabled are required.)",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "running",
                  "started",
                  "stopped",
                  "restarted",
                  "reloaded"
                ],
                "type": "string",
                "description": "C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.  C(restarted) will always bounce the service.  C(reloaded) will always reload. B(At least one of state and enabled are required.)"
              },
              "sleep": {
                "description": "If the service is being C(restarted) then sleep this many seconds between the stop and start command. This helps to workaround badly behaving init scripts that exit immediately after signaling a process to stop.",
                "$ref": "#/definitions/ansible_number"
              },
              "arguments": {
                "type": "string",
                "description": "Additional arguments provided on the command line"
              },
              "runlevel": {
                "type": "string",
                "description": "Default: default\n\nFor OpenRC init scripts (ex: Gentoo) only.  The runlevel that this service belongs to."
              }
            }
          },
          "rax_network": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates / deletes a Rackspace Public Cloud isolated network.",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "label": {
                "type": "string",
                "description": "Label (name) to give the network"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "cidr": {
                "type": "string",
                "description": "cidr of the network being created"
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "datadog_event": {
            "required": [
              "text",
              "title",
              "api_key"
            ],
            "type": "object",
            "description": "Allows to post events to DataDog (www.datadoghq.com) service.\nUses http://docs.datadoghq.com/api/#events API.",
            "properties": {
              "date_happened": {
                "description": "Default: now\n\nPOSIX timestamp of the event.\nDefault value is now.",
                "$ref": "#/definitions/ansible_number"
              },
              "alert_type": {
                "enum": [
                  "error",
                  "warning",
                  "info",
                  "success"
                ],
                "type": "string",
                "description": "Default: info\n\nType of alert."
              },
              "title": {
                "type": "string",
                "description": "The event title."
              },
              "text": {
                "type": "string",
                "description": "The body of the event."
              },
              "tags": {
                "description": "Comma separated list of tags to apply to the event.",
                "$ref": "#/definitions/ansible_array"
              },
              "priority": {
                "enum": [
                  "normal",
                  "low"
                ],
                "type": "string",
                "description": "Default: normal\n\nThe priority of the event."
              },
              "aggregation_key": {
                "type": "string",
                "description": "An arbitrary string to use for aggregation."
              },
              "source_type_name": {
                "type": "string",
                "description": "\n\nPossible choices:\nnagios\nhudson\njenkins\nuser\nmy apps\nfeed\nchef\npuppet\ngit\nbitbucket\nfabric\ncapistrano"
              },
              "api_key": {
                "type": "string",
                "description": "Your DataDog API key."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "ec2": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "group",
                        "groups"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "zone",
                        "aws_zone",
                        "ec2_zone"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "key_name",
                        "keypair"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_ids",
                        "instance_id"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "network_interfaces",
                        "network_interface"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_type",
                        "type"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates or terminates ec2 instances.",
            "properties": {
              "kernel": {
                "type": "string",
                "description": "kernel I(eki) to use for the instance"
              },
              "image": {
                "type": "string",
                "description": "I(ami) ID to use for the instance"
              },
              "user_data": {
                "type": "string",
                "description": "opaque blob of data which is made available to the ec2 instance"
              },
              "termination_protection": {
                "description": "Enable or Disable the Termination Protection",
                "$ref": "#/definitions/ansible_truth"
              },
              "private_ip": {
                "type": "string",
                "description": "the private ip address to assign the instance (from the vpc subnet)"
              },
              "spot_type": {
                "enum": [
                  "one-time",
                  "persistent"
                ],
                "type": "string",
                "description": "Default: one-time\n\nType of spot request; one of \"one-time\" or \"persistent\". Defaults to \"one-time\" if not supplied."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "id": {
                "type": "string",
                "description": ""
              },
              "source_dest_check": {
                "description": "Default: True\n\nEnable or Disable the Source/Destination checks (for NAT instances and Virtual Routers)",
                "$ref": "#/definitions/ansible_truth"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "spot_wait_timeout": {
                "type": "string",
                "description": "Default: 600\n\nhow long to wait for the spot instance request to be fulfilled"
              },
              "monitoring": {
                "description": "enable detailed monitoring (CloudWatch) for instance",
                "$ref": "#/definitions/ansible_truth"
              },
              "zone": {
                "type": "string",
                "description": "AWS availability zone in which to launch the instance"
              },
              "exact_count": {
                "description": "An integer value which indicates how many instances that match the 'count_tag' parameter should be running. Instances are either created or terminated based on this value.",
                "$ref": "#/definitions/ansible_number"
              },
              "ebs_optimized": {
                "description": "Default: false\n\nwhether instance is using optimized EBS volumes, see U(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html)",
                "$ref": "#/definitions/ansible_truth"
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "running",
                  "stopped"
                ],
                "type": "string",
                "description": "Default: present\n\ncreate or terminate instances"
              },
              "placement_group": {
                "type": "string",
                "description": "placement group for the instance when using EC2 Clustered Compute"
              },
              "count_tag": {
                "type": "string",
                "description": "Used with 'exact_count' to determine how many nodes based on a specific tag criteria should be running.  This can be expressed in multiple ways and is shown in the EXAMPLES section.  For instance, one can request 25 servers that are tagged with \"class=webserver\".  Specified tag must already exist or also be created in instance_tags."
              },
              "ec2_region": {
                "type": "string",
                "description": "The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
              },
              "type": {
                "type": "string",
                "description": "instance type to use for the instance, see U(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)"
              },
              "network_interface": {
                "description": "A list of existing network interfaces to attach to the instance at launch. When specifying existing network interfaces, none of the assign_public_ip, private_ip, vpc_subnet_id, group, or group_id parameters may be used. (Those parameters are for creating a new network interface at launch.)",
                "$ref": "#/definitions/ansible_array"
              },
              "ramdisk": {
                "type": "string",
                "description": "ramdisk I(eri) to use for the instance"
              },
              "count": {
                "description": "Default: 1\n\nnumber of instances to launch",
                "$ref": "#/definitions/ansible_number"
              },
              "key_name": {
                "type": "string",
                "description": "key pair to use on the instance"
              },
              "vpc_subnet_id": {
                "type": "string",
                "description": "the subnet ID in which to launch the instance (VPC)"
              },
              "instance_ids": {
                "description": "list of instance ids, currently used for states: absent, running, stopped",
                "$ref": "#/definitions/ansible_array"
              },
              "spot_price": {
                "type": "string",
                "description": "Maximum spot price to bid, If not set a regular on-demand instance is requested. A spot request is made with this maximum bid. When it is filled, the instance is started."
              },
              "tenancy": {
                "type": "string",
                "description": "Default: default\n\nAn instance with a tenancy of \"dedicated\" runs on single-tenant hardware and can only be launched into a VPC. Note that to use dedicated tenancy you MUST specify a vpc_subnet_id as well. Dedicated tenancy is not available for EC2 \"micro\" instances."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "groups": {
                "description": "security group (or list of groups) to use with the instance",
                "$ref": "#/definitions/ansible_array"
              },
              "assign_public_ip": {
                "description": "when provisioning within vpc, assign a public IP address. Boto library must be 2.13.0+",
                "$ref": "#/definitions/ansible_truth"
              },
              "group": {
                "description": "security group (or list of groups) to use with the instance",
                "$ref": "#/definitions/ansible_array"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "instance_tags": {
                "type": "object",
                "description": "a hash/dictionary of tags to add to the new instance or for starting/stopping instance by tag; '{\"key\":\"value\"}' and '{\"key\":\"value\",\"key\":\"value\"}'"
              },
              "wait": {
                "description": "Default: no\n\nwait for the instance to be 'running' before returning.  Does not wait for SSH, see 'wait_for' example for details.",
                "$ref": "#/definitions/ansible_truth"
              },
              "aws_zone": {
                "type": "string",
                "description": "AWS availability zone in which to launch the instance"
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": "The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "instance_profile_name": {
                "type": "string",
                "description": "Name of the IAM instance profile to use. Boto library must be 2.5.0+"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": "The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
              },
              "network_interfaces": {
                "description": "A list of existing network interfaces to attach to the instance at launch. When specifying existing network interfaces, none of the assign_public_ip, private_ip, vpc_subnet_id, group, or group_id parameters may be used. (Those parameters are for creating a new network interface at launch.)",
                "$ref": "#/definitions/ansible_array"
              },
              "keypair": {
                "type": "string",
                "description": "key pair to use on the instance"
              },
              "ec2_zone": {
                "type": "string",
                "description": "AWS availability zone in which to launch the instance"
              },
              "instance_id": {
                "description": "list of instance ids, currently used for states: absent, running, stopped",
                "$ref": "#/definitions/ansible_array"
              },
              "instance_type": {
                "type": "string",
                "description": "instance type to use for the instance, see U(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)"
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 300\n\nhow long before wait gives up, in seconds"
              },
              "volumes": {
                "description": "a list of hash/dictionaries of volumes to add to the new instance; '[{\"key\":\"value\", \"key\":\"value\"}]'; keys allowed are - device_name (str; required), delete_on_termination (bool; False), device_type (deprecated), ephemeral (str), encrypted (bool; False), snapshot (str), volume_type (str), iops (int) - device_type is deprecated use volume_type, iops must be set when volume_type='io1', ephemeral and snapshot are mutually exclusive.",
                "$ref": "#/definitions/ansible_array"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "group_id": {
                "description": "security group id (or list of ids) to use with the instance",
                "$ref": "#/definitions/ansible_array"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "nova_keypair": {
            "required": [
              "login_password",
              "name"
            ],
            "type": "object",
            "description": "Add or Remove key pair from nova .",
            "properties": {
              "public_key": {
                "type": "string",
                "description": "Default: None\n\nThe public key that would be uploaded to nova and injected to vm's upon creation"
              },
              "region_name": {
                "type": "string",
                "description": "Default: None\n\nName of the region"
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "login_tenant_name": {
                "type": "string",
                "description": "Default: yes\n\nThe tenant name of the login user"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "auth_url": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nThe keystone url for authentication"
              },
              "login_password": {
                "type": "string",
                "description": "Default: yes\n\nPassword of login user"
              },
              "login_username": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nName that has to be given to the key pair"
              }
            }
          },
          "bower": {
            "required": [
              "path"
            ],
            "type": "object",
            "description": "Manage bower packages with bower",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of a bower package to install"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "latest"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state of the bower package"
              },
              "production": {
                "description": "Install with --production flag",
                "$ref": "#/definitions/ansible_truth"
              },
              "version": {
                "type": "string",
                "description": "The version to be installed"
              },
              "path": {
                "type": "string",
                "description": "The base path where to install the bower packages"
              },
              "offline": {
                "description": "Install packages from local cache, if the packages were installed before",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "solaris_zone": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, start, stop and delete Solaris zones. This module doesn't currently allow changing of options for a zone that's already been created.",
            "properties": {
              "install_options": {
                "type": "string",
                "description": "Default: empty string\n\nExtra options to the zoneadm(1M) install command. To automate Solaris 11 zone creation, use this to specify the profile XML file, e.g. install_options=\"-c sc_profile.xml\""
              },
              "timeout": {
                "description": "Default: 600\n\nTimeout, in seconds, for zone to boot.",
                "$ref": "#/definitions/ansible_number"
              },
              "create_options": {
                "type": "string",
                "description": "Default: empty string\n\nExtra options to the zonecfg(1M) create command."
              },
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "started",
                  "running",
                  "stopped",
                  "absent",
                  "configured",
                  "attached",
                  "detached"
                ],
                "type": "string",
                "description": "Default: present\n\nC(present), configure and install the zone.\nC(installed), synonym for C(present).\nC(running), if the zone already exists, boot it, otherwise, configure and install the zone first, then boot it.\nC(started), synonym for C(running).\nC(stopped), shutdown a zone.\nC(absent), destroy the zone.\nC(configured), configure the ready so that it's to be attached.\nC(attached), attach a zone, but do not boot it.\nC(detached), shutdown and detach a zone"
              },
              "root_password": {
                "type": "string",
                "description": "The password hash for the root account. If not specified, the zone's root account will not have a password."
              },
              "sparse": {
                "description": "Whether to create a sparse (C(true)) or whole root (C(false)) zone.",
                "$ref": "#/definitions/ansible_truth"
              },
              "path": {
                "type": "string",
                "description": "The path where the zone will be created. This is required when the zone is created, but not used otherwise."
              },
              "config": {
                "type": "string",
                "description": "Default: empty string\n\nThe zonecfg configuration commands for this zone. See zonecfg(1M) for the valid options and syntax. Typically this is a list of options separated by semi-colons or new lines, e.g. \"set auto-boot=true;add net;set physical=bge0;set address=10.1.1.1;end\""
              },
              "attach_options": {
                "type": "string",
                "description": "Default: empty string\n\nExtra options to the zoneadm attach command. For example, this can be used to specify whether a minimum or full update of packages is required and if any packages need to be deleted. For valid values, see zoneadm(1M)"
              },
              "name": {
                "type": "string",
                "description": "Zone name."
              }
            }
          },
          "copy": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "thirsty"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The M(copy) module copies a file on the local box to remote locations. Use the M(fetch) module to copy files from remote locations to the local box. If you need variable interpolation in copied files, use the M(template) module.",
            "properties": {
              "src": {
                "type": "string",
                "description": "Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with \"/\", only inside contents of that directory are copied to destination. Otherwise, if it does not end with \"/\", the directory itself with all contents is copied. This behavior is similar to Rsync."
              },
              "directory_mode": {
                "type": "string",
                "description": "When doing a recursive copy set the mode for the directories. If this is not set we will use the system defaults. The mode is only set on directories which are newly created, and will not affect those that already existed."
              },
              "force": {
                "description": "Default: yes\n\nthe default is C(yes), which will replace the remote file when contents are different than the source. If C(no), the file will only be transferred if the destination does not exist.",
                "$ref": "#/definitions/ansible_truth"
              },
              "thirsty": {
                "description": "Default: yes\n\nthe default is C(yes), which will replace the remote file when contents are different than the source. If C(no), the file will only be transferred if the destination does not exist.",
                "$ref": "#/definitions/ansible_truth"
              },
              "remote_src": {
                "description": "Default: False\n\nIf False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src. Default is False.\nCurrently remote_src does not support recursive copying.",
                "$ref": "#/definitions/ansible_truth"
              },
              "dest": {
                "type": "string",
                "description": "Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too."
              },
              "content": {
                "type": "string",
                "description": "When used instead of 'src', sets the contents of a file directly to the specified value. This is for simple values, for anything complex or with formatting please switch to the template module."
              },
              "original_basename": {
                "type": "string",
                "description": ""
              },
              "validate": {
                "type": "string",
                "description": ""
              },
              "backup": {
                "description": "Default: no\n\nCreate a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "unarchive": {
            "required": [
              "src",
              "dest"
            ],
            "type": "object",
            "description": "The M(unarchive) module unpacks an archive. By default, it will copy the source file from the local system to the target before unpacking - set copy=no to unpack an archive which already exists on the target..",
            "properties": {
              "src": {
                "type": "string",
                "description": "If copy=yes (default), local path to archive file to copy to the target server; can be absolute or relative. If copy=no, path on the target server to existing archive file to unpack.\nIf copy=no and src contains ://, the remote machine will download the file from the url first. (version_added 2.0)"
              },
              "dest": {
                "type": "string",
                "description": "Remote absolute path where the archive should be unpacked"
              },
              "list_files": {
                "description": "Default: no\n\nIf set to True, return the list of files that are contained in the tarball.",
                "$ref": "#/definitions/ansible_truth"
              },
              "creates": {
                "type": "string",
                "description": "a filename, when it already exists, this step will B(not) be run."
              },
              "original_basename": {
                "type": "string",
                "description": ""
              },
              "copy": {
                "description": "Default: yes\n\nIf true, the file is copied from local 'master' to the target machine, otherwise, the plugin will look for src archive at the target machine.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "vmware_vm_vss_dvs_migrate": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Migrates a virtual machine from a standard vswitch to distributed",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "vm_name": {
                "type": "string",
                "description": "Name of the virtual machine to migrate to a dvSwitch"
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter API server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "dvportgroup_name": {
                "type": "string",
                "description": "Name of the portgroup to migrate to the virtual machine to"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "pam_limits": {
            "required": [
              "domain",
              "value",
              "limit_item",
              "limit_type"
            ],
            "type": "object",
            "description": "The M(pam_limits) module modify PAM limits, default in /etc/security/limits.conf. For the full documentation, see man limits.conf(5).",
            "properties": {
              "comment": {
                "type": "string",
                "description": "Comment associated with the limit."
              },
              "use_max": {
                "description": "Default: no\n\nIf set to C(yes), the maximal value will be used or conserved. If the specified value is superior to the value in the file, file content is replaced with the new value, else content is not modified.",
                "$ref": "#/definitions/ansible_truth"
              },
              "domain": {
                "type": "string",
                "description": "A username, @groupname, wildcard, uid/gid range."
              },
              "dest": {
                "type": "string",
                "description": "Default: /etc/security/limits.conf\n\nModify the limits.conf path."
              },
              "value": {
                "type": "string",
                "description": "The value of the limit."
              },
              "use_min": {
                "description": "Default: no\n\nIf set to C(yes), the minimal value will be used or conserved. If the specified value is inferior to the value in the file, file content is replaced with the new value, else content is not modified.",
                "$ref": "#/definitions/ansible_truth"
              },
              "limit_item": {
                "enum": [
                  "core",
                  "data",
                  "fsize",
                  "memlock",
                  "nofile",
                  "rss",
                  "stack",
                  "cpu",
                  "nproc",
                  "as",
                  "maxlogins",
                  "maxsyslogins",
                  "priority",
                  "locks",
                  "sigpending",
                  "msgqueue",
                  "nice",
                  "rtprio",
                  "chroot"
                ],
                "type": "string",
                "description": "The limit to be set"
              },
              "limit_type": {
                "enum": [
                  "soft",
                  "hard",
                  "-"
                ],
                "type": "string",
                "description": "Limit type, see C(man limits) for an explanation"
              },
              "backup": {
                "description": "Default: no\n\nCreate a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "slack": {
            "required": [
              "token"
            ],
            "type": "object",
            "description": "The M(slack) module sends notifications to U(http://slack.com) via the Incoming WebHook integration",
            "properties": {
              "username": {
                "type": "string",
                "description": "Default: Ansible\n\nThis is the sender of the message."
              },
              "domain": {
                "type": "string",
                "description": "Default: None\n\nSlack (sub)domain for your environment without protocol. (i.e. C(future500.slack.com)) In 1.8 and beyond, this is deprecated and may be ignored.  See token documentation for information."
              },
              "attachments": {
                "description": "Default: None\n\nDefine a list of attachments. This list mirrors the Slack JSON API. For more information, see https://api.slack.com/docs/attachments",
                "$ref": "#/definitions/ansible_array"
              },
              "color": {
                "enum": [
                  "normal",
                  "good",
                  "warning",
                  "danger"
                ],
                "type": "string",
                "description": "Default: normal\n\nAllow text to use default colors - use the default of 'normal' to not send a custom color bar at the start of the message"
              },
              "icon_url": {
                "type": "string",
                "description": "Url for the message sender's icon (default C(http://www.ansible.com/favicon.ico))"
              },
              "parse": {
                "enum": [
                  "full",
                  "none"
                ],
                "type": "string",
                "description": "Default: None\n\nSetting for the message parser at Slack"
              },
              "token": {
                "type": "string",
                "description": "Slack integration token.  This authenticates you to the slack service. Prior to 1.8, a token looked like C(3Ffe373sfhRE6y42Fg3rvf4GlK).  In 1.8 and above, ansible adapts to the new slack API where tokens look like C(G922VJP24/D921DW937/3Ffe373sfhRE6y42Fg3rvf4GlK).  If tokens are in the new format then slack will ignore any value of domain.  If the token is in the old format the domain is required.  Ansible has no control of when slack will get rid of the old API.  When slack does that the old format will stop working."
              },
              "icon_emoji": {
                "type": "string",
                "description": "Default: None\n\nEmoji for the message sender. See Slack documentation for options. (if I(icon_emoji) is set, I(icon_url) will not be used)"
              },
              "link_names": {
                "description": "Default: 1\n\nAutomatically create links for channels and usernames in I(msg).",
                "$ref": "#/definitions/ansible_number"
              },
              "msg": {
                "type": "string",
                "description": "Default: None\n\nMessage to send."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "channel": {
                "type": "string",
                "description": "Default: None\n\nChannel to send the message to. If absent, the message goes to the channel selected for the I(token)."
              }
            }
          },
          "win_template": {
            "type": "object",
            "description": "Templates are processed by the Jinja2 templating language (U(http://jinja.pocoo.org/docs/)) - documentation on the template formatting can be found in the Template Designer Documentation (U(http://jinja.pocoo.org/docs/templates/)).\nSix additional variables can be used in templates: C(ansible_managed) (configurable via the C(defaults) section of C(ansible.cfg)) contains a string which can be used to describe the template name, host, modification time of the template file and the owner uid, C(template_host) contains the node name of the template's machine, C(template_uid) the owner, C(template_path) the absolute path of the template, C(template_fullpath) is the absolute path of the template, and C(template_run_date) is the date that the template was rendered. Note that including a string that uses a date in the template will result in the template being marked 'changed' each time.",
            "properties": {
              "dest": {
                "type": "string",
                "description": "Location to render the template to on the remote machine."
              },
              "src": {
                "type": "string",
                "description": "Path of a Jinja2 formatted template on the local server. This can be a relative or absolute path."
              }
            }
          },
          "ini_file": {
            "required": [
              "dest",
              "section"
            ],
            "type": "object",
            "description": "Manage (add, remove, change) individual settings in an INI-style file without having to manage the file as a whole with, say, M(template) or M(assemble). Adds missing sections if they don't exist.\nBefore version 2.0, comments are discarded when the source file is read, and therefore will not show up in the destination file.",
            "properties": {
              "option": {
                "type": "string",
                "description": "if set (required for changing a I(value)), this is the name of the option.\nMay be omitted if adding/removing a whole I(section)."
              },
              "dest": {
                "type": "string",
                "description": "Path to the INI-style file; this file is created if required"
              },
              "section": {
                "type": "string",
                "description": "Section name in INI file. This is added if C(state=present) automatically when a single value is being set."
              },
              "value": {
                "type": "string",
                "description": "the string value to be associated with an I(option). May be omitted when removing an I(option)."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIf set to C(absent) the option or section will be removed if present instead of created."
              },
              "backup": {
                "description": "Default: no\n\nCreate a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "vmware_datacenter": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage VMware vSphere Datacenters",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "datacenter_name": {
                "type": "string",
                "description": "The name of the datacenter the cluster will be created in."
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter API server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "If the datacenter should be present or absent"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "ec2_scaling_policy": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Can create or delete scaling policies for autoscaling groups\nReferenced autoscaling groups must already exist",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Unique name for the scaling policy"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "asg_name": {
                "type": "string",
                "description": "Name of the associated autoscaling group"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "min_adjustment_step": {
                "description": "Minimum amount of adjustment when policy is triggered",
                "$ref": "#/definitions/ansible_number"
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "adjustment_type": {
                "enum": [
                  "ChangeInCapacity",
                  "ExactCapacity",
                  "PercentChangeInCapacity"
                ],
                "type": "string",
                "description": "The type of change in capacity of the autoscaling group"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "scaling_adjustment": {
                "description": "The amount by which the autoscaling group is adjusted by the policy",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "register or deregister the policy"
              },
              "cooldown": {
                "description": "The minimum period of time between which autoscaling actions can take place",
                "$ref": "#/definitions/ansible_number"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "rax_clb": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates / deletes a Rackspace Public Cloud load balancer.",
            "properties": {
              "protocol": {
                "enum": [
                  "DNS_TCP",
                  "DNS_UDP",
                  "FTP",
                  "HTTP",
                  "HTTPS",
                  "IMAPS",
                  "IMAPv4",
                  "LDAP",
                  "LDAPS",
                  "MYSQL",
                  "POP3",
                  "POP3S",
                  "SMTP",
                  "TCP",
                  "TCP_CLIENT_FIRST",
                  "UDP",
                  "UDP_STREAM",
                  "SFTP"
                ],
                "type": "string",
                "description": "Default: HTTP\n\nProtocol for the balancer being created"
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "meta": {
                "type": "object",
                "description": "A hash of metadata to associate with the instance"
              },
              "port": {
                "description": "Default: 80\n\nPort for the balancer being created",
                "$ref": "#/definitions/ansible_number"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "type": {
                "enum": [
                  "PUBLIC",
                  "SERVICENET"
                ],
                "type": "string",
                "description": "Default: PUBLIC\n\ntype of interface for the balancer being created"
              },
              "username": {
                "type": "string",
                "description": ""
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 300\n\nhow long before wait gives up, in seconds"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name to give the load balancer"
              },
              "vip_id": {
                "type": "string",
                "description": "Virtual IP ID to use when creating the load balancer for purposes of sharing an IP with another load balancer of another protocol"
              },
              "algorithm": {
                "enum": [
                  "RANDOM",
                  "LEAST_CONNECTIONS",
                  "ROUND_ROBIN",
                  "WEIGHTED_LEAST_CONNECTIONS",
                  "WEIGHTED_ROUND_ROBIN"
                ],
                "type": "string",
                "description": "Default: LEAST_CONNECTIONS\n\nalgorithm for the balancer being created"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Default: no\n\nwait for the balancer to be in state 'running' before returning",
                "$ref": "#/definitions/ansible_truth"
              },
              "timeout": {
                "description": "Default: 30\n\ntimeout for communication between the balancer and the node",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "os_network": {
            "type": "object",
            "description": "Add or remove network from OpenStack.",
            "properties": {
              "shared": {
                "type": "string",
                "description": "Whether this network is shared or not."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource."
              },
              "name": {
                "type": "string",
                "description": "Name to be assigned to the network."
              },
              "external": {
                "type": "string",
                "description": "Whether this network is externally accessible."
              },
              "admin_state_up": {
                "type": "string",
                "description": "Default: True\n\nWhether the state should be marked as up or down."
              }
            }
          },
          "netscaler": {
            "required": [
              "nsc_host",
              "user",
              "password"
            ],
            "type": "object",
            "description": "Manages Citrix NetScaler server and service entities.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Default: hostname\n\nname of the entity"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "nsc_protocol": {
                "type": "string",
                "description": "Default: https\n\nprotocol used to access netscaler"
              },
              "nsc_host": {
                "type": "string",
                "description": "hostname or ip of your netscaler"
              },
              "user": {
                "type": "string",
                "description": "username"
              },
              "action": {
                "enum": [
                  "enable",
                  "disable"
                ],
                "type": "string",
                "description": "Default: disable\n\nthe action you want to perform on the entity"
              },
              "password": {
                "type": "string",
                "description": "password"
              },
              "type": {
                "enum": [
                  "server",
                  "service"
                ],
                "type": "string",
                "description": "Default: server\n\ntype of the entity"
              }
            }
          },
          "bigip_monitor_tcp": {
            "type": "object",
            "description": "Manages F5 BIG-IP LTM tcp monitors via iControl SOAP API",
            "properties": {
              "parent_partition": {
                "type": "string",
                "description": "Default: Common\n\nPartition for the parent monitor"
              },
              "partition": {
                "type": "string",
                "description": "Default: Common\n\nPartition for the monitor"
              },
              "name": {
                "type": "string",
                "description": "Monitor name"
              },
              "parent": {
                "type": "string",
                "description": "Default: tcp\n\nThe parent template of this monitor template"
              },
              "receive": {
                "type": "string",
                "description": "Default: none\n\nThe receive string for the monitor call"
              },
              "ip": {
                "type": "string",
                "description": "Default: none\n\nIP address part of the ipport definition. The default API setting is \"0.0.0.0\"."
              },
              "interval": {
                "type": "string",
                "description": "Default: none\n\nThe interval specifying how frequently the monitor instance of this template will run. By default, this interval is used for up and down states. The default API setting is 5."
              },
              "send": {
                "type": "string",
                "description": "Default: none\n\nThe send string for the monitor call"
              },
              "server": {
                "type": "string",
                "description": "BIG-IP host"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nMonitor state"
              },
              "time_until_up": {
                "type": "string",
                "description": "Default: none\n\nSpecifies the amount of time in seconds after the first successful response before a node will be marked up. A value of 0 will cause a node to be marked up immediately after a valid response is received from the node. The default API setting is 0."
              },
              "user": {
                "type": "string",
                "description": "BIG-IP username"
              },
              "timeout": {
                "type": "string",
                "description": "Default: none\n\nThe number of seconds in which the node or service must respond to the monitor request. If the target responds within the set time period, it is considered up. If the target does not respond within the set time period, it is considered down. You can change this number to any number you want, however, it should be 3 times the interval number of seconds plus 1 second. The default API setting is 16."
              },
              "type": {
                "type": "string",
                "description": "Default: tcp\n\nThe template type of this monitor template"
              },
              "password": {
                "type": "string",
                "description": "BIG-IP password"
              },
              "validate_certs": {
                "type": "string",
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8"
              },
              "port": {
                "type": "string",
                "description": "Default: none\n\nport address part op the ipport definition. The default API setting is 0."
              }
            }
          },
          "osx_defaults": {
            "type": "object",
            "description": "osx_defaults allows users to read, write, and delete Mac OS X user defaults from Ansible scripts. Mac OS X applications and other programs use the defaults system to record user preferences and other information that must be maintained when the applications aren't running (such as default font for new documents, or the position of an Info panel).",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Default: NSGlobalDomain\n\nThe domain is a domain name of the form com.companyname.appname."
              },
              "value": {
                "type": "string",
                "description": "The value to write. Only required when state = present."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state of the user defaults"
              },
              "key": {
                "type": "string",
                "description": "The key of the user preference"
              },
              "path": {
                "type": "string",
                "description": ""
              },
              "type": {
                "enum": [
                  "array",
                  "bool",
                  "boolean",
                  "date",
                  "float",
                  "int",
                  "integer",
                  "string"
                ],
                "type": "string",
                "description": "Default: string\n\nThe type of value to write."
              },
              "array_add": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Add new elements to the array for a key which has an array as its value."
              }
            }
          },
          "pkg5_publisher": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "publisher"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "publisher"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "IPS packages are the native packages in Solaris 11 and higher.\nThis modules will configure which publishers a client will download IPS packages from.",
            "properties": {
              "origin": {
                "description": "A path or URL to the repository.\nMultiple values may be provided.",
                "$ref": "#/definitions/ansible_array"
              },
              "publisher": {
                "type": "string",
                "description": "The publisher's name."
              },
              "name": {
                "type": "string",
                "description": "The publisher's name."
              },
              "enabled": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Is the repository enabled or disabled?"
              },
              "sticky": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Packages installed from a sticky repository can only receive updates from that repository."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to ensure that a publisher is present or absent."
              },
              "mirror": {
                "description": "A path or URL to the repository mirror.\nMultiple values may be provided.",
                "$ref": "#/definitions/ansible_array"
              }
            }
          },
          "apache2_module": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Enables or disables a specified module of the Apache2 webserver.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nindicate the desired state of the resource"
              },
              "name": {
                "type": "string",
                "description": "name of the module to enable/disable"
              }
            }
          },
          "lxc_container": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Management of LXC containers",
            "properties": {
              "zfs_root": {
                "type": "string",
                "description": "Create zfs under given zfsroot."
              },
              "clone_name": {
                "type": "string",
                "description": "Name of the new cloned server. This is only used when state is clone."
              },
              "container_config": {
                "type": "string",
                "description": "list of 'key=value' options to use when configuring a container."
              },
              "fs_type": {
                "type": "string",
                "description": "Default: ext4\n\nCreate fstype TYPE."
              },
              "archive": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Create an archive of a container. This will create a tarball of the running container."
              },
              "container_log": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Enable a container log for host actions to the container."
              },
              "state": {
                "enum": [
                  "absent",
                  "restarted",
                  "started",
                  "clone",
                  "frozen",
                  "stopped"
                ],
                "type": "string",
                "description": "Default: started\n\nDefine the state of a container. If you clone a container using `clone_name` the newly cloned container created in a stopped state. The running container will be stopped while the clone operation is happening and upon completion of the clone the original container state will be restored."
              },
              "template": {
                "type": "string",
                "description": "Default: ubuntu\n\nName of the template to use within an LXC create."
              },
              "config": {
                "type": "string",
                "description": "Path to the LXC configuration file."
              },
              "archive_path": {
                "type": "string",
                "description": "Path the save the archived container. If the path does not exist the archive method will attempt to create it."
              },
              "container_log_level": {
                "enum": [
                  "info",
                  "INFO",
                  "Info",
                  "debug",
                  "DEBUG",
                  "Debug",
                  "error",
                  "ERROR",
                  "Error"
                ],
                "type": "string",
                "description": "Default: INFO\n\nSet the log level for a container where *container_log* was set."
              },
              "template_options": {
                "type": "string",
                "description": "Template options when building the container."
              },
              "container_command": {
                "type": "string",
                "description": "Run a command within a container."
              },
              "lxc_path": {
                "type": "string",
                "description": "Place container under PATH"
              },
              "archive_compression": {
                "enum": [
                  "gzip",
                  "bzip2",
                  "none"
                ],
                "type": "string",
                "description": "Default: gzip\n\nType of compression to use when creating an archive of a running container."
              },
              "thinpool": {
                "type": "string",
                "description": "Use LVM thin pool called TP."
              },
              "clone_snapshot": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Create a snapshot a container when cloning. This is not supported by all container storage backends. Enabling this may fail if the backing store does not support snapshots."
              },
              "name": {
                "type": "string",
                "description": "Name of a container."
              },
              "lv_name": {
                "type": "string",
                "description": "Default: $CONTAINER_NAME\n\nName of the logical volume, defaults to the container name."
              },
              "fs_size": {
                "type": "string",
                "description": "Default: 5G\n\nFile system Size."
              },
              "backing_store": {
                "enum": [
                  "dir",
                  "lvm",
                  "loop",
                  "btrfs",
                  "overlayfs",
                  "zfs"
                ],
                "type": "string",
                "description": "Default: dir\n\nBackend storage type for the container."
              },
              "vg_name": {
                "type": "string",
                "description": "Default: lxc\n\nIf Backend store is lvm, specify the name of the volume group."
              },
              "directory": {
                "type": "string",
                "description": "Place rootfs directory under DIR."
              }
            }
          },
          "win_file": {
            "type": "object",
            "description": "Creates (empty) files, updates file modification stamps of existing files, and can create or remove directories. Unlike M(file), does not modify ownership, permissions or manipulate links.",
            "properties": {
              "path": {
                "type": "string",
                "description": "path to the file being managed.  Aliases: I(dest), I(name)"
              },
              "state": {
                "type": "string",
                "description": "Default: file\n\nIf C(directory), all immediate subdirectories will be created if they do not exist. If C(file), the file will NOT be created if it does not exist, see the M(copy) or M(template) module if you want that behavior.  If C(absent), directories will be recursively deleted, and files will be removed. If C(touch), an empty file will be created if the c(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way `touch` works from the command line)."
              }
            }
          },
          "stackdriver": {
            "required": [
              "key",
              "event"
            ],
            "type": "object",
            "description": "Send code deploy and annotation events to Stackdriver",
            "properties": {
              "repository": {
                "type": "string",
                "description": "The repository (or project) deployed"
              },
              "level": {
                "enum": [
                  "INFO",
                  "WARN",
                  "ERROR"
                ],
                "type": "string",
                "description": "Default: INFO\n\none of INFO/WARN/ERROR, defaults to INFO if not supplied.  May affect display."
              },
              "annotated_by": {
                "type": "string",
                "description": "Default: Ansible\n\nThe person or robot who the annotation should be attributed to."
              },
              "deployed_by": {
                "type": "string",
                "description": "Default: Ansible\n\nThe person or robot responsible for deploying the code"
              },
              "deployed_to": {
                "type": "string",
                "description": "The environment code was deployed to. (ie: development, staging, production)"
              },
              "instance_id": {
                "type": "string",
                "description": "id of an EC2 instance that this event should be attached to, which will limit the contexts where this event is shown"
              },
              "key": {
                "type": "string",
                "description": "API key."
              },
              "msg": {
                "type": "string",
                "description": "The contents of the annotation message, in plain text.  Limited to 256 characters. Required for annotation."
              },
              "event_epoch": {
                "type": "string",
                "description": "Unix timestamp of where the event should appear in the timeline, defaults to now. Be careful with this."
              },
              "revision_id": {
                "type": "string",
                "description": "The revision of the code that was deployed. Required for deploy events"
              },
              "event": {
                "enum": [
                  "annotation",
                  "deploy"
                ],
                "type": "string",
                "description": "The type of event to send, either annotation or deploy"
              }
            }
          },
          "win_updates": {
            "type": "object",
            "description": "Searches, downloads, and installs Windows updates synchronously by automating the Windows Update client",
            "properties": {
              "log_path": {
                "type": "string",
                "description": "If set, win_updates will append update progress to the specified file. The directory must already exist."
              },
              "state": {
                "type": "string",
                "description": "Default: installed\n\nControls whether found updates are returned as a list or actually installed.\nThis module also supports Ansible check mode, which has the same effect as setting state=searched"
              },
              "category_names": {
                "type": "string",
                "description": "Default: ['CriticalUpdates', 'SecurityUpdates', 'UpdateRollups']\n\nA scalar or list of categories to install updates from"
              }
            }
          },
          "wait_for": {
            "type": "object",
            "description": "You can wait for a set amount of time C(timeout), this is the default if nothing is specified.\nWaiting for a port to become available is useful for when services are not immediately available after their init scripts return which is true of certain Java application servers. It is also useful when starting guests with the M(virt) module and needing to pause until they are ready.\nThis module can also be used to wait for a regex match a string to be present in a file.\nIn 1.6 and later, this module can also be used to wait for a file to be available or absent on the filesystem.\nIn 1.8 and later, this module can also be used to wait for active connections to be closed before continuing, useful if a node is being rotated out of a load balancer pool.",
            "properties": {
              "host": {
                "type": "string",
                "description": "Default: 127.0.0.1\n\nA resolvable hostname or IP address to wait for"
              },
              "connect_timeout": {
                "type": "string",
                "description": "Default: 5\n\nmaximum number of seconds to wait for a connection to happen before closing and retrying"
              },
              "delay": {
                "type": "string",
                "description": "number of seconds to wait before starting to poll"
              },
              "state": {
                "enum": [
                  "present",
                  "started",
                  "stopped",
                  "absent",
                  "drained"
                ],
                "type": "string",
                "description": "Default: started\n\neither C(present), C(started), or C(stopped), C(absent), or C(drained)\nWhen checking a port C(started) will ensure the port is open, C(stopped) will check that it is closed, C(drained) will check for active connections\nWhen checking for a file or a search string C(present) or C(started) will ensure that the file or string is present before continuing, C(absent) will check that file is absent or removed"
              },
              "timeout": {
                "type": "string",
                "description": "Default: 300\n\nmaximum number of seconds to wait for"
              },
              "exclude_hosts": {
                "description": "list of hosts or IPs to ignore when looking for active TCP connections for C(drained) state",
                "$ref": "#/definitions/ansible_array"
              },
              "search_regex": {
                "type": "string",
                "description": "Can be used to match a string in either a file or a socket connection. Defaults to a multiline regex."
              },
              "path": {
                "type": "string",
                "description": "path to a file on the filesytem that must exist before continuing"
              },
              "port": {
                "type": "string",
                "description": "port number to poll"
              }
            }
          },
          "xattr": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "path"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages filesystem user defined extended attributes, requires that they are enabled on the target filesystem and that the setfattr/getfattr utilities are present.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Default: None\n\nThe full path of the file/object to get the facts of"
              },
              "value": {
                "type": "string",
                "description": "Default: None\n\nThe value to set the named name/key to, it automatically sets the C(state) to 'set'"
              },
              "state": {
                "enum": [
                  "read",
                  "present",
                  "all",
                  "keys",
                  "absent"
                ],
                "type": "string",
                "description": "Default: get\n\ndefines which state you want to do. C(read) retrieves the current value for a C(key) (default) C(present) sets C(name) to C(value), default if value is set C(all) dumps all data C(keys) retrieves all keys C(absent) deletes the key"
              },
              "key": {
                "type": "string",
                "description": "Default: None\n\nThe name of a specific Extended attribute key to set/retrieve"
              },
              "path": {
                "type": "string",
                "description": "Default: None\n\nThe full path of the file/object to get the facts of"
              },
              "follow": {
                "description": "Default: True\n\nif yes, dereferences symlinks and sets/gets attributes on symlink target, otherwise acts on symlink itself.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "os_subnets_facts": {
            "type": "object",
            "description": "Retrieve facts about one or more subnets from OpenStack.",
            "properties": {
              "subnet": {
                "type": "string",
                "description": "Name or ID of the subnet"
              },
              "filters": {
                "type": "string",
                "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries."
              }
            }
          },
          "rax": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "key_name",
                        "keypair"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates / deletes a Rackspace Public Cloud instance and optionally waits for it to be 'running'.",
            "properties": {
              "files": {
                "type": "object",
                "description": "Files to insert into the instance. remotefilename:localcontent"
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "image": {
                "type": "string",
                "description": "image to use for the instance. Can be an C(id), C(human_id) or C(name). With I(boot_from_volume), a Cloud Block Storage volume will be created with this image"
              },
              "user_data": {
                "type": "string",
                "description": "Data to be uploaded to the servers config drive. This option implies I(config_drive). Can be a file path or a string"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "meta": {
                "type": "object",
                "description": "A hash of metadata to associate with the instance"
              },
              "flavor": {
                "type": "string",
                "description": "flavor to use for the instance"
              },
              "networks": {
                "description": "Default: ['public', 'private']\n\nThe network to attach to the instances. If specified, you must include ALL networks including the public and private interfaces. Can be C(id) or C(label).",
                "$ref": "#/definitions/ansible_array"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "boot_from_volume": {
                "description": "Default: no\n\nWhether or not to boot the instance from a Cloud Block Storage volume. If C(yes) and I(image) is specified a new volume will be created at boot time. I(boot_volume_size) is required with I(image) to create a new volume at boot time.",
                "$ref": "#/definitions/ansible_truth"
              },
              "group": {
                "type": "string",
                "description": "host group to assign to server, is also used for idempotent operations to ensure a specific number of instances"
              },
              "service": {
                "type": "string",
                "description": ""
              },
              "extra_create_args": {
                "type": "object",
                "description": "A hash of key/value pairs to be used when creating a new server. This is considered an advanced option, use it wisely and with caution."
              },
              "disk_config": {
                "enum": [
                  "auto",
                  "manual"
                ],
                "type": "string",
                "description": "Default: auto\n\nDisk partitioning strategy"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "auto_increment": {
                "description": "Default: True\n\nWhether or not to increment a single number with the name of the created servers. Only applicable when used with the I(group) attribute or meta key.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "config_drive": {
                "description": "Attach read-only configuration drive to server as label config-2",
                "$ref": "#/definitions/ansible_truth"
              },
              "boot_volume_terminate": {
                "description": "Whether the I(boot_volume) or newly created volume from I(image) will be terminated when the server is terminated",
                "$ref": "#/definitions/ansible_truth"
              },
              "key_name": {
                "type": "string",
                "description": "key pair to use on the instance"
              },
              "count_offset": {
                "description": "Default: 1\n\nnumber count to start at",
                "$ref": "#/definitions/ansible_number"
              },
              "instance_ids": {
                "description": "list of instance ids, currently only used when state='absent' to remove instances",
                "$ref": "#/definitions/ansible_array"
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 300\n\nhow long before wait gives up, in seconds"
              },
              "boot_volume": {
                "type": "string",
                "description": "Cloud Block Storage ID or Name to use as the boot volume of the instance"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Default: no\n\nwait for the instance to be in state 'running' before returning",
                "$ref": "#/definitions/ansible_truth"
              },
              "count": {
                "description": "Default: 1\n\nnumber of instances to launch",
                "$ref": "#/definitions/ansible_number"
              },
              "boot_volume_size": {
                "description": "Default: 100\n\nSize of the volume to create in Gigabytes. This is only required with I(image) and I(boot_from_volume).",
                "$ref": "#/definitions/ansible_number"
              },
              "name": {
                "type": "string",
                "description": "Name to give the instance"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "keypair": {
                "type": "string",
                "description": "key pair to use on the instance"
              },
              "username": {
                "type": "string",
                "description": ""
              },
              "extra_client_args": {
                "type": "object",
                "description": "A hash of key/value pairs to be used when creating the cloudservers client. This is considered an advanced option, use it wisely and with caution."
              },
              "exact_count": {
                "description": "Explicitly ensure an exact count of instances, used with state=active/present. If specified as C(yes) and I(count) is less than the servers matched, servers will be deleted to match the count. If the number of matched servers is fewer than specified in I(count) additional servers will be added.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "vertica_facts": {
            "type": "object",
            "description": "Gathers Vertica database facts.",
            "properties": {
              "login_user": {
                "type": "string",
                "description": "Default: dbadmin\n\nThe username used to authenticate with."
              },
              "cluster": {
                "type": "string",
                "description": "Default: localhost\n\nName of the cluster running the schema."
              },
              "db": {
                "type": "string",
                "description": "Name of the database running the schema."
              },
              "port": {
                "type": "string",
                "description": "Default: 5433\n\nDatabase port to connect to."
              },
              "login_password": {
                "type": "string",
                "description": "The password used to authenticate with."
              }
            }
          },
          "cs_ip_address": {
            "type": "object",
            "description": "Acquires and associates a public IP to an account or project. Due to API limitations this is not an idempotent call, so be sure to only conditionally call this when C(state=present)",
            "properties": {
              "account": {
                "type": "string",
                "description": "Account the IP address is related to."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the IP address is related to."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": ""
              },
              "domain": {
                "type": "string",
                "description": "Domain the IP address is related to."
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone in which the IP address is in.\nIf not set, default zone is used."
              },
              "ip_address": {
                "type": "string",
                "description": "Public IP address.\nRequired if C(state=absent)"
              },
              "network": {
                "type": "string",
                "description": "Network the IP address is related to."
              }
            }
          },
          "mysql_replication": {
            "type": "object",
            "description": "Manages MySQL server replication, slave, master status get and change master host.",
            "properties": {
              "ssl_key": {
                "type": "string",
                "description": ""
              },
              "master_auto_position": {
                "description": "does the host uses GTID based replication or not",
                "$ref": "#/definitions/ansible_truth"
              },
              "master_ssl_cert": {
                "type": "string",
                "description": "same as mysql variable"
              },
              "login_user": {
                "type": "string",
                "description": ""
              },
              "master_port": {
                "description": "same as mysql variable",
                "$ref": "#/definitions/ansible_number"
              },
              "master_host": {
                "type": "string",
                "description": "same as mysql variable"
              },
              "master_ssl_ca": {
                "type": "string",
                "description": "same as mysql variable"
              },
              "master_ssl_cipher": {
                "type": "string",
                "description": "same as mysql variable"
              },
              "relay_log_file": {
                "type": "string",
                "description": "same as mysql variable"
              },
              "master_log_pos": {
                "description": "same as mysql variable",
                "$ref": "#/definitions/ansible_number"
              },
              "relay_log_pos": {
                "description": "same as mysql variable",
                "$ref": "#/definitions/ansible_number"
              },
              "master_password": {
                "type": "string",
                "description": "same as mysql variable"
              },
              "config_file": {
                "type": "string",
                "description": ""
              },
              "master_ssl": {
                "description": "same as mysql variable",
                "$ref": "#/definitions/ansible_truth"
              },
              "login_host": {
                "type": "string",
                "description": ""
              },
              "master_ssl_capath": {
                "type": "string",
                "description": "same as mysql variable"
              },
              "login_unix_socket": {
                "type": "string",
                "description": ""
              },
              "master_connect_retry": {
                "description": "same as mysql variable",
                "$ref": "#/definitions/ansible_number"
              },
              "master_user": {
                "type": "string",
                "description": "same as mysql variable"
              },
              "login_password": {
                "type": "string",
                "description": ""
              },
              "master_log_file": {
                "type": "string",
                "description": "same as mysql variable"
              },
              "login_port": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "ssl_cert": {
                "type": "string",
                "description": ""
              },
              "ssl_ca": {
                "type": "string",
                "description": ""
              },
              "master_ssl_key": {
                "type": "string",
                "description": "same as mysql variable"
              },
              "mode": {
                "enum": [
                  "getslave",
                  "getmaster",
                  "changemaster",
                  "stopslave",
                  "startslave",
                  "resetslave",
                  "resetslaveall"
                ],
                "type": "string",
                "description": "Default: getslave\n\nmodule operating mode. Could be getslave (SHOW SLAVE STATUS), getmaster (SHOW MASTER STATUS), changemaster (CHANGE MASTER TO), startslave (START SLAVE), stopslave (STOP SLAVE), resetslave (RESET SLAVE), resetslaveall (RESET SLAVE ALL)"
              }
            }
          },
          "ec2_vpc_net": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "tags",
                        "resource_tags"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or terminate AWS virtual private clouds.  This module has a dependency on python-boto.",
            "properties": {
              "multi_ok": {
                "description": "By default the module will not create another VPC if there is another VPC with the same name and CIDR block. Specify this as true if you want duplicate VPCs created.",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "dns_support": {
                "description": "Default: True\n\nWhether to enable AWS DNS support.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state of the VPC. Either absent or present."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "tags": {
                "type": "object",
                "description": "Default: None\n\nThe tags you want attached to the VPC. This is independent of the name value, note if you pass a 'Name' key it would override the Name of the VPC if it's different."
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "tenancy": {
                "enum": [
                  "default",
                  "dedicated"
                ],
                "type": "string",
                "description": "Default: default\n\nWhether to be default or dedicated tenancy. This cannot be changed after the VPC has been created."
              },
              "dns_hostnames": {
                "description": "Default: True\n\nWhether to enable AWS hostname support.",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "cidr_block": {
                "type": "string",
                "description": "The CIDR of the VPC"
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "The name to give your VPC. This is used in combination with the cidr_block paramater to determine if a VPC already exists."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "resource_tags": {
                "type": "object",
                "description": "Default: None\n\nThe tags you want attached to the VPC. This is independent of the name value, note if you pass a 'Name' key it would override the Name of the VPC if it's different."
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "dhcp_opts_id": {
                "type": "string",
                "description": "the id of the DHCP options to use for this vpc"
              }
            }
          },
          "zypper_repository": {
            "type": "object",
            "description": "Add or remove Zypper repositories on SUSE and openSUSE",
            "properties": {
              "description": {
                "type": "string",
                "description": "Default: none\n\nA description of the repository"
              },
              "disable_gpg_check": {
                "description": "Default: no\n\nWhether to disable GPG signature checking of all packages. Has an effect only if state is I(present).",
                "$ref": "#/definitions/ansible_truth"
              },
              "refresh": {
                "description": "Default: yes\n\nEnable autorefresh of the repository.",
                "$ref": "#/definitions/ansible_truth"
              },
              "repo": {
                "type": "string",
                "description": "Default: none\n\nURI of the repository or .repo file. Required when state=present."
              },
              "state": {
                "enum": [
                  "absent",
                  "present"
                ],
                "type": "string",
                "description": "Default: present\n\nA source string state."
              },
              "name": {
                "type": "string",
                "description": "Default: none\n\nA name for the repository. Not required when adding repofiles."
              }
            }
          },
          "os_image": {
            "type": "object",
            "description": "Add or Remove images from the OpenStack Image Repository",
            "properties": {
              "ramdisk": {
                "type": "string",
                "description": "Default: None\n\nThe name of an existing ramdisk image that will be associated with this image"
              },
              "kernel": {
                "type": "string",
                "description": "Default: None\n\nThe name of an existing kernel image that will be associated with this image"
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nName that has to be given to the image"
              },
              "container_format": {
                "type": "string",
                "description": "Default: bare\n\nThe format of the container"
              },
              "min_ram": {
                "type": "string",
                "description": "Default: None\n\nThe minimum ram (in MB) required to boot this image"
              },
              "disk_format": {
                "type": "string",
                "description": "Default: qcow2\n\nThe format of the disk that is getting uploaded"
              },
              "filename": {
                "type": "string",
                "description": "Default: None\n\nThe path to the file which has to be uploaded"
              },
              "min_disk": {
                "type": "string",
                "description": "Default: None\n\nThe minimum disk space (in GB) required to boot this image"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "owner": {
                "type": "string",
                "description": "Default: None\n\nThe owner of the image"
              },
              "is_public": {
                "type": "string",
                "description": "Default: yes\n\nWhether the image can be accessed publicly. Note that publicizing an image requires admin role by default."
              },
              "properties": {
                "type": "string",
                "description": "Additional properties to be associated with this image"
              }
            }
          },
          "rax_keypair": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create a keypair for use with Rackspace Cloud Servers",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "public_key": {
                "type": "string",
                "description": "Public Key string to upload. Can be a file path or string"
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of keypair"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "add_host": {
            "type": "object",
            "description": "Use variables to create new hosts and groups in inventory for use in later plays of the same playbook. Takes variables so you can define the new hosts more fully.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The hostname/ip of the host to add to the inventory, can include a colon and a port number."
              },
              "groups": {
                "type": "string",
                "description": "The groups to add the hostname to, comma separated."
              }
            }
          },
          "rhn_register": {
            "type": "object",
            "description": "Manage registration to the Red Hat Network.",
            "properties": {
              "username": {
                "type": "string",
                "description": "Red Hat Network username"
              },
              "server_url": {
                "type": "string",
                "description": "Default: Current value of I(serverURL) from C(/etc/sysconfig/rhn/up2date) is the default\n\nSpecify an alternative Red Hat Network server URL"
              },
              "channels": {
                "type": "string",
                "description": "Optionally specify a list of comma-separated channels to subscribe to upon successful registration."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nwhether to register (C(present)), or unregister (C(absent)) a system"
              },
              "activationkey": {
                "type": "string",
                "description": "supply an activation key for use with registration"
              },
              "profilename": {
                "type": "string",
                "description": "supply an profilename for use with registration"
              },
              "password": {
                "type": "string",
                "description": "Red Hat Network password"
              }
            }
          },
          "elasticsearch_plugin": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manages Elasticsearch plugins.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Default: None\n\nVersion of the plugin to be installed. If plugin exists with previous version, it will NOT be updated"
              },
              "url": {
                "type": "string",
                "description": "Default: None\n\nSet exact URL to download the plugin from"
              },
              "name": {
                "type": "string",
                "description": "Name of the plugin to install"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nDesired state of a plugin."
              },
              "plugin_dir": {
                "type": "string",
                "description": "Default: /usr/share/elasticsearch/plugins/\n\nYour configured plugin directory specified in Elasticsearch"
              },
              "timeout": {
                "type": "string",
                "description": "Default: 1m\n\nTimeout setting: 30s, 1m, 1h..."
              },
              "plugin_bin": {
                "type": "string",
                "description": "Default: /usr/share/elasticsearch/bin/plugin\n\nLocation of the plugin binary"
              }
            }
          },
          "ec2_eni": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create and optionally attach an Elastic Network Interface (ENI) to an instance. If an ENI ID is provided, an attempt is made to update the existing ENI. By passing 'None' as the instance_id, an ENI can be detached from an instance.",
            "properties": {
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "source_dest_check": {
                "description": "By default, interfaces perform source/destination checks. NAT instances however need this check to be disabled. You can only specify this flag when the interface is being modified, not on creation.",
                "$ref": "#/definitions/ansible_truth"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "subnet_id": {
                "type": "string",
                "description": "ID of subnet in which to create the ENI. Only required when state=present."
              },
              "device_index": {
                "description": "The index of the device for the network interface attachment on the instance.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or delete ENI."
              },
              "security_groups": {
                "description": "List of security groups associated with the interface. Only used when state=present.",
                "$ref": "#/definitions/ansible_array"
              },
              "eni_id": {
                "type": "string",
                "description": "The ID of the ENI"
              },
              "delete_on_termination": {
                "description": "Delete the interface when the instance it is attached to is terminated. You can only specify this flag when the interface is being modified, not on creation.",
                "$ref": "#/definitions/ansible_truth"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "Optional description of the ENI."
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "force_detach": {
                "description": "Force detachment of the interface. This applies either when explicitly detaching the interface by setting instance_id to None or when deleting an interface with state=absent.",
                "$ref": "#/definitions/ansible_truth"
              },
              "instance_id": {
                "type": "string",
                "description": "Instance ID that you wish to attach ENI to. To detach an ENI from an instance, use 'None'."
              },
              "private_ip_address": {
                "type": "string",
                "description": "Private IP address."
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "ec2_lc": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Can create or delete AwS Autoscaling Configurations\nWorks with the ec2_asg module to manage Autoscaling Groups",
            "properties": {
              "security_token": {
                "type": "string",
                "description": ""
              },
              "ramdisk_id": {
                "type": "string",
                "description": "A RAM disk id for the instances."
              },
              "user_data": {
                "type": "string",
                "description": "opaque blob of data which is made available to the ec2 instance"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "classic_link_vpc_id": {
                "type": "string",
                "description": "Id of ClassicLink enabled VPC"
              },
              "security_groups": {
                "description": "A list of security groups into which instances should be found",
                "$ref": "#/definitions/ansible_array"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "spot_price": {
                "type": "number",
                "description": "The spot price you are bidding. Only applies for an autoscaling group with spot instances."
              },
              "ebs_optimized": {
                "description": "Specifies whether the instance is optimized for EBS I/O (true) or not (false).",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "register or deregister the instance"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "instance_monitoring": {
                "description": "whether instances in group are launched with detailed monitoring.",
                "$ref": "#/definitions/ansible_truth"
              },
              "kernel_id": {
                "type": "string",
                "description": "Kernel id for the EC2 instance"
              },
              "key_name": {
                "type": "string",
                "description": "The SSH key name to be used for access to managed instances"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "image_id": {
                "type": "string",
                "description": "The AMI unique identifier to be used for the group"
              },
              "assign_public_ip": {
                "description": "Used for Auto Scaling groups that launch instances into an Amazon Virtual Private Cloud. Specifies whether to assign a public IP address to each instance launched in a Amazon VPC.",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "classic_link_vpc_security_groups": {
                "description": "A list of security group id's with which to associate the ClassicLink VPC instances.",
                "$ref": "#/definitions/ansible_array"
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Unique name for configuration"
              },
              "instance_profile_name": {
                "type": "string",
                "description": "The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instances."
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "instance_type": {
                "type": "string",
                "description": "instance type to use for the instance"
              },
              "volumes": {
                "description": "a list of volume dicts, each containing device name and optionally ephemeral id or snapshot id. Size and type (and number of iops for io device type) must be specified for a new volume or a root volume, and may be passed for a snapshot volume. For any volume, a volume size less than 1 will be interpreted as a request not to create the volume.",
                "$ref": "#/definitions/ansible_array"
              },
              "associate_public_ip_address": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "os_project": {
            "type": "object",
            "description": "Manage OpenStack Projects. Projects can be created, updated or deleted using this module. A project will be updated if I(name) matches an existing project and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the project.",
            "properties": {
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "enabled": {
                "type": "string",
                "description": "Default: True\n\nIs the project enabled"
              },
              "description": {
                "type": "string",
                "description": "Default: None\n\nDescription for the project"
              },
              "name": {
                "type": "string",
                "description": "Name for the project"
              },
              "domain_id": {
                "type": "string",
                "description": "Default: None\n\nDomain id to create the project in if the cloud supports domains"
              }
            }
          },
          "bzr": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "parent"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "parent"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage I(bzr) branches to deploy files or software.",
            "properties": {
              "executable": {
                "type": "string",
                "description": "Path to bzr executable to use. If not supplied, the normal mechanism for resolving binary paths will be used."
              },
              "force": {
                "description": "Default: no\n\nIf C(yes), any modified files in the working tree will be discarded.  Before 1.9 the default value was \"yes\".",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "SSH or HTTP protocol address of the parent branch."
              },
              "parent": {
                "type": "string",
                "description": "SSH or HTTP protocol address of the parent branch."
              },
              "dest": {
                "type": "string",
                "description": "Absolute path of where the branch should be cloned to."
              },
              "version": {
                "type": "string",
                "description": "Default: head\n\nWhat version of the branch to clone.  This can be the bzr revno or revid."
              }
            }
          },
          "cs_user": {
            "required": [
              "username"
            ],
            "type": "object",
            "description": "Create, update, disable, lock, enable and remove users.",
            "properties": {
              "username": {
                "type": "string",
                "description": "Username of the user."
              },
              "domain": {
                "type": "string",
                "description": "Default: ROOT\n\nDomain the user is related to."
              },
              "last_name": {
                "type": "string",
                "description": "Last name of the user.\nRequired on C(state=present)."
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "account": {
                "type": "string",
                "description": "Account the user will be created under.\nRequired on C(state=present)."
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "enabled",
                  "disabled",
                  "locked",
                  "unlocked"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the user.\nC(unlocked) is an alias for C(enabled)."
              },
              "first_name": {
                "type": "string",
                "description": "First name of the user.\nRequired on C(state=present)."
              },
              "timezone": {
                "type": "string",
                "description": "Timezone of the user."
              },
              "password": {
                "type": "string",
                "description": "Password of the user to be created.\nRequired on C(state=present).\nOnly considered on creation and will not be updated if user exists."
              },
              "email": {
                "type": "string",
                "description": "Email of the user.\nRequired on C(state=present)."
              }
            }
          },
          "cs_loadbalancer_rule": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "tags",
                        "tag"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ip_address",
                        "public_ip"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "ip_address"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "public_ip"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add, update and remove load balancer rules.",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain the rule is related to."
              },
              "protocol": {
                "type": "string",
                "description": "The protocol to be used on the load balancer"
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "public_ip": {
                "type": "string",
                "description": "Public IP address from where the network traffic will be load balanced from."
              },
              "private_port": {
                "description": "The private port of the private ip address/virtual machine where the network traffic will be load balanced to.\nRequired when using C(state=present).\nCan not be changed once the rule exists due API limitation.",
                "$ref": "#/definitions/ansible_number"
              },
              "tag": {
                "description": "",
                "$ref": "#/definitions/ansible_array"
              },
              "poll_async": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone in which the rule shoud be created.\nIf not set, default zone is used."
              },
              "public_port": {
                "description": "The public port from where the network traffic will be load balanced from.\nRequired when using C(state=present).\nCan not be changed once the rule exists due API limitation.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the rule."
              },
              "algorithm": {
                "enum": [
                  "source",
                  "roundrobin",
                  "leastconn"
                ],
                "type": "string",
                "description": "Default: source\n\nLoad balancer algorithm\nRequired when using C(state=present)."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "The description of the load balancer rule."
              },
              "tags": {
                "description": "",
                "$ref": "#/definitions/ansible_array"
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "cidr": {
                "type": "string",
                "description": "CIDR (full notation) to be used for firewall rule if required."
              },
              "ip_address": {
                "type": "string",
                "description": "Public IP address from where the network traffic will be load balanced from."
              },
              "account": {
                "type": "string",
                "description": "Account the rule is related to."
              },
              "name": {
                "type": "string",
                "description": "The name of the load balancer rule."
              },
              "open_firewall": {
                "description": "Whether the firewall rule for public port should be created, while creating the new rule.\nUse M(cs_firewall) for managing firewall rules.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the load balancer IP address is related to."
              }
            }
          },
          "vmware_dvswitch": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or remove a distributed vSwitch",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "datacenter_name": {
                "type": "string",
                "description": "The name of the datacenter that will contain the dvSwitch"
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter API server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "discovery_proto": {
                "enum": [
                  "cdp",
                  "lldp"
                ],
                "type": "string",
                "description": "Link discovery protocol between Cisco and Link Layer discovery"
              },
              "mtu": {
                "description": "The switch maximum transmission unit",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or remove dvSwitch"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "discovery_operation": {
                "enum": [
                  "both",
                  "none",
                  "advertise",
                  "listen"
                ],
                "type": "string",
                "description": "Select the discovery operation"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "switch_name": {
                "type": "string",
                "description": "The name of the switch to create or remove"
              },
              "uplink_quantity": {
                "description": "Quantity of uplink per ESXi host added to the switch",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "cs_firewall": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "start_port",
                        "port"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates and removes firewall rules.",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain the firewall rule is related to."
              },
              "protocol": {
                "enum": [
                  "tcp",
                  "udp",
                  "icmp",
                  "all"
                ],
                "type": "string",
                "description": "Default: tcp\n\nProtocol of the firewall rule.\nC(all) is only available if C(type=egress)"
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "end_port": {
                "description": "End port for this rule. Considered if C(protocol=tcp) or C(protocol=udp). If not specified, equal C(start_port).",
                "$ref": "#/definitions/ansible_number"
              },
              "icmp_type": {
                "description": "Type of the icmp message being sent. Considered if C(protocol=icmp).",
                "$ref": "#/definitions/ansible_number"
              },
              "port": {
                "description": "Start port for this rule. Considered if C(protocol=tcp) or C(protocol=udp).",
                "$ref": "#/definitions/ansible_number"
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "network": {
                "type": "string",
                "description": "Network the egress rule is related to.\nRequired if C(type=egress)."
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone in which the virtual machine is in.\nIf not set, default zone is used."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the firewall rule."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "type": {
                "enum": [
                  "ingress",
                  "egress"
                ],
                "type": "string",
                "description": "Default: ingress\n\nType of the firewall rule."
              },
              "icmp_code": {
                "description": "Error code for this icmp message. Considered if C(protocol=icmp).",
                "$ref": "#/definitions/ansible_number"
              },
              "start_port": {
                "description": "Start port for this rule. Considered if C(protocol=tcp) or C(protocol=udp).",
                "$ref": "#/definitions/ansible_number"
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "cidr": {
                "type": "string",
                "description": "Default: 0.0.0.0/0\n\nCIDR (full notation) to be used for firewall rule."
              },
              "ip_address": {
                "type": "string",
                "description": "Public IP address the ingress rule is assigned to.\nRequired if C(type=ingress)."
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "account": {
                "type": "string",
                "description": "Account the firewall rule is related to."
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the firewall rule is related to."
              }
            }
          },
          "ec2_vpc_subnet": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "tags",
                        "resource_tags"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage subnets in AWS virtual private clouds",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "az": {
                "type": "string",
                "description": "The availability zone for the subnet. Only required when state=present."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "tags": {
                "type": "object",
                "description": "A dict of tags to apply to the subnet. Any tags currently applied to the subnet and not present here will be removed."
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "vpc_id": {
                "type": "string",
                "description": "VPC ID of the VPC in which to create the subnet."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or remove the subnet"
              },
              "resource_tags": {
                "type": "object",
                "description": "A dict of tags to apply to the subnet. Any tags currently applied to the subnet and not present here will be removed."
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "cidr": {
                "type": "string",
                "description": "The CIDR block for the subnet. E.g. 10.0.0.0/16. Only required when state=present."
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "os_server_actions": {
            "type": "object",
            "description": "Perform server actions on an existing compute instance from OpenStack. This module does not return any data other than changed true/false.",
            "properties": {
              "action": {
                "type": "string",
                "description": "Default: present\n\nPerform the given action. The lock and unlock actions always return changed as the servers API does not provide lock status."
              },
              "wait": {
                "type": "string",
                "description": "Default: yes\n\nIf the module should wait for the instance action to be performed."
              },
              "timeout": {
                "type": "string",
                "description": "Default: 180\n\nThe amount of time the module should wait for the instance to perform the requested action."
              },
              "server": {
                "type": "string",
                "description": "Name or ID of the instance"
              }
            }
          },
          "rax_clb_nodes": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds, modifies and removes nodes from a Rackspace Cloud Load Balancer",
            "properties": {
              "weight": {
                "description": "Weight of node",
                "$ref": "#/definitions/ansible_number"
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "port": {
                "description": "Port number of the load balanced service on the node",
                "$ref": "#/definitions/ansible_number"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "virtualenv": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the node"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "load_balancer_id": {
                "description": "Load balancer id",
                "$ref": "#/definitions/ansible_number"
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "type": {
                "enum": [
                  "primary",
                  "secondary"
                ],
                "type": "string",
                "description": "Type of node"
              },
              "username": {
                "type": "string",
                "description": ""
              },
              "wait_timeout": {
                "description": "Default: 30\n\nHow long to wait before giving up and returning an error",
                "$ref": "#/definitions/ansible_number"
              },
              "address": {
                "type": "string",
                "description": "IP address or domain name of the node"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "condition": {
                "enum": [
                  "enabled",
                  "disabled",
                  "draining"
                ],
                "type": "string",
                "description": "Condition for the node, which determines its role within the load balancer"
              },
              "wait": {
                "description": "Default: no\n\nWait for the load balancer to become active before returning",
                "$ref": "#/definitions/ansible_truth"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "node_id": {
                "description": "Node id",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "mysql_db": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "db"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "db"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add or remove MySQL databases from a remote host.",
            "properties": {
              "ssl_key": {
                "type": "string",
                "description": ""
              },
              "ssl_cert": {
                "type": "string",
                "description": ""
              },
              "config_file": {
                "type": "string",
                "description": ""
              },
              "target": {
                "type": "string",
                "description": "Location, on the remote host, of the dump file to read from or write to. Uncompressed SQL files (C(.sql)) as well as bzip2 (C(.bz2)), gzip (C(.gz)) and xz (Added in 2.0) compressed files are supported."
              },
              "encoding": {
                "type": "string",
                "description": "Encoding mode"
              },
              "login_user": {
                "type": "string",
                "description": ""
              },
              "login_host": {
                "type": "string",
                "description": ""
              },
              "db": {
                "type": "string",
                "description": "name of the database to add or remove\nname=all May only be provided if I(state) is C(dump) or C(import).\nif name=all Works like --all-databases option for mysqldump (Added in 2.0)"
              },
              "ssl_ca": {
                "type": "string",
                "description": ""
              },
              "login_unix_socket": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "dump",
                  "import"
                ],
                "type": "string",
                "description": "Default: present\n\nThe database state"
              },
              "login_port": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "login_password": {
                "type": "string",
                "description": ""
              },
              "collation": {
                "type": "string",
                "description": "Collation mode (sorting). This only applies to new table/databases and does not update existing ones, this is a limitation of MySQL."
              },
              "name": {
                "type": "string",
                "description": "name of the database to add or remove\nname=all May only be provided if I(state) is C(dump) or C(import).\nif name=all Works like --all-databases option for mysqldump (Added in 2.0)"
              }
            }
          },
          "taiga_issue": {
            "required": [
              "project",
              "issue_type",
              "subject"
            ],
            "type": "object",
            "description": "Creates/deletes an issue in a Taiga Project Management Platform (U(https://taiga.io)).\nAn issue is identified by the combination of project, issue subject and issue type.\nThis module implements the creation or deletion of issues (not the update).",
            "properties": {
              "status": {
                "type": "string",
                "description": "Default: New\n\nThe issue status. Must exist previously."
              },
              "project": {
                "type": "string",
                "description": "Name of the project containing the issue. Must exist previously."
              },
              "description": {
                "type": "string",
                "description": "The issue description."
              },
              "tags": {
                "description": "A lists of tags to be assigned to the issue.",
                "$ref": "#/definitions/ansible_array"
              },
              "priority": {
                "type": "string",
                "description": "Default: Normal\n\nThe issue priority. Must exist previously."
              },
              "taiga_host": {
                "type": "string",
                "description": "Default: https://api.taiga.io\n\nThe hostname of the Taiga instance."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the issue should be present or not."
              },
              "attachment": {
                "type": "string",
                "description": "Default: None\n\nPath to a file to be attached to the issue."
              },
              "issue_type": {
                "type": "string",
                "description": "The issue type. Must exist previously."
              },
              "subject": {
                "type": "string",
                "description": "The issue subject."
              },
              "attachment_description": {
                "type": "string",
                "description": "A string describing the file to be attached to the issue."
              },
              "severity": {
                "type": "string",
                "description": "Default: Normal\n\nThe issue severity. Must exist previously."
              }
            }
          },
          "bigip_monitor_http": {
            "type": "object",
            "description": "Manages F5 BIG-IP LTM monitors via iControl SOAP API",
            "properties": {
              "parent_partition": {
                "type": "string",
                "description": "Default: Common\n\nPartition for the parent monitor"
              },
              "partition": {
                "type": "string",
                "description": "Default: Common\n\nPartition for the monitor"
              },
              "receive_disable": {
                "type": "string",
                "description": "Default: none\n\nThe receive disable string for the monitor call"
              },
              "parent": {
                "type": "string",
                "description": "Default: http\n\nThe parent template of this monitor template"
              },
              "receive": {
                "type": "string",
                "description": "Default: none\n\nThe receive string for the monitor call"
              },
              "ip": {
                "type": "string",
                "description": "Default: none\n\nIP address part of the ipport definition. The default API setting is \"0.0.0.0\"."
              },
              "interval": {
                "type": "string",
                "description": "Default: none\n\nThe interval specifying how frequently the monitor instance of this template will run. By default, this interval is used for up and down states. The default API setting is 5."
              },
              "send": {
                "type": "string",
                "description": "Default: none\n\nThe send string for the monitor call"
              },
              "server": {
                "type": "string",
                "description": "BIG-IP host"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nMonitor state"
              },
              "time_until_up": {
                "type": "string",
                "description": "Default: none\n\nSpecifies the amount of time in seconds after the first successful response before a node will be marked up. A value of 0 will cause a node to be marked up immediately after a valid response is received from the node. The default API setting is 0."
              },
              "user": {
                "type": "string",
                "description": "BIG-IP username"
              },
              "timeout": {
                "type": "string",
                "description": "Default: none\n\nThe number of seconds in which the node or service must respond to the monitor request. If the target responds within the set time period, it is considered up. If the target does not respond within the set time period, it is considered down. You can change this number to any number you want, however, it should be 3 times the interval number of seconds plus 1 second. The default API setting is 16."
              },
              "password": {
                "type": "string",
                "description": "BIG-IP password"
              },
              "validate_certs": {
                "type": "string",
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8"
              },
              "port": {
                "type": "string",
                "description": "Default: none\n\nport address part op the ipport definition. The default API setting is 0."
              },
              "name": {
                "type": "string",
                "description": "Monitor name"
              }
            }
          },
          "rax_cbs": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manipulate Rackspace Cloud Block Storage Volumes",
            "properties": {
              "size": {
                "description": "Default: 100\n\nSize of the volume to create in Gigabytes",
                "$ref": "#/definitions/ansible_number"
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "image": {
                "type": "string",
                "description": "image to use for bootable volumes. Can be an C(id), C(human_id) or C(name). This option requires C(pyrax>=1.9.3)"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "meta": {
                "type": "object",
                "description": "A hash of metadata to associate with the volume"
              },
              "snapshot_id": {
                "type": "string",
                "description": "The id of the snapshot to create the volume from"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "username": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "Description to give the volume being created"
              },
              "wait_timeout": {
                "description": "Default: 300\n\nhow long before wait gives up, in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Default: no\n\nwait for the volume to be in state 'available' before returning",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "Name to give the volume being created"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "volume_type": {
                "enum": [
                  "SATA",
                  "SSD"
                ],
                "type": "string",
                "description": "Default: SATA\n\nType of the volume being created"
              }
            }
          },
          "blockinfile": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "name",
                        "destfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "destfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "block",
                        "content"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will insert/update/remove a block of multi-line text surrounded by customizable marker lines.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The file to modify."
              },
              "insertbefore": {
                "type": "string",
                "description": "Default: None\n\nIf specified, the block will be inserted before the last match of specified regular expression. A special value is available; C(BOF) for inserting the block at the beginning of the file.  If specified regular expresion has no matches, the block will be inserted at the end of the file."
              },
              "dest": {
                "type": "string",
                "description": "The file to modify."
              },
              "create": {
                "description": "Default: no\n\nCreate a new file if it doesn't exist.",
                "$ref": "#/definitions/ansible_truth"
              },
              "destfile": {
                "type": "string",
                "description": "The file to modify."
              },
              "content": {
                "type": "string",
                "description": "The text to insert inside the marker lines. If it's missing or an empty string, the block will be removed as if C(state) were specified to C(absent)."
              },
              "marker": {
                "type": "string",
                "description": "Default: # {mark} ANSIBLE MANAGED BLOCK\n\nThe marker line template. \"{mark}\" will be replaced with \"BEGIN\" or \"END\"."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the block should be there or not."
              },
              "insertafter": {
                "type": "string",
                "description": "Default: EOF\n\nIf specified, the block will be inserted after the last match of specified regular expression. A special value is available; C(EOF) for inserting the block at the end of the file.  If specified regular expresion has no matches, C(EOF) will be used instead."
              },
              "validate": {
                "type": "string",
                "description": ""
              },
              "backup": {
                "description": "Default: no\n\nCreate a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
                "$ref": "#/definitions/ansible_truth"
              },
              "block": {
                "type": "string",
                "description": "The text to insert inside the marker lines. If it's missing or an empty string, the block will be removed as if C(state) were specified to C(absent)."
              }
            }
          },
          "bigip_gtm_wide_ip": {
            "required": [
              "lb_method",
              "password",
              "wide_ip",
              "user",
              "server"
            ],
            "type": "object",
            "description": "Manages F5 BIG-IP GTM wide ip",
            "properties": {
              "password": {
                "type": "string",
                "description": "BIG-IP password"
              },
              "lb_method": {
                "enum": [
                  "return_to_dns",
                  "null",
                  "round_robin",
                  "ratio",
                  "topology",
                  "static_persist",
                  "global_availability",
                  "vs_capacity",
                  "least_conn",
                  "lowest_rtt",
                  "lowest_hops",
                  "packet_rate",
                  "cpu",
                  "hit_ratio",
                  "qos",
                  "bps",
                  "drop_packet",
                  "explicit_ip",
                  "connection_rate",
                  "vs_score"
                ],
                "type": "string",
                "description": "LB method of wide ip"
              },
              "wide_ip": {
                "type": "string",
                "description": "Wide IP name"
              },
              "user": {
                "type": "string",
                "description": "BIG-IP username"
              },
              "server": {
                "type": "string",
                "description": "BIG-IP host"
              }
            }
          },
          "pause": {
            "type": "object",
            "description": "Pauses playbook execution for a set amount of time, or until a prompt is acknowledged. All parameters are optional. The default behavior is to pause with a prompt.\nYou can use C(ctrl+c) if you wish to advance a pause earlier than it is set to expire or if you need to abort a playbook run entirely. To continue early: press C(ctrl+c) and then C(c). To abort a playbook: press C(ctrl+c) and then C(a).\nThe pause module integrates into async/parallelized playbooks without any special considerations (see also: Rolling Updates). When using pauses with the C(serial) playbook parameter (as in rolling updates) you are only prompted once for the current group of hosts.",
            "properties": {
              "host": {
                "type": "string",
                "description": ""
              },
              "connect_timeout": {
                "type": "string",
                "description": ""
              },
              "delay": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "started",
                  "stopped",
                  "present",
                  "absent",
                  "drained"
                ],
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "exclude_hosts": {
                "description": "",
                "$ref": "#/definitions/ansible_array"
              },
              "search_regex": {
                "type": "string",
                "description": ""
              },
              "path": {
                "type": "string",
                "description": ""
              },
              "port": {
                "type": "string",
                "description": ""
              }
            }
          },
          "openvswitch_db": {
            "required": [
              "key",
              "value",
              "record",
              "table",
              "col"
            ],
            "type": "object",
            "description": "Set column values in record in database table.",
            "properties": {
              "key": {
                "type": "string",
                "description": "Identifies the key in the record column"
              },
              "value": {
                "type": "string",
                "description": "Expected value for the table, record, column and key."
              },
              "record": {
                "type": "string",
                "description": "Identifies the recoard in the table."
              },
              "timeout": {
                "description": "Default: 5\n\nHow long to wait for ovs-vswitchd to respond",
                "$ref": "#/definitions/ansible_number"
              },
              "table": {
                "type": "string",
                "description": "Identifies the table in the database."
              },
              "col": {
                "type": "string",
                "description": ""
              }
            }
          },
          "layman": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "list_url",
                        "url"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Uses Layman to manage an additional repositories for the Portage package manager on Gentoo Linux. Please note that Layman must be installed on a managed node prior using this module.",
            "properties": {
              "url": {
                "type": "string",
                "description": "An URL of the alternative overlays list that defines the overlay to install. This list will be fetched and saved under C(${overlay_defs})/${name}.xml), where C(overlay_defs) is readed from the Layman's configuration."
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "updated"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to install (C(present)), sync (C(updated)), or uninstall (C(absent)) the overlay."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be set to C(no) when no other option exists.  Prior to 1.9.3 the code defaulted to C(no).",
                "$ref": "#/definitions/ansible_truth"
              },
              "list_url": {
                "type": "string",
                "description": "An URL of the alternative overlays list that defines the overlay to install. This list will be fetched and saved under C(${overlay_defs})/${name}.xml), where C(overlay_defs) is readed from the Layman's configuration."
              },
              "name": {
                "type": "string",
                "description": "The overlay id to install, synchronize, or uninstall. Use 'ALL' to sync all of the installed overlays (can be used only when C(state=updated))."
              }
            }
          },
          "win_iis_webapppool": {
            "type": "object",
            "description": "Creates, Removes and configures a IIS Web Application Pool",
            "properties": {
              "attributes": {
                "type": "string",
                "description": "Application Pool attributes from string where attributes are seperated by a pipe and attribute name/values by colon Ex. \"foo:1|bar:2\""
              },
              "state": {
                "type": "string",
                "description": "State of the binding"
              },
              "name": {
                "type": "string",
                "description": "Names of application pool"
              }
            }
          },
          "ec2_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "thirsty"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module fetches data from the metadata servers in ec2 (aws) as per http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html. The module must be called from within the EC2 instance itself.",
            "properties": {
              "url_password": {
                "type": "string",
                "description": ""
              },
              "force": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "use_proxy": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "thirsty": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "url": {
                "type": "string",
                "description": ""
              },
              "force_basic_auth": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "http_agent": {
                "type": "string",
                "description": ""
              },
              "url_username": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "client_cert": {
                "type": "string",
                "description": ""
              },
              "client_key": {
                "type": "string",
                "description": ""
              }
            }
          },
          "iptables": {
            "required": [
              "chain"
            ],
            "type": "object",
            "description": "Iptables is used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel. This module does not handle the saving and/or loading of rules, but rather only manipulates the current rules that are present in memory. This is the same as the behaviour of the \"iptables\" and \"ip6tables\" command which this module uses internally.",
            "properties": {
              "comment": {
                "type": "string",
                "description": "This specifies a comment that will be added to the rule"
              },
              "set_counters": {
                "type": "string",
                "description": "This enables the administrator to initialize the packet and byte counters of a rule (during INSERT, APPEND, REPLACE operations)."
              },
              "goto": {
                "type": "string",
                "description": "This specifies that the processing should continue in a user specified chain. Unlike the jump argument return will not continue processing in this chain but instead in the chain that called us via jump."
              },
              "chain": {
                "type": "string",
                "description": "Chain to operate on. This option can either be the name of a user defined chain or any of the builtin chains: 'INPUT', 'FORWARD', 'OUTPUT', 'PREROUTING', 'POSTROUTING', 'SECMARK', 'CONNSECMARK'"
              },
              "in_interface": {
                "type": "string",
                "description": "Name of an interface via which a packet was received (only for packets entering the INPUT, FORWARD and PREROUTING chains). When the \"!\" argument is used before the interface name, the sense is inverted. If the interface name ends in a \"+\", then any interface which begins with this name will match. If this option is omitted, any interface name will match."
              },
              "fragment": {
                "type": "string",
                "description": "This means that the rule only refers to second and further fragments of fragmented packets. Since there is no way to tell the source or destination ports of such a packet (or ICMP type), such a packet will not match any rules which specify them. When the \"!\" argument precedes fragment argument, the rule will only match head fragments, or unfragmented packets."
              },
              "out_interface": {
                "type": "string",
                "description": "Name of an interface via which a packet is going to be sent (for packets entering the FORWARD, OUTPUT and POSTROUTING chains). When the \"!\" argument is used before the interface name, the sense is inverted. If the interface name ends in a \"+\", then any interface which begins with this name will match. If this option is omitted, any interface name will match."
              },
              "destination": {
                "type": "string",
                "description": "Destination specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A \"!\" argument before the address specification inverts the sense of the address.Source specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A \"!\" argument before the address specification inverts the sense of the address."
              },
              "protocol": {
                "type": "string",
                "description": "The protocol of the rule or of the packet to check. The specified protocol can be one of tcp, udp, udplite, icmp, esp, ah, sctp or the special keyword \"all\", or it can be a numeric value, representing one of these protocols or a different one. A protocol name from /etc/protocols is also allowed. A \"!\" argument before the protocol inverts the test.  The number zero is equivalent to all. \"all\" will match with all protocols and is taken as default when this option is omitted."
              },
              "ctstate": {
                "description": "ctstate is a list of the connection states to match in the conntrack module. Possible states are: 'INVALID', 'NEW', 'ESTABLISHED', 'RELATED', 'UNTRACKED', 'SNAT', 'DNAT'",
                "$ref": "#/definitions/ansible_array"
              },
              "jump": {
                "type": "string",
                "description": "This specifies the target of the rule; i.e., what to do if the packet matches it. The target can be a user-defined chain (other than the one this rule is in), one of the special builtin targets which decide the fate of the packet immediately, or an extension (see EXTENSIONS below).  If this option is omitted in a rule (and the goto paramater is not used), then matching the rule will have no effect on the packet's fate, but the counters on the rule will be incremented."
              },
              "source": {
                "type": "string",
                "description": "Source specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A \"!\" argument before the address specification inverts the sense of the address.Source specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address.  Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A \"!\" argument before the address specification inverts the sense of the address."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the rule should be absent or present."
              },
              "limit": {
                "type": "string",
                "description": "Specifies the maximum average number of matches to allow per second. The number can specify units explicitly, using `/second', `/minute', `/hour' or `/day', or parts of them (so `5/second' is the same as `5/s')."
              },
              "to_ports": {
                "type": "string",
                "description": "This specifies a destination port or range of ports to use: without this, the destination port is never altered. This is only valid if the rule also specifies one of the following protocols: tcp, udp, dccp or sctp."
              },
              "source_port": {
                "type": "string",
                "description": "Source port or port range specification. This can either be a service name or a port number. An inclusive range can also be specified, using the format first:last. If the first port is omitted, '0' is assumed; if the last is omitted, '65535' is assumed. If the first port is greater than the second one they will be swapped."
              },
              "table": {
                "enum": [
                  "filter",
                  "nat",
                  "mangle",
                  "raw",
                  "security"
                ],
                "type": "string",
                "description": "Default: filter\n\nThis option specifies the packet matching table which the command should operate on. If the kernel is configured with automatic module loading, an attempt will be made to load the appropriate module for that table if it is not already there."
              },
              "destination_port": {
                "type": "string",
                "description": "Destination port or port range specification. This can either be a service name or a port number. An inclusive range can also be specified, using the format first:last. If the first port is omitted, '0' is assumed; if the last is omitted, '65535' is assumed. If the first port is greater than the second one they will be swapped."
              },
              "ip_version": {
                "enum": [
                  "ipv4",
                  "ipv6"
                ],
                "type": "string",
                "description": "Default: ipv4\n\nWhich version of the IP protocol this rule should apply to."
              },
              "match": {
                "description": "Specifies a match to use, that is, an extension module that tests for a specific property. The set of matches make up the condition under which a target is invoked. Matches are evaluated first to last if specified as an array and work in short-circuit fashion, i.e. if one extension yields false, evaluation will stop.",
                "$ref": "#/definitions/ansible_array"
              }
            }
          },
          "rax_scaling_group": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manipulate Rackspace Cloud Autoscale Groups",
            "properties": {
              "files": {
                "type": "object",
                "description": "Files to insert into the instance. Hash of C(remotepath: localpath)"
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "image": {
                "type": "string",
                "description": "image to use for the instance. Can be an C(id), C(human_id) or C(name)"
              },
              "user_data": {
                "type": "string",
                "description": "Data to be uploaded to the servers config drive. This option implies I(config_drive). Can be a file path or a string"
              },
              "min_entities": {
                "description": "The minimum number of entities that are allowed in the scaling group. Must be an integer between 0 and 1000.",
                "$ref": "#/definitions/ansible_number"
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "cooldown": {
                "description": "The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).",
                "$ref": "#/definitions/ansible_number"
              },
              "flavor": {
                "type": "string",
                "description": "flavor to use for the instance"
              },
              "networks": {
                "description": "Default: ['public', 'private']\n\nThe network to attach to the instances. If specified, you must include ALL networks including the public and private interfaces. Can be C(id) or C(label).",
                "$ref": "#/definitions/ansible_array"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "max_entities": {
                "description": "The maximum number of entities that are allowed in the scaling group. Must be an integer between 0 and 1000.",
                "$ref": "#/definitions/ansible_number"
              },
              "server_name": {
                "type": "string",
                "description": "The base name for servers created by Autoscale"
              },
              "loadbalancers": {
                "description": "List of load balancer C(id) and C(port) hashes",
                "$ref": "#/definitions/ansible_array"
              },
              "disk_config": {
                "enum": [
                  "auto",
                  "manual"
                ],
                "type": "string",
                "description": "Default: auto\n\nDisk partitioning strategy"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "config_drive": {
                "description": "Attach read-only configuration drive to server as label config-2",
                "$ref": "#/definitions/ansible_truth"
              },
              "username": {
                "type": "string",
                "description": ""
              },
              "key_name": {
                "type": "string",
                "description": "key pair to use on the instance"
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 300\n\nhow long before wait gives up, in seconds"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Default: no\n\nwait for the scaling group to finish provisioning the minimum amount of servers",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "Name to give the scaling group"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "meta": {
                "type": "object",
                "description": "A hash of metadata to associate with the instance"
              }
            }
          },
          "rax_mon_entity": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or delete a Rackspace Cloud Monitoring entity, which represents a device to monitor. Entities associate checks and alarms with a target system and provide a convenient, centralized place to store IP addresses. Rackspace monitoring module flow | *rax_mon_entity* -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "label": {
                "type": "string",
                "description": "Defines a name for this entity. Must be a non-empty string between 1 and 255 characters long."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Ensure that an entity with this C(name) exists or does not exist."
              },
              "agent_id": {
                "type": "string",
                "description": "Rackspace monitoring agent on the target device to which this entity is bound. Necessary to collect C(agent.) rax_mon_checks against this entity."
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "named_ip_addresses": {
                "type": "object",
                "description": "Hash of IP addresses that may be referenced by name by rax_mon_checks added to this entity. Must be a dictionary of with keys that are names between 1 and 64 characters long, and values that are valid IPv4 or IPv6 addresses."
              },
              "metadata": {
                "type": "object",
                "description": "Hash of arbitrary C(name), C(value) pairs that are passed to associated rax_mon_alarms. Names and values must all be between 1 and 255 characters long."
              }
            }
          },
          "ec2_eni_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gather facts about ec2 ENI interfaces in AWS",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "filters": {
                "type": "object",
                "description": "A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNetworkInterfaces.html) for possible filters."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "webfaction_db": {
            "required": [
              "name",
              "login_password",
              "type",
              "login_name"
            ],
            "type": "object",
            "description": "Add or remove a database on a Webfaction host. Further documentation at http://github.com/quentinsf/ansible-webfaction.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the database"
              },
              "machine": {
                "type": "string",
                "description": "The machine name to use (optional for accounts with only one machine)"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the database should exist"
              },
              "login_password": {
                "type": "string",
                "description": "The webfaction password to use"
              },
              "password": {
                "type": "string",
                "description": "Default: None\n\nThe password for the new database user."
              },
              "type": {
                "type": "string",
                "description": "The type of database to create."
              },
              "login_name": {
                "type": "string",
                "description": "The webfaction account to use"
              }
            }
          },
          "twilio": {
            "required": [
              "from_number",
              "msg",
              "auth_token",
              "to_number",
              "account_sid"
            ],
            "type": "object",
            "description": "Sends a text message to a phone number through the Twilio messaging API.",
            "properties": {
              "auth_token": {
                "type": "string",
                "description": "user's Twilio authentication token"
              },
              "to_number": {
                "type": "string",
                "description": "one or more phone numbers to send the text message to, format +15551112222"
              },
              "account_sid": {
                "type": "string",
                "description": "user's Twilio account token found on the account page"
              },
              "from_number": {
                "type": "string",
                "description": "the Twilio number to send the text message from, format +15551112222"
              },
              "msg": {
                "type": "string",
                "description": "the body of the text message"
              },
              "media_url": {
                "type": "string",
                "description": "a URL with a picture, video or sound clip to send with an MMS (multimedia message) instead of a plain SMS"
              }
            }
          },
          "gem": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "repository",
                        "source"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage installation and uninstallation of Ruby gems.",
            "properties": {
              "include_dependencies": {
                "description": "Default: yes\n\nWhether to include dependencies or not.",
                "$ref": "#/definitions/ansible_truth"
              },
              "executable": {
                "type": "string",
                "description": "Override the path to the gem executable"
              },
              "name": {
                "type": "string",
                "description": "The name of the gem to be managed."
              },
              "repository": {
                "type": "string",
                "description": "The repository from which the gem will be installed"
              },
              "build_flags": {
                "type": "string",
                "description": "Allow adding build flags for gem compilation"
              },
              "include_doc": {
                "description": "Default: no\n\nInstall with or without docs.",
                "$ref": "#/definitions/ansible_truth"
              },
              "user_install": {
                "description": "Default: yes\n\nInstall gem in user's local gems cache or for all users",
                "$ref": "#/definitions/ansible_truth"
              },
              "pre_release": {
                "description": "Default: no\n\nAllow installation of pre-release versions of the gem.",
                "$ref": "#/definitions/ansible_truth"
              },
              "source": {
                "type": "string",
                "description": "The repository from which the gem will be installed"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "latest"
                ],
                "type": "string",
                "description": "Default: present\n\nThe desired state of the gem. C(latest) ensures that the latest version is installed."
              },
              "version": {
                "type": "string",
                "description": "Version of the gem to be installed/removed."
              },
              "gem_source": {
                "type": "string",
                "description": "The path to a local gem used as installation source."
              }
            }
          },
          "osx_say": {
            "required": [
              "msg"
            ],
            "type": "object",
            "description": "makes an OS computer speak!  Amuse your friends, annoy your coworkers!",
            "properties": {
              "msg": {
                "type": "string",
                "description": "What to say"
              },
              "voice": {
                "type": "string",
                "description": "What voice to use"
              }
            }
          },
          "quantum_router": {
            "required": [
              "login_password",
              "name"
            ],
            "type": "object",
            "description": "Create or Delete routers from OpenStack",
            "properties": {
              "region_name": {
                "type": "string",
                "description": "Default: None\n\nName of the region"
              },
              "admin_state_up": {
                "description": "Default: True\n\ndesired admin state of the created router .",
                "$ref": "#/definitions/ansible_truth"
              },
              "tenant_name": {
                "type": "string",
                "description": "Default: None\n\nName of the tenant for which the router has to be created, if none router would be created for the login tenant."
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "login_tenant_name": {
                "type": "string",
                "description": "Default: yes\n\nThe tenant name of the login user"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "auth_url": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nThe keystone url for authentication"
              },
              "login_password": {
                "type": "string",
                "description": "Default: yes\n\nPassword of login user"
              },
              "login_username": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "name": {
                "type": "string",
                "description": "Default: None\n\nName to be give to the router"
              }
            }
          },
          "pagerduty": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "service",
                        "services"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will let you create PagerDuty maintenance windows",
            "properties": {
              "name": {
                "type": "string",
                "description": "PagerDuty unique subdomain."
              },
              "service": {
                "description": "A comma separated list of PagerDuty service IDs.",
                "$ref": "#/definitions/ansible_array"
              },
              "passwd": {
                "type": "string",
                "description": "PagerDuty user password."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "running",
                  "started",
                  "ongoing",
                  "absent"
                ],
                "type": "string",
                "description": "Create a maintenance window or get a list of ongoing windows."
              },
              "hours": {
                "type": "string",
                "description": "Default: 1\n\nLength of maintenance window in hours."
              },
              "token": {
                "type": "string",
                "description": "A pagerduty token, generated on the pagerduty site. Can be used instead of user/passwd combination."
              },
              "user": {
                "type": "string",
                "description": "PagerDuty user ID."
              },
              "services": {
                "description": "A comma separated list of PagerDuty service IDs.",
                "$ref": "#/definitions/ansible_array"
              },
              "requester_id": {
                "type": "string",
                "description": "ID of user making the request. Only needed when using a token and creating a maintenance_window."
              },
              "minutes": {
                "type": "string",
                "description": "Maintenance window in minutes (this is added to the hours)."
              },
              "desc": {
                "type": "string",
                "description": "Default: Created by Ansible\n\nShort description of maintenance window."
              }
            }
          },
          "pkgng": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage binary packages for FreeBSD using 'pkgng' which is available in versions after 9.0.",
            "properties": {
              "name": {
                "description": "name of package to install/remove",
                "$ref": "#/definitions/ansible_array"
              },
              "cached": {
                "description": "use local package base or try to fetch an updated one",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkgsite": {
                "type": "string",
                "description": "for pkgng versions before 1.1.4, specify packagesite to use for downloading packages, if not specified, use settings from /usr/local/etc/pkg.conf for newer pkgng versions, specify a the name of a repository configured in /usr/local/etc/pkg/repos"
              },
              "rootdir": {
                "type": "string",
                "description": "for pkgng versions 1.5 and later, pkg will install all packages within the specified root directory"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nstate of the package"
              },
              "pkg": {
                "description": "name of package to install/remove",
                "$ref": "#/definitions/ansible_array"
              },
              "annotation": {
                "type": "string",
                "description": "a comma-separated list of keyvalue-pairs of the form <+/-/:><key>[=<value>]. A '+' denotes adding an annotation, a '-' denotes removing an annotation, and ':' denotes modifying an annotation. If setting or modifying annotations, a value must be provided."
              }
            }
          },
          "patch": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "src",
                        "patchfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "src"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "patchfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dest",
                        "originalfile"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Apply patch files using the GNU patch tool.",
            "properties": {
              "src": {
                "type": "string",
                "description": "Path of the patch file as accepted by the GNU patch tool. If C(remote_src) is 'no', the patch source file is looked up from the module's \"files\" directory."
              },
              "patchfile": {
                "type": "string",
                "description": "Path of the patch file as accepted by the GNU patch tool. If C(remote_src) is 'no', the patch source file is looked up from the module's \"files\" directory."
              },
              "remote_src": {
                "description": "Default: no\n\nIf C(no), it will search for src at originating/master machine, if C(yes) it will go to the remote/target machine for the src. Default is C(no).",
                "$ref": "#/definitions/ansible_truth"
              },
              "dest": {
                "type": "string",
                "description": "Path of the file on the remote machine to be patched.\nThe names of the files to be patched are usually taken from the patch file, but if there's just one file to be patched it can specified with this option."
              },
              "basedir": {
                "type": "string",
                "description": "Path of a base directory in which the patch file will be applied. May be ommitted when C(dest) option is specified, otherwise required."
              },
              "strip": {
                "description": "Default: 0\n\nNumber that indicates the smallest prefix containing leading slashes that will be stripped from each file name found in the patch file. For more information see the strip parameter of the GNU patch tool.",
                "$ref": "#/definitions/ansible_number"
              },
              "binary": {
                "description": "Default: no\n\nSetting to C(yes) will disable patch's heuristic for transforming CRLF line endings into LF. Line endings of src and dest must match. If set to C(no), patch will replace CRLF in src files on POSIX.",
                "$ref": "#/definitions/ansible_truth"
              },
              "originalfile": {
                "type": "string",
                "description": "Path of the file on the remote machine to be patched.\nThe names of the files to be patched are usually taken from the patch file, but if there's just one file to be patched it can specified with this option."
              },
              "backup": {
                "description": "Default: no\n\npasses --backup --version-control=numbered to patch, producing numbered backup copies",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "os_networks_facts": {
            "type": "object",
            "description": "Retrieve facts about one or more networks from OpenStack.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name or ID of the Network"
              },
              "filters": {
                "type": "string",
                "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries."
              }
            }
          },
          "nexmo": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "thirsty"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Send a SMS message via nexmo",
            "properties": {
              "url_password": {
                "type": "string",
                "description": ""
              },
              "force": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "use_proxy": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "thirsty": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "src": {
                "description": "Nexmo Number to send from",
                "$ref": "#/definitions/ansible_number"
              },
              "url": {
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": "Nexmo API Secret"
              },
              "force_basic_auth": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "http_agent": {
                "type": "string",
                "description": ""
              },
              "dest": {
                "description": "Phone number(s) to send SMS message to",
                "$ref": "#/definitions/ansible_array"
              },
              "url_username": {
                "type": "string",
                "description": ""
              },
              "msg": {
                "type": "string",
                "description": "Message to text to send. Messages longer than 160 characters will be split into multiple messages"
              },
              "api_key": {
                "type": "string",
                "description": "Nexmo API Key"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "client_cert": {
                "type": "string",
                "description": ""
              },
              "client_key": {
                "type": "string",
                "description": ""
              }
            }
          },
          "open_iscsi": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "auto_node_startup",
                        "automatic"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "target",
                        "name",
                        "targetname"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "portal",
                        "ip"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "login",
                        "state"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Discover targets on given portal, (dis)connect targets, mark targets to manually or auto start, return device nodes of connected targets.",
            "properties": {
              "auto_node_startup": {
                "description": "whether the target node should be automatically connected at startup",
                "$ref": "#/definitions/ansible_truth"
              },
              "target": {
                "type": "string",
                "description": "the iscsi target name"
              },
              "show_nodes": {
                "description": "whether the list of nodes in the persistent iscsi database should be returned by the module",
                "$ref": "#/definitions/ansible_truth"
              },
              "node_auth": {
                "type": "string",
                "description": "Default: CHAP\n\ndiscovery.sendtargets.auth.authmethod"
              },
              "automatic": {
                "description": "whether the target node should be automatically connected at startup",
                "$ref": "#/definitions/ansible_truth"
              },
              "node_pass": {
                "type": "string",
                "description": "discovery.sendtargets.auth.password"
              },
              "discover": {
                "description": "whether the list of target nodes on the portal should be (re)discovered and added to the persistent iscsi database. Keep in mind that iscsiadm discovery resets configurtion, like node.startup to manual, hence combined with auto_node_startup=yes will allways return a changed state.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "description": "whether the target node should be connected",
                "$ref": "#/definitions/ansible_truth"
              },
              "portal": {
                "type": "string",
                "description": "the ip address of the iscsi target"
              },
              "ip": {
                "type": "string",
                "description": "the ip address of the iscsi target"
              },
              "login": {
                "description": "whether the target node should be connected",
                "$ref": "#/definitions/ansible_truth"
              },
              "node_user": {
                "type": "string",
                "description": "discovery.sendtargets.auth.username"
              },
              "targetname": {
                "type": "string",
                "description": "the iscsi target name"
              },
              "port": {
                "type": "string",
                "description": "Default: 3260\n\nthe port on which the iscsi target process listens"
              },
              "name": {
                "type": "string",
                "description": "the iscsi target name"
              }
            }
          },
          "a10_service_group": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "service_group",
                        "service",
                        "pool",
                        "group"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "service_group"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "service"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pool"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "group"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "thirsty"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "service_group_protocol",
                        "proto",
                        "protocol"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "servers",
                        "server",
                        "member"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "service_group_method",
                        "method"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage slb service-group objects on A10 Networks devices via aXAPI",
            "properties": {
              "protocol": {
                "enum": [
                  "tcp",
                  "udp"
                ],
                "type": "string",
                "description": "Default: tcp\n\nslb service-group protocol"
              },
              "thirsty": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "servers": {
                "description": "A list of servers to add to the service group. Each list item should be a dictionary which specifies the C(server:) and C(port:), but can also optionally specify the C(status:). See the examples below for details.",
                "$ref": "#/definitions/ansible_array"
              },
              "pass": {
                "type": "string",
                "description": "admin password of your A10 Networks device"
              },
              "force": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "client_key": {
                "type": "string",
                "description": ""
              },
              "service_group": {
                "type": "string",
                "description": "slb service-group name"
              },
              "group": {
                "type": "string",
                "description": "slb service-group name"
              },
              "use_proxy": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "service": {
                "type": "string",
                "description": "slb service-group name"
              },
              "proto": {
                "enum": [
                  "tcp",
                  "udp"
                ],
                "type": "string",
                "description": "Default: tcp\n\nslb service-group protocol"
              },
              "member": {
                "description": "A list of servers to add to the service group. Each list item should be a dictionary which specifies the C(server:) and C(port:), but can also optionally specify the C(status:). See the examples below for details.",
                "$ref": "#/definitions/ansible_array"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": ""
              },
              "write_config": {
                "description": "Default: no\n\nIf C(yes), any changes will cause a write of the running configuration to non-volatile memory. This will save I(all) configuration changes, including those that may have been made manually or through other modules, so care should be taken when specifying C(yes).",
                "$ref": "#/definitions/ansible_truth"
              },
              "service_group_method": {
                "enum": [
                  "round-robin",
                  "weighted-rr",
                  "least-connection",
                  "weighted-least-connection",
                  "service-least-connection",
                  "service-weighted-least-connection",
                  "fastest-response",
                  "least-request",
                  "round-robin-strict",
                  "src-ip-only-hash",
                  "src-ip-hash"
                ],
                "type": "string",
                "description": "Default: round-robin\n\nslb service-group loadbalancing method"
              },
              "client_cert": {
                "type": "string",
                "description": ""
              },
              "method": {
                "enum": [
                  "round-robin",
                  "weighted-rr",
                  "least-connection",
                  "weighted-least-connection",
                  "service-least-connection",
                  "service-weighted-least-connection",
                  "fastest-response",
                  "least-request",
                  "round-robin-strict",
                  "src-ip-only-hash",
                  "src-ip-hash"
                ],
                "type": "string",
                "description": "Default: round-robin\n\nslb service-group loadbalancing method"
              },
              "username": {
                "type": "string",
                "description": "admin account of your A10 Networks device"
              },
              "force_basic_auth": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "http_agent": {
                "type": "string",
                "description": ""
              },
              "service_group_protocol": {
                "enum": [
                  "tcp",
                  "udp"
                ],
                "type": "string",
                "description": "Default: tcp\n\nslb service-group protocol"
              },
              "user": {
                "type": "string",
                "description": "admin account of your A10 Networks device"
              },
              "password": {
                "type": "string",
                "description": "admin password of your A10 Networks device"
              },
              "pwd": {
                "type": "string",
                "description": "admin password of your A10 Networks device"
              },
              "pool": {
                "type": "string",
                "description": "slb service-group name"
              },
              "url_password": {
                "type": "string",
                "description": ""
              },
              "admin": {
                "type": "string",
                "description": "admin account of your A10 Networks device"
              },
              "host": {
                "type": "string",
                "description": "hostname or ip of your A10 Networks device"
              },
              "server": {
                "description": "A list of servers to add to the service group. Each list item should be a dictionary which specifies the C(server:) and C(port:), but can also optionally specify the C(status:). See the examples below for details.",
                "$ref": "#/definitions/ansible_array"
              },
              "url": {
                "type": "string",
                "description": ""
              },
              "url_username": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "ec2_vpc": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or terminates AWS virtual private clouds.  This module has a dependency on python-boto.",
            "properties": {
              "internet_gateway": {
                "description": "Default: no\n\nToggle whether there should be an Internet gateway attached to the VPC",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "route_tables": {
                "description": "A dictionary array of route tables to add of the form: { subnets: [172.22.2.0/24, 172.22.3.0/24,], routes: [{ dest: 0.0.0.0/0, gw: igw},], resource_tags: ... }. Where the subnets list is those subnets the route table should be associated with, and the routes list is a list of routes to be in the table.  The special keyword for the gw of igw specifies that you should the route should go through the internet gateway attached to the VPC. gw also accepts instance-ids in addition igw. resource_tags is optional and uses dictionary form: { \"Name\": \"public\", ... }. This module is currently unable to affect the \"main\" route table due to some limitations in boto, so you must explicitly define the associated subnets or they will be attached to the main table implicitly. As of 1.8, if the route_tables parameter is not specified, no existing routes will be modified.",
                "$ref": "#/definitions/ansible_array"
              },
              "dns_support": {
                "description": "Default: yes\n\ntoggles the \"Enable DNS resolution\" flag",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Create or terminate the VPC"
              },
              "instance_tenancy": {
                "enum": [
                  "default",
                  "dedicated"
                ],
                "type": "string",
                "description": "Default: default\n\nThe supported tenancy options for instances launched into the VPC."
              },
              "resource_tags": {
                "type": "object",
                "description": "A dictionary array of resource tags of the form: { tag1: value1, tag2: value2 }.  Tags in this list are used in conjunction with CIDR block to uniquely identify a VPC in lieu of vpc_id. Therefore, if CIDR/Tag combination does not exist, a new VPC will be created.  VPC tags not on this list will be ignored. Prior to 1.7, specifying a resource tag was optional."
              },
              "wait": {
                "description": "Default: no\n\nwait for the VPC to be in state 'available' before returning",
                "$ref": "#/definitions/ansible_truth"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "subnets": {
                "description": "A dictionary array of subnets to add of the form: { cidr: ..., az: ... , resource_tags: ... }. Where az is the desired availability zone of the subnet, but it is not required. Tags (i.e.: resource_tags) is also optional and use dictionary form: { \"Environment\":\"Dev\", \"Tier\":\"Web\", ...}. All VPC subnets not in this list will be removed as well. As of 1.8, if the subnets parameter is not specified, no existing subnets will be modified.",
                "$ref": "#/definitions/ansible_array"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 300\n\nhow long before wait gives up, in seconds"
              },
              "dns_hostnames": {
                "description": "Default: yes\n\ntoggles the \"Enable DNS hostname support for instances\" flag",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "cidr_block": {
                "type": "string",
                "description": "The cidr block representing the VPC, e.g. 10.0.0.0/16"
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "vpc_id": {
                "type": "string",
                "description": "A VPC id to terminate when state=absent"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "clc_loadbalancer": {
            "required": [
              "alias",
              "location",
              "name"
            ],
            "type": "object",
            "description": "An Ansible module to Create, Delete shared loadbalancers in CenturyLink Cloud.",
            "properties": {
              "status": {
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "type": "string",
                "description": "Default: enabled\n\nThe status of the loadbalancer"
              },
              "description": {
                "type": "string",
                "description": "Default: None\n\nA description for the loadbalancer"
              },
              "method": {
                "enum": [
                  "leastConnection",
                  "roundRobin"
                ],
                "type": "string",
                "description": "Default: None\n\n-The balancing method for the load balancer pool"
              },
              "alias": {
                "type": "string",
                "description": "The alias of your CLC Account"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "port_absent",
                  "nodes_present",
                  "nodes_absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to create or delete the load balancer pool"
              },
              "location": {
                "type": "string",
                "description": "The location of the datacenter where the load balancer resides in"
              },
              "nodes": {
                "description": "A list of nodes that needs to be added to the load balancer pool",
                "$ref": "#/definitions/ansible_array"
              },
              "port": {
                "enum": [
                  80,
                  443
                ],
                "type": "string",
                "description": "Default: None\n\nPort to configure on the public-facing side of the load balancer pool"
              },
              "persistence": {
                "enum": [
                  "standard",
                  "sticky"
                ],
                "type": "string",
                "description": "Default: None\n\nThe persistence method for the load balancer"
              },
              "name": {
                "type": "string",
                "description": "The name of the loadbalancer"
              }
            }
          },
          "fail": {
            "type": "object",
            "description": "This module fails the progress with a custom message. It can be useful for bailing out when a certain condition is met using C(when).",
            "properties": {
              "host": {
                "type": "string",
                "description": ""
              },
              "connect_timeout": {
                "type": "string",
                "description": ""
              },
              "delay": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "started",
                  "stopped",
                  "present",
                  "absent",
                  "drained"
                ],
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "exclude_hosts": {
                "description": "",
                "$ref": "#/definitions/ansible_array"
              },
              "search_regex": {
                "type": "string",
                "description": ""
              },
              "path": {
                "type": "string",
                "description": ""
              },
              "port": {
                "type": "string",
                "description": ""
              }
            }
          },
          "rax_clb_ssl": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Set up, reconfigure, or remove SSL termination for an existing load balancer.",
            "properties": {
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "intermediate_certificate": {
                "type": "string",
                "description": "One or more intermediate certificate authorities as a string in PEM\nformat, concatenated into a single string."
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "certificate": {
                "type": "string",
                "description": "The public SSL certificates as a string in PEM format."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIf set to \"present\", SSL termination will be added to this load balancer.\nIf \"absent\", SSL termination will be removed instead."
              },
              "secure_port": {
                "description": "Default: 443\n\nThe port to listen for secure traffic.",
                "$ref": "#/definitions/ansible_number"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "username": {
                "type": "string",
                "description": ""
              },
              "private_key": {
                "type": "string",
                "description": "The private SSL key as a string in PEM format."
              },
              "https_redirect": {
                "description": "If \"true\", the load balancer will redirect HTTP traffic to HTTPS.\nRequires \"secure_traffic_only\" to be true. Incurs an implicit wait if SSL\ntermination is also applied or removed.",
                "$ref": "#/definitions/ansible_truth"
              },
              "wait_timeout": {
                "description": "Default: 300\n\nHow long before \"wait\" gives up, in seconds.",
                "$ref": "#/definitions/ansible_number"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Wait for the balancer to be in state \"running\" before turning.",
                "$ref": "#/definitions/ansible_truth"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "enabled": {
                "description": "Default: True\n\nIf set to \"false\", temporarily disable SSL termination without discarding\nexisting credentials.",
                "$ref": "#/definitions/ansible_truth"
              },
              "secure_traffic_only": {
                "description": "If \"true\", the load balancer will *only* accept secure traffic.",
                "$ref": "#/definitions/ansible_truth"
              },
              "loadbalancer": {
                "type": "string",
                "description": "Name or ID of the load balancer on which to manage SSL termination."
              }
            }
          },
          "pingdom": {
            "required": [
              "passwd",
              "checkid",
              "state",
              "uid",
              "key"
            ],
            "type": "object",
            "description": "This module will let you pause/unpause Pingdom alerts",
            "properties": {
              "passwd": {
                "type": "string",
                "description": "Pingdom user password."
              },
              "checkid": {
                "type": "string",
                "description": "Pingdom ID of the check."
              },
              "state": {
                "enum": [
                  "running",
                  "paused",
                  "started",
                  "stopped"
                ],
                "type": "string",
                "description": "Define whether or not the check should be running or paused."
              },
              "uid": {
                "type": "string",
                "description": "Pingdom user ID."
              },
              "key": {
                "type": "string",
                "description": "Pingdom API key."
              }
            }
          },
          "dnsimple": {
            "type": "object",
            "description": "Manages domains and records via the DNSimple API, see the docs: U(http://developer.dnsimple.com/)",
            "properties": {
              "solo": {
                "description": "Whether the record should be the only one for that record type and record name. Only use with state=present on a record",
                "$ref": "#/definitions/ansible_truth"
              },
              "domain": {
                "type": "string",
                "description": "Domain to work with. Can be the domain name (e.g. \"mydomain.com\") or the numeric ID of the domain in DNSimple. If omitted, a list of domains will be returned.\nIf domain is present but the domain doesn't exist, it will be created."
              },
              "account_email": {
                "type": "string",
                "description": "Account email. If omitted, the env variables DNSIMPLE_EMAIL and DNSIMPLE_API_TOKEN will be looked for. If those aren't found, a C(.dnsimple) file will be looked for, see: U(https://github.com/mikemaccana/dnsimple-python#getting-started)"
              },
              "record_ids": {
                "description": "List of records to ensure they either exist or don't exist",
                "$ref": "#/definitions/ansible_array"
              },
              "value": {
                "type": "string",
                "description": "Record value\nMust be specified when trying to ensure a record exists"
              },
              "priority": {
                "description": "Record priority",
                "$ref": "#/definitions/ansible_number"
              },
              "record": {
                "type": "string",
                "description": "Record to add, if blank a record for the domain will be created, supports the wildcard (*)"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "whether the record should exist or not"
              },
              "ttl": {
                "description": "Default: 3600 (one hour)\n\nThe TTL to give the new record",
                "$ref": "#/definitions/ansible_number"
              },
              "type": {
                "enum": [
                  "A",
                  "ALIAS",
                  "CNAME",
                  "MX",
                  "SPF",
                  "URL",
                  "TXT",
                  "NS",
                  "SRV",
                  "NAPTR",
                  "PTR",
                  "AAAA",
                  "SSHFP",
                  "HINFO",
                  "POOL"
                ],
                "type": "string",
                "description": "The type of DNS record to create"
              },
              "account_api_token": {
                "type": "string",
                "description": "Account API token. See I(account_email) for info."
              }
            }
          },
          "win_user": {
            "type": "object",
            "description": "Manages local Windows user accounts",
            "properties": {
              "update_password": {
                "type": "string",
                "description": "Default: always\n\nC(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users."
              },
              "password_never_expires": {
                "type": "string",
                "description": "C(yes) will set the password to never expire.  C(no) will allow the password to expire."
              },
              "name": {
                "type": "string",
                "description": "Name of the user to create, remove or modify."
              },
              "groups_action": {
                "type": "string",
                "description": "Default: replace\n\nIf C(replace), the user is added as a member of each group in I(groups) and removed from any other groups.  If C(add), the user is added to each group in I(groups) where not already a member.  If C(remove), the user is removed from each group in I(groups)."
              },
              "password_expired": {
                "type": "string",
                "description": "C(yes) will require the user to change their password at next login. C(no) will clear the expired password flag."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nWhen C(present), creates or updates the user account.  When C(absent), removes the user account if it exists.  When C(query) (new in 1.9), retrieves the user account details without making any changes."
              },
              "groups": {
                "type": "string",
                "description": "Adds or removes the user from this comma-separated lis of groups, depending on the value of I(groups_action). When I(groups_action) is C(replace) and I(groups) is set to the empty string ('groups='), the user is removed from all groups."
              },
              "account_disabled": {
                "type": "string",
                "description": "C(yes) will disable the user account.  C(no) will clear the disabled flag."
              },
              "fullname": {
                "type": "string",
                "description": "Full name of the user"
              },
              "password": {
                "type": "string",
                "description": "Optionally set the user's password to this (plain text) value."
              },
              "account_locked": {
                "type": "string",
                "description": "C(no) will unlock the user account if locked."
              },
              "user_cannot_change_password": {
                "type": "string",
                "description": "C(yes) will prevent the user from changing their password.  C(no) will allow the user to change their password."
              },
              "description": {
                "type": "string",
                "description": "Description of the user"
              }
            }
          },
          "irc": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "color",
                        "colour"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Send a message to an IRC channel. This is a very simplistic implementation.",
            "properties": {
              "style": {
                "enum": [
                  "underline",
                  "reverse",
                  "bold",
                  "italic",
                  "none"
                ],
                "type": "string",
                "description": "Default: None\n\nText style for the message. Note italic does not work on some clients"
              },
              "timeout": {
                "description": "Default: 30\n\nTimeout to use while waiting for successful registration and join messages, this is to prevent an endless loop",
                "$ref": "#/definitions/ansible_number"
              },
              "passwd": {
                "type": "string",
                "description": "Server password"
              },
              "colour": {
                "enum": [
                  "none",
                  "white",
                  "black",
                  "blue",
                  "green",
                  "red",
                  "brown",
                  "purple",
                  "orange",
                  "yellow",
                  "light_green",
                  "teal",
                  "light_cyan",
                  "light_blue",
                  "pink",
                  "gray",
                  "light_gray"
                ],
                "type": "string",
                "description": "Default: none\n\nText color for the message. (\"none\" is a valid option in 1.6 or later, in 1.6 and prior, the default color is black, not \"none\"). Added 11 more colors in version 2.0."
              },
              "server": {
                "type": "string",
                "description": "Default: localhost\n\nIRC server name/address"
              },
              "topic": {
                "type": "string",
                "description": "Set the channel topic"
              },
              "nick": {
                "type": "string",
                "description": "Default: ansible\n\nNickname to send the message from. May be shortened, depending on server's NICKLEN setting."
              },
              "color": {
                "enum": [
                  "none",
                  "white",
                  "black",
                  "blue",
                  "green",
                  "red",
                  "brown",
                  "purple",
                  "orange",
                  "yellow",
                  "light_green",
                  "teal",
                  "light_cyan",
                  "light_blue",
                  "pink",
                  "gray",
                  "light_gray"
                ],
                "type": "string",
                "description": "Default: none\n\nText color for the message. (\"none\" is a valid option in 1.6 or later, in 1.6 and prior, the default color is black, not \"none\"). Added 11 more colors in version 2.0."
              },
              "part": {
                "description": "Default: True\n\nDesignates whether user should part from channel after sending message or not. Useful for when using a faux bot and not wanting join/parts between messages.",
                "$ref": "#/definitions/ansible_truth"
              },
              "nick_to": {
                "description": "A list of nicknames to send the message to. One of nick_to or channel needs to be set.  When both are defined, the message will be sent to both of them.",
                "$ref": "#/definitions/ansible_array"
              },
              "key": {
                "type": "string",
                "description": "Channel key"
              },
              "msg": {
                "type": "string",
                "description": "The message body."
              },
              "use_ssl": {
                "description": "Designates whether TLS/SSL should be used when connecting to the IRC server",
                "$ref": "#/definitions/ansible_truth"
              },
              "port": {
                "type": "string",
                "description": "Default: 6667\n\nIRC server port number"
              },
              "channel": {
                "type": "string",
                "description": "Channel name.  One of nick_to or channel needs to be set.  When both are set, the message will be sent to both of them."
              }
            }
          },
          "vmware_vmkernel": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create a VMware VMkernel Interface",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the ESXi Server"
              },
              "portgroup_name": {
                "type": "string",
                "description": "The name of the portgroup for the VMK interface"
              },
              "enable_vsan": {
                "description": "Enable the VMK interface for VSAN traffic",
                "$ref": "#/definitions/ansible_truth"
              },
              "enable_vmotion": {
                "description": "Enable the VMK interface for vMotion traffic",
                "$ref": "#/definitions/ansible_truth"
              },
              "admin": {
                "type": "string",
                "description": "The username of the ESXi Server"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "enable_mgmt": {
                "description": "Enable the VMK interface for Management traffic",
                "$ref": "#/definitions/ansible_truth"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the ESXi Server"
              },
              "mtu": {
                "description": "The MTU for the VMK interface",
                "$ref": "#/definitions/ansible_number"
              },
              "subnet_mask": {
                "type": "string",
                "description": "The Subnet Mask for the VMK interface"
              },
              "pwd": {
                "type": "string",
                "description": "The password of ESXi Server"
              },
              "user": {
                "type": "string",
                "description": "The username of the ESXi Server"
              },
              "pass": {
                "type": "string",
                "description": "The password of ESXi Server"
              },
              "vswitch_name": {
                "type": "string",
                "description": "The name of the vswitch where to add the VMK interface"
              },
              "password": {
                "type": "string",
                "description": "The password of ESXi Server"
              },
              "ip_address": {
                "type": "string",
                "description": "The IP Address for the VMK interface"
              },
              "vlan_id": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "enable_ft": {
                "description": "Enable the VMK interface for Fault Tolerance traffic",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "ec2_vol": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "zone",
                        "availability_zone",
                        "aws_zone",
                        "ec2_zone"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates an EBS volume and optionally attaches it to an instance.  If both an instance ID and a device name is given and the instance has a device at the device name, then no volume is created and no attachment is made.  This module has a dependency on python-boto.",
            "properties": {
              "availability_zone": {
                "type": "string",
                "description": "zone in which to create the volume, if unset uses the zone the instance is in (if set)"
              },
              "encrypted": {
                "description": "Enable encryption at rest for this volume.",
                "$ref": "#/definitions/ansible_truth"
              },
              "iops": {
                "type": "string",
                "description": "Default: 100\n\nthe provisioned IOPs you want to associate with this volume (integer)."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_zone": {
                "type": "string",
                "description": "zone in which to create the volume, if unset uses the zone the instance is in (if set)"
              },
              "id": {
                "type": "string",
                "description": "volume id if you wish to attach an existing volume (requires instance) or remove an existing volume"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "zone": {
                "type": "string",
                "description": "zone in which to create the volume, if unset uses the zone the instance is in (if set)"
              },
              "instance": {
                "type": "string",
                "description": "instance ID if you wish to attach the volume. Since 1.9 you can set to None to detach."
              },
              "volume_size": {
                "type": "string",
                "description": "size of volume (in GB) to create."
              },
              "state": {
                "enum": [
                  "absent",
                  "present",
                  "list"
                ],
                "type": "string",
                "description": "Default: present\n\nwhether to ensure the volume is present or absent, or to list existing volumes (The C(list) option was added in version 1.8)."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_zone": {
                "type": "string",
                "description": "zone in which to create the volume, if unset uses the zone the instance is in (if set)"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "volume Name tag if you wish to attach an existing volume (requires instance)"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "volume_type": {
                "enum": [
                  "standard",
                  "gp2",
                  "io1"
                ],
                "type": "string",
                "description": "Default: standard\n\nType of EBS volume; standard (magnetic), gp2 (SSD), io1 (Provisioned IOPS). \"Standard\" is the old EBS default and continues to remain the Ansible default for backwards compatibility."
              },
              "device_name": {
                "type": "string",
                "description": "device id to override device mapping. Assumes /dev/sdf for Linux/UNIX and /dev/xvdf for Windows."
              },
              "snapshot": {
                "type": "string",
                "description": "snapshot ID on which to base the volume"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "Default: yes\n\nWhen set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "clc_modify_server": {
            "required": [
              "server_ids"
            ],
            "type": "object",
            "description": "An Ansible module to modify servers in CenturyLink Cloud.",
            "properties": {
              "alert_policy_name": {
                "type": "string",
                "description": "Default: None\n\nThe alert policy name to be associated to the server. This is mutually exclusive with 'alert_policy_id'"
              },
              "anti_affinity_policy_name": {
                "type": "string",
                "description": "Default: None\n\nThe anti affinity policy name to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_id'"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state to insure that the provided resources are in."
              },
              "anti_affinity_policy_id": {
                "type": "string",
                "description": "Default: None\n\nThe anti affinity policy id to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_name'"
              },
              "alert_policy_id": {
                "type": "string",
                "description": "Default: None\n\nThe alert policy id to be associated to the server. This is mutually exclusive with 'alert_policy_name'"
              },
              "memory": {
                "type": "string",
                "description": "Default: None\n\nMemory (in GB) to set to the server."
              },
              "server_ids": {
                "description": "A list of server Ids to modify.",
                "$ref": "#/definitions/ansible_array"
              },
              "cpu": {
                "type": "string",
                "description": "Default: None\n\nHow many CPUs to update on the server"
              },
              "wait": {
                "description": "Default: True\n\nWhether to wait for the provisioning tasks to finish before returning.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "rabbitmq_queue": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "This module uses rabbitMQ Rest API to create/delete queues",
            "properties": {
              "login_port": {
                "type": "string",
                "description": "Default: 15672\n\nrabbitMQ management api port"
              },
              "dead_letter_exchange": {
                "type": "string",
                "description": "Default: None\n\nOptional name of an exchange to which messages will be republished if they\nare rejected or expire"
              },
              "name": {
                "type": "string",
                "description": "Name of the queue to create"
              },
              "login_user": {
                "type": "string",
                "description": "Default: guest\n\nrabbitMQ user for connection"
              },
              "login_host": {
                "type": "string",
                "description": "Default: localhost\n\nrabbitMQ host for connection"
              },
              "login_password": {
                "type": "string",
                "description": "rabbitMQ password for connection"
              },
              "vhost": {
                "type": "string",
                "description": "Default: /\n\nrabbitMQ virtual host"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the queue should be present or absent\nOnly present implemented atm"
              },
              "max_length": {
                "description": "Default: no limit\n\nHow many messages can the queue contain before it starts rejecting",
                "$ref": "#/definitions/ansible_number"
              },
              "arguments": {
                "type": "object",
                "description": "extra arguments for queue. If defined this argument is a key/value dictionary"
              },
              "auto_delete": {
                "description": "if the queue should delete itself after all queues/queues unbound from it",
                "$ref": "#/definitions/ansible_truth"
              },
              "message_ttl": {
                "description": "Default: forever\n\nHow long a message can live in queue before it is discarded (milliseconds)",
                "$ref": "#/definitions/ansible_number"
              },
              "auto_expires": {
                "description": "Default: forever\n\nHow long a queue can be unused before it is automatically deleted (milliseconds)",
                "$ref": "#/definitions/ansible_number"
              },
              "dead_letter_routing_key": {
                "type": "string",
                "description": "Default: None\n\nOptional replacement routing key to use when a message is dead-lettered.\nOriginal routing key will be used if unset"
              },
              "durable": {
                "description": "Default: True\n\nwhether queue is durable or not",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "postgresql_ext": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ext",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "ext"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add or remove PostgreSQL extensions from a database.",
            "properties": {
              "name": {
                "type": "string",
                "description": "name of the extension to add or remove"
              },
              "login_user": {
                "type": "string",
                "description": "The username used to authenticate with"
              },
              "login_host": {
                "type": "string",
                "description": "Default: localhost\n\nHost running the database"
              },
              "db": {
                "type": "string",
                "description": "name of the database to add or remove the extension to/from"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe database extension state"
              },
              "ext": {
                "type": "string",
                "description": "name of the extension to add or remove"
              },
              "login_password": {
                "type": "string",
                "description": "The password used to authenticate with"
              },
              "port": {
                "type": "string",
                "description": "Default: 5432\n\nDatabase port to connect to."
              }
            }
          },
          "homebrew": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "install_options",
                        "options"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg",
                        "package",
                        "formula"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "update_homebrew",
                        "update-brew"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "upgrade_all",
                        "upgrade"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages Homebrew packages",
            "properties": {
              "install_options": {
                "description": "options flags to install a package",
                "$ref": "#/definitions/ansible_array"
              },
              "upgrade": {
                "description": "upgrade all homebrew packages",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "description": "Default: None\n\nname of package to install/remove",
                "$ref": "#/definitions/ansible_array"
              },
              "package": {
                "description": "Default: None\n\nname of package to install/remove",
                "$ref": "#/definitions/ansible_array"
              },
              "update_homebrew": {
                "description": "update homebrew itself first",
                "$ref": "#/definitions/ansible_truth"
              },
              "upgrade_all": {
                "description": "upgrade all homebrew packages",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "latest",
                  "upgraded",
                  "head",
                  "linked",
                  "unlinked",
                  "absent",
                  "removed",
                  "uninstalled"
                ],
                "type": "string",
                "description": "Default: present\n\nstate of the package"
              },
              "update-brew": {
                "description": "update homebrew itself first",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkg": {
                "description": "Default: None\n\nname of package to install/remove",
                "$ref": "#/definitions/ansible_array"
              },
              "path": {
                "type": "string",
                "description": "Default: /usr/local/bin\n\n':' separated list of paths to search for 'brew' executable. Since A package (I(formula) in homebrew parlance) location is prefixed relative to the actual path of I(brew) command, providing an alternative I(brew) path enables managing different set of packages in an alternative location in the system."
              },
              "formula": {
                "description": "Default: None\n\nname of package to install/remove",
                "$ref": "#/definitions/ansible_array"
              },
              "options": {
                "description": "options flags to install a package",
                "$ref": "#/definitions/ansible_array"
              }
            }
          },
          "modprobe": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Add or remove kernel modules.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the module should be present or absent."
              },
              "params": {
                "type": "string",
                "description": "Modules parameters."
              },
              "name": {
                "type": "string",
                "description": "Name of kernel module to manage."
              }
            }
          },
          "postgresql_user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "user",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add or remove PostgreSQL users (roles) from a remote host and, optionally, grant the users access to an existing database or tables.\nThe fundamental function of the module is to create, or delete, roles from a PostgreSQL cluster. Privilege assignment, or removal, is an optional step, which works on one database at a time. This allows for the module to be called several times in the same module to modify the permissions on different databases, or to grant permissions to already existing users.\nA user cannot be removed until all the privileges have been stripped from the user. In such situation, if the module tries to remove the user it will fail. To avoid this from happening the fail_on_user option signals the module to try to remove the user, but if not possible keep going; the module will report if changes happened and separately if the user was removed or not.",
            "properties": {
              "name": {
                "type": "string",
                "description": "name of the user (role) to add or remove"
              },
              "no_password_changes": {
                "description": "Default: no\n\nif C(yes), don't inspect database for password changes. Effective when C(pg_authid) is not accessible (such as AWS RDS). Otherwise, make password changes as necessary.",
                "$ref": "#/definitions/ansible_truth"
              },
              "login_user": {
                "type": "string",
                "description": "Default: postgres\n\nUser (role) used to authenticate with PostgreSQL"
              },
              "login_host": {
                "type": "string",
                "description": "Default: localhost\n\nHost running PostgreSQL."
              },
              "expires": {
                "type": "string",
                "description": "sets the user's password expiration."
              },
              "db": {
                "type": "string",
                "description": "name of database where permissions will be granted"
              },
              "port": {
                "type": "string",
                "description": "Default: 5432\n\nDatabase port to connect to."
              },
              "login_unix_socket": {
                "type": "string",
                "description": "Path to a Unix domain socket for local connections"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe user (role) state"
              },
              "encrypted": {
                "description": "whether the password is stored hashed in the database. boolean. Passwords can be passed already hashed or unhashed, and postgresql ensures the stored password is hashed when encrypted is set.",
                "$ref": "#/definitions/ansible_truth"
              },
              "user": {
                "type": "string",
                "description": "name of the user (role) to add or remove"
              },
              "login_password": {
                "type": "string",
                "description": "Password used to authenticate with PostgreSQL"
              },
              "password": {
                "type": "string",
                "description": "set the user's password, before 1.4 this was required.\nWhen passing an encrypted password, the encrypted parameter must also be true, and it must be generated with the format C('str[\"md5\"] + md5[ password + username ]'), resulting in a total of 35 characters.  An easy way to do this is: C(echo \"md5`echo -n \"verysecretpasswordJOE\" | md5`\"). Note that if encrypted is set, the stored password will be hashed whether or not it is pre-encrypted."
              },
              "role_attr_flags": {
                "type": "string",
                "description": "PostgreSQL role attributes string in the format: CREATEDB,CREATEROLE,SUPERUSER"
              },
              "fail_on_user": {
                "description": "Default: yes\n\nif C(yes), fail when user can't be removed. Otherwise just log and continue",
                "$ref": "#/definitions/ansible_truth"
              },
              "priv": {
                "type": "string",
                "description": "PostgreSQL privileges string in the format: C(table:priv1,priv2)"
              }
            }
          },
          "rax_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gather facts for Rackspace Cloud Servers.",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Server name to retrieve facts for"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "address": {
                "type": "string",
                "description": "Server IP address to retrieve facts for, will match any IP assigned to the server"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "id": {
                "type": "string",
                "description": "Server ID to retrieve facts for"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "cs_affinitygroup": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create and remove affinity groups.",
            "properties": {
              "account": {
                "type": "string",
                "description": "Account the affinity group is related to."
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "Description of the affinity group."
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "affinty_type": {
                "type": "string",
                "description": "Type of the affinity group. If not specified, first found affinity type is used."
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the affinity group is related to."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the affinity group."
              },
              "domain": {
                "type": "string",
                "description": "Domain the affinity group is related to."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the affinity group."
              }
            }
          },
          "bigip_pool": {
            "type": "object",
            "description": "Manages F5 BIG-IP LTM pools via iControl SOAP API",
            "properties": {
              "monitors": {
                "type": "string",
                "description": "Monitor template name list. Always use the full path to the monitor."
              },
              "lb_method": {
                "type": "string",
                "description": "Default: round_robin\n\nLoad balancing method"
              },
              "quorum": {
                "type": "string",
                "description": "Monitor quorum value when monitor_type is m_of_n"
              },
              "partition": {
                "type": "string",
                "description": "Default: Common\n\nPartition of pool/pool member"
              },
              "slow_ramp_time": {
                "type": "string",
                "description": "Sets the ramp-up time (in seconds) to gradually ramp up the load on newly added or freshly detected up pool members"
              },
              "host": {
                "type": "string",
                "description": "Pool member IP"
              },
              "service_down_action": {
                "type": "string",
                "description": "Sets the action to take when node goes down in pool"
              },
              "server": {
                "type": "string",
                "description": "BIG-IP host"
              },
              "monitor_type": {
                "type": "string",
                "description": "Monitor rule type when monitors > 1"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nPool/pool member state"
              },
              "user": {
                "type": "string",
                "description": "BIG-IP username"
              },
              "password": {
                "type": "string",
                "description": "BIG-IP password"
              },
              "validate_certs": {
                "type": "string",
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8"
              },
              "port": {
                "type": "string",
                "description": "Pool member port"
              },
              "name": {
                "type": "string",
                "description": "Pool name"
              }
            }
          },
          "profitbricks": {
            "type": "object",
            "description": "Create, destroy, update, start, stop, and reboot a ProfitBricks virtual machine. When the virtual machine is created it can optionally wait for it to be 'running' before returning. This module has a dependency on profitbricks >= 1.0.0",
            "properties": {
              "count": {
                "type": "string",
                "description": "Default: 1\n\nThe number of virtual machines to create."
              },
              "datacenter": {
                "type": "string",
                "description": "The Datacenter to provision this virtual machine."
              },
              "lan": {
                "type": "string",
                "description": "Default: 1\n\nThe ID of the LAN you wish to add the servers to."
              },
              "name": {
                "type": "string",
                "description": "The name of the virtual machine."
              },
              "subscription_user": {
                "type": "string",
                "description": "The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable."
              },
              "auto_increment": {
                "description": "Default: True\n\nWhether or not to increment a single number in the name for created virtual machines.",
                "$ref": "#/definitions/ansible_truth"
              },
              "image": {
                "type": "string",
                "description": "The system image ID for creating the virtual machine, e.g. a3eae284-a2fe-11e4-b187-5f1f641608c8."
              },
              "ram": {
                "type": "string",
                "description": "Default: 2048\n\nThe amount of memory to allocate to the virtual machine."
              },
              "remove_boot_volume": {
                "description": "Default: yes\n\nremove the bootVolume of the virtual machine you're destroying.",
                "$ref": "#/definitions/ansible_truth"
              },
              "instance_ids": {
                "type": "string",
                "description": "list of instance ids, currently only used when state='absent' to remove instances."
              },
              "subscription_password": {
                "type": "string",
                "description": "THe ProfitBricks password. Overrides the PB_PASSWORD environement variable."
              },
              "volume_size": {
                "type": "string",
                "description": "Default: 10\n\nThe size in GB of the boot volume."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\ncreate or terminate instances"
              },
              "wait_timeout": {
                "description": "Default: 600\n\nhow long before wait gives up, in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "location": {
                "enum": [
                  "us/las",
                  "us/lasdev",
                  "de/fra",
                  "de/fkb"
                ],
                "type": "string",
                "description": "Default: us/las\n\nThe datacenter location. Use only if you want to create the Datacenter or else this value is ignored."
              },
              "assign_public_ip": {
                "description": "This will assign the machine to the public LAN. If no LAN exists with public Internet access it is created.",
                "$ref": "#/definitions/ansible_truth"
              },
              "cores": {
                "type": "string",
                "description": "Default: 2\n\nThe number of CPU cores to allocate to the virtual machine."
              },
              "bus": {
                "type": "string",
                "description": "Default: VIRTIO\n\nThe bus type for the volume."
              },
              "wait": {
                "description": "Default: yes\n\nwait for the instance to be in state 'running' before returning",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "rax_dns": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage domains on Rackspace Cloud DNS",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "comment": {
                "type": "string",
                "description": "Brief description of the domain. Maximum length of 160 characters"
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Domain name to create"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "ttl": {
                "description": "Default: 3600\n\nTime to live of domain in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "email": {
                "type": "string",
                "description": ""
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "slackpkg": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "update_cache",
                        "update-cache"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage binary packages for Slackware using 'slackpkg' which is available in versions after 12.2.",
            "properties": {
              "state": {
                "enum": [
                  "installed",
                  "removed",
                  "absent",
                  "present",
                  "latest"
                ],
                "type": "string",
                "description": "Default: present\n\nstate of the package, you can use \"installed\" as an alias for C(present) and removed as one for c(absent)."
              },
              "update_cache": {
                "description": "update the package database first",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "description": "name of package to install/remove",
                "$ref": "#/definitions/ansible_array"
              },
              "update-cache": {
                "description": "update the package database first",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkg": {
                "description": "name of package to install/remove",
                "$ref": "#/definitions/ansible_array"
              }
            }
          },
          "rabbitmq_vhost": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "tracing",
                        "trace"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "vhost"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "vhost"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage the state of a virtual host in RabbitMQ",
            "properties": {
              "node": {
                "type": "string",
                "description": "Default: rabbit\n\nerlang node name of the rabbit we wish to configure"
              },
              "name": {
                "type": "string",
                "description": "The name of the vhost to manage"
              },
              "trace": {
                "description": "Default: no\n\nEnable/disable tracing for a vhost",
                "$ref": "#/definitions/ansible_truth"
              },
              "tracing": {
                "description": "Default: no\n\nEnable/disable tracing for a vhost",
                "$ref": "#/definitions/ansible_truth"
              },
              "vhost": {
                "type": "string",
                "description": "The name of the vhost to manage"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state of vhost"
              }
            }
          },
          "os_ironic_node": {
            "type": "object",
            "description": "Deploy to nodes controlled by Ironic.",
            "properties": {
              "uuid": {
                "type": "string",
                "description": "Default: None\n\nglobally unique identifier (UUID) to be given to the resource."
              },
              "power": {
                "type": "string",
                "description": "Default: present\n\nA setting to allow power state to be asserted allowing nodes that are not yet deployed to be powered on, and nodes that are deployed to be powered off."
              },
              "deploy": {
                "type": "string",
                "description": "Default: True\n\nIndicates if the resource should be deployed. Allows for deployment logic to be disengaged and control of the node power or maintenance state to be changed."
              },
              "ironic_url": {
                "type": "string",
                "description": "Default: None\n\nIf noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with \"auth\" and \"auth_type\" settings set to None."
              },
              "maintenance_reason": {
                "type": "string",
                "description": "Default: None\n\nA string expression regarding the reason a node is in a maintenance mode."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicates desired state of the resource"
              },
              "maintenance": {
                "type": "string",
                "description": "A setting to allow the direct control if a node is in maintenance mode."
              },
              "instance_info": {
                "type": "string",
                "description": "Definition of the instance information which is used to deploy the node.  This information is only required when an instance is set to present."
              },
              "config_drive": {
                "type": "string",
                "description": "Default: None\n\nA configdrive file or HTTP(S) URL that will be passed along to the node."
              }
            }
          },
          "ec2_vpc_net_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gather facts about ec2 VPCs in AWS",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "filters": {
                "type": "object",
                "description": "A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html) for possible filters."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "virt_net": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "network"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage I(libvirt) networks.",
            "properties": {
              "xml": {
                "type": "string",
                "description": "XML document used with the define command."
              },
              "name": {
                "type": "string",
                "description": "name of the network being managed. Note that network must be previously defined with xml."
              },
              "uri": {
                "type": "string",
                "description": "Default: qemu:///system\n\nlibvirt connection uri."
              },
              "state": {
                "enum": [
                  "active",
                  "inactive",
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "specify which state you want a network to be in. If 'active', network will be started. If 'present', ensure that network is present but do not change its state; if it's missing, you need to specify xml argument. If 'inactive', network will be stopped. If 'undefined' or 'absent', network will be removed from I(libvirt) configuration."
              },
              "command": {
                "enum": [
                  "define",
                  "create",
                  "start",
                  "stop",
                  "destroy",
                  "undefine",
                  "get_xml",
                  "list_nets",
                  "facts",
                  "info",
                  "status"
                ],
                "type": "string",
                "description": "in addition to state management, various non-idempotent commands are available. See examples."
              },
              "autostart": {
                "enum": [
                  "yes",
                  "no"
                ],
                "type": "string",
                "description": "Specify if a given storage pool should be started automatically on system boot."
              },
              "network": {
                "type": "string",
                "description": "name of the network being managed. Note that network must be previously defined with xml."
              }
            }
          },
          "digital_ocean": {
            "type": "object",
            "description": "Create/delete a droplet in DigitalOcean and optionally wait for it to be 'running', or deploy an SSH key.",
            "properties": {
              "unique_name": {
                "type": "string",
                "description": "Default: no\n\nBool, require unique hostnames.  By default, DigitalOcean allows multiple hosts with the same name.  Setting this to \"yes\" allows only one host per name.  Useful for idempotence."
              },
              "virtio": {
                "type": "string",
                "description": "Default: yes\n\nBool, turn on virtio driver in droplet for improved network and storage I/O."
              },
              "region_id": {
                "type": "string",
                "description": "This is the slug of the region you would like your server to be created in."
              },
              "size_id": {
                "type": "string",
                "description": "This is the slug of the size you would like the droplet created with."
              },
              "backups_enabled": {
                "type": "string",
                "description": "Default: no\n\nOptional, Boolean, enables backups for your droplet."
              },
              "user_data": {
                "type": "string",
                "description": "Default: None\n\nopaque blob of data which is made available to the droplet"
              },
              "name": {
                "type": "string",
                "description": "String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key."
              },
              "image_id": {
                "type": "string",
                "description": "This is the slug of the image you would like the droplet created with."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the target."
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 300\n\nHow long before wait gives up, in seconds."
              },
              "command": {
                "type": "string",
                "description": "Default: droplet\n\nWhich target you want to operate on."
              },
              "ssh_key_ids": {
                "type": "string",
                "description": "Optional, array of of SSH key (numeric) ID that you would like to be added to the server."
              },
              "api_token": {
                "type": "string",
                "description": "DigitalOcean api token."
              },
              "id": {
                "type": "string",
                "description": "Numeric, the droplet id you want to operate on."
              },
              "private_networking": {
                "type": "string",
                "description": "Default: no\n\nBool, add an additional, private network interface to droplet for inter-droplet communication."
              },
              "ssh_pub_key": {
                "type": "string",
                "description": "The public SSH key you want to add to your account."
              },
              "wait": {
                "type": "string",
                "description": "Default: yes\n\nWait for the droplet to be in state 'running' before returning.  If wait is \"no\" an ip_address may not be returned."
              }
            }
          },
          "cs_securitygroup_rule": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "start_port",
                        "port"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add and remove security group rules.",
            "properties": {
              "icmp_code": {
                "description": "Error code for this icmp message. Required if C(protocol=icmp).",
                "$ref": "#/definitions/ansible_number"
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "start_port": {
                "description": "Start port for this rule. Required if C(protocol=tcp) or C(protocol=udp).",
                "$ref": "#/definitions/ansible_number"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "user_security_group": {
                "type": "string",
                "description": "Security group this rule is based of."
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "end_port": {
                "description": "End port for this rule. Required if C(protocol=tcp) or C(protocol=udp), but C(start_port) will be used if not set.",
                "$ref": "#/definitions/ansible_number"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the security group to be created in."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the security group rule."
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "security_group": {
                "type": "string",
                "description": "Name of the security group the rule is related to. The security group must be existing."
              },
              "protocol": {
                "enum": [
                  "tcp",
                  "udp",
                  "icmp",
                  "ah",
                  "esp",
                  "gre"
                ],
                "type": "string",
                "description": "Default: tcp\n\nProtocol of the security group rule."
              },
              "cidr": {
                "type": "string",
                "description": "Default: 0.0.0.0/0\n\nCIDR (full notation) to be used for security group rule."
              },
              "icmp_type": {
                "description": "Type of the icmp message being sent. Required if C(protocol=icmp).",
                "$ref": "#/definitions/ansible_number"
              },
              "type": {
                "enum": [
                  "ingress",
                  "egress"
                ],
                "type": "string",
                "description": "Default: ingress\n\nIngress or egress security group rule."
              },
              "port": {
                "description": "Start port for this rule. Required if C(protocol=tcp) or C(protocol=udp).",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "rabbitmq_user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "user",
                        "username",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add or remove users to RabbitMQ and assign permissions",
            "properties": {
              "node": {
                "type": "string",
                "description": "Default: rabbit\n\nerlang node name of the rabbit we wish to configure"
              },
              "username": {
                "type": "string",
                "description": "Name of user to add"
              },
              "force": {
                "description": "Default: no\n\nDeletes and recreates the user.",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "Name of user to add"
              },
              "write_priv": {
                "type": "string",
                "description": "Default: ^$\n\nRegular expression to restrict configure actions on a resource for the specified vhost.\nBy default all actions are restricted."
              },
              "tags": {
                "type": "string",
                "description": "User tags specified as comma delimited"
              },
              "read_priv": {
                "type": "string",
                "description": "Default: ^$\n\nRegular expression to restrict configure actions on a resource for the specified vhost.\nBy default all actions are restricted."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nSpecify if user is to be added or removed"
              },
              "user": {
                "type": "string",
                "description": "Name of user to add"
              },
              "configure_priv": {
                "type": "string",
                "description": "Default: ^$\n\nRegular expression to restrict configure actions on a resource for the specified vhost.\nBy default all actions are restricted."
              },
              "vhost": {
                "type": "string",
                "description": "Default: /\n\nvhost to apply access privileges."
              },
              "password": {
                "type": "string",
                "description": "Password of user to add.\nTo change the password of an existing user, you must also specify C(force=yes)."
              }
            }
          },
          "pkgutil": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manages CSW packages (SVR4 format) on Solaris 10 and 11.\nThese were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.\nPkgutil is an advanced packaging system, which resolves dependency on installation. It is designed for CSW packages.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "latest"
                ],
                "type": "string",
                "description": "Whether to install (C(present)), or remove (C(absent)) a package.\nThe upgrade (C(latest)) operation will update/install the package to the latest version available.\nNote: The module has a limitation that (C(latest)) only works for one package, not lists of them."
              },
              "site": {
                "type": "string",
                "description": "Specifies the repository path to install the package from.\nIts global definition is done in C(/etc/opt/csw/pkgutil.conf)."
              },
              "name": {
                "type": "string",
                "description": "Package name, e.g. (C(CSWnrpe))"
              }
            }
          },
          "win_copy": {
            "type": "object",
            "description": "The M(win_copy) module copies a file on the local box to remote windows locations.",
            "properties": {
              "dest": {
                "type": "string",
                "description": "Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too. Use \\ for path separators."
              },
              "src": {
                "type": "string",
                "description": "Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with \"/\", only inside contents of that directory are copied to destination. Otherwise, if it does not end with \"/\", the directory itself with all contents is copied. This behavior is similar to Rsync."
              }
            }
          },
          "boundary_meter": {
            "required": [
              "apiid",
              "apikey",
              "state"
            ],
            "type": "object",
            "description": "This module manages boundary meters",
            "properties": {
              "apiid": {
                "type": "string",
                "description": "Organizations boundary API ID"
              },
              "apikey": {
                "type": "string",
                "description": "Organizations boundary API KEY"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "meter name"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: True\n\nWhether to create or remove the client from boundary"
              }
            }
          },
          "apt_key": {
            "type": "object",
            "description": "Add or remove an I(apt) key, optionally downloading it",
            "properties": {
              "key": {
                "type": "string",
                "description": ""
              },
              "keyserver": {
                "type": "string",
                "description": "Default: none\n\nkeyserver to retrieve key from."
              },
              "url": {
                "type": "string",
                "description": "Default: none\n\nurl to retrieve key from."
              },
              "data": {
                "type": "string",
                "description": "Default: none\n\nkeyfile contents"
              },
              "keyring": {
                "type": "string",
                "description": "Default: none\n\npath to specific keyring file in /etc/apt/trusted.gpg.d"
              },
              "state": {
                "enum": [
                  "absent",
                  "present"
                ],
                "type": "string",
                "description": "Default: present\n\nused to specify if key is being added or revoked"
              },
              "file": {
                "type": "string",
                "description": "Default: none\n\nkeyfile path"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "id": {
                "type": "string",
                "description": "Default: none\n\nidentifier of key. Including this allows check mode to correctly report the changed state."
              }
            }
          },
          "zypper": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage packages on SUSE and openSUSE using the zypper and rpm tools.",
            "properties": {
              "name": {
                "description": "package name or package specifier with version C(name) or C(name-1.0). You can also pass a url or a local path to a rpm file.",
                "$ref": "#/definitions/ansible_array"
              },
              "disable_gpg_check": {
                "description": "Default: no\n\nWhether to disable to GPG signature checking of the package signature being installed. Has an effect only if state is I(present) or I(latest).",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "absent",
                  "installed",
                  "latest",
                  "present",
                  "removed"
                ],
                "type": "string",
                "description": "Default: present\n\nC(present) will make sure the package is installed. C(latest)  will make sure the latest version of the package is installed. C(absent)  will make sure the specified package is not installed."
              },
              "pkg": {
                "description": "package name or package specifier with version C(name) or C(name-1.0). You can also pass a url or a local path to a rpm file.",
                "$ref": "#/definitions/ansible_array"
              },
              "disable_recommends": {
                "description": "Default: yes\n\nCorresponds to the C(--no-recommends) option for I(zypper). Default behavior (C(yes)) modifies zypper's default behavior; C(no) does install recommended packages.",
                "$ref": "#/definitions/ansible_truth"
              },
              "type": {
                "enum": [
                  "package",
                  "patch",
                  "pattern",
                  "product",
                  "srcpackage"
                ],
                "type": "string",
                "description": "Default: package\n\nThe type of package to be operated on."
              }
            }
          },
          "assert": {
            "type": "object",
            "description": "This module asserts that a given expression is true and can be a simpler alternative to the 'fail' module in some cases.",
            "properties": {
              "host": {
                "type": "string",
                "description": ""
              },
              "connect_timeout": {
                "type": "string",
                "description": ""
              },
              "delay": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "started",
                  "stopped",
                  "present",
                  "absent",
                  "drained"
                ],
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "exclude_hosts": {
                "description": "",
                "$ref": "#/definitions/ansible_array"
              },
              "search_regex": {
                "type": "string",
                "description": ""
              },
              "path": {
                "type": "string",
                "description": ""
              },
              "port": {
                "type": "string",
                "description": ""
              }
            }
          },
          "mount": {
            "required": [
              "src",
              "name",
              "fstype",
              "state"
            ],
            "type": "object",
            "description": "This module controls active and configured mount points in C(/etc/fstab).",
            "properties": {
              "src": {
                "type": "string",
                "description": "device to be mounted on I(name)."
              },
              "name": {
                "type": "string",
                "description": "path to the mount point, eg: C(/mnt/files)"
              },
              "dump": {
                "type": "string",
                "description": "dump (see fstab(8)), Note that if nulled, C(state=present) will cease to work and duplicate entries will be made with subsequent runs."
              },
              "fstab": {
                "type": "string",
                "description": "Default: /etc/fstab\n\nfile to use instead of C(/etc/fstab). You shouldn't use that option unless you really know what you are doing. This might be useful if you need to configure mountpoints in a chroot environment."
              },
              "passno": {
                "type": "string",
                "description": "passno (see fstab(8)), Note that if nulled, C(state=present) will cease to work and duplicate entries will be made with subsequent runs."
              },
              "fstype": {
                "type": "string",
                "description": "file-system type"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "mounted",
                  "unmounted"
                ],
                "type": "string",
                "description": "If C(mounted) or C(unmounted), the device will be actively mounted or unmounted as needed and appropriately configured in I(fstab). C(absent) and C(present) only deal with I(fstab) but will not affect current mounting. If specifying C(mounted) and the mount point is not present, the mount point will be created. Similarly, specifying C(absent)        will remove the mount point directory."
              },
              "opts": {
                "type": "string",
                "description": "mount options (see fstab(8))"
              }
            }
          },
          "authorized_key": {
            "required": [
              "user",
              "key"
            ],
            "type": "object",
            "description": "Adds or removes SSH authorized keys for particular user accounts",
            "properties": {
              "exclusive": {
                "description": "Default: no\n\nWhether to remove all other non-specified keys from the authorized_keys file. Multiple keys can be specified in a single C(key) string value by separating them by newlines.\nThis option is not loop aware, so if you use C(with_) , it will be exclusive per iteration of the loop, if you want multiple keys in the file you need to pass them all to C(key) in a single batch as mentioned above.",
                "$ref": "#/definitions/ansible_truth"
              },
              "key_options": {
                "type": "string",
                "description": "A string of ssh key options to be prepended to the key in the authorized_keys file"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the given key (with the given key_options) should or should not be in the file"
              },
              "user": {
                "type": "string",
                "description": "The username on the remote host whose authorized_keys file will be modified"
              },
              "key": {
                "type": "string",
                "description": "The SSH public key(s), as a string or (since 1.9) url (https://github.com/username.keys)"
              },
              "path": {
                "type": "string",
                "description": "Default: (homedir)+/.ssh/authorized_keys\n\nAlternate path to the authorized_keys file"
              },
              "unique": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "manage_dir": {
                "description": "Default: yes\n\nWhether this module should manage the directory of the authorized key file.  If set, the module will create the directory, as well as set the owner and permissions of an existing directory. Be sure to set C(manage_dir=no) if you are using an alternate directory for authorized_keys, as set with C(path), since you could lock yourself out of SSH access. See the example below.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "vmware_dns_config": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage VMware ESXi DNS Configuration",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "dns_servers": {
                "description": "The DNS servers that the host should be configured to use.",
                "$ref": "#/definitions/ansible_array"
              },
              "domainname": {
                "type": "string",
                "description": "The domain the ESXi host should be apart of."
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "change_hostname_to": {
                "type": "string",
                "description": "The hostname that an ESXi host should be changed to."
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter API server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "flowdock": {
            "required": [
              "token",
              "msg",
              "type"
            ],
            "type": "object",
            "description": "Send a message to a flowdock team inbox or chat using the push API (see https://www.flowdock.com/api/team-inbox and https://www.flowdock.com/api/chat)",
            "properties": {
              "from_name": {
                "type": "string",
                "description": "(inbox only) Name of the message sender"
              },
              "from_address": {
                "type": "string",
                "description": "(inbox only - required) Email address of the message sender"
              },
              "tags": {
                "type": "string",
                "description": "tags of the message, separated by commas"
              },
              "type": {
                "enum": [
                  "inbox",
                  "chat"
                ],
                "type": "string",
                "description": "Whether to post to 'inbox' or 'chat'"
              },
              "external_user_name": {
                "type": "string",
                "description": "(chat only - required) Name of the \"user\" sending the message"
              },
              "project": {
                "type": "string",
                "description": "(inbox only) Human readable identifier for more detailed message categorization"
              },
              "source": {
                "type": "string",
                "description": "(inbox only - required) Human readable identifier of the application that uses the Flowdock API"
              },
              "token": {
                "type": "string",
                "description": "API token."
              },
              "link": {
                "type": "string",
                "description": "(inbox only) Link associated with the message. This will be used to link the message subject in Team Inbox."
              },
              "reply_to": {
                "type": "string",
                "description": "(inbox only) Email address for replies"
              },
              "subject": {
                "type": "string",
                "description": "(inbox only - required) Subject line of the message"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "msg": {
                "type": "string",
                "description": "Content of the message"
              }
            }
          },
          "locale_gen": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manages locales by editing /etc/locale.gen and invoking locale-gen.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the locale shall be present."
              },
              "name": {
                "type": "string",
                "description": "Name and encoding of the locale, such as \"en_GB.UTF-8\"."
              }
            }
          },
          "cs_domain": {
            "required": [
              "path"
            ],
            "type": "object",
            "description": "Create, update and remove domains.",
            "properties": {
              "api_key": {
                "type": "string",
                "description": ""
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "clean_up": {
                "description": "Clean up all domain resources like child domains and accounts.\nConsidered on C(state=absent).",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the domain."
              },
              "path": {
                "type": "string",
                "description": "Path of the domain.\nPrefix C(ROOT/) or C(/ROOT/) in path is optional."
              },
              "network_domain": {
                "type": "string",
                "description": "Network domain for networks in the domain."
              }
            }
          },
          "win_msi": {
            "type": "object",
            "description": "Installs or uninstalls a Windows MSI file that is already located on the target server",
            "properties": {
              "extra_args": {
                "type": "string",
                "description": "Additional arguments to pass to the msiexec.exe command"
              },
              "path": {
                "type": "string",
                "description": "File system path to the MSI file to install"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nWhether the MSI file should be installed or uninstalled"
              },
              "creates": {
                "type": "string",
                "description": "Path to a file created by installing the MSI to prevent from attempting to reinstall the package on every run"
              }
            }
          },
          "rax_cdb_database": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "create / delete a database in the Cloud Databases.",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name to give to the database"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "collate": {
                "type": "string",
                "description": "Default: utf8_general_ci\n\nSet of rules for comparing characters in a character set"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "cdb_id": {
                "type": "string",
                "description": "The databases server UUID"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "character_set": {
                "type": "string",
                "description": "Default: utf8\n\nSet of symbols and encodings"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "cronvar": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Use this module to manage crontab variables. This module allows you to create, update, or delete cron variable definitions.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the crontab variable."
              },
              "insertbefore": {
                "type": "string",
                "description": "Used with C(state=present). If specified, the variable will be inserted just before the variable specified."
              },
              "cron_file": {
                "type": "string",
                "description": "If specified, uses this file in cron.d instead of an individual user's crontab."
              },
              "value": {
                "type": "string",
                "description": "The value to set this variable to.  Required if state=present."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to ensure that the variable is present or absent."
              },
              "user": {
                "type": "string",
                "description": "Default: root\n\nThe specific user whose crontab should be modified."
              },
              "insertafter": {
                "type": "string",
                "description": "Used with C(state=present). If specified, the variable will be inserted after the variable specified."
              },
              "backup": {
                "description": "If set, create a backup of the crontab before it is modified. The location of the backup is returned in the C(backup) variable by this module.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "virt": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "guest"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages virtual machines supported by I(libvirt).",
            "properties": {
              "xml": {
                "type": "string",
                "description": "XML document used with the define command"
              },
              "guest": {
                "type": "string",
                "description": "name of the guest VM being managed. Note that VM must be previously defined with xml."
              },
              "uri": {
                "type": "string",
                "description": "libvirt connection uri"
              },
              "state": {
                "enum": [
                  "running",
                  "shutdown",
                  "destroyed",
                  "paused"
                ],
                "type": "string",
                "description": "Default: no\n\nNote that there may be some lag for state requests like C(shutdown) since these refer only to VM states. After starting a guest, it may not be immediately accessible."
              },
              "command": {
                "enum": [
                  "create",
                  "status",
                  "start",
                  "stop",
                  "pause",
                  "unpause",
                  "shutdown",
                  "undefine",
                  "destroy",
                  "get_xml",
                  "autostart",
                  "freemem",
                  "list_vms",
                  "info",
                  "nodeinfo",
                  "virttype",
                  "define"
                ],
                "type": "string",
                "description": "in addition to state management, various non-idempotent commands are available. See examples"
              },
              "name": {
                "type": "string",
                "description": "name of the guest VM being managed. Note that VM must be previously defined with xml."
              }
            }
          },
          "pagerduty_alert": {
            "required": [
              "name",
              "state",
              "service_key",
              "api_key"
            ],
            "type": "object",
            "description": "This module will let you trigger, acknowledge or resolve a PagerDuty incident by sending events",
            "properties": {
              "client_url": {
                "type": "string",
                "description": "The URL of the monitoring client that is triggering this event."
              },
              "name": {
                "type": "string",
                "description": "PagerDuty unique subdomain."
              },
              "state": {
                "enum": [
                  "triggered",
                  "acknowledged",
                  "resolved"
                ],
                "type": "string",
                "description": "Type of event to be sent."
              },
              "incident_key": {
                "type": "string",
                "description": "Identifies the incident to which this I(state) should be applied.\nFor C(triggered) I(state) - If there's no open (i.e. unresolved) incident with this key, a new one will be created. If there's already an open incident with a matching key, this event will be appended to that incident's log. The event key provides an easy way to \"de-dup\" problem reports.\nFor C(acknowledged) or C(resolved) I(state) - This should be the incident_key you received back when the incident was first opened by a trigger event. Acknowledge events referencing resolved or nonexistent incidents will be discarded."
              },
              "client": {
                "type": "string",
                "description": "The name of the monitoring client that is triggering this event."
              },
              "service_key": {
                "type": "string",
                "description": "The GUID of one of your \"Generic API\" services.\nThis is the \"service key\" listed on a Generic API's service detail page."
              },
              "api_key": {
                "type": "string",
                "description": "The pagerduty API key (readonly access), generated on the pagerduty site."
              },
              "desc": {
                "type": "string",
                "description": "Default: Created via Ansible\n\nFor C(triggered) I(state) - Required. Short description of the problem that led to this trigger. This field (or a truncated version) will be used when generating phone calls, SMS messages and alert emails. It will also appear on the incidents tables in the PagerDuty UI. The maximum length is 1024 characters.\nFor C(acknowledged) or C(resolved) I(state) - Text that will appear in the incident's log associated with this event."
              }
            }
          },
          "cs_template": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Register a template from URL, create a template from a ROOT volume of a stopped VM or its snapshot, extract and delete templates.",
            "properties": {
              "domain": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "vm": {
                "type": "string",
                "description": "VM name the template will be created from its volume or alternatively from a snapshot.\nVM must be in stopped state if created from its volume.\nMutually exclusive with C(url)."
              },
              "is_extractable": {
                "description": "True if the template or its derivatives are extractable.",
                "$ref": "#/definitions/ansible_truth"
              },
              "hypervisor": {
                "enum": [
                  "KVM",
                  "VMware",
                  "BareMetal",
                  "XenServer",
                  "LXC",
                  "HyperV",
                  "UCS",
                  "OVM",
                  "Simulator"
                ],
                "type": "string",
                "description": "Default: none\n\nName the hypervisor to be used for creating the new template.\nRelevant when using C(state=present)."
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone you wish the template to be registered or deleted from.\nIf not specified, first found zone will be used."
              },
              "sshkey_enabled": {
                "description": "True if the template supports the sshkey upload feature.",
                "$ref": "#/definitions/ansible_truth"
              },
              "is_dynamically_scalable": {
                "description": "Register the template having XS/VMWare tools installed in order to support dynamic scaling of VM CPU/memory.\nOnly used if C(state) is present.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "extracted"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the template."
              },
              "is_ready": {
                "description": "This flag is used for searching existing templates.\nIf set to C(true), it will only list template ready for deployment e.g. successfully downloaded and installed.\nRecommended to set it to C(false).",
                "$ref": "#/definitions/ansible_truth"
              },
              "details": {
                "type": "string",
                "description": "Template details in key/value pairs."
              },
              "is_routing": {
                "description": "True if the template type is routing i.e., if template is used to deploy router.\nOnly considered if C(url) is used.",
                "$ref": "#/definitions/ansible_truth"
              },
              "is_featured": {
                "description": "Register the template to be featured.\nOnly used if C(state) is present.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "bits": {
                "description": "Default: 64\n\n32 or 64 bits support.",
                "$ref": "#/definitions/ansible_number"
              },
              "format": {
                "enum": [
                  "QCOW2",
                  "RAW",
                  "VHD",
                  "OVA"
                ],
                "type": "string",
                "description": "The format for the template.\nRelevant when using C(state=present)."
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "is_public": {
                "description": "Register the template to be publicly available to all users.\nOnly used if C(state) is present.",
                "$ref": "#/definitions/ansible_truth"
              },
              "requires_hvm": {
                "description": "true if this template requires HVM.",
                "$ref": "#/definitions/ansible_truth"
              },
              "password_enabled": {
                "description": "True if the template supports the password reset feature.",
                "$ref": "#/definitions/ansible_truth"
              },
              "display_text": {
                "type": "string",
                "description": "Display text of the template."
              },
              "account": {
                "type": "string",
                "description": ""
              },
              "template_tag": {
                "type": "string",
                "description": "the tag for this template."
              },
              "name": {
                "type": "string",
                "description": "Name of the template."
              },
              "url": {
                "type": "string",
                "description": "URL of where the template is hosted on C(state=present).\nURL to which the template would be extracted on C(state=extracted).\nMutually exclusive with C(vm)."
              },
              "template_filter": {
                "enum": [
                  "featured",
                  "self",
                  "selfexecutable",
                  "sharedexecutable",
                  "executable",
                  "community"
                ],
                "type": "string",
                "description": "Default: self\n\nName of the filter used to search for the template."
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "cross_zones": {
                "description": "Whether the template should be syned across zones.\nOnly used if C(state) is present.",
                "$ref": "#/definitions/ansible_truth"
              },
              "project": {
                "type": "string",
                "description": "Name of the project the template to be registered in."
              },
              "snapshot": {
                "type": "string",
                "description": "Name of the snapshot, created from the VM ROOT volume, the template will be created from.\nC(vm) is required together with this argument."
              },
              "mode": {
                "enum": [
                  "http_download",
                  "ftp_upload"
                ],
                "type": "string",
                "description": ""
              },
              "checksum": {
                "type": "string",
                "description": "The MD5 checksum value of this template.\nIf set, we search by checksum instead of name."
              },
              "os_type": {
                "type": "string",
                "description": "OS type that best represents the OS of this template."
              }
            }
          },
          "profitbricks_volume_attachments": {
            "type": "object",
            "description": "Allows you to attach or detach a volume from a ProfitBricks server. This module has a dependency on profitbricks >= 1.0.0",
            "properties": {
              "datacenter": {
                "type": "string",
                "description": "The datacenter in which to operate."
              },
              "subscription_user": {
                "type": "string",
                "description": "The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable."
              },
              "server": {
                "type": "string",
                "description": "The name of the server you wish to detach or attach the volume."
              },
              "volume": {
                "type": "string",
                "description": "The volume name or ID."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "wait_timeout": {
                "description": "Default: 600\n\nhow long before wait gives up, in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "subscription_password": {
                "type": "string",
                "description": "THe ProfitBricks password. Overrides the PB_PASSWORD environement variable."
              },
              "wait": {
                "description": "Default: yes\n\nwait for the operation to complete before returning",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "os_auth": {
            "type": "object",
            "description": "Retrieve an auth token from an OpenStack Cloud",
            "properties": {}
          },
          "rollbar_deployment": {
            "required": [
              "environment",
              "token",
              "revision"
            ],
            "type": "object",
            "description": "Notify Rollbar about app deployments (see https://rollbar.com/docs/deploys_other/)",
            "properties": {
              "comment": {
                "type": "string",
                "description": "Deploy comment (e.g. what is being deployed)."
              },
              "rollbar_user": {
                "type": "string",
                "description": "Rollbar username of the user who deployed."
              },
              "url": {
                "type": "string",
                "description": "Default: https://api.rollbar.com/api/1/deploy/\n\nOptional URL to submit the notification to."
              },
              "environment": {
                "type": "string",
                "description": "Name of the environment being deployed, e.g. 'production'."
              },
              "token": {
                "type": "string",
                "description": "Your project access token."
              },
              "user": {
                "type": "string",
                "description": "User who deployed."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "revision": {
                "type": "string",
                "description": "Revision number/sha being deployed."
              }
            }
          },
          "znode": {
            "required": [
              "hosts",
              "name"
            ],
            "type": "object",
            "description": "",
            "properties": {
              "name": {
                "type": "string",
                "description": "The path of the znode."
              },
              "value": {
                "type": "string",
                "description": "Default: None\n\nThe value assigned to the znode."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: None\n\nThe state to enforce. Mutually exclusive with op."
              },
              "hosts": {
                "type": "string",
                "description": "A list of ZooKeeper servers (format '[server]:[port]')."
              },
              "timeout": {
                "description": "Default: 300\n\nThe amount of time to wait for a node to appear.",
                "$ref": "#/definitions/ansible_number"
              },
              "op": {
                "enum": [
                  "get",
                  "wait",
                  "list"
                ],
                "type": "string",
                "description": "Default: None\n\nAn operation to perform. Mutually exclusive with state."
              }
            }
          },
          "sendgrid": {
            "required": [
              "body",
              "username",
              "to_addresses",
              "from_address",
              "password",
              "subject"
            ],
            "type": "object",
            "description": "Sends an email with a SendGrid account through their API, not through the SMTP service.",
            "properties": {
              "body": {
                "type": "string",
                "description": ""
              },
              "username": {
                "type": "string",
                "description": "username for logging into the SendGrid account"
              },
              "from_address": {
                "type": "string",
                "description": "the address in the \"from\" field for the email"
              },
              "to_addresses": {
                "description": "a list with one or more recipient email addresses",
                "$ref": "#/definitions/ansible_array"
              },
              "password": {
                "type": "string",
                "description": "password that corresponds to the username"
              },
              "subject": {
                "type": "string",
                "description": "the desired subject for the email"
              }
            }
          },
          "hostname": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Set system's hostname.\nCurrently implemented on Debian, Ubuntu, Fedora, RedHat, openSUSE, Linaro, ScientificLinux, Arch, CentOS, AMI.\nAny distribution that uses systemd as their init system.\nNote, this module does *NOT* modify /etc/hosts. You need to modify it yourself using other modules like template or replace.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the host"
              }
            }
          },
          "vmware_portgroup": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create a VMware portgroup",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the ESXi server"
              },
              "portgroup_name": {
                "type": "string",
                "description": "Portgroup name to add"
              },
              "admin": {
                "type": "string",
                "description": "The username of the ESXi server"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the ESXi server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the ESXi server"
              },
              "user": {
                "type": "string",
                "description": "The username of the ESXi server"
              },
              "pass": {
                "type": "string",
                "description": "The password of the ESXi server"
              },
              "password": {
                "type": "string",
                "description": "The password of the ESXi server"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "switch_name": {
                "type": "string",
                "description": "vSwitch to modify"
              },
              "vlan_id": {
                "description": "VLAN ID to assign to portgroup",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "docker_image": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, check and remove docker images",
            "properties": {
              "use_tls": {
                "enum": [
                  "no",
                  "encrypt",
                  "verify"
                ],
                "type": "string",
                "description": "Whether to use tls to connect to the docker server.  \"no\" means not to use tls (and ignore any other tls related parameters). \"encrypt\" means to use tls to encrypt the connection to the server.  \"verify\" means to also verify that the server's certificate is valid for the server (this both verifies the certificate against the CA and that the certificate was issued for that host. If this is unspecified, tls will only be used if one of the other tls options require it."
              },
              "name": {
                "type": "string",
                "description": "Image name to work with"
              },
              "nocache": {
                "description": "Do not use cache with building",
                "$ref": "#/definitions/ansible_truth"
              },
              "docker_url": {
                "type": "string",
                "description": "Default: ${DOCKER_HOST} or unix://var/run/docker.sock\n\nURL of docker host to issue commands to"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "build"
                ],
                "type": "string",
                "description": "Default: present\n\nSet the state of the image"
              },
              "tls_ca_cert": {
                "type": "string",
                "description": "Default: ${DOCKER_CERT_PATH}/ca.pem\n\nPath to a PEM-encoded certificate authority to secure the Docker connection. This has no effect if use_tls is encrypt."
              },
              "tls_hostname": {
                "type": "string",
                "description": "Default: Taken from docker_url\n\nA hostname to check matches what's supplied in the docker server's certificate.  If unspecified, the hostname is taken from the docker_url."
              },
              "docker_api_version": {
                "type": "string",
                "description": "Default: docker-py default remote API version\n\nRemote API version to use. This defaults to the current default as specified by docker-py."
              },
              "tls_client_cert": {
                "type": "string",
                "description": "Default: ${DOCKER_CERT_PATH}/cert.pem\n\nPath to the PEM-encoded certificate used to authenticate docker client. If specified tls_client_key must be valid"
              },
              "tls_client_key": {
                "type": "string",
                "description": "Default: ${DOCKER_CERT_PATH}/key.pem\n\nPath to the PEM-encoded key used to authenticate docker client. If specified tls_client_cert must be valid"
              },
              "timeout": {
                "description": "Default: 600\n\nSet image operation timeout",
                "$ref": "#/definitions/ansible_number"
              },
              "path": {
                "type": "string",
                "description": "Path to directory with Dockerfile"
              },
              "tag": {
                "type": "string",
                "description": "Default: latest\n\nImage tag to work with"
              },
              "dockerfile": {
                "type": "string",
                "description": "Default: Dockerfile\n\nDockerfile to use"
              }
            }
          },
          "clc_group": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create or delete Server Groups at Centurylink Centurylink Cloud",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the Server Group"
              },
              "parent": {
                "type": "string",
                "description": "The parent group of the server group. If parent is not provided, it creates the group at top level."
              },
              "description": {
                "type": "string",
                "description": "A description of the Server Group"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to create or delete the group"
              },
              "location": {
                "type": "string",
                "description": "Datacenter to create the group in. If location is not provided, the group gets created in the default datacenter associated with the account"
              },
              "wait": {
                "description": "Default: True\n\nWhether to wait for the tasks to finish before returning.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "user"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage user accounts and user attributes.",
            "properties": {
              "comment": {
                "type": "string",
                "description": "Optionally sets the description (aka I(GECOS)) of user account."
              },
              "ssh_key_bits": {
                "type": "string",
                "description": "Default: 2048\n\nOptionally specify number of bits in SSH key to create."
              },
              "update_password": {
                "enum": [
                  "always",
                  "on_create"
                ],
                "type": "string",
                "description": "Default: always\n\nC(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users."
              },
              "ssh_key_passphrase": {
                "type": "string",
                "description": "Set a passphrase for the SSH key.  If no passphrase is provided, the SSH key will default to having no passphrase."
              },
              "force": {
                "description": "Default: no\n\nWhen used with C(state=absent), behavior is as with C(userdel --force).",
                "$ref": "#/definitions/ansible_truth"
              },
              "ssh_key_type": {
                "type": "string",
                "description": "Default: rsa\n\nOptionally specify the type of SSH key to generate. Available SSH key types will depend on implementation present on target host."
              },
              "non_unique": {
                "description": "Default: no\n\nOptionally when used with the -u option, this option allows to change the user ID to a non-unique value.",
                "$ref": "#/definitions/ansible_truth"
              },
              "home": {
                "type": "string",
                "description": "Optionally set the user's home directory."
              },
              "skeleton": {
                "type": "string",
                "description": "Optionally set a home skeleton directory. Requires createhome option!"
              },
              "append": {
                "description": "Default: no\n\nIf C(yes), will only add groups, not set them to just the list in I(groups).",
                "$ref": "#/definitions/ansible_truth"
              },
              "uid": {
                "type": "string",
                "description": "Optionally sets the I(UID) of the user."
              },
              "ssh_key_comment": {
                "type": "string",
                "description": "Default: ansible-generated on $HOSTNAME\n\nOptionally define the comment for the SSH key."
              },
              "group": {
                "type": "string",
                "description": "Optionally sets the user's primary group (takes a group name)."
              },
              "system": {
                "description": "Default: no\n\nWhen creating an account, setting this to C(yes) makes the user a system account.  This setting cannot be changed on existing users.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the account should exist or not, taking action if the state is different from what is stated."
              },
              "shell": {
                "type": "string",
                "description": "Optionally set the user's shell."
              },
              "expires": {
                "type": "number",
                "description": "Default: None\n\nAn expiry time for the user in epoch, it will be ignored on platforms that do not support this. Currently supported on Linux and FreeBSD."
              },
              "ssh_key_file": {
                "type": "string",
                "description": "Default: .ssh/id_rsa\n\nOptionally specify the SSH key filename. If this is a relative filename then it will be relative to the user's home directory."
              },
              "user": {
                "type": "string",
                "description": "Name of the user to create, remove or modify."
              },
              "groups": {
                "type": "string",
                "description": "Puts the user in this comma-delimited list of groups. When set to the empty string ('groups='), the user is removed from all groups except the primary group."
              },
              "move_home": {
                "description": "Default: no\n\nIf set to C(yes) when used with C(home=), attempt to move the user's home directory to the specified directory if it isn't there already.",
                "$ref": "#/definitions/ansible_truth"
              },
              "password": {
                "type": "string",
                "description": "Optionally set the user's password to this crypted value.  See the user example in the github examples directory for what this looks like in a playbook. See U(http://docs.ansible.com/ansible/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module) for details on various ways to generate these password values. Note on Darwin system, this value has to be cleartext. Beware of security issues."
              },
              "name": {
                "type": "string",
                "description": "Name of the user to create, remove or modify."
              },
              "createhome": {
                "description": "Default: yes\n\nUnless set to C(no), a home directory will be made for the user when the account is created or if the home directory does not exist.",
                "$ref": "#/definitions/ansible_truth"
              },
              "remove": {
                "description": "Default: no\n\nWhen used with C(state=absent), behavior is as with C(userdel --remove).",
                "$ref": "#/definitions/ansible_truth"
              },
              "login_class": {
                "type": "string",
                "description": "Optionally sets the user's login class for FreeBSD, OpenBSD and NetBSD systems."
              },
              "generate_ssh_key": {
                "description": "Default: no\n\nWhether to generate a SSH key for the user in question. This will B(not) overwrite an existing SSH key.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "webfaction_site": {
            "required": [
              "host",
              "login_password",
              "login_name",
              "name"
            ],
            "type": "object",
            "description": "Add or remove a website on a Webfaction host.  Further documentation at http://github.com/quentinsf/ansible-webfaction.",
            "properties": {
              "site_apps": {
                "type": "string",
                "description": "A mapping of URLs to apps"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the website should exist"
              },
              "subdomains": {
                "type": "string",
                "description": "A list of subdomains associated with this site."
              },
              "host": {
                "type": "string",
                "description": "The webfaction host on which the site should be created."
              },
              "https": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Default: false\n\nWhether or not to use HTTPS"
              },
              "login_password": {
                "type": "string",
                "description": "The webfaction password to use"
              },
              "login_name": {
                "type": "string",
                "description": "The webfaction account to use"
              },
              "name": {
                "type": "string",
                "description": "The name of the website"
              }
            }
          },
          "gce_img": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "This module can create and delete GCE private images from gzipped compressed tarball containing raw disk data or from existing detached disks in any zone. U(https://cloud.google.com/compute/docs/images)",
            "properties": {
              "description": {
                "type": "string",
                "description": "an optional description"
              },
              "zone": {
                "type": "string",
                "description": "Default: us-central1-a\n\nthe zone of the disk specified by source"
              },
              "service_account_email": {
                "type": "string",
                "description": "service account email"
              },
              "pem_file": {
                "type": "string",
                "description": "path to the pem file associated with the service account email"
              },
              "source": {
                "type": "string",
                "description": "the source disk or the Google Cloud Storage URI to create the image from"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\ndesired state of the image"
              },
              "timeout": {
                "description": "Default: 180\n\ntimeout for the operation",
                "$ref": "#/definitions/ansible_number"
              },
              "project_id": {
                "type": "string",
                "description": "your GCE project ID"
              },
              "name": {
                "type": "string",
                "description": "the name of the image to create or delete"
              }
            }
          },
          "debconf": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "question",
                        "setting",
                        "selection"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Configure a .deb package using debconf-set-selections. Or just query existing selections.",
            "properties": {
              "selection": {
                "type": "string",
                "description": "A debconf configuration setting"
              },
              "name": {
                "type": "string",
                "description": "Name of package to configure."
              },
              "question": {
                "type": "string",
                "description": "A debconf configuration setting"
              },
              "value": {
                "type": "string",
                "description": "Value to set the configuration to"
              },
              "vtype": {
                "enum": [
                  "string",
                  "password",
                  "boolean",
                  "select",
                  "multiselect",
                  "note",
                  "error",
                  "title",
                  "text"
                ],
                "type": "string",
                "description": "The type of the value supplied"
              },
              "pkg": {
                "type": "string",
                "description": "Name of package to configure."
              },
              "unseen": {
                "description": "Do not set 'seen' flag when pre-seeding",
                "$ref": "#/definitions/ansible_truth"
              },
              "setting": {
                "type": "string",
                "description": "A debconf configuration setting"
              }
            }
          },
          "bigip_node": {
            "type": "object",
            "description": "Manages F5 BIG-IP LTM nodes via iControl SOAP API",
            "properties": {
              "session_state": {
                "type": "string",
                "description": "Set new session availability status for node"
              },
              "name": {
                "type": "string",
                "description": "Node name"
              },
              "monitor_state": {
                "type": "string",
                "description": "Set monitor availability status for node"
              },
              "partition": {
                "type": "string",
                "description": "Default: Common\n\nPartition"
              },
              "host": {
                "type": "string",
                "description": "Node IP. Required when state=present and node does not exist. Error when state=absent."
              },
              "server": {
                "type": "string",
                "description": "BIG-IP host"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nPool member state"
              },
              "user": {
                "type": "string",
                "description": "BIG-IP username"
              },
              "password": {
                "type": "string",
                "description": "BIG-IP password"
              },
              "validate_certs": {
                "type": "string",
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8"
              },
              "description": {
                "type": "string",
                "description": "Node description."
              }
            }
          },
          "maven_artifact": {
            "type": "object",
            "description": "Downloads an artifact from a maven repository given the maven coordinates provided to the module. Can retrieve\nsnapshots or release versions of the artifact and will resolve the latest available version if one is not\navailable.",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username to authenticate as to the Maven Repository"
              },
              "group_id": {
                "type": "string",
                "description": "The Maven groupId coordinate"
              },
              "artifact_id": {
                "type": "string",
                "description": "The maven artifactId coordinate"
              },
              "extension": {
                "type": "string",
                "description": "Default: jar\n\nThe maven type/extension coordinate"
              },
              "dest": {
                "type": "string",
                "description": "The path where the artifact should be written to"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe desired state of the artifact"
              },
              "version": {
                "type": "string",
                "description": "Default: latest\n\nThe maven version coordinate"
              },
              "repository_url": {
                "type": "string",
                "description": "Default: http://repo1.maven.org/maven2\n\nThe URL of the Maven Repository to download from"
              },
              "password": {
                "type": "string",
                "description": "The password to authenticate with to the Maven Repository"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be set to C(no) when no other option exists.",
                "$ref": "#/definitions/ansible_truth"
              },
              "classifier": {
                "type": "string",
                "description": "The maven classifier coordinate"
              }
            }
          },
          "pkg5": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "accept_licenses",
                        "accept_licences",
                        "accept"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "IPS packages are the native packages in Solaris 11 and higher.",
            "properties": {
              "accept_licenses": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Accept any licences."
              },
              "accept_licences": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Accept any licences."
              },
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "latest",
                  "absent",
                  "uninstalled",
                  "removed"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to install (I(present), I(latest)), or remove (I(absent)) a package."
              },
              "name": {
                "description": "An FRMI of the package(s) to be installed/removed/updated.\nMultiple packages may be specified, separated by C(,).",
                "$ref": "#/definitions/ansible_array"
              },
              "accept": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "Accept any licences."
              }
            }
          },
          "rax_files": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manipulate Rackspace Cloud Files Containers",
            "properties": {
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "private": {
                "description": "Used to set a container as private, removing it from the CDN.  B(Warning!) Private containers, if previously made public, can have live objects available until the TTL on cached objects expires",
                "$ref": "#/definitions/ansible_truth"
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "clear_meta": {
                "description": "Default: no\n\nOptionally clear existing metadata when applying metadata to existing containers. Selecting this option is only appropriate when setting type=meta",
                "$ref": "#/definitions/ansible_truth"
              },
              "ttl": {
                "description": "In seconds, set a container-wide TTL for all objects cached on CDN edge nodes. Setting a TTL is only appropriate for containers that are public",
                "$ref": "#/definitions/ansible_number"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "container": {
                "type": "string",
                "description": "The container to use for container or metadata operations."
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "list"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "web_error": {
                "type": "string",
                "description": "Sets an object to be presented as the HTTP error page when accessed by the CDN URL"
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "type": {
                "enum": [
                  "container",
                  "meta"
                ],
                "type": "string",
                "description": "Default: file\n\nType of object to do work on, i.e. metadata object or a container object"
              },
              "public": {
                "description": "Used to set a container as public, available via the Cloud Files CDN",
                "$ref": "#/definitions/ansible_truth"
              },
              "username": {
                "type": "string",
                "description": ""
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "web_index": {
                "type": "string",
                "description": "Sets an object to be presented as the HTTP index page when accessed by the CDN URL"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": "Default: DFW\n\nRegion to create an instance in"
              },
              "meta": {
                "type": "object",
                "description": "A hash of items to set as metadata values on a container"
              }
            }
          },
          "filesystem": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "dev",
                        "device"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "dev"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "device"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "fstype",
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "fstype"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module creates file system.",
            "properties": {
              "force": {
                "description": "Default: no\n\nIf yes, allows to create new filesystem on devices that already has filesystem.",
                "$ref": "#/definitions/ansible_truth"
              },
              "dev": {
                "type": "string",
                "description": "Target block device."
              },
              "fstype": {
                "type": "string",
                "description": "File System type to be created."
              },
              "resizefs": {
                "description": "Default: no\n\nIf yes, if the block device and filessytem size differ, grow the filesystem into the space. Note, XFS Will only grow if mounted.",
                "$ref": "#/definitions/ansible_truth"
              },
              "device": {
                "type": "string",
                "description": "Target block device."
              },
              "type": {
                "type": "string",
                "description": "File System type to be created."
              },
              "opts": {
                "type": "string",
                "description": "List of options to be passed to mkfs command."
              }
            }
          },
          "docker": {
            "required": [
              "image"
            ],
            "type": "object",
            "description": "Manage the life cycle of docker containers.",
            "properties": {
              "publish_all_ports": {
                "description": "Publish all exposed ports to the host interfaces.",
                "$ref": "#/definitions/ansible_truth"
              },
              "tty": {
                "description": "Allocate a pseudo-tty within the container.",
                "$ref": "#/definitions/ansible_truth"
              },
              "cap_add": {
                "description": "Add capabilities for the container. Requires docker-py >= 0.5.0.",
                "$ref": "#/definitions/ansible_array"
              },
              "insecure_registry": {
                "description": "Use insecure private registry by HTTP instead of HTTPS. Needed for docker-py >= 0.5.0.",
                "$ref": "#/definitions/ansible_truth"
              },
              "links": {
                "description": "List of other containers to link within this container with an optional\nalias. Use docker CLI-style syntax: C(redis:myredis).",
                "$ref": "#/definitions/ansible_array"
              },
              "domainname": {
                "type": "string",
                "description": "Container domain name."
              },
              "docker_url": {
                "type": "string",
                "description": "Default: ${DOCKER_HOST} or unix://var/run/docker.sock\n\nURL of the host running the docker daemon. This will default to the env var DOCKER_HOST if unspecified."
              },
              "image": {
                "type": "string",
                "description": "Container image used to match and launch containers."
              },
              "pid": {
                "type": "string",
                "description": "Default: None\n\nSet the PID namespace mode for the container (currently only supports 'host'). Requires docker-py >= 1.0.0 and docker >= 1.5.0"
              },
              "docker_api_version": {
                "type": "string",
                "description": "Default: docker-py default remote API version\n\nRemote API version to use. This defaults to the current default as specified by docker-py."
              },
              "stop_timeout": {
                "description": "Default: 10\n\nHow many seconds to wait for the container to stop before killing it.",
                "$ref": "#/definitions/ansible_number"
              },
              "tls_client_key": {
                "type": "string",
                "description": "Default: ${DOCKER_CERT_PATH}/key.pem\n\nPath to the PEM-encoded key used to authenticate docker client. If specified tls_client_cert must be valid"
              },
              "read_only": {
                "description": "Mount the container's root filesystem as read only",
                "$ref": "#/definitions/ansible_truth"
              },
              "use_tls": {
                "enum": [
                  "no",
                  "encrypt",
                  "verify"
                ],
                "type": "string",
                "description": "Whether to use tls to connect to the docker server.  \"no\" means not to use tls (and ignore any other tls related parameters). \"encrypt\" means to use tls to encrypt the connection to the server.  \"verify\" means to also verify that the server's certificate is valid for the server (this both verifies the certificate against the CA and that the certificate was issued for that host. If this is unspecified, tls will only be used if one of the other tls options require it."
              },
              "password": {
                "type": "string",
                "description": "Remote API password."
              },
              "hostname": {
                "type": "string",
                "description": "Container hostname."
              },
              "lxc_conf": {
                "description": "LXC configuration parameters, such as C(lxc.aa_profile:unconfined).",
                "$ref": "#/definitions/ansible_array"
              },
              "tls_ca_cert": {
                "type": "string",
                "description": "Default: ${DOCKER_CERT_PATH}/ca.pem\n\nPath to a PEM-encoded certificate authority to secure the Docker connection. This has no effect if use_tls is encrypt."
              },
              "state": {
                "enum": [
                  "present",
                  "started",
                  "reloaded",
                  "restarted",
                  "stopped",
                  "killed",
                  "absent",
                  "running"
                ],
                "type": "string",
                "description": "Default: started\n\nAssert the container's desired state. \"present\" only asserts that the matching containers exist. \"started\" asserts that the matching containers both exist and are running, but takes no action if any configuration has changed. \"reloaded\" (added in Ansible 1.9) asserts that all matching containers are running and restarts any that have any images or configuration out of date. \"restarted\" unconditionally restarts (or starts) the matching containers. \"stopped\" and '\"killed\" stop and kill all matching containers. \"absent\" stops and then' removes any matching containers."
              },
              "tls_client_cert": {
                "type": "string",
                "description": "Default: ${DOCKER_CERT_PATH}/cert.pem\n\nPath to the PEM-encoded certificate used to authenticate docker client. If specified tls_client_key must be valid"
              },
              "dns": {
                "type": "string",
                "description": "List of custom DNS servers for the container."
              },
              "volumes_from": {
                "type": "string",
                "description": "List of names of containers to mount volumes from."
              },
              "net": {
                "type": "string",
                "description": "Network mode for the launched container: bridge, none, container:<name|id>\nor host. Requires docker >= 0.11."
              },
              "privileged": {
                "description": "Whether the container should run in privileged mode or not.",
                "$ref": "#/definitions/ansible_truth"
              },
              "username": {
                "type": "string",
                "description": "Remote API username."
              },
              "docker_user": {
                "type": "string",
                "description": "Username or UID to use within the container"
              },
              "extra_hosts": {
                "type": "object",
                "description": "Dict of custom host-to-IP mappings to be defined in the container"
              },
              "log_driver": {
                "enum": [
                  "json-file",
                  "none",
                  "syslog",
                  "journald",
                  "gelf",
                  "fluentd"
                ],
                "type": "string",
                "description": "Default: json-file\n\nYou can specify a different logging driver for the container than for the daemon. \"json-file\" Default logging driver for Docker. Writes JSON messages to file. docker logs command is available only for this logging driver. \"none\" disables any logging for the container. \"syslog\" Syslog logging driver for Docker. Writes log messages to syslog. docker logs command is not available for this logging driver. \"journald\" Journald logging driver for Docker. Writes log messages to \"journald\". \"gelf\" Graylog Extended Log Format (GELF) logging driver for Docker. Writes log messages to a GELF endpoint likeGraylog or Logstash. \"fluentd\" Fluentd logging driver for Docker. Writes log messages to \"fluentd\" (forward input). If not defined explicitly, the Docker daemon's default (\"json-file\") will apply. Requires docker >= 1.6.0."
              },
              "expose": {
                "description": "List of additional container ports to expose for port mappings or links. If the port is already exposed using EXPOSE in a Dockerfile, you don't need to expose it again.",
                "$ref": "#/definitions/ansible_array"
              },
              "stdin_open": {
                "description": "Keep stdin open after a container is launched.",
                "$ref": "#/definitions/ansible_truth"
              },
              "memory_limit": {
                "type": "string",
                "description": "RAM allocated to the container as a number of bytes or as a human-readable string like \"512MB\". Leave as \"0\" to specify no limit."
              },
              "tls_hostname": {
                "type": "string",
                "description": "Default: Taken from docker_url\n\nA hostname to check matches what's supplied in the docker server's certificate.  If unspecified, the hostname is taken from the docker_url."
              },
              "registry": {
                "type": "string",
                "description": "Default: DockerHub\n\nRemote registry URL to pull images from."
              },
              "detach": {
                "description": "Default: True\n\nEnable detached mode to leave the container running in background. If disabled, fail unless the process exits cleanly.",
                "$ref": "#/definitions/ansible_truth"
              },
              "memory_swap": {
                "type": "string",
                "description": ""
              },
              "cpu_set": {
                "type": "string",
                "description": "CPUs in which to allow execution. Requires docker-py >= 0.6.0."
              },
              "pull": {
                "enum": [
                  "missing",
                  "always"
                ],
                "type": "string",
                "description": "Default: missing\n\nControl when container images are updated from the C(docker_url) registry. If \"missing,\" images will be pulled only when missing from the host; if '\"always,\" the registry will be checked for a newer version of the image' each time the task executes."
              },
              "name": {
                "type": "string",
                "description": "Name used to match and uniquely name launched containers. Explicit names are used to uniquely identify a single container or to link among containers. Mutually exclusive with a \"count\" other than \"1\"."
              },
              "env": {
                "type": "object",
                "description": "Pass a dict of environment variables to the container."
              },
              "signal": {
                "type": "string",
                "description": "Default: KILL\n\nWith the state \"killed\", you can alter the signal sent to the container."
              },
              "log_opt": {
                "type": "object",
                "description": "Additional options to pass to the logging driver selected above. See Docker `log-driver <https://docs.docker.com/reference/logging/overview/>` documentation for more information. Requires docker >=1.7.0."
              },
              "restart_policy": {
                "enum": [
                  "no",
                  "on-failure",
                  "always"
                ],
                "type": "string",
                "description": "Container restart policy."
              },
              "count": {
                "type": "string",
                "description": "Default: 1\n\nNumber of matching containers that should be in the desired state."
              },
              "email": {
                "type": "string",
                "description": "Remote API email."
              },
              "command": {
                "type": "string",
                "description": "Command used to match and launch containers."
              },
              "restart_policy_retry": {
                "description": "Maximum number of times to restart a container. Leave as \"0\" for unlimited retries.",
                "$ref": "#/definitions/ansible_number"
              },
              "volumes": {
                "description": "List of volumes to mount within the container using docker CLI-style\nsyntax: C(/host:/container[:mode]) where \"mode\" may be \"rw\" or \"ro\".",
                "$ref": "#/definitions/ansible_array"
              },
              "debug": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "cap_drop": {
                "description": "Drop capabilities for the container. Requires docker-py >= 0.5.0.",
                "$ref": "#/definitions/ansible_array"
              },
              "ports": {
                "description": "List containing private to public port mapping specification. Use docker 'CLI-style syntax: C(8000), C(9000:8000), or C(0.0.0.0:9000:8000)' where 8000 is a container port, 9000 is a host port, and 0.0.0.0 is - a host interface. The container ports need to be exposed either in the Dockerfile or via the C(expose) option.",
                "$ref": "#/definitions/ansible_array"
              }
            }
          },
          "quantum_floating_ip_associate": {
            "required": [
              "instance_name",
              "login_password",
              "ip_address"
            ],
            "type": "object",
            "description": "Associates or disassociates a specific floating IP with a particular instance",
            "properties": {
              "region_name": {
                "type": "string",
                "description": "Default: None\n\nname of the region"
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "instance_name": {
                "type": "string",
                "description": "Default: None\n\nname of the instance to which the public IP should be assigned"
              },
              "login_tenant_name": {
                "type": "string",
                "description": "Default: True\n\nthe tenant name of the login user"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nindicates the desired state of the resource"
              },
              "auth_url": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nthe keystone url for authentication"
              },
              "login_password": {
                "type": "string",
                "description": "Default: yes\n\npassword of login user"
              },
              "login_username": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "ip_address": {
                "type": "string",
                "description": "Default: None\n\nfloating ip that should be assigned to the instance"
              }
            }
          },
          "django_manage": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "virtualenv",
                        "virtual_env"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "testrunner",
                        "test_runner"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "pythonpath",
                        "python_path"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "liveserver",
                        "live_server"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "failfast",
                        "fail_fast"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages a Django application using the I(manage.py) application frontend to I(django-admin). With the I(virtualenv) parameter, all management commands will be executed by the given I(virtualenv) installation.",
            "properties": {
              "virtualenv": {
                "type": "string",
                "description": "An optional path to a I(virtualenv) installation to use while running the manage application."
              },
              "app_path": {
                "type": "string",
                "description": "The path to the root of the Django application where B(manage.py) lives."
              },
              "virtual_env": {
                "type": "string",
                "description": "An optional path to a I(virtualenv) installation to use while running the manage application."
              },
              "test_runner": {
                "type": "string",
                "description": ""
              },
              "database": {
                "type": "string",
                "description": "The database to target. Used by the 'createcachetable', 'flush', 'loaddata', and 'syncdb' commands."
              },
              "skip": {
                "description": "Will skip over out-of-order missing migrations, you can only use this parameter with I(migrate)",
                "$ref": "#/definitions/ansible_truth"
              },
              "clear": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "settings": {
                "type": "string",
                "description": "The Python path to the application's settings module, such as 'myapp.settings'."
              },
              "apps": {
                "type": "string",
                "description": "A list of space-delimited apps to target. Used by the 'test' command."
              },
              "testrunner": {
                "type": "string",
                "description": ""
              },
              "cache_table": {
                "type": "string",
                "description": "The name of the table used for database-backed caching. Used by the 'createcachetable' command."
              },
              "pythonpath": {
                "type": "string",
                "description": "A directory to add to the Python path. Typically used to include the settings module if it is located external to the application directory."
              },
              "python_path": {
                "type": "string",
                "description": "A directory to add to the Python path. Typically used to include the settings module if it is located external to the application directory."
              },
              "link": {
                "description": "Will create links to the files instead of copying them, you can only use this parameter with 'collectstatic' command",
                "$ref": "#/definitions/ansible_truth"
              },
              "merge": {
                "description": "Will run out-of-order or missing migrations as they are not rollback migrations, you can only use this parameter with 'migrate' command",
                "$ref": "#/definitions/ansible_truth"
              },
              "command": {
                "type": "string",
                "description": "The name of the Django management command to run. Built in commands are cleanup, collectstatic, flush, loaddata, migrate, runfcgi, syncdb, test, and validate.\nOther commands can be entered, but will fail if they're unknown to Django.  Other commands that may prompt for user input should be run with the I(--noinput) flag."
              },
              "fixtures": {
                "type": "string",
                "description": "A space-delimited list of fixture file names to load in the database. B(Required) by the 'loaddata' command."
              },
              "fail_fast": {
                "description": "Default: no\n\nFail the command immediately if a test fails. Used by the 'test' command.",
                "$ref": "#/definitions/ansible_truth"
              },
              "liveserver": {
                "type": "string",
                "description": ""
              },
              "failfast": {
                "description": "Default: no\n\nFail the command immediately if a test fails. Used by the 'test' command.",
                "$ref": "#/definitions/ansible_truth"
              },
              "live_server": {
                "type": "string",
                "description": ""
              }
            }
          },
          "ec2_asg": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Can create or delete AWS Autoscaling Groups\nWorks with the ec2_lc module to manage Launch Configurations",
            "properties": {
              "default_cooldown": {
                "description": "Default: 300 seconds\n\nThe number of seconds after a scaling activity completes before another can begin.",
                "$ref": "#/definitions/ansible_number"
              },
              "health_check_period": {
                "description": "Default: 500 seconds\n\nLength of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its health.",
                "$ref": "#/definitions/ansible_number"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "lc_check": {
                "description": "Default: True\n\nCheck to make sure instances that are being replaced with replace_instances do not aready have the current launch_config.",
                "$ref": "#/definitions/ansible_truth"
              },
              "availability_zones": {
                "description": "List of availability zone names in which to create the group.  Defaults to all the availability zones in the region if vpc_zone_identifier is not set.",
                "$ref": "#/definitions/ansible_array"
              },
              "replace_batch_size": {
                "description": "Default: 1\n\nNumber of instances you'd like to replace at a time.  Used with replace_all_instances.",
                "$ref": "#/definitions/ansible_number"
              },
              "vpc_zone_identifier": {
                "description": "Default: None\n\nList of VPC subnets to use",
                "$ref": "#/definitions/ansible_array"
              },
              "replace_instances": {
                "description": "Default: None\n\nList of instance_ids belonging to the named ASG that you would like to terminate and be replaced with instances matching the current launch configuration.",
                "$ref": "#/definitions/ansible_array"
              },
              "desired_capacity": {
                "description": "Desired number of instances in group, if unspecified then the current group value will be used.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "register or deregister the instance"
              },
              "max_size": {
                "description": "Maximum number of instances in group, if unspecified then the current group value will be used.",
                "$ref": "#/definitions/ansible_number"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "tags": {
                "description": "Default: None\n\nA list of tags to add to the Auto Scale Group. Optional key is 'propagate_at_launch', which defaults to true.",
                "$ref": "#/definitions/ansible_array"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "min_size": {
                "description": "Minimum number of instances in group, if unspecified then the current group value will be used.",
                "$ref": "#/definitions/ansible_number"
              },
              "wait_timeout": {
                "description": "Default: 300\n\nhow long before wait instances to become viable when replaced.  Used in concjunction with instance_ids option.",
                "$ref": "#/definitions/ansible_number"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "load_balancers": {
                "description": "List of ELB names to use for the group",
                "$ref": "#/definitions/ansible_array"
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "launch_config_name": {
                "type": "string",
                "description": "Name of the Launch configuration to use for the group. See the ec2_lc module for managing these."
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Unique name for group to be created or deleted"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "termination_policies": {
                "description": "Default: Default\n\nAn ordered list of criteria used for selecting instances to be removed from the Auto Scaling group when reducing capacity.\nFor 'Default', when used to create a new autoscaling group, the \"Default\" value is used. When used to change an existent autoscaling group, the current termination policies are mantained",
                "$ref": "#/definitions/ansible_array"
              },
              "replace_all_instances": {
                "description": "In a rolling fashion, replace all instances with an old launch configuration with one from the current launch configuration.",
                "$ref": "#/definitions/ansible_truth"
              },
              "health_check_type": {
                "enum": [
                  "EC2",
                  "ELB"
                ],
                "type": "string",
                "description": "Default: EC2\n\nThe service you want the health status from, Amazon EC2 or Elastic Load Balancer."
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "wait_for_instances": {
                "description": "Default: True\n\nWait for the ASG instances to be in a ready state before exiting.  If instances are behind an ELB, it will wait until the ELB determines all instances have a lifecycle_state of  \"InService\" and  a health_status of \"Healthy\".",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "dynamodb_table": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or delete AWS Dynamo DB tables.\nCan update the provisioned throughput on existing tables.\nReturns the status of the specified table.",
            "properties": {
              "hash_key_name": {
                "type": "string",
                "description": "Name of the hash key.\nRequired when C(state=present)."
              },
              "range_key_type": {
                "enum": [
                  "STRING",
                  "NUMBER",
                  "BINARY"
                ],
                "type": "string",
                "description": "Default: STRING\n\nType of the range key."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "write_capacity": {
                "description": "Default: 1\n\nWrite throughput capacity (units) to provision.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or delete the table"
              },
              "hash_key_type": {
                "enum": [
                  "STRING",
                  "NUMBER",
                  "BINARY"
                ],
                "type": "string",
                "description": "Default: STRING\n\nType of the hash key."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "read_capacity": {
                "description": "Default: 1\n\nRead throughput capacity (units) to provision.",
                "$ref": "#/definitions/ansible_number"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "range_key_name": {
                "type": "string",
                "description": "Name of the range key."
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the table."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "route53": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates and deletes DNS records in Amazons Route53 service",
            "properties": {
              "weight": {
                "description": "Weighted resource record sets only. Among resource record sets that have the same combination of DNS name and type, a value that determines what portion of traffic for the current resource record set is routed to the associated location.",
                "$ref": "#/definitions/ansible_number"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "hosted_zone_id": {
                "type": "string",
                "description": "The Hosted Zone ID of the DNS zone to modify"
              },
              "ttl": {
                "description": "Default: 3600 (one hour)\n\nThe TTL to give the new record",
                "$ref": "#/definitions/ansible_number"
              },
              "overwrite": {
                "description": "Whether an existing record should be overwritten on create if values do not match",
                "$ref": "#/definitions/ansible_truth"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "zone": {
                "type": "string",
                "description": "The DNS zone to modify"
              },
              "alias": {
                "description": "Indicates if this is an alias record.",
                "$ref": "#/definitions/ansible_truth"
              },
              "retry_interval": {
                "type": "string",
                "description": "Default: 500\n\nIn the case that route53 is still servicing a prior request, this module will wait and try again after this many seconds. If you have many domain names, the default of 500 seconds may be too long."
              },
              "private_zone": {
                "description": "If set to true, the private zone matching the requested name within the domain will be used if there are both public and private zones. The default is to use the public zone.",
                "$ref": "#/definitions/ansible_truth"
              },
              "type": {
                "enum": [
                  "A",
                  "CNAME",
                  "MX",
                  "AAAA",
                  "TXT",
                  "PTR",
                  "SRV",
                  "SPF",
                  "NS",
                  "SOA"
                ],
                "type": "string",
                "description": "The type of DNS record to create"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "health_check": {
                "type": "string",
                "description": "Health check to associate with this record"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "alias_hosted_zone_id": {
                "type": "string",
                "description": "The hosted zone identifier."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": "Latency-based resource record sets only Among resource record sets that have the same combination of DNS name and type, a value that determines which region this should be associated with for the latency-based routing"
              },
              "value": {
                "type": "string",
                "description": "The new value when creating a DNS record.  Multiple comma-spaced values are allowed for non-alias records.  When deleting a record all values for the record must be specified or Route53 will not delete it."
              },
              "record": {
                "type": "string",
                "description": "The full DNS record to create or delete"
              },
              "command": {
                "enum": [
                  "get",
                  "create",
                  "delete"
                ],
                "type": "string",
                "description": "Specifies the action to take."
              },
              "vpc_id": {
                "type": "string",
                "description": "When used in conjunction with private_zone: true, this will only modify records in the private hosted zone attached to this VPC.\nThis allows you to have multiple private hosted zones, all with the same name, attached to different VPCs."
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "identifier": {
                "type": "string",
                "description": "Weighted and latency-based resource record sets only. An identifier that differentiates among multiple resource record sets that have the same combination of DNS name and type."
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "failover": {
                "type": "string",
                "description": "Failover resource record sets only. Whether this is the primary or secondary resource record set."
              }
            }
          },
          "ovirt": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_mem",
                        "vmmem"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_cores",
                        "vmcores"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_cpus",
                        "vmcpus"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_disksize",
                        "vm_disksize"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_nic",
                        "vmnic"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_network",
                        "vmnetwork"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_os",
                        "vmos"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_name",
                        "vmname"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "instance_name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "vmname"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "instance_type",
                        "vmtype"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "allows you to create new instances, either from scratch or an image, in addition to deleting or stopping instances on the oVirt/RHEV platform",
            "properties": {
              "vmcores": {
                "type": "string",
                "description": "Default: 1\n\ndefine the instance's number of cores"
              },
              "instance_mem": {
                "type": "string",
                "description": "the instance's amount of memory in MB"
              },
              "vmnic": {
                "type": "string",
                "description": "name of the network interface in oVirt/RHEV"
              },
              "vmmem": {
                "type": "string",
                "description": "the instance's amount of memory in MB"
              },
              "instance_cpus": {
                "type": "string",
                "description": "Default: 1\n\nthe instance's number of cpu's"
              },
              "image": {
                "type": "string",
                "description": "template to use for the instance"
              },
              "instance_disksize": {
                "type": "string",
                "description": "size of the instance's disk in GB"
              },
              "instance_nic": {
                "type": "string",
                "description": "name of the network interface in oVirt/RHEV"
              },
              "vmnetwork": {
                "type": "string",
                "description": "Default: rhevm\n\nthe logical network the machine should belong to"
              },
              "vmname": {
                "type": "string",
                "description": "the name of the instance to use"
              },
              "vm_disksize": {
                "type": "string",
                "description": "size of the instance's disk in GB"
              },
              "instance_cores": {
                "type": "string",
                "description": "Default: 1\n\ndefine the instance's number of cores"
              },
              "zone": {
                "type": "string",
                "description": "deploy the image to this oVirt cluster"
              },
              "instance_type": {
                "enum": [
                  "server",
                  "desktop"
                ],
                "type": "string",
                "description": "Default: server\n\ndefine if the instance is a server or desktop"
              },
              "vmtype": {
                "enum": [
                  "server",
                  "desktop"
                ],
                "type": "string",
                "description": "Default: server\n\ndefine if the instance is a server or desktop"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "shutdown",
                  "started",
                  "restart"
                ],
                "type": "string",
                "description": "Default: present\n\ncreate, terminate or remove instances"
              },
              "vmcpus": {
                "type": "string",
                "description": "Default: 1\n\nthe instance's number of cpu's"
              },
              "disk_int": {
                "enum": [
                  "virtio",
                  "ide"
                ],
                "type": "string",
                "description": "Default: virtio\n\ninterface type of the disk"
              },
              "instance_network": {
                "type": "string",
                "description": "Default: rhevm\n\nthe logical network the machine should belong to"
              },
              "password": {
                "type": "string",
                "description": "password of the user to authenticate with"
              },
              "sdomain": {
                "type": "string",
                "description": "the Storage Domain where you want to create the instance's disk on."
              },
              "instance_os": {
                "type": "string",
                "description": "type of Operating System"
              },
              "disk_alloc": {
                "enum": [
                  "thin",
                  "preallocated"
                ],
                "type": "string",
                "description": "Default: thin\n\ndefine if disk is thin or preallocated"
              },
              "url": {
                "type": "string",
                "description": "the url of the oVirt instance"
              },
              "region": {
                "type": "string",
                "description": "the oVirt/RHEV datacenter where you want to deploy to"
              },
              "instance_name": {
                "type": "string",
                "description": "the name of the instance to use"
              },
              "vmos": {
                "type": "string",
                "description": "type of Operating System"
              },
              "resource_type": {
                "enum": [
                  "new",
                  "template"
                ],
                "type": "string",
                "description": "whether you want to deploy an image or create an instance from scratch."
              },
              "user": {
                "type": "string",
                "description": "the user to authenticate with"
              }
            }
          },
          "profitbricks_volume": {
            "type": "object",
            "description": "Allows you to create or remove a volume from a ProfitBricks datacenter. This module has a dependency on profitbricks >= 1.0.0",
            "properties": {
              "count": {
                "type": "string",
                "description": "Default: 1\n\nThe number of volumes you wish to create."
              },
              "datacenter": {
                "type": "string",
                "description": "The datacenter in which to create the volumes."
              },
              "name": {
                "type": "string",
                "description": "The name of the volumes. You can enumerate the names using auto_increment."
              },
              "subscription_user": {
                "type": "string",
                "description": "The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable."
              },
              "licence_type": {
                "type": "string",
                "description": "Default: UNKNOWN\n\nThe licence type for the volume. This is used when the image is non-standard."
              },
              "auto_increment": {
                "description": "Default: True\n\nWhether or not to increment a single number in the name for created virtual machines.",
                "$ref": "#/definitions/ansible_truth"
              },
              "image": {
                "type": "string",
                "description": "The system image ID for the volume, e.g. a3eae284-a2fe-11e4-b187-5f1f641608c8. This can also be a snapshot image ID."
              },
              "size": {
                "type": "string",
                "description": "Default: 10\n\nThe size of the volume."
              },
              "instance_ids": {
                "type": "string",
                "description": "list of instance ids, currently only used when state='absent' to remove instances."
              },
              "subscription_password": {
                "type": "string",
                "description": "THe ProfitBricks password. Overrides the PB_PASSWORD environement variable."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\ncreate or terminate datacenters"
              },
              "wait_timeout": {
                "description": "Default: 600\n\nhow long before wait gives up, in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "bus": {
                "type": "string",
                "description": "Default: VIRTIO\n\nThe bus type."
              },
              "disk_type": {
                "type": "string",
                "description": "Default: HDD\n\nThe disk type. Currently only HDD."
              },
              "wait": {
                "description": "Default: yes\n\nwait for the datacenter to be created before returning",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "redhat_subscription": {
            "type": "object",
            "description": "Manage registration and subscription to the Red Hat Network entitlement platform.",
            "properties": {
              "server_hostname": {
                "type": "string",
                "description": "Default: Current value from C(/etc/rhsm/rhsm.conf) is the default\n\nSpecify an alternative Red Hat Network server"
              },
              "username": {
                "type": "string",
                "description": "Red Hat Network username"
              },
              "org_id": {
                "type": "string",
                "description": "Organisation ID to use in conjunction with activationkey"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nwhether to register and subscribe (C(present)), or unregister (C(absent)) a system"
              },
              "pool": {
                "type": "string",
                "description": "Default: ^$\n\nSpecify a subscription pool name to consume.  Regular expressions accepted."
              },
              "activationkey": {
                "type": "string",
                "description": "supply an activation key for use with registration"
              },
              "server_insecure": {
                "type": "string",
                "description": "Default: Current value from C(/etc/rhsm/rhsm.conf) is the default\n\nAllow traffic over insecure http"
              },
              "password": {
                "type": "string",
                "description": "Red Hat Network password"
              },
              "rhsm_baseurl": {
                "type": "string",
                "description": "Default: Current value from C(/etc/rhsm/rhsm.conf) is the default\n\nSpecify CDN baseurl"
              },
              "autosubscribe": {
                "description": "Upon successful registration, auto-consume available subscriptions",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "capabilities": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "capability",
                        "cap"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "capability"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "cap"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "path",
                        "key"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "key"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module manipulates files privileges using the Linux capabilities(7) system.",
            "properties": {
              "capability": {
                "type": "string",
                "description": "Desired capability to set (with operator and flags, if state is C(present)) or remove (if state is C(absent))"
              },
              "path": {
                "type": "string",
                "description": "Specifies the path to the file to be managed."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the entry should be present or absent in the file's capabilities."
              },
              "cap": {
                "type": "string",
                "description": "Desired capability to set (with operator and flags, if state is C(present)) or remove (if state is C(absent))"
              },
              "key": {
                "type": "string",
                "description": "Specifies the path to the file to be managed."
              }
            }
          },
          "subversion": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "repo",
                        "name",
                        "repository"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "repo"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "repository"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "revision",
                        "rev",
                        "version"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Deploy given repository URL / revision to dest. If dest exists, update to the specified revision, otherwise perform a checkout.",
            "properties": {
              "username": {
                "type": "string",
                "description": "--username parameter passed to svn."
              },
              "executable": {
                "type": "string",
                "description": "Path to svn executable to use. If not supplied, the normal mechanism for resolving binary paths will be used."
              },
              "force": {
                "description": "Default: no\n\nIf C(yes), modified files will be discarded. If C(no), module will fail if it encounters modified files. Prior to 1.9 the default was `yes`.",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "The subversion URL to the repository."
              },
              "repository": {
                "type": "string",
                "description": "The subversion URL to the repository."
              },
              "dest": {
                "type": "string",
                "description": "Absolute path where the repository should be deployed."
              },
              "rev": {
                "type": "string",
                "description": "Default: HEAD\n\nSpecific revision to checkout."
              },
              "repo": {
                "type": "string",
                "description": "The subversion URL to the repository."
              },
              "switch": {
                "description": "Default: yes\n\nIf C(no), do not call svn switch before update.",
                "$ref": "#/definitions/ansible_truth"
              },
              "version": {
                "type": "string",
                "description": "Default: HEAD\n\nSpecific revision to checkout."
              },
              "export": {
                "description": "Default: no\n\nIf C(yes), do export instead of checkout/update.",
                "$ref": "#/definitions/ansible_truth"
              },
              "password": {
                "type": "string",
                "description": "--password parameter passed to svn."
              },
              "revision": {
                "type": "string",
                "description": "Default: HEAD\n\nSpecific revision to checkout."
              }
            }
          },
          "group_by": {
            "type": "object",
            "description": "Use facts to create ad-hoc groups that can be used later in a playbook.",
            "properties": {
              "key": {
                "type": "string",
                "description": "The variables whose values will be used as groups"
              }
            }
          },
          "rax_mon_notification": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or delete a Rackspace Cloud Monitoring notification that specifies a channel that can be used to communicate alarms, such as email, webhooks, or PagerDuty. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> *rax_mon_notification* -> rax_mon_notification_plan -> rax_mon_alarm",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "label": {
                "type": "string",
                "description": "Defines a friendly name for this notification. String between 1 and 255 characters long."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Ensure that the notification with this C(label) exists or does not exist."
              },
              "details": {
                "type": "object",
                "description": "Dictionary of key-value pairs used to initialize the notification. Required keys and meanings vary with notification type. See http://docs.rackspace.com/cm/api/v1.0/cm-devguide/content/ service-notification-types-crud.html for details."
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "notification_type": {
                "enum": [
                  "webhook",
                  "email",
                  "pagerduty"
                ],
                "type": "string",
                "description": "A supported notification type."
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "ec2_elb_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Gather facts about EC2 Elastic Load Balancers in AWS",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "names": {
                "description": "List of ELB names to gather facts about. Pass this option to gather facts about a set of ELBs, otherwise, all ELBs are returned.",
                "$ref": "#/definitions/ansible_array"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "uptimerobot": {
            "required": [
              "monitorid",
              "state",
              "apikey"
            ],
            "type": "object",
            "description": "This module will let you start and pause Uptime Robot Monitoring",
            "properties": {
              "monitorid": {
                "type": "string",
                "description": "ID of the monitor to check."
              },
              "state": {
                "enum": [
                  "started",
                  "paused"
                ],
                "type": "string",
                "description": "Define whether or not the monitor should be running or paused."
              },
              "apikey": {
                "type": "string",
                "description": "Uptime Robot API key."
              }
            }
          },
          "os_port": {
            "type": "object",
            "description": "Add, Update or Remove ports from an OpenStack cloud.  A state=present, will ensure the port is created or updated if required.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Default: None\n\nName that has to be given to the port."
              },
              "allowed_address_pairs": {
                "type": "string",
                "description": "Default: None\n\nAllowed address pairs list.  Allowed address pairs are supported with dictionary structure. e.g.  allowed_address_pairs: - ip_address: 10.1.0.12 mac_address: ab:cd:ef:12:34:56 - ip_address: ..."
              },
              "admin_state_up": {
                "type": "string",
                "description": "Default: None\n\nSets admin state."
              },
              "extra_dhcp_opt": {
                "type": "string",
                "description": "Default: None\n\nExtra dhcp options to be assigned to this port.  Extra options are supported with dictionary structure. e.g.  extra_dhcp_opt: - opt_name: opt name1 opt_value: value1 - opt_name: ..."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "device_owner": {
                "type": "string",
                "description": "Default: None\n\nThe ID of the entity that uses this port."
              },
              "no_security_groups": {
                "type": "string",
                "description": "Do not associate a security group with this port."
              },
              "mac_address": {
                "type": "string",
                "description": "Default: None\n\nMAC address of this port."
              },
              "device_id": {
                "type": "string",
                "description": "Default: None\n\nDevice ID of device using this port."
              },
              "fixed_ips": {
                "type": "string",
                "description": "Default: None\n\nDesired IP and/or subnet for this port.  Subnet is referenced by subnet_id and IP is referenced by ip_address."
              },
              "security_groups": {
                "type": "string",
                "description": "Default: None\n\nSecurity group(s) ID(s) or name(s) associated with the port (comma separated string or YAML list)"
              },
              "network": {
                "type": "string",
                "description": "Network ID or name this port belongs to."
              }
            }
          },
          "rax_mon_check": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or delete a Rackspace Cloud Monitoring check associated with an existing rax_mon_entity. A check is a specific test or measurement that is performed, possibly from different monitoring zones, on the systems you monitor. Rackspace monitoring module flow | rax_mon_entity -> *rax_mon_check* -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm",
            "properties": {
              "entity_id": {
                "type": "string",
                "description": "ID of the rax_mon_entity to target with this check."
              },
              "check_type": {
                "type": "string",
                "description": "The type of check to create. C(remote.) checks may be created on any rax_mon_entity. C(agent.) checks may only be created on rax_mon_entities that have a non-null C(agent_id)."
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "period": {
                "description": "The number of seconds between each time the check is performed. Must be greater than the minimum period set on your account.",
                "$ref": "#/definitions/ansible_number"
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "disabled": {
                "description": "If \"yes\", ensure the check is created, but don't actually use it yet.",
                "$ref": "#/definitions/ansible_truth"
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "label": {
                "type": "string",
                "description": "Defines a label for this check, between 1 and 64 characters long."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Ensure that a check with this C(label) exists or does not exist."
              },
              "details": {
                "type": "object",
                "description": "Additional details specific to the check type. Must be a hash of strings between 1 and 255 characters long, or an array or object containing 0 to 256 items."
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "object",
                "description": "Hash of arbitrary key-value pairs to accompany this check if it fires. Keys and values must be strings between 1 and 255 characters long."
              },
              "username": {
                "type": "string",
                "description": ""
              },
              "target_hostname": {
                "type": "string",
                "description": "One of `target_hostname` and `target_alias` is required for remote.* checks, but prohibited for agent.* checks. The hostname this check should target. Must be a valid IPv4, IPv6, or FQDN."
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "target_alias": {
                "type": "string",
                "description": "One of `target_alias` and `target_hostname` is required for remote.* checks, but prohibited for agent.* checks. Use the corresponding key in the entity's `ip_addresses` hash to resolve an IP address to target."
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "description": "The number of seconds this check will wait when attempting to collect results. Must be less than the period.",
                "$ref": "#/definitions/ansible_number"
              },
              "monitoring_zones_poll": {
                "type": "string",
                "description": "Comma-separated list of the names of the monitoring zones the check should run from. Available monitoring zones include mzdfw, mzhkg, mziad, mzlon, mzord and mzsyd. Required for remote.* checks; prohibited for agent.* checks."
              }
            }
          },
          "ohai": {
            "type": "object",
            "description": "Similar to the M(facter) module, this runs the I(Ohai) discovery program (U(http://wiki.opscode.com/display/chef/Ohai)) on the remote host and returns JSON inventory data. I(Ohai) data is a bit more verbose and nested than I(facter).",
            "properties": {}
          },
          "win_environment": {
            "type": "object",
            "description": "Uses .net Environment to set or remove environment variables and can set at User, Machine or Process level.\nUser level environment variables will be set, but not available until the user has logged off and on again.",
            "properties": {
              "state": {
                "type": "string",
                "description": "Default: present\n\npresent to ensure environment variable is set, or absent to ensure it is removed"
              },
              "name": {
                "type": "string",
                "description": "Default: no default\n\nThe name of the environment variable"
              },
              "value": {
                "type": "string",
                "description": "Default: no default\n\nThe value to store in the environment variable. Can be omitted for state=absent"
              },
              "level": {
                "type": "string",
                "description": "Default: no default\n\nThe level at which to set the environment variable.\nUse 'machine' to set for all users.\nUse 'user' to set for the current user that ansible is connected as.\nUse 'process' to set for the current process.  Probably not that useful."
              }
            }
          },
          "apt": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "package",
                        "pkg",
                        "name"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "update_cache",
                        "update-cache"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "default_release",
                        "default-release"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "install_recommends",
                        "install-recommends"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages I(apt) packages (such as for Debian/Ubuntu).",
            "properties": {
              "dpkg_options": {
                "type": "string",
                "description": "Default: force-confdef,force-confold\n\nAdd dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'\nOptions should be supplied as comma separated list"
              },
              "upgrade": {
                "enum": [
                  "no",
                  "yes",
                  "safe",
                  "full",
                  "dist"
                ],
                "type": "string",
                "description": "Default: no\n\nIf yes or safe, performs an aptitude safe-upgrade.\nIf full, performs an aptitude full-upgrade.\nIf dist, performs an apt-get dist-upgrade.\nNote: This does not upgrade a specific package, use state=latest for that."
              },
              "force": {
                "description": "Default: no\n\nIf C(yes), force installs/removes.",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "description": "A package name, like C(foo), or package specifier with version, like C(foo=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported.  Note that the apt-get commandline supports implicit regex matches here but we do not because it can let typos through easier (If you typo C(foo) as C(fo) apt-get would install packages that have \"fo\" in their name with a warning and a prompt for the user.  Since we don't have warnings and prompts before installing we disallow this.  Use an explicit fnmatch pattern if you want wildcarding)",
                "$ref": "#/definitions/ansible_array"
              },
              "package": {
                "description": "A package name, like C(foo), or package specifier with version, like C(foo=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported.  Note that the apt-get commandline supports implicit regex matches here but we do not because it can let typos through easier (If you typo C(foo) as C(fo) apt-get would install packages that have \"fo\" in their name with a warning and a prompt for the user.  Since we don't have warnings and prompts before installing we disallow this.  Use an explicit fnmatch pattern if you want wildcarding)",
                "$ref": "#/definitions/ansible_array"
              },
              "install-recommends": {
                "description": "Corresponds to the C(--no-install-recommends) option for I(apt). C(yes) installs recommended packages.  C(no) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed.",
                "$ref": "#/definitions/ansible_truth"
              },
              "default-release": {
                "type": "string",
                "description": "Corresponds to the C(-t) option for I(apt) and sets pin priorities"
              },
              "purge": {
                "description": "Will force purging of configuration files if the module state is set to I(absent).",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "installed",
                  "latest",
                  "removed",
                  "absent",
                  "present",
                  "build-dep"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed."
              },
              "update_cache": {
                "description": "Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkg": {
                "description": "A package name, like C(foo), or package specifier with version, like C(foo=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported.  Note that the apt-get commandline supports implicit regex matches here but we do not because it can let typos through easier (If you typo C(foo) as C(fo) apt-get would install packages that have \"fo\" in their name with a warning and a prompt for the user.  Since we don't have warnings and prompts before installing we disallow this.  Use an explicit fnmatch pattern if you want wildcarding)",
                "$ref": "#/definitions/ansible_array"
              },
              "update-cache": {
                "description": "Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.",
                "$ref": "#/definitions/ansible_truth"
              },
              "default_release": {
                "type": "string",
                "description": "Corresponds to the C(-t) option for I(apt) and sets pin priorities"
              },
              "cache_valid_time": {
                "description": "If C(update_cache) is specified and the last run is less or equal than I(cache_valid_time) seconds ago, the C(update_cache) gets skipped.",
                "$ref": "#/definitions/ansible_number"
              },
              "deb": {
                "type": "string",
                "description": "Path to a .deb package on the remote machine."
              },
              "install_recommends": {
                "description": "Corresponds to the C(--no-install-recommends) option for I(apt). C(yes) installs recommended packages.  C(no) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "sqs_queue": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or delete AWS SQS queues.\nUpdate attributes on existing queues.",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the queue."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "message_retention_period": {
                "description": "The message retention period in seconds.",
                "$ref": "#/definitions/ansible_number"
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "default_visibility_timeout": {
                "description": "The default visibility timeout in seconds.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or delete the queue"
              },
              "maximum_message_size": {
                "description": "The maximum message size in bytes.",
                "$ref": "#/definitions/ansible_number"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "delivery_delay": {
                "description": "The delivery delay in seconds.",
                "$ref": "#/definitions/ansible_number"
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "receive_message_wait_time": {
                "description": "The receive message wait time in seconds.",
                "$ref": "#/definitions/ansible_number"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "rabbitmq_binding": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "src",
                        "source"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "src"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "source"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "destination",
                        "dst",
                        "dest"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "destination"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dst"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "destination_type",
                        "type",
                        "dest_type"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "destination_type"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest_type"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module uses rabbitMQ Rest API to create/delete bindings",
            "properties": {
              "login_port": {
                "type": "string",
                "description": "Default: 15672\n\nrabbitMQ management api port"
              },
              "name": {
                "type": "string",
                "description": "source exchange to create binding on"
              },
              "dest_type": {
                "enum": [
                  "queue",
                  "exchange"
                ],
                "type": "string",
                "description": "Either queue or exchange"
              },
              "src": {
                "type": "string",
                "description": "source exchange to create binding on"
              },
              "dest": {
                "type": "string",
                "description": "destination exchange or queue for the binding"
              },
              "login_user": {
                "type": "string",
                "description": "Default: guest\n\nrabbitMQ user for connection"
              },
              "login_host": {
                "type": "string",
                "description": "Default: localhost\n\nrabbitMQ host for connection"
              },
              "destination": {
                "type": "string",
                "description": "destination exchange or queue for the binding"
              },
              "routing_key": {
                "type": "string",
                "description": "Default: #\n\nrouting key for the binding\ndefault is"
              },
              "source": {
                "type": "string",
                "description": "source exchange to create binding on"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the exchange should be present or absent\nOnly present implemented atm"
              },
              "arguments": {
                "type": "object",
                "description": "extra arguments for exchange. If defined this argument is a key/value dictionary"
              },
              "login_password": {
                "type": "string",
                "description": "rabbitMQ password for connection"
              },
              "destination_type": {
                "enum": [
                  "queue",
                  "exchange"
                ],
                "type": "string",
                "description": "Either queue or exchange"
              },
              "vhost": {
                "type": "string",
                "description": "Default: /\n\nrabbitMQ virtual host\ndefault vhost is /"
              },
              "type": {
                "enum": [
                  "queue",
                  "exchange"
                ],
                "type": "string",
                "description": "Either queue or exchange"
              },
              "dst": {
                "type": "string",
                "description": "destination exchange or queue for the binding"
              }
            }
          },
          "s3_lifecycle": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage s3 bucket lifecycle rules in AWS",
            "properties": {
              "status": {
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "type": "string",
                "description": "Default: enabled\n\nIf 'enabled', the rule is currently being applied. If 'disabled', the rule is not currently being applied."
              },
              "prefix": {
                "type": "string",
                "description": "Prefix identifying one or more objects to which the rule applies.  If no prefix is specified, the rule will apply to the whole bucket."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "expiration_days": {
                "description": "Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.",
                "$ref": "#/definitions/ansible_number"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nCreate or remove the lifecycle rule"
              },
              "transition_date": {
                "type": "string",
                "description": "Indicates the lifetime of the objects that are subject to the rule by the date they will transition to a different storage class. The value must be ISO-8601 format, the time must be midnight and a GMT timezone must be specified. If transition_days is not specified, this parameter is required."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "requester_pays": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "transition_days": {
                "description": "Indicates when, in days, an object transitions to a different storage class. If transition_date is not specified, this parameter is required.",
                "$ref": "#/definitions/ansible_number"
              },
              "name": {
                "type": "string",
                "description": "Name of the s3 bucket"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "expiration_date": {
                "type": "string",
                "description": "Indicates the lifetime of the objects that are subject to the rule by the date they will expire. The value must be ISO-8601 format, the time must be midnight and a GMT timezone must be specified."
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "storage_class": {
                "enum": [
                  "glacier"
                ],
                "type": "string",
                "description": "Default: glacier\n\nThe storage class to transition to. Currently there is only one valid value - 'glacier'."
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "rule_id": {
                "type": "string",
                "description": "Unique identifier for the rule. The value cannot be longer than 255 characters. A unique value for the rule will be generated if no value is provided."
              }
            }
          },
          "portinstall": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage packages for FreeBSD using 'portinstall'.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nstate of the package"
              },
              "use_packages": {
                "description": "Default: True\n\nuse packages instead of ports whenever available",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "name of package to install/remove"
              },
              "pkg": {
                "type": "string",
                "description": "name of package to install/remove"
              }
            }
          },
          "seport": {
            "required": [
              "setype",
              "state",
              "ports",
              "proto"
            ],
            "type": "object",
            "description": "Manages SELinux network port type definitions.",
            "properties": {
              "reload": {
                "description": "Default: True\n\nReload SELinux policy after commit.",
                "$ref": "#/definitions/ansible_truth"
              },
              "setype": {
                "type": "string",
                "description": "SELinux type for the specified port."
              },
              "proto": {
                "enum": [
                  "tcp",
                  "udp"
                ],
                "type": "string",
                "description": "Protocol for the specified port."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nDesired boolean value."
              },
              "ports": {
                "type": "string",
                "description": "Ports or port ranges, separated by a comma"
              }
            }
          },
          "os_security_group": {
            "type": "object",
            "description": "Add or Remove security groups from an OpenStack cloud.",
            "properties": {
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "name": {
                "type": "string",
                "description": "Name that has to be given to the security group. This module requires that security group names be unique."
              },
              "description": {
                "type": "string",
                "description": "Default: None\n\nLong description of the purpose of the security group"
              }
            }
          },
          "sensu_check": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Manage the checks that should be run on a machine by I(Sensu).\nMost options do not have a default and will not be added to the check definition unless specified.\nAll defaults except I(path), I(state), I(backup) and I(metric) are not managed by this module,\nthey are simply specified for your convenience.",
            "properties": {
              "handle": {
                "description": "Default: True\n\nWhether the check should be handled or not",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "The name of the check\nThis is the key that is used to determine whether a check exists"
              },
              "handlers": {
                "description": "List of handlers to notify when the check fails",
                "$ref": "#/definitions/ansible_array"
              },
              "backup": {
                "description": "Create a backup file (if yes), including the timestamp information so\nyou can get the original file back if you somehow clobbered it incorrectly.",
                "$ref": "#/definitions/ansible_truth"
              },
              "metric": {
                "description": "Whether the check is a metric",
                "$ref": "#/definitions/ansible_truth"
              },
              "interval": {
                "description": "Check interval in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "subscribers": {
                "description": "List of subscribers/channels this check should run for\nSee sensu_subscribers to subscribe a machine to a channel",
                "$ref": "#/definitions/ansible_array"
              },
              "timeout": {
                "description": "Default: 10\n\nTimeout for the check",
                "$ref": "#/definitions/ansible_number"
              },
              "subdue_begin": {
                "type": "string",
                "description": "When to disable handling of check failures"
              },
              "standalone": {
                "description": "Whether the check should be scheduled by the sensu client or server\nThis option obviates the need for specifying the I(subscribers) option",
                "$ref": "#/definitions/ansible_truth"
              },
              "occurrences": {
                "description": "Default: 1\n\nNumber of event occurrences before the handler should take action",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the check should be present or not"
              },
              "dependencies": {
                "description": "Other checks this check depends on, if dependencies fail,\nhandling of this check will be disabled",
                "$ref": "#/definitions/ansible_array"
              },
              "command": {
                "type": "string",
                "description": "Path to the sensu check to run (not required when I(state=absent))"
              },
              "high_flap_threshold": {
                "description": "The low threshhold for flap detection",
                "$ref": "#/definitions/ansible_number"
              },
              "low_flap_threshold": {
                "description": "The low threshhold for flap detection",
                "$ref": "#/definitions/ansible_number"
              },
              "aggregate": {
                "description": "Classifies the check as an aggregate check,\nmaking it available via the aggregate API",
                "$ref": "#/definitions/ansible_truth"
              },
              "path": {
                "type": "string",
                "description": "Default: /etc/sensu/conf.d/checks.json\n\nPath to the json file of the check to be added/removed.\nWill be created if it does not exist (unless I(state=absent)).\nThe parent folders need to exist when I(state=present), otherwise an error will be thrown"
              },
              "subdue_end": {
                "type": "string",
                "description": "When to enable handling of check failures"
              },
              "refresh": {
                "description": "Number of seconds handlers should wait before taking second action",
                "$ref": "#/definitions/ansible_number"
              },
              "publish": {
                "description": "Default: True\n\nWhether the check should be scheduled at all.\nYou can still issue it via the sensu api",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "typetalk": {
            "required": [
              "msg",
              "topic",
              "client_id",
              "client_secret"
            ],
            "type": "object",
            "description": "Send a message to typetalk using typetalk API ( http://developers.typetalk.in/ )",
            "properties": {
              "msg": {
                "type": "string",
                "description": "message body"
              },
              "topic": {
                "description": "topic id to post message",
                "$ref": "#/definitions/ansible_number"
              },
              "client_id": {
                "type": "string",
                "description": "OAuth2 client ID"
              },
              "client_secret": {
                "type": "string",
                "description": "OAuth2 client secret"
              }
            }
          },
          "iam_cert": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Allows for the management of server certificates",
            "properties": {
              "dup_ok": {
                "enum": [
                  false,
                  true
                ],
                "type": "string",
                "description": "By default the module will not upload a certificate that is already uploaded into AWS. If set to True, it will upload the certificate as long as the name is unique."
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "cert_chain": {
                "type": "string",
                "description": "The path to the CA certificate chain in PEM encoded format."
              },
              "aws_secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "new_path": {
                "type": "string",
                "description": "When present, this will update the path of the cert with the value passed here."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Whether to create, delete certificate. When present is specified it will attempt to make an update if new_path or new_name is specified."
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "key": {
                "type": "string",
                "description": "The path to the private key of the certificate in PEM encoded format."
              },
              "ec2_access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "ec2_secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "secret_key": {
                "type": "string",
                "description": "AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used."
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "new_name": {
                "type": "string",
                "description": "When present, this will update the name of the cert with the value passed here."
              },
              "aws_access_key": {
                "type": "string",
                "description": "AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used."
              },
              "name": {
                "type": "string",
                "description": "Name of certificate to add, update or remove."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "cert": {
                "type": "string",
                "description": "The path to the certificate body in PEM encoded format."
              },
              "path": {
                "type": "string",
                "description": "Default: /\n\nWhen creating or updating, specify the desired path of the certificate"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "selinux_permissive": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "domain",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "domain"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add and remove domain from the list of permissive domain.",
            "properties": {
              "domain": {
                "type": "string",
                "description": "the domain that will be added or removed from the list of permissive domains"
              },
              "store": {
                "type": "string",
                "description": "name of the SELinux policy store to use"
              },
              "name": {
                "type": "string",
                "description": "the domain that will be added or removed from the list of permissive domains"
              },
              "no_reload": {
                "description": "automatically reload the policy after a change\ndefault is set to 'false' as that's what most people would want after changing one domain\nNote that this doesn't work on older version of the library (example EL 6), the module will silently ignore it in this case",
                "$ref": "#/definitions/ansible_truth"
              },
              "permissive": {
                "description": "indicate if the domain should or should not be set as permissive",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "quantum_floating_ip": {
            "required": [
              "instance_name",
              "login_password",
              "network_name"
            ],
            "type": "object",
            "description": "Add or Remove a floating IP to an instance",
            "properties": {
              "region_name": {
                "type": "string",
                "description": "Default: None\n\nName of the region"
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "login_password": {
                "type": "string",
                "description": "Default: yes\n\nPassword of login user"
              },
              "instance_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the instance to which the IP address should be assigned"
              },
              "login_tenant_name": {
                "type": "string",
                "description": "Default: yes\n\nThe tenant name of the login user"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "auth_url": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nThe keystone url for authentication"
              },
              "internal_network_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the network of the port to associate with the floating ip. Necessary when VM multiple networks."
              },
              "login_username": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "network_name": {
                "type": "string",
                "description": "Default: None\n\nName of the network from which IP has to be assigned to VM. Please make sure the network is an external network"
              }
            }
          },
          "composer": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "no_scripts",
                        "no-scripts"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "no_plugins",
                        "no-plugins"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "optimize_autoloader",
                        "optimize-autoloader"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "working_dir",
                        "working-dir"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "working_dir"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "working-dir"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "ignore_platform_reqs",
                        "ignore-platform-reqs"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "no_dev",
                        "no-dev"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "prefer_dist",
                        "prefer-dist"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "prefer_source",
                        "prefer-source"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Composer is a tool for dependency management in PHP. It allows you to declare the dependent libraries your project needs and it will install them in your project for you",
            "properties": {
              "prefer_dist": {
                "description": "Default: no\n\nForces installation from package dist even for dev versions ( see --prefer-dist )",
                "$ref": "#/definitions/ansible_truth"
              },
              "ignore-platform-reqs": {
                "description": "Default: no\n\nIgnore php, hhvm, lib-* and ext-* requirements and force the installation even if the local machine does not fulfill these.",
                "$ref": "#/definitions/ansible_truth"
              },
              "prefer-source": {
                "description": "Default: no\n\nForces installation from package sources when possible ( see --prefer-source )",
                "$ref": "#/definitions/ansible_truth"
              },
              "no-plugins": {
                "description": "Default: no\n\nDisables all plugins ( see --no-plugins )",
                "$ref": "#/definitions/ansible_truth"
              },
              "prefer_source": {
                "description": "Default: no\n\nForces installation from package sources when possible ( see --prefer-source )",
                "$ref": "#/definitions/ansible_truth"
              },
              "no_scripts": {
                "description": "Default: no\n\nSkips the execution of all scripts defined in composer.json ( see --no-scripts )",
                "$ref": "#/definitions/ansible_truth"
              },
              "working-dir": {
                "type": "string",
                "description": "Directory of your project ( see --working-dir )"
              },
              "optimize-autoloader": {
                "description": "Default: yes\n\nOptimize autoloader during autoloader dump ( see --optimize-autoloader ). Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.",
                "$ref": "#/definitions/ansible_truth"
              },
              "working_dir": {
                "type": "string",
                "description": "Directory of your project ( see --working-dir )"
              },
              "ignore_platform_reqs": {
                "description": "Default: no\n\nIgnore php, hhvm, lib-* and ext-* requirements and force the installation even if the local machine does not fulfill these.",
                "$ref": "#/definitions/ansible_truth"
              },
              "arguments": {
                "type": "string",
                "description": "Composer arguments like required package, version and so on"
              },
              "no-dev": {
                "description": "Default: yes\n\nDisables installation of require-dev packages ( see --no-dev )",
                "$ref": "#/definitions/ansible_truth"
              },
              "prefer-dist": {
                "description": "Default: no\n\nForces installation from package dist even for dev versions ( see --prefer-dist )",
                "$ref": "#/definitions/ansible_truth"
              },
              "command": {
                "type": "string",
                "description": "Default: install\n\nComposer command like \"install\", \"update\" and so on"
              },
              "no_dev": {
                "description": "Default: yes\n\nDisables installation of require-dev packages ( see --no-dev )",
                "$ref": "#/definitions/ansible_truth"
              },
              "no-scripts": {
                "description": "Default: no\n\nSkips the execution of all scripts defined in composer.json ( see --no-scripts )",
                "$ref": "#/definitions/ansible_truth"
              },
              "no_plugins": {
                "description": "Default: no\n\nDisables all plugins ( see --no-plugins )",
                "$ref": "#/definitions/ansible_truth"
              },
              "optimize_autoloader": {
                "description": "Default: yes\n\nOptimize autoloader during autoloader dump ( see --optimize-autoloader ). Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "ec2_key": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "maintains ec2 key pairs. This module has a dependency on python-boto >= 2.5",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the key pair."
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Wait for the specified action to complete before returning.",
                "$ref": "#/definitions/ansible_truth"
              },
              "key_material": {
                "type": "string",
                "description": "Public key material."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\ncreate or delete keypair"
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 300\n\nHow long before wait gives up, in seconds"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "ipify_facts": {
            "type": "object",
            "description": "If behind NAT and need to know the public IP of your internet gateway.",
            "properties": {
              "api_url": {
                "type": "string",
                "description": "Default: https://api.ipify.org\n\nURL of the ipify.org API service.\nC(?format=json) will be appended per default."
              }
            }
          },
          "cs_network": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, update, restart and delete networks.",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain the network is related to."
              },
              "end_ipv6": {
                "type": "string",
                "description": "The ending IPv6 address of the network belongs to.\nIf not specified, value of C(start_ipv6) is used.\nOnly considered on create."
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "gateway": {
                "type": "string",
                "description": "The gateway of the network.\nRequired for shared networks and isolated networks when it belongs to VPC.\nOnly considered on create."
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone in which the network should be deployed.\nIf not set, default zone is used."
              },
              "start_ipv6": {
                "type": "string",
                "description": "The beginning IPv6 address of the network belongs to.\nOnly considered on create."
              },
              "cidr_ipv6": {
                "type": "string",
                "description": "CIDR of IPv6 network, must be at least /64.\nOnly considered on create."
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "restarted"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the network."
              },
              "end_ip": {
                "type": "string",
                "description": "The ending IPv4 address of the network belongs to.\nIf not specified, value of C(start_ip) is used.\nOnly considered on create."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "vlan": {
                "type": "string",
                "description": "The ID or VID of the network."
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "clean_up": {
                "description": "Cleanup old network elements.\nOnly considered on C(state=restarted).",
                "$ref": "#/definitions/ansible_truth"
              },
              "netmask": {
                "type": "string",
                "description": "The netmask of the network.\nRequired for shared networks and isolated networks when it belongs to VPC.\nOnly considered on create."
              },
              "network_offering": {
                "type": "string",
                "description": "Name of the offering for the network.\nRequired if C(state=present)."
              },
              "vpc": {
                "type": "string",
                "description": "The ID or VID of the network."
              },
              "start_ip": {
                "type": "string",
                "description": "The beginning IPv4 address of the network belongs to.\nOnly considered on create."
              },
              "gateway_ipv6": {
                "type": "string",
                "description": "The gateway of the IPv6 network.\nRequired for shared networks.\nOnly considered on create."
              },
              "display_text": {
                "type": "string",
                "description": "Display text of the network.\nIf not specified, C(name) will be used as C(display_text)."
              },
              "isolated_pvlan": {
                "type": "string",
                "description": "The isolated private vlan for this network."
              },
              "account": {
                "type": "string",
                "description": "Account the network is related to."
              },
              "acl_type": {
                "enum": [
                  "account",
                  "domain"
                ],
                "type": "string",
                "description": "Default: account\n\nAccess control type.\nOnly considered on create."
              },
              "name": {
                "type": "string",
                "description": "Name (case sensitive) of the network."
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "string",
                "description": "Name of the project the network to be deployed in."
              },
              "network_domain": {
                "type": "string",
                "description": "The network domain."
              }
            }
          },
          "accelerate": {
            "required": [
              "password"
            ],
            "type": "object",
            "description": "This modules launches an ephemeral I(accelerate) daemon on the remote node which Ansible can use to communicate with nodes at high speed.\nThe daemon listens on a configurable port for a configurable amount of time.\nFireball mode is AES encrypted",
            "properties": {
              "timeout": {
                "type": "string",
                "description": "Default: 300\n\nThe number of seconds the socket will wait for data. If none is received when the timeout value is reached, the connection will be closed."
              },
              "ipv6": {
                "description": "The listener daemon on the remote host will bind to the ipv6 localhost socket if this parameter is set to true.",
                "$ref": "#/definitions/ansible_truth"
              },
              "debug": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "minutes": {
                "type": "string",
                "description": "Default: 30\n\nThe I(accelerate) listener daemon is started on nodes and will stay around for this number of minutes before turning itself off."
              },
              "port": {
                "type": "string",
                "description": "Default: 5099\n\nTCP port for the socket connection"
              },
              "multi_key": {
                "description": "When enabled, the daemon will open a local socket file which can be used by future daemon executions to upload a new key to the already running daemon, so that multiple users can connect using different keys. This access still requires an ssh connection as the uid for which the daemon is currently running.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "cpanm": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "system_lib",
                        "use_sudo"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage Perl library dependencies.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the Perl library to install. You may use the \"full distribution path\", e.g.  MIYAGAWA/Plack-0.99_05.tar.gz"
              },
              "installdeps": {
                "description": "Only install dependencies",
                "$ref": "#/definitions/ansible_truth"
              },
              "system_lib": {
                "description": "Use this if you want to install modules to the system perl include path. You must be root or have \"passwordless\" sudo for this to work.\nThis uses the cpanm commandline option '--sudo', which has nothing to do with ansible privilege escalation.",
                "$ref": "#/definitions/ansible_truth"
              },
              "use_sudo": {
                "description": "Use this if you want to install modules to the system perl include path. You must be root or have \"passwordless\" sudo for this to work.\nThis uses the cpanm commandline option '--sudo', which has nothing to do with ansible privilege escalation.",
                "$ref": "#/definitions/ansible_truth"
              },
              "mirror_only": {
                "description": "Use the mirror's index file instead of the CPAN Meta DB",
                "$ref": "#/definitions/ansible_truth"
              },
              "from_path": {
                "type": "string",
                "description": "The local directory from where to install"
              },
              "pkg": {
                "type": "string",
                "description": "The name of the Perl library to install. You may use the \"full distribution path\", e.g.  MIYAGAWA/Plack-0.99_05.tar.gz"
              },
              "mirror": {
                "type": "string",
                "description": "Specifies the base URL for the CPAN mirror to use"
              },
              "locallib": {
                "type": "string",
                "description": "Specify the install base to install modules"
              },
              "notest": {
                "description": "Do not run unit tests",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "os_router": {
            "type": "object",
            "description": "Create or Delete routers from OpenStack. Although Neutron allows routers to share the same name, this module enforces name uniqueness to be more user friendly.",
            "properties": {
              "enable_snat": {
                "type": "string",
                "description": "Default: True\n\nEnable Source NAT (SNAT) attribute."
              },
              "network": {
                "type": "string",
                "description": "Default: None\n\nUnique name or ID of the external gateway network."
              },
              "admin_state_up": {
                "type": "string",
                "description": "Default: True\n\nDesired admin state of the created or existing router."
              },
              "interfaces": {
                "type": "string",
                "description": "Default: None\n\nList of subnets to attach to the router internal interface."
              },
              "name": {
                "type": "string",
                "description": "Name to be give to the router"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "external_fixed_ips": {
                "type": "string",
                "description": "Default: None\n\nThe IP address parameters for the external gateway network. Each is a dictionary with the subnet name or ID (subnet) and the IP address to assign on the subnet (ip). If no IP is specified, one is automatically assigned from that subnet."
              }
            }
          },
          "openvswitch_bridge": {
            "required": [
              "bridge"
            ],
            "type": "object",
            "description": "Manage Open vSwitch bridges",
            "properties": {
              "bridge": {
                "type": "string",
                "description": "Name of bridge to manage"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the bridge should exist"
              },
              "fail_mode": {
                "type": "string",
                "description": "Default: None\n\nSet bridge fail-mode. The default value (None) is a No-op."
              },
              "external_ids": {
                "type": "string",
                "description": "Default: None\n\nA dictionary of external-ids. Omitting this parameter is a No-op. To  clear all external-ids pass an empty value."
              },
              "timeout": {
                "description": "Default: 5\n\nHow long to wait for ovs-vswitchd to respond",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "digital_ocean_domain": {
            "type": "object",
            "description": "Create/delete a DNS record in DigitalOcean.",
            "properties": {
              "ip": {
                "type": "string",
                "description": "The IP address to point a domain at."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the target."
              },
              "id": {
                "type": "string",
                "description": "Numeric, the droplet id you want to operate on."
              },
              "name": {
                "type": "string",
                "description": "String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key, or the name of a domain."
              },
              "api_token": {
                "type": "string",
                "description": "DigitalOcean api token."
              }
            }
          },
          "redis": {
            "type": "object",
            "description": "Unified utility to interact with redis instances. 'slave' sets a redis instance in slave or master mode. 'flush' flushes all the instance or a specified db. 'config' (new in 1.6), ensures a configuration setting on an instance.",
            "properties": {
              "login_port": {
                "type": "string",
                "description": "Default: 6379\n\nThe port to connect to"
              },
              "login_password": {
                "type": "string",
                "description": "The password used to authenticate with (usually not used)"
              },
              "name": {
                "type": "string",
                "description": "A redis config key."
              },
              "flush_mode": {
                "enum": [
                  "all",
                  "db"
                ],
                "type": "string",
                "description": "Default: all\n\nType of flush (all the dbs in a redis instance or a specific one) [flush command]"
              },
              "master_host": {
                "type": "string",
                "description": "The host of the master instance [slave command]"
              },
              "login_host": {
                "type": "string",
                "description": "Default: localhost\n\nThe host running the database"
              },
              "master_port": {
                "type": "string",
                "description": "The port of the master instance [slave command]"
              },
              "db": {
                "type": "string",
                "description": "The database to flush (used in db mode) [flush command]"
              },
              "value": {
                "type": "string",
                "description": "A redis config value."
              },
              "command": {
                "enum": [
                  "slave",
                  "flush",
                  "config"
                ],
                "type": "string",
                "description": "The selected redis command"
              },
              "slave_mode": {
                "enum": [
                  "master",
                  "slave"
                ],
                "type": "string",
                "description": "Default: slave\n\nthe mode of the redis instance [slave command]"
              }
            }
          },
          "campfire": {
            "required": [
              "msg",
              "token",
              "room",
              "subscription"
            ],
            "type": "object",
            "description": "Send a message to Campfire.\nMessages with newlines will result in a \"Paste\" message being sent.",
            "properties": {
              "msg": {
                "type": "string",
                "description": "The message body."
              },
              "token": {
                "type": "string",
                "description": "API token."
              },
              "subscription": {
                "type": "string",
                "description": "The subscription name to use."
              },
              "room": {
                "type": "string",
                "description": "Room number to which the message should be sent."
              },
              "notify": {
                "enum": [
                  "56k",
                  "bell",
                  "bezos",
                  "bueller",
                  "clowntown",
                  "cottoneyejoe",
                  "crickets",
                  "dadgummit",
                  "dangerzone",
                  "danielsan",
                  "deeper",
                  "drama",
                  "greatjob",
                  "greyjoy",
                  "guarantee",
                  "heygirl",
                  "horn",
                  "horror",
                  "inconceivable",
                  "live",
                  "loggins",
                  "makeitso",
                  "noooo",
                  "nyan",
                  "ohmy",
                  "ohyeah",
                  "pushit",
                  "rimshot",
                  "rollout",
                  "rumble",
                  "sax",
                  "secret",
                  "sexyback",
                  "story",
                  "tada",
                  "tmyk",
                  "trololo",
                  "trombone",
                  "unix",
                  "vuvuzela",
                  "what",
                  "whoomp",
                  "yeah",
                  "yodel"
                ],
                "type": "string",
                "description": "Send a notification sound before the message."
              }
            }
          },
          "lvol": {
            "required": [
              "lv",
              "vg"
            ],
            "type": "object",
            "description": "This module creates, removes or resizes logical volumes.",
            "properties": {
              "force": {
                "description": "Default: no\n\nShrink or remove operations of volumes requires this switch. Ensures that that filesystems get never corrupted/destroyed by mistake.",
                "$ref": "#/definitions/ansible_truth"
              },
              "vg": {
                "type": "string",
                "description": "The volume group this logical volume is part of."
              },
              "lv": {
                "type": "string",
                "description": "The name of the logical volume."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nControl if the logical volume exists."
              },
              "opts": {
                "type": "string",
                "description": "Free-form options to be passed to the lvcreate command"
              },
              "size": {
                "type": "string",
                "description": "The size of the logical volume, according to lvcreate(8) --size, by default in megabytes or optionally with one of [bBsSkKmMgGtTpPeE] units; or according to lvcreate(8) --extents as a percentage of [VG|PVS|FREE]; resizing is not supported with percentages. Float values must begin with a digit."
              }
            }
          },
          "os_server_facts": {
            "type": "object",
            "description": "Retrieve facts about server instances from OpenStack.",
            "properties": {
              "detailed": {
                "type": "string",
                "description": "when true, return additional detail about servers at the expense of additional API calls."
              },
              "server": {
                "type": "string",
                "description": "Default: None\n\nrestrict results to servers with names matching this glob expression (e.g., C<web*>)."
              }
            }
          },
          "vertica_user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "roles",
                        "role"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "user",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds or removes Vertica database user and, optionally, assigns roles.\nA user will not be removed until all the dependencies have been dropped.\nIn such a situation, if the module tries to remove the user it will fail and only remove roles granted to the user.",
            "properties": {
              "resource_pool": {
                "type": "string",
                "description": "Sets the user's resource pool."
              },
              "profile": {
                "type": "string",
                "description": "Sets the user's profile."
              },
              "name": {
                "type": "string",
                "description": "Name of the user to add or remove."
              },
              "roles": {
                "type": "string",
                "description": "Comma separated list of roles to assign to the user."
              },
              "login_user": {
                "type": "string",
                "description": "Default: dbadmin\n\nThe username used to authenticate with."
              },
              "ldap": {
                "description": "Set to true if users are authenticated via LDAP.\nThe user will be created with password expired and set to I($ldap$).",
                "$ref": "#/definitions/ansible_truth"
              },
              "db": {
                "type": "string",
                "description": "Name of the Vertica database."
              },
              "cluster": {
                "type": "string",
                "description": "Default: localhost\n\nName of the Vertica cluster."
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "locked"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to create C(present), drop C(absent) or lock C(locked) a user."
              },
              "role": {
                "type": "string",
                "description": "Comma separated list of roles to assign to the user."
              },
              "user": {
                "type": "string",
                "description": "Name of the user to add or remove."
              },
              "login_password": {
                "type": "string",
                "description": "The password used to authenticate with."
              },
              "password": {
                "type": "string",
                "description": "The user's password encrypted by the MD5 algorithm.\nThe password must be generated with the format C(\"md5\" + md5[password + username]), resulting in a total of 35 characters. An easy way to do this is by querying the Vertica database with select 'md5'||md5('<user_password><user_name>')."
              },
              "expired": {
                "description": "Sets the user's password expiration.",
                "$ref": "#/definitions/ansible_truth"
              },
              "port": {
                "type": "string",
                "description": "Default: 5433\n\nVertica cluster port to connect to."
              }
            }
          },
          "os_nova_flavor": {
            "type": "object",
            "description": "Add or remove flavors from OpenStack.",
            "properties": {
              "flavorid": {
                "type": "string",
                "description": "Default: auto\n\nID for the flavor. This is optional as a unique UUID will be assigned if a value is not specified."
              },
              "name": {
                "type": "string",
                "description": "Flavor name."
              },
              "ram": {
                "type": "string",
                "description": "Amount of memory, in MB."
              },
              "ephemeral": {
                "type": "string",
                "description": "Ephemeral space size, in GB."
              },
              "vcpus": {
                "type": "string",
                "description": "Number of virtual CPUs."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource. When I(state) is 'present', then I(ram), I(vcpus), and I(disk) are all required. There are no default values for those parameters."
              },
              "swap": {
                "type": "string",
                "description": "Swap space size, in MB."
              },
              "rxtx_factor": {
                "type": "string",
                "description": "Default: 1.0\n\nRX/TX factor."
              },
              "is_public": {
                "type": "string",
                "description": "Default: True\n\nMake flavor accessible to the public."
              },
              "disk": {
                "type": "string",
                "description": "Size of local disk, in GB."
              }
            }
          },
          "assemble": {
            "required": [
              "src",
              "dest"
            ],
            "type": "object",
            "description": "Assembles a configuration file from fragments. Often a particular program will take a single configuration file and does not support a C(conf.d) style structure where it is easy to build up the configuration from multiple sources. M(assemble) will take a directory of files that can be local or have already been transferred to the system, and concatenate them together to produce a destination file. Files are assembled in string sorting order. Puppet calls this idea I(fragments).",
            "properties": {
              "ignore_hidden": {
                "description": "A boolean that controls if files that start with a '.' will be included or not.",
                "$ref": "#/definitions/ansible_truth"
              },
              "src": {
                "type": "string",
                "description": "An already existing directory full of source files."
              },
              "remote_src": {
                "description": "Default: True\n\nIf False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src. Default is True.",
                "$ref": "#/definitions/ansible_truth"
              },
              "dest": {
                "type": "string",
                "description": "A file to create using the concatenation of all of the source files."
              },
              "delimiter": {
                "type": "string",
                "description": "A delimiter to separate the file contents."
              },
              "regexp": {
                "type": "string",
                "description": "Assemble files only if C(regex) matches the filename. If not set, all files are assembled. All \"\\\" (backslash) must be escaped as \"\\\\\" to comply yaml syntax. Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html)."
              },
              "validate": {
                "type": "string",
                "description": "The validation command to run before copying into place.  The path to the file to validate is passed in via '%s' which must be present as in the sshd example below. The command is passed securely so shell features like expansion and pipes won't work."
              },
              "backup": {
                "description": "Default: no\n\nCreate a backup file (if C(yes)), including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "os_security_group_rule": {
            "type": "object",
            "description": "Add or Remove rule from an existing security group",
            "properties": {
              "direction": {
                "type": "string",
                "description": "Default: ingress\n\nThe direction in which the security group rule is applied. Not all providers support egress."
              },
              "protocol": {
                "type": "string",
                "description": "Default: None\n\nIP protocol"
              },
              "remote_ip_prefix": {
                "type": "string",
                "description": "Source IP address(es) in CIDR notation (exclusive with remote_group)"
              },
              "port_range_max": {
                "type": "string",
                "description": "Default: None\n\nEnding port"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "port_range_min": {
                "type": "string",
                "description": "Default: None\n\nStarting port"
              },
              "ethertype": {
                "type": "string",
                "description": "Default: IPv4\n\nMust be IPv4 or IPv6, and addresses represented in CIDR must match the ingress or egress rules. Not all providers support IPv6."
              },
              "security_group": {
                "type": "string",
                "description": "Name of the security group"
              },
              "remote_group": {
                "type": "string",
                "description": "ID of Security group to link (exclusive with remote_ip_prefix)"
              }
            }
          },
          "ufw": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "to_ip",
                        "to",
                        "dest"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "to_port",
                        "port"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "app",
                        "name"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "from_ip",
                        "from",
                        "src"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "interface",
                        "if"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "proto",
                        "protocol"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "default",
                        "policy"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage firewall with UFW.",
            "properties": {
              "protocol": {
                "enum": [
                  "any",
                  "tcp",
                  "udp",
                  "ipv6",
                  "esp",
                  "ah"
                ],
                "type": "string",
                "description": "TCP/IP protocol."
              },
              "to_port": {
                "type": "string",
                "description": "Destination port."
              },
              "app": {
                "type": "string",
                "description": "Use profile located in C(/etc/ufw/applications.d)"
              },
              "port": {
                "type": "string",
                "description": "Destination port."
              },
              "if": {
                "type": "string",
                "description": "Specify interface for rule."
              },
              "from": {
                "type": "string",
                "description": "Default: any\n\nSource IP address."
              },
              "log": {
                "description": "Log new connections matched to this rule",
                "$ref": "#/definitions/ansible_truth"
              },
              "proto": {
                "enum": [
                  "any",
                  "tcp",
                  "udp",
                  "ipv6",
                  "esp",
                  "ah"
                ],
                "type": "string",
                "description": "TCP/IP protocol."
              },
              "to": {
                "type": "string",
                "description": "Default: any\n\nDestination IP address."
              },
              "state": {
                "enum": [
                  "enabled",
                  "disabled",
                  "reloaded",
                  "reset"
                ],
                "type": "string",
                "description": "C(enabled) reloads firewall and enables firewall on boot.\nC(disabled) unloads firewall and disables firewall on boot.\nC(reloaded) reloads firewall.\nC(reset) disables and resets firewall to installation defaults."
              },
              "policy": {
                "enum": [
                  "allow",
                  "deny",
                  "reject"
                ],
                "type": "string",
                "description": "Change the default policy for incoming or outgoing traffic."
              },
              "direction": {
                "enum": [
                  "in",
                  "out",
                  "incoming",
                  "outgoing",
                  "routed"
                ],
                "type": "string",
                "description": "Select direction for a rule or default policy command."
              },
              "from_port": {
                "type": "string",
                "description": "Source port."
              },
              "to_ip": {
                "type": "string",
                "description": "Default: any\n\nDestination IP address."
              },
              "insert": {
                "type": "string",
                "description": "Insert the corresponding rule as rule number NUM"
              },
              "dest": {
                "type": "string",
                "description": "Default: any\n\nDestination IP address."
              },
              "from_ip": {
                "type": "string",
                "description": "Default: any\n\nSource IP address."
              },
              "interface": {
                "type": "string",
                "description": "Specify interface for rule."
              },
              "src": {
                "type": "string",
                "description": "Default: any\n\nSource IP address."
              },
              "logging": {
                "enum": [
                  "on",
                  "off",
                  "low",
                  "medium",
                  "high",
                  "full"
                ],
                "type": "string",
                "description": "Toggles logging. Logged packets use the LOG_KERN syslog facility."
              },
              "name": {
                "type": "string",
                "description": "Use profile located in C(/etc/ufw/applications.d)"
              },
              "default": {
                "enum": [
                  "allow",
                  "deny",
                  "reject"
                ],
                "type": "string",
                "description": "Change the default policy for incoming or outgoing traffic."
              },
              "route": {
                "description": "Apply the rule to routed/forwarded packets.",
                "$ref": "#/definitions/ansible_truth"
              },
              "rule": {
                "enum": [
                  "allow",
                  "deny",
                  "reject",
                  "limit"
                ],
                "type": "string",
                "description": "Add firewall rule"
              },
              "delete": {
                "description": "Delete rule.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "haproxy": {
            "required": [
              "host",
              "state"
            ],
            "type": "object",
            "description": "Enable, disable, and set weights for HAProxy backend servers using socket commands.",
            "properties": {
              "socket": {
                "type": "string",
                "description": "Default: /var/run/haproxy.sock\n\nPath to the HAProxy socket file."
              },
              "weight": {
                "type": "string",
                "description": "The value passed in argument. If the value ends with the `%` sign, then the new weight will be relative to the initially configured weight. Relative weights are only permitted between 0 and 100% and absolute weights are permitted between 0 and 256."
              },
              "wait_interval": {
                "description": "Default: 5\n\nNumber of seconds to wait between retries.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "type": "string",
                "description": "Desired state of the provided backend host."
              },
              "backend": {
                "type": "string",
                "description": "Default: auto-detected\n\nName of the HAProxy backend pool."
              },
              "wait_retries": {
                "description": "Default: 25\n\nNumber of times to check for status after changing the state.",
                "$ref": "#/definitions/ansible_number"
              },
              "host": {
                "type": "string",
                "description": "Name of the backend host to change."
              },
              "shutdown_sessions": {
                "type": "string",
                "description": "When disabling a server, immediately terminate all the sessions attached to the specified server. This can be used to terminate long-running sessions after a server is put into maintenance mode."
              },
              "wait": {
                "description": "Wait until the server reports a status of 'UP' when `state=enabled`, or status of 'MAINT' when `state=disabled`.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "cs_facts": {
            "type": "object",
            "description": "This module fetches data from the metadata API in CloudStack. The module must be called from within the instance itself.",
            "properties": {
              "filter": {
                "enum": [
                  "cloudstack_service_offering",
                  "cloudstack_availability_zone",
                  "cloudstack_public_hostname",
                  "cloudstack_public_ipv4",
                  "cloudstack_local_hostname",
                  "cloudstack_local_ipv4",
                  "cloudstack_instance_id",
                  "cloudstack_user_data"
                ],
                "type": "string",
                "description": "Filter for a specific fact."
              }
            }
          },
          "package": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Installs, upgrade and removes packages using the underlying OS package manager.",
            "properties": {
              "name": {
                "description": "Package name, or package specifier with version, like C(name-1.0).\nBe aware that packages are not always named the same and this module will not 'translate' them per distro.",
                "$ref": "#/definitions/ansible_array"
              },
              "list": {
                "type": "string",
                "description": ""
              },
              "disable_gpg_check": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "conf_file": {
                "type": "string",
                "description": ""
              },
              "install_repoquery": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "absent",
                  "present",
                  "installed",
                  "removed",
                  "latest"
                ],
                "type": "string",
                "description": "Whether to install (C(present), C(latest)), or remove (C(absent)) a package."
              },
              "disablerepo": {
                "type": "string",
                "description": ""
              },
              "update_cache": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkg": {
                "description": "Package name, or package specifier with version, like C(name-1.0).\nBe aware that packages are not always named the same and this module will not 'translate' them per distro.",
                "$ref": "#/definitions/ansible_array"
              },
              "enablerepo": {
                "type": "string",
                "description": ""
              },
              "exclude": {
                "type": "string",
                "description": ""
              }
            }
          },
          "get_url": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "thirsty"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Downloads files from HTTP, HTTPS, or FTP to the remote server. The remote server I(must) have direct access to the remote resource.\nBy default, if an environment variable C(<protocol>_proxy) is set on the target host, requests will be sent through that proxy. This behaviour can be overridden by setting a variable for this task (see `setting the environment <http://docs.ansible.com/playbooks_environment.html>`_), or by using the use_proxy option.\nHTTP redirects can redirect from HTTP to HTTPS so you should be sure that your proxy environment for both protocols is correct.",
            "properties": {
              "url_password": {
                "type": "string",
                "description": "The password for use in HTTP basic authentication. If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used."
              },
              "force": {
                "description": "Default: no\n\nIf C(yes) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(no), the file will only be downloaded if the destination does not exist. Generally should be C(yes) only for small local files. Prior to 0.6, this module behaved as if C(yes) was the default.",
                "$ref": "#/definitions/ansible_truth"
              },
              "use_proxy": {
                "description": "Default: yes\n\nif C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
                "$ref": "#/definitions/ansible_truth"
              },
              "thirsty": {
                "description": "Default: no\n\nIf C(yes) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(no), the file will only be downloaded if the destination does not exist. Generally should be C(yes) only for small local files. Prior to 0.6, this module behaved as if C(yes) was the default.",
                "$ref": "#/definitions/ansible_truth"
              },
              "url": {
                "type": "string",
                "description": "HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"
              },
              "checksum": {
                "type": "string",
                "description": "If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum>, e.g.: checksum=\"sha256:D98291AC[...]B6DC7B97\" If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.  The third party hashlib library can be installed for access to additional algorithms. Additionaly, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the destination_checksum would be calculated, and if checksum equals destination_checksum, the file download would be skipped (unless C(force) is true). "
              },
              "force_basic_auth": {
                "description": "Default: no\n\nhttplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail. This option forces the sending of the Basic authentication header upon initial request.",
                "$ref": "#/definitions/ansible_truth"
              },
              "sha256sum": {
                "type": "string",
                "description": "If a SHA-256 checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. This option is deprecated. Use 'checksum'."
              },
              "http_agent": {
                "type": "string",
                "description": ""
              },
              "headers": {
                "type": "string",
                "description": "Add custom HTTP headers to a request in the format \"key:value,key:value\""
              },
              "timeout": {
                "description": "Default: 10\n\nTimeout for URL request",
                "$ref": "#/definitions/ansible_number"
              },
              "dest": {
                "type": "string",
                "description": "absolute path of where to download the file to.\nIf C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect. If C(dest) is a directory, the file will always be downloaded (regardless of the force option), but replaced only if the contents changed."
              },
              "url_username": {
                "type": "string",
                "description": "The username for use in HTTP basic authentication. This parameter can be used without C(url_password) for sites that allow empty passwords."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              },
              "client_cert": {
                "type": "string",
                "description": ""
              },
              "client_key": {
                "type": "string",
                "description": ""
              }
            }
          },
          "acl": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "path"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Sets and retrieves file ACL information.",
            "properties": {
              "recursive": {
                "description": "Recursively sets the specified ACL (added in Ansible 2.0). Incompatible with C(state=query).",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "The full path of the file or object."
              },
              "default": {
                "description": "if the target is a directory, setting this to yes will make it the default acl for entities created inside the directory. It causes an error if name is a file.",
                "$ref": "#/definitions/ansible_truth"
              },
              "entity": {
                "type": "string",
                "description": "actual user or group that the ACL applies to when matching entity types user or group are selected."
              },
              "state": {
                "enum": [
                  "query",
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: query\n\ndefines whether the ACL should be present or not.  The C(query) state gets the current acl without changing it, for use in 'register' operations."
              },
              "entry": {
                "type": "string",
                "description": "DEPRECATED. The acl to set or remove.  This must always be quoted in the form of '<etype>:<qualifier>:<perms>'.  The qualifier may be empty for some types, but the type and perms are always requried. '-' can be used as placeholder when you do not care about permissions. This is now superseded by entity, type and permissions fields."
              },
              "etype": {
                "enum": [
                  "user",
                  "group",
                  "mask",
                  "other"
                ],
                "type": "string",
                "description": "the entity type of the ACL to apply, see setfacl documentation for more info."
              },
              "follow": {
                "description": "Default: True\n\nwhether to follow symlinks on the path if a symlink is encountered.",
                "$ref": "#/definitions/ansible_truth"
              },
              "path": {
                "type": "string",
                "description": "The full path of the file or object."
              },
              "permissions": {
                "type": "string",
                "description": "Permissions to apply/remove can be any combination of r, w and  x (read, write and execute respectively)"
              }
            }
          },
          "postgresql_db": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "db",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "db"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add or remove PostgreSQL databases from a remote host.",
            "properties": {
              "name": {
                "type": "string",
                "description": "name of the database to add or remove"
              },
              "lc_collate": {
                "type": "string",
                "description": "Collation order (LC_COLLATE) to use in the database. Must match collation order of template database unless C(template0) is used as template."
              },
              "encoding": {
                "type": "string",
                "description": "Encoding of the database"
              },
              "login_user": {
                "type": "string",
                "description": "The username used to authenticate with"
              },
              "login_host": {
                "type": "string",
                "description": "Default: localhost\n\nHost running the database"
              },
              "db": {
                "type": "string",
                "description": "name of the database to add or remove"
              },
              "lc_ctype": {
                "type": "string",
                "description": "Character classification (LC_CTYPE) to use in the database (e.g. lower, upper, ...) Must match LC_CTYPE of template database unless C(template0) is used as template."
              },
              "login_unix_socket": {
                "type": "string",
                "description": "Path to a Unix domain socket for local connections"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe database state"
              },
              "template": {
                "type": "string",
                "description": "Template used to create the database"
              },
              "login_password": {
                "type": "string",
                "description": "The password used to authenticate with"
              },
              "owner": {
                "type": "string",
                "description": "Name of the role to set as owner of the database"
              },
              "port": {
                "type": "string",
                "description": "Default: 5432\n\nDatabase port to connect to."
              }
            }
          },
          "azure": {
            "type": "object",
            "description": "Creates or terminates azure instances. When created optionally waits for it to be 'running'.",
            "properties": {
              "endpoints": {
                "type": "string",
                "description": "Default: 22\n\na comma-separated list of TCP ports to expose on the virtual machine (e.g., \"22,80\")"
              },
              "role_size": {
                "enum": [
                  "ExtraSmall",
                  "Small",
                  "Medium",
                  "Large",
                  "ExtraLarge",
                  "A5",
                  "A6",
                  "A7",
                  "A8",
                  "A9",
                  "Basic_A0",
                  "Basic_A1",
                  "Basic_A2",
                  "Basic_A3",
                  "Basic_A4",
                  "Standard_D1",
                  "Standard_D2",
                  "Standard_D3",
                  "Standard_D4",
                  "Standard_D11",
                  "Standard_D12",
                  "Standard_D13",
                  "Standard_D14",
                  "Standard_DS1",
                  "Standard_DS2",
                  "Standard_DS3",
                  "Standard_DS4",
                  "Standard_DS11",
                  "Standard_DS12",
                  "Standard_DS13",
                  "Standard_DS14",
                  "Standard_G1",
                  "Standard_G2",
                  "Standard_G3",
                  "Standard_G4",
                  "Standard_G5"
                ],
                "type": "string",
                "description": "Default: Small\n\nazure role size for the new virtual machine (e.g., Small, ExtraLarge, A6). You have to pay attention to the fact that instances of type G and DS are not available in all regions (locations). Make sure if you selected the size and type of instance available in your chosen location."
              },
              "name": {
                "type": "string",
                "description": "name of the virtual machine and associated cloud service."
              },
              "location": {
                "type": "string",
                "description": "the azure location to use (e.g. 'East US')\n\nPossible choices:\nSouth Central US\nCentral US\nEast US 2\nEast US\nWest US\nNorth Central US\nNorth Europe\nWest Europe\nEast Asia\nSoutheast Asia\nJapan West\nJapan East\nBrazil South"
              },
              "virtual_network_name": {
                "type": "string",
                "description": "Name of virtual network."
              },
              "image": {
                "type": "string",
                "description": "system image for creating the virtual machine (e.g., b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu_DAILY_BUILD-precise-12_04_3-LTS-amd64-server-20131205-en-us-30GB)"
              },
              "hostname": {
                "type": "string",
                "description": "hostname to write /etc/hostname. Defaults to <name>.cloudapp.net."
              },
              "enable_winrm": {
                "description": "Default: yes\n\nEnable winrm on Windows Machines",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\ncreate or terminate instances"
              },
              "wait_timeout_redirects": {
                "type": "string",
                "description": "Default: 300\n\nhow long before wait gives up for redirects, in seconds"
              },
              "management_cert_path": {
                "type": "string",
                "description": "path to an azure management certificate associated with the subscription id. Overrides the AZURE_CERT_PATH environment variable."
              },
              "ssh_cert_path": {
                "type": "string",
                "description": "path to an X509 certificate containing the public ssh key to install in the virtual machine. See http://www.windowsazure.com/en-us/manage/linux/tutorials/intro-to-linux/ for more details.\nif this option is specified, password-based ssh authentication will be disabled."
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 600\n\nhow long before wait gives up, in seconds"
              },
              "reset_pass_atlogon": {
                "description": "Default: no\n\nReset the admin password on first logon for windows hosts",
                "$ref": "#/definitions/ansible_truth"
              },
              "user": {
                "type": "string",
                "description": "the unix username for the new virtual machine."
              },
              "auto_updates": {
                "description": "Default: no\n\nEnable Auto Updates on Windows Machines",
                "$ref": "#/definitions/ansible_truth"
              },
              "storage_account": {
                "type": "string",
                "description": "the azure storage account in which to store the data disks."
              },
              "os_type": {
                "enum": [
                  "windows",
                  "linux"
                ],
                "type": "string",
                "description": "Default: linux\n\nThe type of the os that is gettings provisioned"
              },
              "password": {
                "type": "string",
                "description": "the unix password for the new virtual machine."
              },
              "subscription_id": {
                "type": "string",
                "description": "azure subscription id. Overrides the AZURE_SUBSCRIPTION_ID environment variable."
              },
              "wait": {
                "description": "Default: no\n\nwait for the instance to be in state 'running' before returning",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "ecs_task": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Creates or deletes instances of task definitions.",
            "properties": {
              "cluster": {
                "type": "string",
                "description": "The name of the cluster to run the task on"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "operation": {
                "enum": [
                  "run",
                  "start",
                  "stop"
                ],
                "type": "string",
                "description": "Which task operation to execute"
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "task_definition": {
                "type": "string",
                "description": "The task definition to start or run"
              },
              "profile": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "container_instances": {
                "description": "The list of container instances on which to deploy the task",
                "$ref": "#/definitions/ansible_array"
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              },
              "count": {
                "description": "How many new instances to start",
                "$ref": "#/definitions/ansible_number"
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "task": {
                "type": "string",
                "description": "The task to stop"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "started_by": {
                "type": "string",
                "description": "A value showing who or what started the task (for informational purposes)"
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "overrides": {
                "type": "object",
                "description": "A dictionary of values to pass to the new instances"
              }
            }
          },
          "zabbix_host": {
            "type": "object",
            "description": "This module allows you to create, modify and delete Zabbix host entries and associated group and template data.",
            "properties": {
              "status": {
                "type": "string",
                "description": "Default: enabled\n\nMonitoring status of the host."
              },
              "force": {
                "type": "string",
                "description": "Default: yes\n\nOverwrite the host configuration, even if already present"
              },
              "timeout": {
                "type": "string",
                "description": "Default: 10\n\nThe timeout of API request (seconds)."
              },
              "login_user": {
                "type": "string",
                "description": "Zabbix user name, used to authenticate against the server."
              },
              "interfaces": {
                "type": "string",
                "description": "List of interfaces to be created for the host (see example below).\nAvailable values are: dns, ip, main, port, type and useip.\nPlease review the interface documentation for more information on the supported properties\nhttps://www.zabbix.com/documentation/2.0/manual/appendix/api/hostinterface/definitions#host_interface"
              },
              "server_url": {
                "type": "string",
                "description": "Url of Zabbix server, with protocol (http or https)."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nState of the host.\nOn C(present), it will create if host does not exist or update the host if the associated data is different.\nOn C(absent) will remove a host if it exists."
              },
              "host_name": {
                "type": "string",
                "description": "Name of the host in Zabbix.\nhost_name is the unique identifier used and cannot be updated using this module."
              },
              "host_groups": {
                "type": "string",
                "description": "List of host groups the host is part of."
              },
              "login_password": {
                "type": "string",
                "description": "Zabbix user password."
              },
              "link_templates": {
                "type": "string",
                "description": "Default: None\n\nList of templates linked to the host."
              },
              "proxy": {
                "type": "string",
                "description": "Default: None\n\nThe name of the Zabbix Proxy to be used"
              }
            }
          },
          "swdepot": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Will install, upgrade and remove packages with swdepot package manager (HP-UX)",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "latest",
                  "absent"
                ],
                "type": "string",
                "description": "whether to install (C(present), C(latest)), or remove (C(absent)) a package."
              },
              "depot": {
                "type": "string",
                "description": "The source repository from which install or upgrade a package."
              },
              "name": {
                "type": "string",
                "description": "package name."
              },
              "pkg": {
                "type": "string",
                "description": "package name."
              }
            }
          },
          "linode": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "linode_id",
                        "lid"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "creates / deletes a Linode Public Cloud instance and optionally waits for it to be 'running'.",
            "properties": {
              "lid": {
                "description": "Unique ID of a linode server",
                "$ref": "#/definitions/ansible_number"
              },
              "datacenter": {
                "description": "datacenter to create an instance in (Linode Datacenter)",
                "$ref": "#/definitions/ansible_number"
              },
              "swap": {
                "description": "Default: 512\n\nswap size in MB",
                "$ref": "#/definitions/ansible_number"
              },
              "api_key": {
                "type": "string",
                "description": "Linode API key"
              },
              "name": {
                "type": "string",
                "description": "Name to give the instance (alphanumeric, dashes, underscore)\nTo keep sanity on the Linode Web Console, name is prepended with LinodeID_"
              },
              "payment_term": {
                "description": "Default: 1\n\npayment term to use for the instance (payment term in months)",
                "$ref": "#/definitions/ansible_number"
              },
              "linode_id": {
                "description": "Unique ID of a linode server",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "active",
                  "started",
                  "absent",
                  "deleted",
                  "stopped",
                  "restarted"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 300\n\nhow long before wait gives up, in seconds"
              },
              "plan": {
                "description": "plan to use for the instance (Linode plan)",
                "$ref": "#/definitions/ansible_number"
              },
              "distribution": {
                "description": "distribution to use for the instance (Linode Distribution)",
                "$ref": "#/definitions/ansible_number"
              },
              "password": {
                "type": "string",
                "description": "root password to apply to a new server (auto generated if missing)"
              },
              "ssh_pub_key": {
                "type": "string",
                "description": "SSH public key applied to root user"
              },
              "wait": {
                "description": "Default: no\n\nwait for the instance to be in state 'running' before returning",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "rax_dns_record": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage DNS records on Rackspace Cloud DNS",
            "properties": {
              "comment": {
                "type": "string",
                "description": "Brief description of the domain. Maximum length of 160 characters"
              },
              "domain": {
                "type": "string",
                "description": "Domain name to create the record in. This is an invalid option when type=PTR"
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ttl": {
                "description": "Default: 3600\n\nTime to live of record in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              },
              "priority": {
                "description": "Required for MX and SRV records, but forbidden for other record types. If specified, must be an integer from 0 to 65535.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "type": {
                "enum": [
                  "A",
                  "AAAA",
                  "CNAME",
                  "MX",
                  "NS",
                  "SRV",
                  "TXT",
                  "PTR"
                ],
                "type": "string",
                "description": "DNS record type"
              },
              "username": {
                "type": "string",
                "description": ""
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "data": {
                "type": "string",
                "description": "IP address for A/AAAA record, FQDN for CNAME/MX/NS, or text data for SRV/TXT"
              },
              "name": {
                "type": "string",
                "description": "FQDN record name to create"
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "server": {
                "type": "string",
                "description": "Server ID to create a PTR record for. Only used with type=PTR"
              },
              "loadbalancer": {
                "type": "string",
                "description": "Load Balancer ID to create a PTR record for. Only used with type=PTR"
              }
            }
          },
          "keystone_user": {
            "type": "object",
            "description": "Manage users,tenants, roles from OpenStack.",
            "properties": {
              "tenant_description": {
                "type": "string",
                "description": "Default: None\n\nA description for the tenant"
              },
              "endpoint": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nThe keystone url for authentication"
              },
              "region_name": {
                "type": "string",
                "description": ""
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "login_user": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "token": {
                "type": "string",
                "description": "Default: None\n\nThe token to be uses in case the password is not specified"
              },
              "login_tenant_name": {
                "type": "string",
                "description": "Default: None\n\nThe tenant login_user belongs to"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "role": {
                "type": "string",
                "description": "Default: None\n\nThe name of the role to be assigned or created"
              },
              "user": {
                "type": "string",
                "description": "Default: None\n\nThe name of the user that has to added/removed from OpenStack"
              },
              "login_password": {
                "type": "string",
                "description": "Default: yes\n\nPassword of login user"
              },
              "login_username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": "Default: None\n\nThe password to be assigned to the user"
              },
              "email": {
                "type": "string",
                "description": "Default: None\n\nAn email address for the user"
              },
              "tenant": {
                "type": "string",
                "description": "Default: None\n\nThe tenant name that has be added/removed"
              }
            }
          },
          "gce_pd": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "This module can create and destroy unformatted GCE persistent disks U(https://developers.google.com/compute/docs/disks#persistentdisks). It also supports attaching and detaching disks from running instances. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.",
            "properties": {
              "size_gb": {
                "type": "string",
                "description": "Default: 10\n\nwhole integer size of disk (in GB) to create, default is 10 GB"
              },
              "disk_type": {
                "type": "string",
                "description": "Default: pd-standard\n\ntype of disk provisioned"
              },
              "name": {
                "type": "string",
                "description": "name of the disk"
              },
              "zone": {
                "type": "string",
                "description": "Default: us-central1-b\n\nzone in which to create the disk"
              },
              "service_account_email": {
                "type": "string",
                "description": "service account email"
              },
              "image": {
                "type": "string",
                "description": "the source image to use for the disk"
              },
              "pem_file": {
                "type": "string",
                "description": "path to the pem file associated with the service account email"
              },
              "instance_name": {
                "type": "string",
                "description": "instance name if you wish to attach or detach the disk"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\ndesired state of the persistent disk"
              },
              "snapshot": {
                "type": "string",
                "description": "the source snapshot to use for the disk"
              },
              "mode": {
                "enum": [
                  "READ_WRITE",
                  "READ_ONLY"
                ],
                "type": "string",
                "description": "Default: READ_ONLY\n\nGCE mount mode of disk, READ_ONLY (default) or READ_WRITE"
              },
              "project_id": {
                "type": "string",
                "description": "your GCE project ID"
              },
              "detach_only": {
                "description": "Default: no\n\ndo not destroy the disk, merely detach it from an instance",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "profitbricks_nic": {
            "type": "object",
            "description": "This module allows you to create or restore a volume snapshot. This module has a dependency on profitbricks >= 1.0.0",
            "properties": {
              "datacenter": {
                "type": "string",
                "description": "The datacenter in which to operate."
              },
              "lan": {
                "type": "string",
                "description": "The LAN to place the NIC on. You can pass a LAN that doesn't exist and it will be created. Required on create."
              },
              "name": {
                "type": "string",
                "description": "The name or ID of the NIC. This is only required on deletes, but not on create."
              },
              "subscription_user": {
                "type": "string",
                "description": "The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable."
              },
              "server": {
                "type": "string",
                "description": "The server name or ID."
              },
              "subscription_password": {
                "type": "string",
                "description": "THe ProfitBricks password. Overrides the PB_PASSWORD environement variable."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "wait_timeout": {
                "description": "Default: 600\n\nhow long before wait gives up, in seconds",
                "$ref": "#/definitions/ansible_number"
              },
              "wait": {
                "description": "Default: yes\n\nwait for the operation to complete before returning",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "ec2_ami_copy": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_secret_key",
                        "ec2_secret_key",
                        "secret_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "aws_access_key",
                        "ec2_access_key",
                        "access_key"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "security_token",
                        "access_token"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "region",
                        "aws_region",
                        "ec2_region"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Copies AMI from a source region to a destination region. This module has a dependency on python-boto >= 2.5",
            "properties": {
              "profile": {
                "type": "string",
                "description": ""
              },
              "aws_secret_key": {
                "type": "string",
                "description": ""
              },
              "aws_access_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "The name of the new image to copy"
              },
              "security_token": {
                "type": "string",
                "description": ""
              },
              "tags": {
                "type": "object",
                "description": "a hash/dictionary of tags to add to the new copied AMI; '{\"key\":\"value\"}' and '{\"key\":\"value\",\"key\":\"value\"}'"
              },
              "access_token": {
                "type": "string",
                "description": ""
              },
              "source_image_id": {
                "type": "string",
                "description": "the id of the image in source region that should be copied"
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "description": {
                "type": "string",
                "description": "An optional human-readable string describing the contents and purpose of the new AMI."
              },
              "aws_region": {
                "type": "string",
                "description": ""
              },
              "access_key": {
                "type": "string",
                "description": ""
              },
              "wait": {
                "description": "Default: no\n\nwait for the copied AMI to be in state 'available' before returning.",
                "$ref": "#/definitions/ansible_truth"
              },
              "source_region": {
                "type": "string",
                "description": "the source region that AMI should be copied from"
              },
              "ec2_url": {
                "type": "string",
                "description": ""
              },
              "ec2_access_key": {
                "type": "string",
                "description": ""
              },
              "secret_key": {
                "type": "string",
                "description": ""
              },
              "ec2_secret_key": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "wait_timeout": {
                "type": "string",
                "description": "Default: 1200\n\nhow long before wait gives up, in seconds"
              },
              "ec2_region": {
                "type": "string",
                "description": ""
              }
            }
          },
          "slurp": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "src",
                        "path"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "src"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module works like M(fetch). It is used for fetching a base64- encoded blob containing the data in a remote file.",
            "properties": {
              "src": {
                "type": "string",
                "description": "The file on the remote system to fetch. This I(must) be a file, not a directory."
              },
              "path": {
                "type": "string",
                "description": "The file on the remote system to fetch. This I(must) be a file, not a directory."
              }
            }
          },
          "zabbix_hostmacro": {
            "type": "object",
            "description": "manages Zabbix host macros, it can create, update or delete them.",
            "properties": {
              "macro_value": {
                "type": "string",
                "description": "Value of the host macro."
              },
              "macro_name": {
                "type": "string",
                "description": "Name of the host macro."
              },
              "login_user": {
                "type": "string",
                "description": "Zabbix user name."
              },
              "server_url": {
                "type": "string",
                "description": "Url of Zabbix server, with protocol (http or https)."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nState of the macro.\nOn C(present), it will create if macro does not exist or update the macro if the associated data is different.\nOn C(absent) will remove a macro if it exists."
              },
              "host_name": {
                "type": "string",
                "description": "Name of the host."
              },
              "timeout": {
                "type": "string",
                "description": "Default: 10\n\nThe timeout of API request (seconds)."
              },
              "login_password": {
                "type": "string",
                "description": "Zabbix user password."
              }
            }
          },
          "cs_account": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, disable, lock, enable and remove accounts.",
            "properties": {
              "username": {
                "type": "string",
                "description": "Username of the user to be created if account did not exist.\nRequired on C(state=present)."
              },
              "domain": {
                "type": "string",
                "description": "Default: ROOT\n\nDomain the account is related to."
              },
              "last_name": {
                "type": "string",
                "description": "Last name of the user to be created if account did not exist.\nRequired on C(state=present)."
              },
              "account_type": {
                "enum": [
                  "user",
                  "root_admin",
                  "domain_admin"
                ],
                "type": "string",
                "description": "Default: user\n\nType of the account."
              },
              "name": {
                "type": "string",
                "description": "Name of account."
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "network_domain": {
                "type": "string",
                "description": "Network domain of the account."
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "first_name": {
                "type": "string",
                "description": "First name of the user to be created if account did not exist.\nRequired on C(state=present)."
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "enabled",
                  "disabled",
                  "locked",
                  "unlocked"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the account.\nC(unlocked) is an alias for C(enabled)."
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "timezone": {
                "type": "string",
                "description": "Timezone of the user to be created if account did not exist."
              },
              "password": {
                "type": "string",
                "description": "Password of the user to be created if account did not exist.\nRequired on C(state=present)."
              },
              "email": {
                "type": "string",
                "description": "Email of the user to be created if account did not exist.\nRequired on C(state=present)."
              },
              "api_url": {
                "type": "string",
                "description": ""
              }
            }
          },
          "seboolean": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Toggles SELinux booleans.",
            "properties": {
              "state": {
                "description": "Desired boolean value",
                "$ref": "#/definitions/ansible_truth"
              },
              "persistent": {
                "description": "Set to C(yes) if the boolean setting should survive a reboot",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "Name of the boolean to configure"
              }
            }
          },
          "postgresql_lang": {
            "required": [
              "lang",
              "db"
            ],
            "type": "object",
            "description": "Adds, removes or changes procedural languages with a PostgreSQL database.\nThis module allows you to add a language, remote a language or change the trust relationship with a PostgreSQL database. The module can be used on the machine where executed or on a remote host.\nWhen removing a language from a database, it is possible that dependencies prevent the database from being removed. In that case, you can specify casade to automatically drop objects that depend on the language (such as functions in the language). In case the language can't be deleted because it is required by the database system, you can specify fail_on_drop=no to ignore the error.\nBe carefull when marking a language as trusted since this could be a potential security breach. Untrusted languages allow only users with the PostgreSQL superuser privilege to use this language to create new functions.",
            "properties": {
              "lang": {
                "type": "string",
                "description": "name of the procedural language to add, remove or change"
              },
              "force_trust": {
                "description": "marks the language as trusted, even if it's marked as untrusted in pg_pltemplate.\nuse with care!",
                "$ref": "#/definitions/ansible_truth"
              },
              "login_user": {
                "type": "string",
                "description": "Default: postgres\n\nUser used to authenticate with PostgreSQL"
              },
              "login_host": {
                "type": "string",
                "description": "Default: localhost\n\nHost running PostgreSQL where you want to execute the actions."
              },
              "db": {
                "type": "string",
                "description": "name of database where the language will be added, removed or changed"
              },
              "cascade": {
                "description": "when dropping a language, also delete object that depend on this language.\nonly used when C(state=absent).",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state of the language for the selected database"
              },
              "login_password": {
                "type": "string",
                "description": "Password used to authenticate with PostgreSQL (must match C(login_user))"
              },
              "trust": {
                "description": "make this language trusted for the selected db",
                "$ref": "#/definitions/ansible_truth"
              },
              "fail_on_drop": {
                "description": "Default: yes\n\nif C(yes), fail when removing a language. Otherwise just log and continue\nin some cases, it is not possible to remove a language (used by the db-system). When         dependencies block the removal, consider using C(cascade).",
                "$ref": "#/definitions/ansible_truth"
              },
              "port": {
                "type": "string",
                "description": "Default: 5432\n\nDatabase port to connect to."
              }
            }
          },
          "consul_acl": {
            "type": "object",
            "description": "allows the addition, modification and deletion of ACL keys and associated rules in a consul cluster via the agent. For more details on using and configuring ACLs, see https://www.consul.io/docs/internals/acl.html.",
            "properties": {
              "name": {
                "type": "string",
                "description": "the name that should be associated with the acl key, this is opaque to Consul"
              },
              "rules": {
                "type": "string",
                "description": "an list of the rules that should be associated with a given token."
              },
              "host": {
                "type": "string",
                "description": "Default: localhost\n\nhost of the consul agent defaults to localhost"
              },
              "state": {
                "type": "string",
                "description": "whether the ACL pair should be present or absent, defaults to present"
              },
              "token": {
                "type": "string",
                "description": "the token key indentifying an ACL rule set. If generated by consul this will be a UUID."
              },
              "mgmt_token": {
                "type": "string",
                "description": "a management token is required to manipulate the acl lists"
              },
              "type": {
                "type": "string",
                "description": "the type of token that should be created, either management or client, defaults to client"
              },
              "port": {
                "type": "string",
                "description": "Default: 8500\n\nthe port on which the consul agent is running"
              }
            }
          },
          "lldp": {
            "type": "object",
            "description": "Reads data out of lldpctl",
            "properties": {}
          },
          "git": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "repo",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "repo"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage I(git) checkouts of repositories to deploy files or software.",
            "properties": {
              "executable": {
                "type": "string",
                "description": "Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be used."
              },
              "refspec": {
                "type": "string",
                "description": "Add an additional refspec to be fetched. If version is set to a I(SHA-1) not reachable from any branch or tag, this option may be necessary to specify the ref containing the I(SHA-1). Uses the same syntax as the 'git fetch' command. An example value could be \"refs/meta/config\"."
              },
              "force": {
                "description": "Default: no\n\nIf C(yes), any modified files in the working repository will be discarded.  Prior to 0.7, this was always 'yes' and could not be disabled.  Prior to 1.9, the default was `yes`",
                "$ref": "#/definitions/ansible_truth"
              },
              "track_submodules": {
                "description": "Default: no\n\nif C(yes), submodules will track the latest commit on their master branch (or other branch specified in .gitmodules).  If C(no), submodules will be kept at the revision specified by the main project. This is equivalent to specifying the --remote flag to git submodule update.",
                "$ref": "#/definitions/ansible_truth"
              },
              "reference": {
                "type": "string",
                "description": "Reference repository (see \"git clone --reference ...\")"
              },
              "dest": {
                "type": "string",
                "description": "Absolute path of where the repository should be checked out to. This parameter is required, unless C(clone) is set to C(no) This change was made in version 1.8.3. Prior to this version, the C(dest) parameter was always required."
              },
              "recursive": {
                "description": "Default: yes\n\nif C(no), repository will be cloned without the --recursive option, skipping sub-modules.",
                "$ref": "#/definitions/ansible_truth"
              },
              "clone": {
                "description": "Default: yes\n\nIf C(no), do not clone the repository if it does not exist locally",
                "$ref": "#/definitions/ansible_truth"
              },
              "accept_hostkey": {
                "description": "Default: no\n\nif C(yes), adds the hostkey for the repo url if not already added. If ssh_opts contains \"-o StrictHostKeyChecking=no\", this parameter is ignored.",
                "$ref": "#/definitions/ansible_truth"
              },
              "update": {
                "description": "Default: yes\n\nIf C(no), do not retrieve new revisions from the origin repository",
                "$ref": "#/definitions/ansible_truth"
              },
              "ssh_opts": {
                "type": "string",
                "description": "Default: None\n\nCreates a wrapper script and exports the path as GIT_SSH which git then automatically uses to override ssh arguments. An example value could be \"-o StrictHostKeyChecking=no\""
              },
              "repo": {
                "type": "string",
                "description": "git, SSH, or HTTP protocol address of the git repository."
              },
              "depth": {
                "description": "Create a shallow clone with a history truncated to the specified number or revisions. The minimum possible value is C(1), otherwise ignored.",
                "$ref": "#/definitions/ansible_number"
              },
              "version": {
                "type": "string",
                "description": "Default: HEAD\n\nWhat version of the repository to check out.  This can be the full 40-character I(SHA-1) hash, the literal string C(HEAD), a branch name, or a tag name."
              },
              "bare": {
                "description": "Default: no\n\nif C(yes), repository will be created as a bare repo, otherwise it will be a standard repo with a workspace.",
                "$ref": "#/definitions/ansible_truth"
              },
              "verify_commit": {
                "description": "Default: no\n\nif C(yes), when cloning or checking out a C(version) verify the signature of a GPG signed commit. This requires C(git) version>=2.1.0 to be installed. The commit MUST be signed and the public key MUST be trusted in the GPG trustdb.",
                "$ref": "#/definitions/ansible_truth"
              },
              "remote": {
                "type": "string",
                "description": "Default: origin\n\nName of the remote."
              },
              "key_file": {
                "type": "string",
                "description": "Default: None\n\nSpecify an optional private key file to use for the checkout."
              },
              "name": {
                "type": "string",
                "description": "git, SSH, or HTTP protocol address of the git repository."
              }
            }
          },
          "vmware_vswitch": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add a VMware Standard Switch to an ESXi host",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the ESXi server"
              },
              "password": {
                "type": "string",
                "description": "The password of the ESXi server"
              },
              "admin": {
                "type": "string",
                "description": "The username of the ESXi server"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the ESXi server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the ESXi server"
              },
              "mtu": {
                "description": "MTU to configure on vswitch",
                "$ref": "#/definitions/ansible_number"
              },
              "nic_name": {
                "type": "string",
                "description": "vmnic name to attach to vswitch"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nAdd or remove the switch"
              },
              "user": {
                "type": "string",
                "description": "The username of the ESXi server"
              },
              "pass": {
                "type": "string",
                "description": "The password of the ESXi server"
              },
              "number_of_ports": {
                "description": "Default: 128\n\nNumber of port to configure on vswitch",
                "$ref": "#/definitions/ansible_number"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "switch_name": {
                "type": "string",
                "description": "vSwitch name to add"
              }
            }
          },
          "vertica_schema": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "create_roles",
                        "create_role"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "usage_roles",
                        "usage_role"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "schema",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "schema"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds or removes Vertica database schema and, optionally, roles with schema access privileges.\nA schema will not be removed until all the objects have been dropped.\nIn such a situation, if the module tries to remove the schema it will fail and only remove roles created for the schema if they have no dependencies.",
            "properties": {
              "create_roles": {
                "type": "string",
                "description": "Comma separated list of roles to create and grant usage and create access to the schema."
              },
              "name": {
                "type": "string",
                "description": "Name of the schema to add or remove."
              },
              "login_user": {
                "type": "string",
                "description": "Default: dbadmin\n\nThe username used to authenticate with."
              },
              "db": {
                "type": "string",
                "description": "Name of the Vertica database."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to create C(present), or drop C(absent) a schema."
              },
              "usage_roles": {
                "type": "string",
                "description": "Comma separated list of roles to create and grant usage access to the schema."
              },
              "cluster": {
                "type": "string",
                "description": "Default: localhost\n\nName of the Vertica cluster."
              },
              "usage_role": {
                "type": "string",
                "description": "Comma separated list of roles to create and grant usage access to the schema."
              },
              "create_role": {
                "type": "string",
                "description": "Comma separated list of roles to create and grant usage and create access to the schema."
              },
              "login_password": {
                "type": "string",
                "description": "The password used to authenticate with."
              },
              "owner": {
                "type": "string",
                "description": "Name of the user to set as owner of the schema."
              },
              "port": {
                "type": "string",
                "description": "Default: 5433\n\nVertica cluster port to connect to."
              },
              "schema": {
                "type": "string",
                "description": "Name of the schema to add or remove."
              }
            }
          },
          "win_firewall_rule": {
            "type": "object",
            "description": "allows you to create/remove/update firewall rules",
            "properties": {
              "profile": {
                "type": "string",
                "description": "the profile this rule applies to"
              },
              "remoteport": {
                "type": "string",
                "description": "the remote port this rule applies to"
              },
              "direction": {
                "type": "string",
                "description": "is this rule for inbound or outbound trafic"
              },
              "enable": {
                "type": "string",
                "description": "is this firewall rule enabled or disabled"
              },
              "protocol": {
                "type": "string",
                "description": "the protocol this rule applies to"
              },
              "name": {
                "type": "string",
                "description": "the rules name"
              },
              "service": {
                "type": "string",
                "description": "the service this rule applies to"
              },
              "localport": {
                "type": "string",
                "description": "the local port this rule applies to"
              },
              "localip": {
                "type": "string",
                "description": "the local ip address this rule applies to"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\ncreate/remove/update or powermanage your VM"
              },
              "program": {
                "type": "string",
                "description": "the program this rule applies to"
              },
              "remoteip": {
                "type": "string",
                "description": "the remote ip address/range this rule applies to"
              },
              "action": {
                "type": "string",
                "description": "what to do with the items this rule is for"
              },
              "force": {
                "type": "string",
                "description": "Enforces the change if a rule with different values exists"
              },
              "description": {
                "type": "string",
                "description": "description for the firewall rule"
              }
            }
          },
          "vsphere_guest": {
            "required": [
              "password",
              "vcenter_hostname",
              "guest",
              "username"
            ],
            "type": "object",
            "description": "Create/delete/reconfigure a guest VM through VMware vSphere. This module has a dependency on pysphere >= 1.7",
            "properties": {
              "resource_pool": {
                "type": "string",
                "description": "Default: None\n\nThe name of the resource_pool to create the VM in."
              },
              "vm_hw_version": {
                "type": "string",
                "description": "Desired hardware version identifier (for example, \"vmx-08\" for vms that needs to be managed with vSphere Client). Note that changing hardware version of existing vm is not supported."
              },
              "vcenter_hostname": {
                "type": "string",
                "description": "The hostname of the vcenter server the module will connect to, to create the guest."
              },
              "force": {
                "description": "Default: no\n\nBoolean. Allows you to run commands which may alter the running state of a guest. Also used to reconfigure and destroy.",
                "$ref": "#/definitions/ansible_truth"
              },
              "guest": {
                "type": "string",
                "description": "The virtual server name you wish to manage."
              },
              "vm_disk": {
                "type": "object",
                "description": "A key, value list of disks and their sizes and which datastore to keep it in."
              },
              "esxi": {
                "type": "object",
                "description": "Dictionary which includes datacenter and hostname on which the VM should be created. For standalone ESXi hosts, ha-datacenter should be used as the datacenter name"
              },
              "vm_nic": {
                "type": "object",
                "description": "A key, value list of nics, their types and what network to put them on."
              },
              "vm_hardware": {
                "type": "object",
                "description": "A key, value list of VM config settings. Must include ['memory_mb', 'num_cpus', 'osid', 'scsi']."
              },
              "username": {
                "type": "string",
                "description": "Username to connect to vcenter as."
              },
              "cluster": {
                "type": "string",
                "description": "Default: None\n\nThe name of the cluster to create the VM in. By default this is derived from the host you tell the module to build the guest on."
              },
              "state": {
                "enum": [
                  "present",
                  "powered_off",
                  "absent",
                  "powered_on",
                  "restarted",
                  "reconfigured"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the vm. 'reconfigured' only applies changes to 'memory_mb' and 'num_cpus' in vm_hardware parameter, and only when hot-plugging is enabled for the guest."
              },
              "vmware_guest_facts": {
                "description": "Gather facts from vCenter on a particular VM",
                "$ref": "#/definitions/ansible_truth"
              },
              "vm_extra_config": {
                "type": "object",
                "description": "A key, value pair of any extra values you want set or changed in the vmx file of the VM. Useful to set advanced options on the VM."
              },
              "power_on_after_clone": {
                "description": "Default: True\n\nSpecifies if the VM should be powered on after the clone.",
                "$ref": "#/definitions/ansible_truth"
              },
              "password": {
                "type": "string",
                "description": "Password of the user to connect to vcenter as."
              },
              "from_template": {
                "description": "Specifies if the VM should be deployed from a template (mutually exclusive with 'state' parameter). No guest customization changes to hardware such as CPU, RAM, NICs or Disks can be applied when launching from template.",
                "$ref": "#/definitions/ansible_truth"
              },
              "template_src": {
                "type": "string",
                "description": "Default: None\n\nName of the source template to deploy from"
              },
              "snapshot_to_clone": {
                "type": "string",
                "description": "Default: none\n\nA string that when specified, will create a linked clone copy of the VM. Snapshot must already be taken in vCenter."
              }
            }
          },
          "win_group": {
            "type": "object",
            "description": "Add and remove local groups",
            "properties": {
              "state": {
                "type": "string",
                "description": "Default: present\n\nCreate or remove the group"
              },
              "name": {
                "type": "string",
                "description": "Name of the group"
              },
              "description": {
                "type": "string",
                "description": "Description of the group"
              }
            }
          },
          "getent": {
            "required": [
              "database"
            ],
            "type": "object",
            "description": "Runs getent against one of it's various databases and returns information into the host's facts, in a getent_<database> prefixed variable",
            "properties": {
              "fail_key": {
                "description": "Default: True\n\nIf a supplied key is missing this will make the task fail if True",
                "$ref": "#/definitions/ansible_truth"
              },
              "split": {
                "type": "string",
                "description": "Default: None\n\ncharacter used to split the database values into lists/arrays such as ':' or '\t', otherwise  it will try to pick one depending on the database"
              },
              "key": {
                "type": "string",
                "description": "key from which to return values from the specified database, otherwise the full contents are returned."
              },
              "database": {
                "type": "string",
                "description": "the name of a getent database supported by the target system (passwd, group, hosts, etc)."
              }
            }
          },
          "vca_vapp": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "passwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "passwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module will actively managed vCloud Air vApp instances.  Instances can be created and deleted as well as both deployed and undeployed.",
            "properties": {
              "vm_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the virtual machine instance in the vApp to manage."
              },
              "vm_memory": {
                "type": "string",
                "description": "Default: None\n\nThe amount of memory in MB to allocate to VMs in the vApp.  If the I(vm_name) argument is provided, then this becomes a per VM setting otherise it is applied to all VMs in the vApp."
              },
              "gateway_name": {
                "type": "string",
                "description": ""
              },
              "template_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the vApp template to use to create the vApp instance.  If the I(state) is not `absent` then the I(template_name) value must be provided.  The I(template_name) must be previously uploaded to the catalog specified by I(catalog_name)"
              },
              "pass": {
                "type": "string",
                "description": "Default: None\n\nThe vCloud Air password to use during authentication"
              },
              "operation": {
                "enum": [
                  "noop",
                  "poweron",
                  "poweroff",
                  "suspend",
                  "shutdown",
                  "reboot",
                  "reset"
                ],
                "type": "string",
                "description": "Default: noop\n\nSpecifies an operation to be performed on the vApp."
              },
              "network_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the network that should be attached to the virtual machine in the vApp.  The virtual network specified must already be created in the vCloud Air VDC.  If the I(state) is not 'absent' then the I(network_name) argument must be provided."
              },
              "vdc_name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the virtual data center (VDC) where the vm should be created or contains the vAPP."
              },
              "vm_cpus": {
                "type": "string",
                "description": "Default: None\n\nThe number of vCPUs to configure for the VM in the vApp.   If the I(vm_name) argument is provided, then this becomes a per VM setting otherwise it is applied to all VMs in the vApp."
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "deployed",
                  "undeployed"
                ],
                "type": "string",
                "description": "Default: present\n\nConfigures the state of the vApp."
              },
              "service_type": {
                "enum": [
                  "vca",
                  "vchs",
                  "vcd"
                ],
                "type": "string",
                "description": "Default: vca\n\nThe type of service we are authenticating against"
              },
              "api_version": {
                "type": "string",
                "description": "Default: 5.7\n\nThe api version to be used with the vca"
              },
              "username": {
                "type": "string",
                "description": "Default: None\n\nThe vCloud Air username to use during authentication"
              },
              "passwd": {
                "type": "string",
                "description": "Default: None\n\nThe vCloud Air password to use during authentication"
              },
              "catalog_name": {
                "type": "string",
                "description": ""
              },
              "network_mode": {
                "enum": [
                  "pool",
                  "dhcp",
                  "static"
                ],
                "type": "string",
                "description": "Default: pool\n\nConfigures the mode of the network connection."
              },
              "vapp_name": {
                "type": "string",
                "description": "The name of the vCloud Air vApp instance"
              },
              "user": {
                "type": "string",
                "description": "Default: None\n\nThe vCloud Air username to use during authentication"
              },
              "org": {
                "type": "string",
                "description": "Default: None\n\nThe org to login to for creating vapp, mostly set when the service_type is vdc."
              },
              "password": {
                "type": "string",
                "description": "Default: None\n\nThe vCloud Air password to use during authentication"
              },
              "host": {
                "type": "string",
                "description": "Default: None\n\nThe authentication host to be used when service type  is vcd."
              },
              "instance_id": {
                "type": "string",
                "description": "Default: None\n\nThe instance id in a vchs environment to be used for creating the vapp"
              },
              "service_id": {
                "type": "string",
                "description": ""
              },
              "verify_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "htpasswd": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "username"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "path",
                        "dest",
                        "destfile"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "destfile"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Add and remove username/password entries in a password file using htpasswd.\nThis is used by web servers such as Apache and Nginx for basic authentication.",
            "properties": {
              "username": {
                "type": "string",
                "description": "User name to add or remove"
              },
              "name": {
                "type": "string",
                "description": "User name to add or remove"
              },
              "dest": {
                "type": "string",
                "description": "Path to the file that contains the usernames and passwords"
              },
              "create": {
                "description": "Default: yes\n\nUsed with C(state=present). If specified, the file will be created if it does not already exist. If set to \"no\", will fail if the file does not exist",
                "$ref": "#/definitions/ansible_truth"
              },
              "destfile": {
                "type": "string",
                "description": "Path to the file that contains the usernames and passwords"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nWhether the user entry should be present or not"
              },
              "path": {
                "type": "string",
                "description": "Path to the file that contains the usernames and passwords"
              },
              "password": {
                "type": "string",
                "description": "Password associated with user.\nMust be specified if user does not exist yet."
              },
              "crypt_scheme": {
                "type": "string",
                "description": "Default: apr_md5_crypt\n\nEncryption scheme to be used.  As well as the four choices listed here, you can also use any other hash supported by passlib, such as md5_crypt and sha256_crypt, which are linux passwd hashes.  If you do so the password file will not be compatible with Apache or Nginx"
              }
            }
          },
          "hg": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "repo",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "repo"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "revision",
                        "version"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages Mercurial (hg) repositories. Supports SSH, HTTP/S and local address.",
            "properties": {
              "purge": {
                "description": "Default: no\n\nDeletes untracked files. Runs C(hg purge).",
                "$ref": "#/definitions/ansible_truth"
              },
              "executable": {
                "type": "string",
                "description": "Path to hg executable to use. If not supplied, the normal mechanism for resolving binary paths will be used."
              },
              "force": {
                "description": "Default: no\n\nDiscards uncommitted changes. Runs C(hg update -C).  Prior to 1.9, the default was `yes`.",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "The repository address."
              },
              "dest": {
                "type": "string",
                "description": "Absolute path of where the repository should be cloned to."
              },
              "update": {
                "description": "Default: yes\n\nIf C(no), do not retrieve new revisions from the origin repository",
                "$ref": "#/definitions/ansible_truth"
              },
              "repo": {
                "type": "string",
                "description": "The repository address."
              },
              "version": {
                "type": "string",
                "description": "Equivalent C(-r) option in hg command which could be the changeset, revision number, branch name or even tag."
              },
              "revision": {
                "type": "string",
                "description": "Equivalent C(-r) option in hg command which could be the changeset, revision number, branch name or even tag."
              }
            }
          },
          "win_package": {
            "type": "object",
            "description": "Installs or uninstalls a package",
            "properties": {
              "product_id": {
                "type": "string",
                "description": "product id of the installed package (used for checking if already installed)"
              },
              "user_password": {
                "type": "string",
                "description": "Password of an account with access to the package if its located on a file share. Only needed if the winrm user doesn't have access to the package. Also specify user_name for this to function properly."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nInstall or Uninstall"
              },
              "arguments": {
                "type": "string",
                "description": "Any arguments the installer needs"
              },
              "path": {
                "type": "string",
                "description": "Location of the package to be installed (either on file system, network share or url)"
              },
              "user_name": {
                "type": "string",
                "description": "Username of an account with access to the package if its located on a file share. Only needed if the winrm user doesn't have access to the package. Also specify user_password for this to function properly."
              },
              "name": {
                "type": "string",
                "description": "name of the package. Just for logging reasons, will use the value of path if name isn't specified"
              }
            }
          },
          "zabbix_screen": {
            "type": "object",
            "description": "This module allows you to create, modify and delete Zabbix screens and associated graph data.",
            "properties": {
              "screens": {
                "type": "string",
                "description": "List of screens to be created/updated/deleted(see example).\nIf the screen(s) already been added, the screen(s) name won't be updated.\nWhen creating or updating screen(s), C(screen_name), C(host_group) are required.\nWhen deleting screen(s), the C(screen_name) is required.\nThe available states are: C(present) (default) and C(absent). If the screen(s) already exists, and the state is not C(absent), the screen(s) will just be updated as needed."
              },
              "login_user": {
                "type": "string",
                "description": "Zabbix user name."
              },
              "server_url": {
                "type": "string",
                "description": "Url of Zabbix server, with protocol (http or https)."
              },
              "timeout": {
                "type": "string",
                "description": "Default: 10\n\nThe timeout of API request (seconds)."
              },
              "login_password": {
                "type": "string",
                "description": "Zabbix user password."
              }
            }
          },
          "pacman": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg",
                        "package"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "update_cache",
                        "update-cache"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage packages with the I(pacman) package manager, which is used by Arch Linux and its variants.",
            "properties": {
              "upgrade": {
                "description": "Whether or not to upgrade whole system",
                "$ref": "#/definitions/ansible_truth"
              },
              "force": {
                "description": "Force remove package, without any checks.",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "description": "Name of the package to install, upgrade, or remove.",
                "$ref": "#/definitions/ansible_array"
              },
              "package": {
                "description": "Name of the package to install, upgrade, or remove.",
                "$ref": "#/definitions/ansible_array"
              },
              "recurse": {
                "description": "When removing a package, also remove its dependencies, provided that they are not required by other packages and were not explicitly installed by a user.",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "latest",
                  "absent",
                  "removed"
                ],
                "type": "string",
                "description": "Default: present\n\nDesired state of the package."
              },
              "update_cache": {
                "description": "Whether or not to refresh the master package lists. This can be run as part of a package installation or as a separate step.",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkg": {
                "description": "Name of the package to install, upgrade, or remove.",
                "$ref": "#/definitions/ansible_array"
              },
              "update-cache": {
                "description": "Whether or not to refresh the master package lists. This can be run as part of a package installation or as a separate step.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "rabbitmq_plugin": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "names",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "names"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Enables or disables RabbitMQ plugins",
            "properties": {
              "prefix": {
                "type": "string",
                "description": "Specify a custom install prefix to a Rabbit"
              },
              "state": {
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "type": "string",
                "description": "Default: enabled\n\nSpecify if plugins are to be enabled or disabled"
              },
              "names": {
                "type": "string",
                "description": "Comma-separated list of plugin names"
              },
              "name": {
                "type": "string",
                "description": "Comma-separated list of plugin names"
              },
              "new_only": {
                "description": "Default: no\n\nOnly enable missing plugins\nDoes not disable plugins that are not in the names list",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "firewalld": {
            "required": [
              "state"
            ],
            "type": "object",
            "description": "This module allows for addition or deletion of services and ports either tcp or udp in either running or permanent firewalld rules.",
            "properties": {
              "zone": {
                "type": "string",
                "description": "Default: system-default(public)\n\nThe firewalld zone to add/remove to/from (NOTE: default zone can be configured per system but \"public\" is default from upstream. Available choices can be extended based on per-system configs, listed here are \"out of the box\" defaults)."
              },
              "service": {
                "type": "string",
                "description": "Name of a service to add/remove to/from firewalld - service must be listed in /etc/services."
              },
              "immediate": {
                "description": "Should this configuration be applied immediately, if set as permanent",
                "$ref": "#/definitions/ansible_truth"
              },
              "source": {
                "type": "string",
                "description": "The source/network you would like to add/remove to/from firewalld"
              },
              "state": {
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "type": "string",
                "description": "Should this port accept(enabled) or reject(disabled) connections."
              },
              "permanent": {
                "description": "Should this configuration be in the running firewalld configuration or persist across reboots.",
                "$ref": "#/definitions/ansible_truth"
              },
              "timeout": {
                "description": "The amount of time the rule should be in effect for when non-permanent.",
                "$ref": "#/definitions/ansible_number"
              },
              "port": {
                "type": "string",
                "description": "Name of a port or port range to add/remove to/from firewalld. Must be in the form PORT/PROTOCOL or PORT-PORT/PROTOCOL for port ranges."
              },
              "rich_rule": {
                "type": "string",
                "description": "Rich rule to add/remove to/from firewalld."
              }
            }
          },
          "zfs": {
            "required": [
              "name",
              "state"
            ],
            "type": "object",
            "description": "Manages ZFS file systems on Solaris and FreeBSD. Can manage file systems, volumes and snapshots. See zfs(1M) for more information about the properties.",
            "properties": {
              "origin": {
                "type": "string",
                "description": "Name of the snapshot to clone"
              },
              "setuid": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The setuid property."
              },
              "zoned": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The zoned property."
              },
              "primarycache": {
                "enum": [
                  "all",
                  "none",
                  "metadata"
                ],
                "type": "string",
                "description": "The primarycache property."
              },
              "logbias": {
                "enum": [
                  "latency",
                  "throughput"
                ],
                "type": "string",
                "description": "The logbias property."
              },
              "sync": {
                "enum": [
                  "standard",
                  "always",
                  "disabled"
                ],
                "type": "string",
                "description": "The sync property."
              },
              "copies": {
                "enum": [
                  "1",
                  "2",
                  "3"
                ],
                "type": "string",
                "description": "The copies property."
              },
              "sharenfs": {
                "type": "string",
                "description": "The sharenfs property."
              },
              "sharesmb": {
                "type": "string",
                "description": "The sharesmb property."
              },
              "reservation": {
                "type": "string",
                "description": "The reservation property."
              },
              "mountpoint": {
                "type": "string",
                "description": "The mountpoint property."
              },
              "casesensitivity": {
                "enum": [
                  "sensitive",
                  "insensitive",
                  "mixed"
                ],
                "type": "string",
                "description": "The casesensitivity property."
              },
              "utf8only": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The utf8only property."
              },
              "xattr": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The xattr property."
              },
              "readonly": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The readonly property."
              },
              "compression": {
                "enum": [
                  "on",
                  "off",
                  "lzjb",
                  "gzip",
                  "gzip-1",
                  "gzip-2",
                  "gzip-3",
                  "gzip-4",
                  "gzip-5",
                  "gzip-6",
                  "gzip-7",
                  "gzip-8",
                  "gzip-9",
                  "lz4",
                  "zle"
                ],
                "type": "string",
                "description": "The compression property."
              },
              "shareiscsi": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The shareiscsi property."
              },
              "aclmode": {
                "enum": [
                  "discard",
                  "groupmask",
                  "passthrough"
                ],
                "type": "string",
                "description": "The aclmode property."
              },
              "dedup": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The dedup property."
              },
              "aclinherit": {
                "enum": [
                  "discard",
                  "noallow",
                  "restricted",
                  "passthrough",
                  "passthrough-x"
                ],
                "type": "string",
                "description": "The aclinherit property."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Whether to create (C(present)), or remove (C(absent)) a file system, snapshot or volume."
              },
              "recordsize": {
                "type": "string",
                "description": "The recordsize property."
              },
              "jailed": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The jailed property."
              },
              "secondarycache": {
                "enum": [
                  "all",
                  "none",
                  "metadata"
                ],
                "type": "string",
                "description": "The secondarycache property."
              },
              "refreservation": {
                "type": "string",
                "description": "The refreservation property."
              },
              "exec": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The exec property."
              },
              "createparent": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": ""
              },
              "refquota": {
                "type": "string",
                "description": "The refquota property."
              },
              "quota": {
                "type": "string",
                "description": "The quota property."
              },
              "volsize": {
                "type": "string",
                "description": "The volsize property."
              },
              "vscan": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The vscan property."
              },
              "canmount": {
                "enum": [
                  "on",
                  "off",
                  "noauto"
                ],
                "type": "string",
                "description": "The canmount property."
              },
              "atime": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The atime property."
              },
              "normalization": {
                "enum": [
                  "none",
                  "formC",
                  "formD",
                  "formKC",
                  "formKD"
                ],
                "type": "string",
                "description": "The normalization property."
              },
              "volblocksize": {
                "type": "string",
                "description": "The volblocksize property."
              },
              "name": {
                "type": "string",
                "description": "File system, snapshot or volume name e.g. C(rpool/myfs)"
              },
              "checksum": {
                "enum": [
                  "on",
                  "off",
                  "fletcher2",
                  "fletcher4",
                  "sha256"
                ],
                "type": "string",
                "description": "The checksum property."
              },
              "devices": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The devices property."
              },
              "nbmand": {
                "enum": [
                  "on",
                  "off"
                ],
                "type": "string",
                "description": "The nbmand property."
              },
              "snapdir": {
                "enum": [
                  "hidden",
                  "visible"
                ],
                "type": "string",
                "description": "The snapdir property."
              }
            }
          },
          "lvg": {
            "required": [
              "vg"
            ],
            "type": "object",
            "description": "This module creates, removes or resizes volume groups.",
            "properties": {
              "vg_options": {
                "type": "string",
                "description": "Additional options to pass to C(vgcreate) when creating the volume group."
              },
              "pvs": {
                "description": "List of comma-separated devices to use as physical devices in this volume group. Required when creating or resizing volume group.",
                "$ref": "#/definitions/ansible_array"
              },
              "force": {
                "description": "Default: no\n\nIf yes, allows to remove volume group with logical volumes.",
                "$ref": "#/definitions/ansible_truth"
              },
              "vg": {
                "type": "string",
                "description": "The name of the volume group."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nControl if the volume group exists."
              },
              "pesize": {
                "description": "Default: 4\n\nThe size of the physical extent in megabytes. Must be a power of 2.",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "vmware_dvs_portgroup": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Create or remove a Distributed vSwitch portgroup",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "portgroup_name": {
                "type": "string",
                "description": "The name of the portgroup that is to be created or deleted"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter API server"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": ""
              },
              "num_ports": {
                "description": "The number of ports the portgroup should contain",
                "$ref": "#/definitions/ansible_number"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "portgroup_type": {
                "enum": [
                  "earlyBinding",
                  "lateBinding",
                  "ephemeral"
                ],
                "type": "string",
                "description": "See VMware KB 1022312 regarding portgroup types"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "switch_name": {
                "type": "string",
                "description": "The name of the distributed vSwitch the port group should be created on."
              },
              "vlan_id": {
                "description": "The VLAN ID that should be configured with the portgroup",
                "$ref": "#/definitions/ansible_number"
              }
            }
          },
          "mongodb_user": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "user"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "database",
                        "db"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "database"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "db"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Adds or removes a user from a MongoDB database.",
            "properties": {
              "login_port": {
                "type": "string",
                "description": "Default: 27017\n\nThe port to connect to"
              },
              "update_password": {
                "enum": [
                  "always",
                  "on_create"
                ],
                "type": "string",
                "description": "Default: always\n\nC(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users."
              },
              "name": {
                "type": "string",
                "description": "The name of the user to add or remove"
              },
              "roles": {
                "description": "Default: readWrite\n\nThe database user roles valid values are one or more of the following: read, 'readWrite', 'dbAdmin', 'userAdmin', 'clusterAdmin', 'readAnyDatabase', 'readWriteAnyDatabase', 'userAdminAnyDatabase', 'dbAdminAnyDatabase'\nThis param requires mongodb 2.4+ and pymongo 2.5+",
                "$ref": "#/definitions/ansible_array"
              },
              "database": {
                "type": "string",
                "description": "The name of the database to add/remove the user from"
              },
              "login_user": {
                "type": "string",
                "description": "The username used to authenticate with"
              },
              "login_host": {
                "type": "string",
                "description": "Default: localhost\n\nThe host running the database"
              },
              "login_password": {
                "type": "string",
                "description": "The password used to authenticate with"
              },
              "db": {
                "type": "string",
                "description": "The name of the database to add/remove the user from"
              },
              "ssl": {
                "type": "string",
                "description": "Whether to use an SSL connection when connecting to the database"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe database user state"
              },
              "user": {
                "type": "string",
                "description": "The name of the user to add or remove"
              },
              "login_database": {
                "type": "string",
                "description": "The database where login credentials are stored"
              },
              "password": {
                "type": "string",
                "description": "The password to use for the user"
              },
              "pass": {
                "type": "string",
                "description": "The password to use for the user"
              },
              "replica_set": {
                "type": "string",
                "description": "Replica set to connect to (automatically connects to primary for writes)"
              }
            }
          },
          "vmware_target_canonical_facts": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Return canonical (NAA) from an ESXi host based on SCSI target ID",
            "properties": {
              "username": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "admin": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "hostname": {
                "type": "string",
                "description": "The hostname or IP address of the vSphere vCenter"
              },
              "target_id": {
                "description": "The target id based on order of scsi device",
                "$ref": "#/definitions/ansible_number"
              },
              "pwd": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "user": {
                "type": "string",
                "description": "The username of the vSphere vCenter"
              },
              "pass": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "password": {
                "type": "string",
                "description": "The password of the vSphere vCenter"
              },
              "validate_certs": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "facter": {
            "type": "object",
            "description": "Runs the I(facter) discovery program (U(https://github.com/puppetlabs/facter)) on the remote system, returning JSON data that can be useful for inventory purposes.",
            "properties": {}
          },
          "openvswitch_port": {
            "required": [
              "bridge",
              "port"
            ],
            "type": "object",
            "description": "Manage Open vSwitch ports",
            "properties": {
              "bridge": {
                "type": "string",
                "description": "Name of bridge to manage"
              },
              "set": {
                "type": "string",
                "description": "Default: None\n\nSet a single property on a port."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the port should exist"
              },
              "timeout": {
                "description": "Default: 5\n\nHow long to wait for ovs-vswitchd to respond",
                "$ref": "#/definitions/ansible_number"
              },
              "external_ids": {
                "type": "string",
                "description": "Dictionary of external_ids applied to a port."
              },
              "port": {
                "type": "string",
                "description": "Name of port to manage on the bridge"
              }
            }
          },
          "cs_project": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Create, update, suspend, activate and remove projects.",
            "properties": {
              "display_text": {
                "type": "string",
                "description": "Display text of the project.\nIf not specified, C(name) will be used as C(display_text)."
              },
              "account": {
                "type": "string",
                "description": "Account the project is related to."
              },
              "poll_async": {
                "description": "Default: True\n\nPoll async jobs until job has finished.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_url": {
                "type": "string",
                "description": ""
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "active",
                  "suspended"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the project."
              },
              "domain": {
                "type": "string",
                "description": "Domain the project is related to."
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the project."
              }
            }
          },
          "mysql_variables": {
            "type": "object",
            "description": "Query / Set MySQL variables",
            "properties": {
              "ssl_key": {
                "type": "string",
                "description": ""
              },
              "ssl_cert": {
                "type": "string",
                "description": ""
              },
              "config_file": {
                "type": "string",
                "description": ""
              },
              "login_port": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "login_user": {
                "type": "string",
                "description": ""
              },
              "login_host": {
                "type": "string",
                "description": ""
              },
              "value": {
                "type": "string",
                "description": "If set, then sets variable value to this"
              },
              "ssl_ca": {
                "type": "string",
                "description": ""
              },
              "login_unix_socket": {
                "type": "string",
                "description": ""
              },
              "login_password": {
                "type": "string",
                "description": ""
              },
              "variable": {
                "type": "string",
                "description": "Variable name to operate"
              }
            }
          },
          "nagios": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "services",
                        "service"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "The M(nagios) module has two basic functions: scheduling downtime and toggling alerts for services or hosts.\nAll actions require the I(host) parameter to be given explicitly. In playbooks you can use the C({{inventory_hostname}}) variable to refer to the host the playbook is currently running on.\nYou can specify multiple services at once by separating them with commas, .e.g., C(services=httpd,nfs,puppet).\nWhen specifying what service to handle there is a special service value, I(host), which will handle alerts/downtime for the I(host itself), e.g., C(service=host). This keyword may not be given with other services at the same time. I(Setting alerts/downtime for a host does not affect alerts/downtime for any of the services running on it.) To schedule downtime for all services on particular host use keyword \"all\", e.g., C(service=all).\nWhen using the M(nagios) module you will need to specify your Nagios server using the C(delegate_to) parameter.",
            "properties": {
              "comment": {
                "type": "string",
                "description": "Default: Scheduling downtime\n\nComment for C(downtime) action."
              },
              "servicegroup": {
                "type": "string",
                "description": "The Servicegroup we want to set downtimes/alerts for. B(Required) option when using the C(servicegroup_service_downtime) amd C(servicegroup_host_downtime)."
              },
              "service": {
                "type": "string",
                "description": "What to manage downtime/alerts for. Separate multiple services with commas. C(service) is an alias for C(services). B(Required) option when using the C(downtime), C(enable_alerts), and C(disable_alerts) actions."
              },
              "author": {
                "type": "string",
                "description": "Default: Ansible\n\nAuthor to leave downtime comments as. Only usable with the C(downtime) action."
              },
              "action": {
                "enum": [
                  "downtime",
                  "enable_alerts",
                  "disable_alerts",
                  "silence",
                  "unsilence",
                  "silence_nagios",
                  "unsilence_nagios",
                  "command",
                  "servicegroup_service_downtime",
                  "servicegroup_host_downtime"
                ],
                "type": "string",
                "description": "Action to take.\nservicegroup options were added in 2.0."
              },
              "host": {
                "type": "string",
                "description": "Host to operate on in Nagios."
              },
              "command": {
                "type": "string",
                "description": "The raw command to send to nagios, which should not include the submitted time header or the line-feed B(Required) option when using the C(command) action."
              },
              "services": {
                "type": "string",
                "description": "What to manage downtime/alerts for. Separate multiple services with commas. C(service) is an alias for C(services). B(Required) option when using the C(downtime), C(enable_alerts), and C(disable_alerts) actions."
              },
              "minutes": {
                "type": "string",
                "description": "Default: 30\n\nMinutes to schedule downtime for.\nOnly usable with the C(downtime) action."
              },
              "cmdfile": {
                "type": "string",
                "description": "Default: auto-detected\n\nPath to the nagios I(command file) (FIFO pipe). Only required if auto-detection fails."
              }
            }
          },
          "circonus_annotation": {
            "required": [
              "category",
              "description",
              "title",
              "api_key"
            ],
            "type": "object",
            "description": "Create an annotation event with a given category, title and description. Optionally start, end or durations can be provided",
            "properties": {
              "category": {
                "type": "string",
                "description": "Annotation Category"
              },
              "description": {
                "type": "string",
                "description": "Description of annotation"
              },
              "title": {
                "type": "string",
                "description": "Title of annotation"
              },
              "stop": {
                "description": "Unix timestamp of event end, defaults to now + duration",
                "$ref": "#/definitions/ansible_number"
              },
              "start": {
                "description": "Unix timestamp of event start, defaults to now",
                "$ref": "#/definitions/ansible_number"
              },
              "duration": {
                "description": "Duration in seconds of annotation, defaults to 0",
                "$ref": "#/definitions/ansible_number"
              },
              "api_key": {
                "type": "string",
                "description": "Circonus API key"
              }
            }
          },
          "clc_publicip": {
            "required": [
              "server_ids"
            ],
            "type": "object",
            "description": "An Ansible module to add or delete public ip addresses on an existing server or servers in CenturyLink Cloud.",
            "properties": {
              "server_ids": {
                "description": "A list of servers to create public ips on.",
                "$ref": "#/definitions/ansible_array"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nDetermine whether to create or delete public IPs. If present module will not create a second public ip if one already exists."
              },
              "protocol": {
                "enum": [
                  "TCP",
                  "UDP",
                  "ICMP"
                ],
                "type": "string",
                "description": "Default: TCP\n\nThe protocol that the public IP will listen for."
              },
              "ports": {
                "description": "Default: None\n\nA list of ports to expose. This is required when state is 'present'",
                "$ref": "#/definitions/ansible_array"
              },
              "wait": {
                "description": "Default: True\n\nWhether to wait for the tasks to finish before returning.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "os_user": {
            "type": "object",
            "description": "Manage OpenStack Identity users. Users can be created, updated or deleted using this module. A user will be updated if I(name) matches an existing user and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the user.",
            "properties": {
              "default_project": {
                "type": "string",
                "description": "Default: None\n\nProject name or ID that the user should be associated with by default"
              },
              "name": {
                "type": "string",
                "description": "Username for the user"
              },
              "enabled": {
                "type": "string",
                "description": "Default: True\n\nIs the user enabled"
              },
              "domain": {
                "type": "string",
                "description": "Default: None\n\nDomain to create the user in if the cloud supports domains"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "password": {
                "type": "string",
                "description": "Default: None\n\nPassword for the user"
              },
              "email": {
                "type": "string",
                "description": "Default: None\n\nEmail address for the user"
              }
            }
          },
          "at": {
            "type": "object",
            "description": "Use this module to schedule a command or script file to run once in the future.\nAll jobs are executed in the 'a' queue.",
            "properties": {
              "count": {
                "description": "The count of units in the future to execute the command or script file.",
                "$ref": "#/definitions/ansible_number"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state dictates if the command or script file should be evaluated as present(added) or absent(deleted)."
              },
              "command": {
                "type": "string",
                "description": "A command to be executed in the future."
              },
              "units": {
                "enum": [
                  "minutes",
                  "hours",
                  "days",
                  "weeks"
                ],
                "type": "string",
                "description": "The type of units in the future to execute the command or script file."
              },
              "unique": {
                "description": "If a matching job is present a new job will not be added.",
                "$ref": "#/definitions/ansible_truth"
              },
              "script_file": {
                "type": "string",
                "description": "An existing script file to be executed in the future."
              }
            }
          },
          "file": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "path",
                        "dest",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "path"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "dest"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Sets attributes of files, symlinks, and directories, or removes files/symlinks/directories. Many other modules support the same options as the M(file) module - including M(copy), M(template), and M(assemble).",
            "properties": {
              "src": {
                "type": "string",
                "description": "path of the file to link to (applies only to C(state=link)). Will accept absolute, relative and nonexisting paths. Relative paths are not expanded."
              },
              "force": {
                "description": "Default: no\n\nforce the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the \"path\" file and create symlink to the \"src\" file in place of it).",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "path to the file being managed.  Aliases: I(dest), I(name)"
              },
              "dest": {
                "type": "string",
                "description": "path to the file being managed.  Aliases: I(dest), I(name)"
              },
              "recurse": {
                "description": "Default: no\n\nrecursively set the specified file attributes (applies only to state=directory)",
                "$ref": "#/definitions/ansible_truth"
              },
              "state": {
                "enum": [
                  "file",
                  "link",
                  "directory",
                  "hard",
                  "touch",
                  "absent"
                ],
                "type": "string",
                "description": "Default: file\n\nIf C(directory), all immediate subdirectories will be created if they do not exist, since 1.7 they will be created with the supplied permissions. If C(file), the file will NOT be created if it does not exist, see the M(copy) or M(template) module if you want that behavior.  If C(link), the symbolic link will be created or changed. Use C(hard) for hardlinks. If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. If C(touch) (new in 1.4), an empty file will be created if the C(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way `touch` works from the command line)."
              },
              "original_basename": {
                "type": "string",
                "description": ""
              },
              "diff_peek": {
                "type": "string",
                "description": ""
              },
              "path": {
                "type": "string",
                "description": "path to the file being managed.  Aliases: I(dest), I(name)"
              },
              "validate": {
                "type": "string",
                "description": ""
              }
            }
          },
          "clc_aa_policy": {
            "required": [
              "location",
              "name"
            ],
            "type": "object",
            "description": "An Ansible module to Create or Delete Anti Affinity Policies at CenturyLink Cloud.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to create or delete the policy."
              },
              "location": {
                "type": "string",
                "description": "Datacenter in which the policy lives/should live."
              },
              "name": {
                "type": "string",
                "description": "The name of the Anti Affinity Policy."
              },
              "wait": {
                "type": "string",
                "description": "Default: True\n\nWhether to wait for the tasks to finish before returning."
              }
            }
          },
          "pip": {
            "type": "object",
            "description": "Manage Python library dependencies. To use this module, one of the following keys is required: C(name) or C(requirements).",
            "properties": {
              "virtualenv": {
                "type": "string",
                "description": "An optional path to a I(virtualenv) directory to install into"
              },
              "virtualenv_site_packages": {
                "description": "Default: no\n\nWhether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.",
                "$ref": "#/definitions/ansible_truth"
              },
              "executable": {
                "type": "string",
                "description": "The explicit executable or a pathname to the executable to be used to run pip for a specific version of Python installed in the system. For example C(pip-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation."
              },
              "chdir": {
                "type": "string",
                "description": "cd into this directory before running the command"
              },
              "requirements": {
                "type": "string",
                "description": "The path to a pip requirements file"
              },
              "name": {
                "type": "string",
                "description": "The name of a Python library to install or the url of the remote package."
              },
              "virtualenv_python": {
                "type": "string",
                "description": "The Python executable used for creating the virtual environment. For example C(python3.4), C(python2.7). When not specified, the system Python version is used."
              },
              "editable": {
                "description": "Default: True\n\nPass the editable flag for versioning URLs.",
                "$ref": "#/definitions/ansible_truth"
              },
              "virtualenv_command": {
                "type": "string",
                "description": "Default: virtualenv\n\nThe command or a pathname to the command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2), C(~/bin/virtualenv), C(/usr/local/bin/virtualenv)."
              },
              "use_mirrors": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "extra_args": {
                "type": "string",
                "description": "Extra arguments passed to pip."
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "latest"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state of module"
              },
              "version": {
                "type": "string",
                "description": "The version number to install of the Python library specified in the I(name) parameter"
              }
            }
          },
          "rabbitmq_exchange": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "exchange_type",
                        "type"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "This module uses rabbitMQ Rest API to create/delete exchanges",
            "properties": {
              "login_port": {
                "type": "string",
                "description": "Default: 15672\n\nrabbitMQ management api port"
              },
              "name": {
                "type": "string",
                "description": "Name of the exchange to create"
              },
              "login_user": {
                "type": "string",
                "description": "Default: guest\n\nrabbitMQ user for connection"
              },
              "login_host": {
                "type": "string",
                "description": "Default: localhost\n\nrabbitMQ host for connection"
              },
              "exchange_type": {
                "type": "string",
                "description": "Default: direct\n\ntype for the exchange"
              },
              "vhost": {
                "type": "string",
                "description": "Default: /\n\nrabbitMQ virtual host"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether the exchange should be present or absent\nOnly present implemented atm"
              },
              "internal": {
                "description": "exchange is available only for other exchanges",
                "$ref": "#/definitions/ansible_truth"
              },
              "arguments": {
                "type": "object",
                "description": "extra arguments for exchange. If defined this argument is a key/value dictionary"
              },
              "auto_delete": {
                "description": "if the exchange should delete itself after all queues/exchanges unbound from it",
                "$ref": "#/definitions/ansible_truth"
              },
              "login_password": {
                "type": "string",
                "description": "rabbitMQ password for connection"
              },
              "type": {
                "type": "string",
                "description": "Default: direct\n\ntype for the exchange"
              },
              "durable": {
                "description": "Default: True\n\nwhether exchange is durable or not",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "cs_iso": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Register and remove ISO images.",
            "properties": {
              "is_featured": {
                "description": "Register the ISO to be featured. Only used if C(state) is present.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the ISO."
              },
              "api_http_method": {
                "enum": [
                  "get",
                  "post"
                ],
                "type": "string",
                "description": ""
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nState of the ISO."
              },
              "bootable": {
                "description": "Default: True\n\nRegister the ISO to be bootable. Only used if C(state) is present.",
                "$ref": "#/definitions/ansible_truth"
              },
              "api_secret": {
                "type": "string",
                "description": ""
              },
              "api_timeout": {
                "description": "",
                "$ref": "#/definitions/ansible_number"
              },
              "domain": {
                "type": "string",
                "description": "Domain the ISO is related to."
              },
              "is_dynamically_scalable": {
                "description": "Register the ISO having XS/VMWare tools installed inorder to support dynamic scaling of VM cpu/memory. Only used if C(state) is present.",
                "$ref": "#/definitions/ansible_truth"
              },
              "project": {
                "type": "string",
                "description": "Name of the project the ISO to be registered in."
              },
              "url": {
                "type": "string",
                "description": "URL where the ISO can be downloaded from. Required if C(state) is present."
              },
              "iso_filter": {
                "enum": [
                  "featured",
                  "self",
                  "selfexecutable",
                  "sharedexecutable",
                  "executable",
                  "community"
                ],
                "type": "string",
                "description": "Default: self\n\nName of the filter used to search for the ISO."
              },
              "api_region": {
                "type": "string",
                "description": ""
              },
              "is_ready": {
                "description": "This flag is used for searching existing ISOs. If set to C(true), it will only list ISO ready for deployment e.g. successfully downloaded and installed. Recommended to set it to C(false).",
                "$ref": "#/definitions/ansible_truth"
              },
              "checksum": {
                "type": "string",
                "description": "The MD5 checksum value of this ISO. If set, we search by checksum instead of name."
              },
              "account": {
                "type": "string",
                "description": "Account the ISO is related to."
              },
              "os_type": {
                "type": "string",
                "description": "Name of the OS that best represents the OS of this ISO. If the iso is bootable this parameter needs to be passed. Required if C(state) is present."
              },
              "zone": {
                "type": "string",
                "description": "Name of the zone you wish the ISO to be registered or deleted from. If not specified, first zone found will be used."
              },
              "api_url": {
                "type": "string",
                "description": ""
              }
            }
          },
          "github_hooks": {
            "required": [
              "repo",
              "oauthkey",
              "user",
              "action"
            ],
            "type": "object",
            "description": "Adds service hooks and removes service hooks that have an error status.",
            "properties": {
              "oauthkey": {
                "type": "string",
                "description": "The oauth key provided by github. It can be found/generated on github under \"Edit Your Profile\" >> \"Applications\" >> \"Personal Access Tokens\""
              },
              "hookurl": {
                "type": "string",
                "description": "When creating a new hook, this is the url that you want github to post to. It is only required when creating a new hook."
              },
              "repo": {
                "type": "string",
                "description": "This is the API url for the repository you want to manage hooks for. It should be in the form of: https://api.github.com/repos/user:/repo:. Note this is different than the normal repo url."
              },
              "user": {
                "type": "string",
                "description": "Github username."
              },
              "content_type": {
                "enum": [
                  "json",
                  "form"
                ],
                "type": "string",
                "description": "Default: json\n\nContent type to use for requests made to the webhook"
              },
              "action": {
                "type": "string",
                "description": "This tells the githooks module what you want it to do."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "quantum_router_gateway": {
            "required": [
              "router_name",
              "login_password",
              "network_name"
            ],
            "type": "object",
            "description": "Creates/Removes a gateway interface from the router, used to associate a external network with a router to route external traffic.",
            "properties": {
              "region_name": {
                "type": "string",
                "description": "Default: None\n\nName of the region"
              },
              "availability_zone": {
                "type": "string",
                "description": ""
              },
              "network_name": {
                "type": "string",
                "description": "Default: None\n\nName of the external network which should be attached to the router."
              },
              "login_tenant_name": {
                "type": "string",
                "description": "Default: yes\n\nThe tenant name of the login user"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the resource"
              },
              "auth_url": {
                "type": "string",
                "description": "Default: http://127.0.0.1:35357/v2.0/\n\nThe keystone URL for authentication"
              },
              "login_password": {
                "type": "string",
                "description": "Default: yes\n\nPassword of login user"
              },
              "login_username": {
                "type": "string",
                "description": "Default: admin\n\nlogin username to authenticate to keystone"
              },
              "router_name": {
                "type": "string",
                "description": "Default: None\n\nName of the router to which the gateway should be attached."
              }
            }
          },
          "win_lineinfile": {
            "type": "object",
            "description": "This module will search a file for a line, and ensure that it is present or absent.\nThis is primarily useful when you want to change a single line in a file only.",
            "properties": {
              "insertbefore": {
                "type": "string",
                "description": "Used with C(state=present). If specified, the line will be inserted before the last match of specified regular expression. A value is available; C(BOF) for inserting the line at the beginning of the file.\nIf specified regular expresion has no matches, the line will be inserted at the end of the file.  May not be used with C(backrefs)."
              },
              "encoding": {
                "type": "string",
                "description": "Default: auto\n\nSpecifies the encoding of the source text file to operate on (and thus what the output encoding will be). The default of C(auto) will cause the module to auto-detect the encoding of the source file and ensure that the modified file is written with the same encoding.\nAn explicit encoding can be passed as a string that is a valid value to pass to the .NET framework System.Text.Encoding.GetEncoding() method - see U(https://msdn.microsoft.com/en-us/library/system.text.encoding%28v=vs.110%29.aspx).\nThis is mostly useful with C(create=yes) if you want to create a new file with a specific encoding. If C(create=yes) is specified without a specific encoding, the default encoding (UTF-8, no BOM) will be used."
              },
              "dest": {
                "type": "string",
                "description": "The path of the file to modify."
              },
              "create": {
                "type": "string",
                "description": "Default: no\n\nUsed with C(state=present). If specified, the file will be created if it does not already exist. By default it will fail if the file is missing."
              },
              "newline": {
                "type": "string",
                "description": "Default: windows\n\nSpecifies the line separator style to use for the modified file. This defaults to the windows line separator ( ). Note that the indicated line separator will be used for file output regardless of the original line seperator that appears in the input file."
              },
              "backrefs": {
                "type": "string",
                "description": "Default: no\n\nUsed with C(state=present). If set, line can contain backreferences (both positional and named) that will get populated if the C(regexp) matches. This flag changes the operation of the module slightly; C(insertbefore) and C(insertafter) will be ignored, and if the C(regexp) doesn't match anywhere in the file, the file will be left unchanged.\nIf the C(regexp) does match, the last matching line will be replaced by the expanded line parameter."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nWhether the line should be there or not."
              },
              "insertafter": {
                "type": "string",
                "description": "Default: EOF\n\nUsed with C(state=present). If specified, the line will be inserted after the last match of specified regular expression. A special value is available; C(EOF) for inserting the line at the end of the file.\nIf specified regular expresion has no matches, EOF will be used instead.  May not be used with C(backrefs)."
              },
              "regexp": {
                "type": "string",
                "description": "The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found; only the last line found will be replaced. For C(state=absent), the pattern of the line to remove.  Uses .NET compatible regular expressions; see U(https://msdn.microsoft.com/en-us/library/hs600312%28v=vs.110%29.aspx)."
              },
              "line": {
                "type": "string",
                "description": "Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches."
              },
              "backup": {
                "type": "string",
                "description": "Default: no\n\nCreate a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
              },
              "validate": {
                "type": "string",
                "description": "Default: None\n\nValidation to run before copying into place.  Use %s in the command to indicate the current file to validate.\nThe command is passed securely so shell features like expansion and pipes won't work."
              }
            }
          },
          "dpkg_selections": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Change dpkg package selection state via --get-selections and --set-selections.",
            "properties": {
              "selection": {
                "enum": [
                  "install",
                  "hold",
                  "deinstall",
                  "purge"
                ],
                "type": "string",
                "description": "The selection state to set the package to."
              },
              "name": {
                "type": "string",
                "description": "Name of the package"
              }
            }
          },
          "clc_alert_policy": {
            "required": [
              "alias"
            ],
            "type": "object",
            "description": "An Ansible module to Create or Delete Alert Policies at CenturyLink Cloud.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Default: None\n\nThe name of the alert policy. This is mutually exclusive with id"
              },
              "metric": {
                "enum": [
                  "cpu",
                  "memory",
                  "disk"
                ],
                "type": "string",
                "description": "Default: None\n\nThe metric on which to measure the condition that will trigger the alert. This is required for state 'present'"
              },
              "id": {
                "type": "string",
                "description": "Default: None\n\nThe alert policy id. This is mutually exclusive with name"
              },
              "alias": {
                "type": "string",
                "description": "The alias of your CLC Account"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "Default: present\n\nWhether to create or delete the policy."
              },
              "threshold": {
                "description": "Default: None\n\nThe threshold that will trigger the alert when the metric equals or exceeds it. This is required for state 'present' This number represents a percentage and must be a value between 5.0 - 95.0 that is a multiple of 5.0",
                "$ref": "#/definitions/ansible_number"
              },
              "alert_recipients": {
                "description": "Default: None\n\nA list of recipient email ids to notify the alert. This is required for state 'present'",
                "$ref": "#/definitions/ansible_array"
              },
              "duration": {
                "type": "string",
                "description": "Default: None\n\nThe length of time in minutes that the condition must exceed the threshold. This is required for state 'present'"
              }
            }
          },
          "win_iis_virtualdirectory": {
            "type": "object",
            "description": "Creates, Removes and configures a virtual directory in IIS.",
            "properties": {
              "application": {
                "type": "string",
                "description": "The application under which the virtual directory is created or exists."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nWhether to add or remove the specified virtual directory"
              },
              "name": {
                "type": "string",
                "description": "The name of the virtual directory to create or remove"
              },
              "physical_path": {
                "type": "string",
                "description": "The physical path to the folder in which the new virtual directory is created. The specified folder must already exist."
              },
              "site": {
                "type": "string",
                "description": "The site name under which the virtual directory is created or exists."
              }
            }
          },
          "os_server": {
            "type": "object",
            "description": "Create or Remove compute instances from OpenStack.",
            "properties": {
              "image": {
                "type": "string",
                "description": "The name or id of the base image to boot."
              },
              "image_exclude": {
                "type": "string",
                "description": "Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name. Defaults to \"(deprecated)\""
              },
              "flavor_include": {
                "type": "string",
                "description": "Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name."
              },
              "meta": {
                "type": "string",
                "description": "Default: None\n\nA list of key value pairs that should be provided as a metadata to the new instance or a string containing a list of key-value pairs. Eg:  meta: \"key1=value1,key2=value2\""
              },
              "flavor": {
                "type": "string",
                "description": "Default: 1\n\nThe name or id of the flavor in which the new instance has to be created. Mutually exclusive with flavor_ram"
              },
              "security_groups": {
                "type": "string",
                "description": "Default: None\n\nNames of the security groups to which the instance should be added. This may be a YAML list or a comma separated string."
              },
              "boot_from_volume": {
                "type": "string",
                "description": "Should the instance boot from a persistent volume created based on the image given. Mututally exclusive with boot_volume."
              },
              "userdata": {
                "type": "string",
                "description": "Default: None\n\nOpaque blob of data which is made available to the instance"
              },
              "network": {
                "type": "string",
                "description": "Default: None\n\nName or ID of a network to attach this instance to. A simpler version of the nics parameter, only one of network or nics should be supplied."
              },
              "nics": {
                "type": "string",
                "description": "Default: None\n\nA list of networks to which the instance's interface should be attached. Networks may be referenced by net-id/net-name/port-id or port-name.\nAlso this accepts a string containing a list of (net/port)-(id/name) Eg: nics: \"net-id=uuid-1,port-name=myport\" Only one of network or nics should be supplied."
              },
              "floating_ips": {
                "type": "string",
                "description": "Default: None\n\nlist of valid floating IPs that pre-exist to assign to this node"
              },
              "flavor_ram": {
                "type": "string",
                "description": "Default: 1\n\nThe minimum amount of ram in MB that the flavor in which the new instance has to be created must have. Mutually exclusive with flavor."
              },
              "volume_size": {
                "type": "string",
                "description": "The size of the volume to create in GB if booting from volume based on an image."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nShould the resource be present or absent."
              },
              "auto_ip": {
                "type": "string",
                "description": "Default: yes\n\nEnsure instance has public ip however the cloud wants to do that"
              },
              "config_drive": {
                "type": "string",
                "description": "Default: no\n\nWhether to boot the server with config drive enabled"
              },
              "volumes": {
                "type": "string",
                "description": "A list of preexisting volumes names or ids to attach to the instance"
              },
              "key_name": {
                "type": "string",
                "description": "Default: None\n\nThe key pair name to be used when creating a instance"
              },
              "boot_volume": {
                "type": "string",
                "description": "Default: None\n\nVolume name or id to use as the volume to boot from. Implies boot_from_volume. Mutually exclusive with image and boot_from_volume."
              },
              "terminate_volume": {
                "type": "string",
                "description": "If true, delete volume when deleting instance (if booted from volume)"
              },
              "wait": {
                "type": "string",
                "description": "Default: yes\n\nIf the module should wait for the instance to be created."
              },
              "name": {
                "type": "string",
                "description": "Name that has to be given to the instance"
              },
              "timeout": {
                "type": "string",
                "description": "Default: 180\n\nThe amount of time the module should wait for the instance to get into active state."
              },
              "floating_ip_pools": {
                "type": "string",
                "description": "Default: None\n\nlist of floating IP pools from which to choose a floating IP"
              }
            }
          },
          "crypttab": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Control Linux encrypted block devices that are set up during system boot in C(/etc/crypttab).",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the encrypted block device as it appears in the C(/etc/crypttab) file, or optionaly prefixed with C(/dev/mapper/), as it appears in the filesystem. I(/dev/mapper/) will be stripped from I(name)."
              },
              "backing_device": {
                "type": "string",
                "description": "Path to the underlying block device or file, or the UUID of a block-device prefixed with I(UUID=)"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "opts_present",
                  "opts_absent"
                ],
                "type": "string",
                "description": "Use I(present) to add a line to C(/etc/crypttab) or update it's definition if already present. Use I(absent) to remove a line with matching I(name). Use I(opts_present) to add options to those already present; options with different values will be updated. Use I(opts_absent) to remove options from the existing set."
              },
              "path": {
                "type": "string",
                "description": "Default: /etc/crypttab\n\nPath to file to use instead of C(/etc/crypttab). This might be useful in a chroot environment."
              },
              "password": {
                "type": "string",
                "description": "Default: none\n\nEncryption password, the path to a file containing the pasword, or 'none' or '-' if the password should be entered at boot."
              },
              "opts": {
                "type": "string",
                "description": "A comma-delimited list of options. See C(crypttab(5) ) for details."
              }
            }
          },
          "riak": {
            "type": "object",
            "description": "This module can be used to join nodes to a cluster, check the status of the cluster.",
            "properties": {
              "target_node": {
                "type": "string",
                "description": "Default: riak@127.0.0.1\n\nThe target node for certain operations (join, ping)"
              },
              "config_dir": {
                "type": "string",
                "description": "Default: /etc/riak\n\nThe path to the riak configuration directory"
              },
              "wait_for_service": {
                "enum": [
                  "kv"
                ],
                "type": "string",
                "description": "Default: None\n\nWaits for a riak service to come online before continuing."
              },
              "http_conn": {
                "type": "string",
                "description": "Default: 127.0.0.1:8098\n\nThe ip address and port that is listening for Riak HTTP queries"
              },
              "wait_for_ring": {
                "description": "Number of seconds to wait for all nodes to agree on the ring.",
                "$ref": "#/definitions/ansible_number"
              },
              "wait_for_handoffs": {
                "description": "Number of seconds to wait for handoffs to complete.",
                "$ref": "#/definitions/ansible_number"
              },
              "command": {
                "enum": [
                  "ping",
                  "kv_test",
                  "join",
                  "plan",
                  "commit"
                ],
                "type": "string",
                "description": "The command you would like to perform against the cluster."
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "stat": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "mime",
                        "mime_type",
                        "mime-type"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "checksum_algorithm",
                        "checksum_algo",
                        "checksum"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Retrieves facts for a file similar to the linux/unix 'stat' command.",
            "properties": {
              "checksum_algorithm": {
                "enum": [
                  "sha1",
                  "sha224",
                  "sha256",
                  "sha384",
                  "sha512"
                ],
                "type": "string",
                "description": "Default: sha1\n\nAlgorithm to determine checksum of file. Will throw an error if the host is unable to use specified algorithm."
              },
              "mime-type": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "mime": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "get_checksum": {
                "description": "Default: True\n\nWhether to return a checksum of the file (default sha1)",
                "$ref": "#/definitions/ansible_truth"
              },
              "checksum": {
                "enum": [
                  "sha1",
                  "sha224",
                  "sha256",
                  "sha384",
                  "sha512"
                ],
                "type": "string",
                "description": "Default: sha1\n\nAlgorithm to determine checksum of file. Will throw an error if the host is unable to use specified algorithm."
              },
              "checksum_algo": {
                "enum": [
                  "sha1",
                  "sha224",
                  "sha256",
                  "sha384",
                  "sha512"
                ],
                "type": "string",
                "description": "Default: sha1\n\nAlgorithm to determine checksum of file. Will throw an error if the host is unable to use specified algorithm."
              },
              "follow": {
                "description": "Whether to follow symlinks",
                "$ref": "#/definitions/ansible_truth"
              },
              "path": {
                "type": "string",
                "description": "The full path of the file/object to get the facts of"
              },
              "get_md5": {
                "description": "Default: True\n\nWhether to return the md5 sum of the file.  Will return None if we're unable to use md5 (Common for FIPS-140 compliant systems)",
                "$ref": "#/definitions/ansible_truth"
              },
              "mime_type": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "win_regedit": {
            "type": "object",
            "description": "Add, Edit, or Remove Registry Keys and Values using ItemProperties Cmdlets",
            "properties": {
              "datatype": {
                "type": "string",
                "description": "Default: string\n\nRegistry Value Data Type"
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nState of Registry Value"
              },
              "data": {
                "type": "string",
                "description": "Registry Value Data"
              },
              "value": {
                "type": "string",
                "description": "Name of Registry Value"
              },
              "key": {
                "type": "string",
                "description": "Name of Registry Key"
              }
            }
          },
          "pear": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage PHP packages with the pear package manager.",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "latest",
                  "absent",
                  "removed"
                ],
                "type": "string",
                "description": "Default: present\n\nDesired state of the package."
              },
              "name": {
                "type": "string",
                "description": "Name of the package to install, upgrade, or remove."
              },
              "pkg": {
                "type": "string",
                "description": "Name of the package to install, upgrade, or remove."
              }
            }
          },
          "win_stat": {
            "type": "object",
            "description": "Returns information about a Windows file",
            "properties": {
              "path": {
                "type": "string",
                "description": "The full path of the file/object to get the facts of; both forward and back slashes are accepted."
              },
              "get_md5": {
                "type": "string",
                "description": "Default: True\n\nWhether to return the checksum sum of the file. As of Ansible 1.9 this is no longer a MD5, but a SHA1 instead."
              },
              "get_checksum": {
                "type": "string",
                "description": "Default: True\n\nWhether to return a checksum of the file (only sha1 currently supported)"
              }
            }
          },
          "rax_meta": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "credentials",
                        "creds_file"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "api_key",
                        "password"
                      ],
                      "type": "object"
                    }
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manipulate metadata for Rackspace Cloud Servers",
            "properties": {
              "username": {
                "type": "string",
                "description": ""
              },
              "password": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Server name to modify metadata for"
              },
              "tenant_id": {
                "type": "string",
                "description": ""
              },
              "identity_type": {
                "type": "string",
                "description": ""
              },
              "tenant_name": {
                "type": "string",
                "description": ""
              },
              "region": {
                "type": "string",
                "description": ""
              },
              "creds_file": {
                "type": "string",
                "description": ""
              },
              "verify_ssl": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "meta": {
                "type": "object",
                "description": "A hash of metadata to associate with the instance"
              },
              "env": {
                "type": "string",
                "description": ""
              },
              "address": {
                "type": "string",
                "description": "Server IP address to modify metadata for, will match any IP assigned to the server"
              },
              "credentials": {
                "type": "string",
                "description": ""
              },
              "api_key": {
                "type": "string",
                "description": ""
              },
              "id": {
                "type": "string",
                "description": "Server ID to modify metadata for"
              },
              "auth_endpoint": {
                "type": "string",
                "description": ""
              }
            }
          },
          "win_unzip": {
            "type": "object",
            "description": "Unzips compressed files and archives. For extracting any compression types other than .zip, the PowerShellCommunityExtensions (PSCX) Module is required.  This module (in conjunction with PSCX) has the ability to recursively unzip files within the src zip file provided and also functionality for many other compression types. If the destination directory does not exist, it will be created before unzipping the file.  Specifying rm parameter will force removal of the src file after extraction.",
            "properties": {
              "dest": {
                "type": "string",
                "description": "Destination of zip file (provide absolute path of directory). If it does not exist, the directory will be created."
              },
              "src": {
                "type": "string",
                "description": "File to be unzipped (provide absolute path)"
              },
              "recurse": {
                "type": "string",
                "description": "Recursively expand zipped files within the src file."
              },
              "creates": {
                "type": "string",
                "description": "If this file or directory exists the specified src will not be extracted."
              },
              "rm": {
                "type": "string",
                "description": "Remove the zip file, after unzipping"
              }
            }
          },
          "a10_virtual_server": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "username",
                        "user",
                        "admin"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "username"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "user"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "admin"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "virtual_server",
                        "vip",
                        "virtual"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "virtual_server"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "vip"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "virtual"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "force",
                        "thirsty"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "virtual_server_status",
                        "status"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "virtual_server_ip",
                        "ip",
                        "address"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "virtual_server_ip"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "ip"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "address"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "password",
                        "pass",
                        "pwd"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "password"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pass"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pwd"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manage slb virtual server objects on A10 Networks devices via aXAPI",
            "properties": {
              "status": {
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "type": "string",
                "description": "Default: enable\n\nslb virtual server status"
              },
              "force": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "thirsty": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "ip": {
                "type": "string",
                "description": "slb virtual server ip address"
              },
              "virtual_server_ports": {
                "description": "A list of ports to create for the virtual server. Each list item should be a dictionary which specifies the C(port:) and C(type:), but can also optionally specify the C(service_group:) as well as the C(status:). See the examples below for details. This parameter is required when C(state) is C(present).",
                "$ref": "#/definitions/ansible_array"
              },
              "vip": {
                "type": "string",
                "description": "slb virtual server name"
              },
              "pass": {
                "type": "string",
                "description": "admin password of your A10 Networks device"
              },
              "virtual_server": {
                "type": "string",
                "description": "slb virtual server name"
              },
              "client_key": {
                "type": "string",
                "description": ""
              },
              "use_proxy": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "virtual": {
                "type": "string",
                "description": "slb virtual server name"
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": ""
              },
              "write_config": {
                "description": "Default: no\n\nIf C(yes), any changes will cause a write of the running configuration to non-volatile memory. This will save I(all) configuration changes, including those that may have been made manually or through other modules, so care should be taken when specifying C(yes).",
                "$ref": "#/definitions/ansible_truth"
              },
              "virtual_server_ip": {
                "type": "string",
                "description": "slb virtual server ip address"
              },
              "client_cert": {
                "type": "string",
                "description": ""
              },
              "username": {
                "type": "string",
                "description": "admin account of your A10 Networks device"
              },
              "force_basic_auth": {
                "description": "",
                "$ref": "#/definitions/ansible_truth"
              },
              "http_agent": {
                "type": "string",
                "description": ""
              },
              "host": {
                "type": "string",
                "description": "hostname or ip of your A10 Networks device"
              },
              "user": {
                "type": "string",
                "description": "admin account of your A10 Networks device"
              },
              "address": {
                "type": "string",
                "description": "slb virtual server ip address"
              },
              "password": {
                "type": "string",
                "description": "admin password of your A10 Networks device"
              },
              "url_password": {
                "type": "string",
                "description": ""
              },
              "admin": {
                "type": "string",
                "description": "admin account of your A10 Networks device"
              },
              "pwd": {
                "type": "string",
                "description": "admin password of your A10 Networks device"
              },
              "url": {
                "type": "string",
                "description": ""
              },
              "virtual_server_status": {
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "type": "string",
                "description": "Default: enable\n\nslb virtual server status"
              },
              "url_username": {
                "type": "string",
                "description": ""
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "macports": {
            "allOf": [
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "update_cache",
                        "update-cache"
                      ],
                      "type": "object"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "name",
                        "pkg"
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      {
                        "required": [
                          "pkg"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                ]
              }
            ],
            "type": "object",
            "description": "Manages MacPorts packages",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "installed",
                  "absent",
                  "removed",
                  "active",
                  "inactive"
                ],
                "type": "string",
                "description": "Default: present\n\nstate of the package"
              },
              "update_cache": {
                "description": "Default: no\n\nupdate the package db first",
                "$ref": "#/definitions/ansible_truth"
              },
              "name": {
                "type": "string",
                "description": "name of package to install/remove"
              },
              "update-cache": {
                "description": "Default: no\n\nupdate the package db first",
                "$ref": "#/definitions/ansible_truth"
              },
              "pkg": {
                "type": "string",
                "description": "name of package to install/remove"
              }
            }
          },
          "digital_ocean_sshkey": {
            "type": "object",
            "description": "Create/delete an SSH key.",
            "properties": {
              "name": {
                "type": "string",
                "description": "String, this is the name of an SSH key to create or destroy."
              },
              "id": {
                "type": "string",
                "description": "Numeric, the SSH key id you want to operate on."
              },
              "state": {
                "type": "string",
                "description": "Default: present\n\nIndicate desired state of the target."
              },
              "client_id": {
                "type": "string",
                "description": "DigitalOcean manager id."
              },
              "api_key": {
                "type": "string",
                "description": "DigitalOcean api key."
              },
              "ssh_pub_key": {
                "type": "string",
                "description": "The public SSH key you want to add to your account."
              }
            }
          },
          "svc": {
            "required": [
              "name"
            ],
            "type": "object",
            "description": "Controls daemontools services on remote hosts using the svc utility.",
            "properties": {
              "dist": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "string",
                "description": "Name of the service to manage."
              },
              "downed": {
                "description": "Should a 'down' file exist or not, if it exists it disables auto startup. defaults to no. Downed does not imply stopped.",
                "$ref": "#/definitions/ansible_truth"
              },
              "enabled": {
                "description": "Wheater the service is enabled or not, if disabled it also implies stopped. Make note that a service can be enabled and downed (no auto restart).",
                "$ref": "#/definitions/ansible_truth"
              },
              "service_dir": {
                "type": "string",
                "description": "Default: /service\n\ndirectory svscan watches for services"
              },
              "state": {
                "enum": [
                  "started",
                  "stopped",
                  "restarted",
                  "killed",
                  "reloaded",
                  "once"
                ],
                "type": "string",
                "description": "C(Started)/C(stopped) are idempotent actions that will not run commands unless necessary.  C(restarted) will always bounce the svc (svc -t) and C(killed) will always bounce the svc (svc -k). C(reloaded) will send a sigusr1 (svc -u). C(once) will run a normally downed svc once (svc -o), not really an idempotent operation."
              },
              "service_src": {
                "type": "string",
                "description": "directory where services are defined, the source of symlinks to service_dir."
              }
            }
          },
          "dnsmadeeasy": {
            "required": [
              "domain",
              "account_secret",
              "account_key",
              "state"
            ],
            "type": "object",
            "description": "Manages DNS records via the v2 REST API of the DNS Made Easy service.  It handles records only; there is no manipulation of domains or monitor/account support yet. See: U(http://www.dnsmadeeasy.com/services/rest-api/)",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain to work with. Can be the domain name (e.g. \"mydomain.com\") or the numeric ID of the domain in DNS Made Easy (e.g. \"839989\") for faster resolution."
              },
              "record_name": {
                "type": "string",
                "description": "Record name to get/create/delete/update. If record_name is not specified; all records for the domain will be returned in \"result\" regardless of the state argument."
              },
              "record_ttl": {
                "description": "Default: 1800\n\nrecord's \"Time to live\".  Number of seconds the record remains cached in DNS servers.",
                "$ref": "#/definitions/ansible_number"
              },
              "account_secret": {
                "type": "string",
                "description": "Accout Secret Key."
              },
              "account_key": {
                "type": "string",
                "description": "Accout API Key."
              },
              "record_type": {
                "enum": [
                  "A",
                  "AAAA",
                  "CNAME",
                  "HTTPRED",
                  "MX",
                  "NS",
                  "PTR",
                  "SRV",
                  "TXT"
                ],
                "type": "string",
                "description": "Record type."
              },
              "state": {
                "enum": [
                  "present",
                  "absent"
                ],
                "type": "string",
                "description": "whether the record should exist or not"
              },
              "record_value": {
                "type": "string",
                "description": "Record value. HTTPRED: <redirection URL>, MX: <priority> <target name>, NS: <name server>, PTR: <target name>, SRV: <priority> <weight> <port> <target name>, TXT: <text value>\nIf record_value is not specified; no changes will be made and the record will be returned in 'result' (in other words, this module can be used to fetch a record's current id, type, and ttl)"
              },
              "validate_certs": {
                "description": "Default: yes\n\nIf C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
                "$ref": "#/definitions/ansible_truth"
              }
            }
          },
          "monit": {
            "required": [
              "state",
              "name"
            ],
            "type": "object",
            "description": "Manage the state of a program monitored via I(Monit)",
            "properties": {
              "state": {
                "enum": [
                  "present",
                  "started",
                  "stopped",
                  "restarted",
                  "monitored",
                  "unmonitored",
                  "reloaded"
                ],
                "type": "string",
                "description": "The state of service"
              },
              "name": {
                "type": "string",
                "description": "The name of the I(monit) program/process to manage"
              }
            }
          },
          "datadog_monitor": {
            "required": [
              "app_key",
              "state",
              "api_key",
              "name"
            ],
            "type": "object",
            "description": "Manages monitors within Datadog\nOptions like described on http://docs.datadoghq.com/api/",
            "properties": {
              "notify_audit": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "A boolean indicating whether tagged users will be notified on changes to this monitor."
              },
              "timeout_h": {
                "type": "string",
                "description": "The number of hours of the monitor not reporting data before it will automatically resolve from a triggered state."
              },
              "silenced": {
                "type": "object",
                "description": "Dictionary of scopes to timestamps or None. Each scope will be muted until the given POSIX timestamp or forever if the value is None. "
              },
              "no_data_timeframe": {
                "type": "string",
                "description": "Default: 2x timeframe for metric, 2 minutes for service\n\nThe number of minutes before a monitor will notify when data stops reporting. Must be at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks."
              },
              "app_key": {
                "type": "string",
                "description": "Your DataDog app key."
              },
              "notify_no_data": {
                "enum": [
                  0,
                  "on",
                  "f",
                  "false",
                  1,
                  "no",
                  "n",
                  "1",
                  "0",
                  "t",
                  "y",
                  "off",
                  "yes",
                  "true"
                ],
                "type": "string",
                "description": "A boolean indicating whether this monitor will notify when data stops reporting.."
              },
              "renotify_interval": {
                "type": "string",
                "description": "The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved."
              },
              "state": {
                "type": "string",
                "description": "The designated state of the monitor."
              },
              "escalation_message": {
                "type": "string",
                "description": "A message to include with a re-notification. Supports the '@username' notification we allow elsewhere. Not applicable if renotify_interval is None"
              },
              "query": {
                "type": "string",
                "description": "The monitor query to notify on with syntax varying depending on what type of monitor you are creating."
              },
              "message": {
                "type": "string",
                "description": "A message to include with notifications for this monitor. Email notifications can be sent to specific users by using the same '@username' notation as events."
              },
              "api_key": {
                "type": "string",
                "description": "Your DataDog API key."
              },
              "type": {
                "type": "string",
                "description": "The type of the monitor."
              },
              "thresholds": {
                "type": "object",
                "description": "Default: {'warning': 1, 'ok': 1, 'critical': 1}\n\nA dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query."
              },
              "name": {
                "type": "string",
                "description": "The name of the alert."
              }
            }
          },
          "clc_server_snapshot": {
            "required": [
              "server_ids"
            ],
            "type": "object",
            "description": "An Ansible module to Create, Delete and Restore server snapshots in CenturyLink Cloud.",
            "properties": {
              "expiration_days": {
                "type": "string",
                "description": "Default: 7\n\nThe number of days to keep the server snapshot before it expires."
              },
              "server_ids": {
                "description": "The list of CLC server Ids.",
                "$ref": "#/definitions/ansible_array"
              },
              "state": {
                "enum": [
                  "present",
                  "absent",
                  "restore"
                ],
                "type": "string",
                "description": "Default: present\n\nThe state to insure that the provided resources are in."
              },
              "wait": {
                "type": "string",
                "description": "Default: True\n\nWhether to wait for the provisioning tasks to finish before returning."
              }
            }
          }
        }
      }
    ]
  },
  "$contact": {
    "name": "Pavel Odvody",
    "issues": "https://github.com/shaded-enmity/ansible-schema-generator/issues"
  },
  "definitions": {
    "ansible_array": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "array"
        },
        {
          "type": "object"
        }
      ]
    },
    "ansible_number": {
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "type": "string"
        }
      ]
    },
    "ansible_truth": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        {
          "enum": [
            "yes",
            "no",
            "Yes",
            "No",
            "YES",
            "NO",
            "on",
            "off",
            "On",
            "Off",
            "ON",
            "OFF",
            "1",
            "0",
            "true",
            "false",
            "True",
            "FalseTRUE",
            "FALSE"
          ],
          "type": "string"
        }
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "array"
}
