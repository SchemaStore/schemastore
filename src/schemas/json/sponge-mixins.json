{
  "$schema": "http://json-schema.org/draft-07/schema",
  "definitions": {
    "injector_options": {
      "description": "Injection options",
      "properties": {
        "defaultGroup": {
          "default": "default",
          "description": "Sets the default injector group",
          "type": "string"
        },
        "defaultRequire": {
          "default": 0,
          "description": "Sets the default minimum of injections that must be successfully applied per injector",
          "minimum": 0,
          "type": "integer"
        },
        "injectionPoints": {
          "description": "Registers injection points for this configuration",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "maxShiftBy": {
          "default": 5,
          "description": "Sets the maximum allowed number of opcodes that can be shifted in @At annotations. This is hard capped at 5",
          "maximum": 5,
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "mixin_class": {
      "description": "The dot-separated path to the mixin class relative to the specified package. The class must be annotated with @Mixin",
      "type": "string"
    },
    "overwrite_options": {
      "description": "Overwrite options",
      "properties": {
        "conformVisibility": {
          "description": "Sets whether the visibility of overwritten methods should be conformed to the target class",
          "type": "boolean"
        },
        "requireAnnotations": {
          "default": true,
          "description": "Sets whether overwriting methods must explicitly be declared through @Overwrite annotations",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "client": {
      "description": "Mixin classes to load ONLY on client. Class names get prepended with the specified package",
      "items": {
        "$ref": "#/definitions/mixin_class"
      },
      "type": "array"
    },
    "compatibilityLevel": {
      "description": "Minimum compatibility level required for mixins in this set",
      "type": "string"
    },
    "injectors": {
      "$ref": "#/definitions/injector_options"
    },
    "minVersion": {
      "description": "Minimum version of the mixin subsystem required for this configuration",
      "pattern": "^(\\d{1,5})(?:\\.(\\d{1,5})(?:\\.(\\d{1,5})(?:\\.(\\d{1,5}))?)?)?(-[a-zA-Z0-9_\\-]+)?$",
      "type": "string"
    },
    "mixinPriority": {
      "default": -1,
      "description": "Default mixin priority for this configuration. Will be inherited if smaller than 0",
      "type": "integer"
    },
    "mixins": {
      "description": "Mixin classes to load in all environments. Class names get prepended with the specified package",
      "items": {
        "$ref": "#/definitions/mixin_class"
      },
      "type": "array"
    },
    "overwrites": {
      "$ref": "#/definitions/overwrite_options"
    },
    "package": {
      "description": "The target package where the mixin classes reside",
      "type": "string"
    },
    "parent": {
      "description": "The name of a parent configuration that options get inherited from",
      "type": "string"
    },
    "plugin": {
      "description": "Name of the mixin config plugin to use for this config",
      "type": "string"
    },
    "priority": {
      "default": -1,
      "description": "The priority of this configuration. Will be inherited if smaller than 0",
      "type": "integer"
    },
    "refmap": {
      "description": "The path to the reference map resource to use for this configuration",
      "type": "string"
    },
    "required": {
      "description": "Determines whether mixin failures in this configuration are considered terminal and stop the game",
      "type": "boolean"
    },
    "server": {
      "description": "Mixin classes to load ONLY on server. Class names get prepended with the specified package",
      "items": {
        "$ref": "#/definitions/mixin_class"
      },
      "type": "array"
    },
    "setSourceFile": {
      "description": "Sets whether targets' source files will be updated to the mixin source file",
      "type": "boolean"
    },
    "target": {
      "description": "Target selector. Either the specifies the phase directly or use \"@env(PHASE)\" separated by '&', '\\', or ' '",
      "type": "string"
    },
    "verbose": {
      "default": false,
      "description": "Increases log detail level from DEBUG to INFO",
      "type": "boolean"
    }
  },
  "required": ["package"],
  "type": "object"
}
