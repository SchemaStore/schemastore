{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Husky configuration.",
  "description": "Husky can prevent bad `git commit`, `git push` and more üê∂ woof!",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string"
    },
    "skipCI": {
      "title": "Skipping Git hooks installation.",
      "type": "boolean",
      "default": false
    },
    "hooks": {
      "title": "Git hooks.",
      "type": "object",
      "properties": {
        "applypatch-msg": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_applypatch_msg",
          "description": "This hook is invoked by git-am. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes git am to abort before applying the patch.\n\nThe hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.\n\nThe default applypatch-msg hook, when enabled, runs the commit-msg hook, if the latter is enabled.",
          "markdownDescription": "This hook is invoked by [git-am](https://git-scm.com/docs/git-am). It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes `git am` to abort before applying the patch.\n\nThe hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.\n\nThe default **applypatch-msg** hook, when enabled, runs the **commit-msg** hook, if the latter is enabled."
        },
        "pre-applypatch": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_pre_applypatch",
          "description": "This hook is invoked by git-am. It takes no parameter, and is invoked after the patch is applied, but before a commit is made.\n\nIf it exits with non-zero status, then the working tree will not be committed after applying the patch.\n\nIt can be used to inspect the current working tree and refuse to make a commit if it does not pass certain test.\n\nThe default pre-applypatch hook, when enabled, runs the pre-commit hook, if the latter is enabled.",
          "markdownDescription": "This hook is invoked by [git-am](https://git-scm.com/docs/git-am). It takes no parameter, and is invoked after the patch is applied, but before a commit is made.\n\nIf it exits with non-zero status, then the working tree will not be committed after applying the patch.\n\nIt can be used to inspect the current working tree and refuse to make a commit if it does not pass certain test.\n\nThe default **pre-applypatch** hook, when enabled, runs the **pre-commit** hook, if the latter is enabled."
        },
        "post-applypatch": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_post_applypatch",
          "description": "This hook is invoked by git-am. It takes no parameter, and is invoked after the patch is applied and a commit is made.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of git am.",
          "markdownDescription": "This hook is invoked by [git-am](https://git-scm.com/docs/git-am). It takes no parameter, and is invoked after the patch is applied and a commit is made.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of `git am`."
        },
        "pre-commit": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_pre_commit",
          "description": "This hook is invoked by git-commit, and can be bypassed with the --no-verify option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. Exiting with a non-zero status from this script causes the git commit command to abort before creating a commit.\n\nThe default pre-commit hook, when enabled, catches introduction of lines with trailing whitespaces and aborts the commit when such a line is found.\n\nAll the git commit hooks are invoked with the environment variable GIT_EDITOR=: if the command will not bring up an editor to modify the commit message.\n\nThe default pre-commit hook, when enabled‚Äî‚Äãand with the hooks.allownonascii config option unset or set to false‚Äî‚Äãprevents the use of non-ASCII filenames.",
          "markdownDescription": "This hook is invoked by [git-commit](https://git-scm.com/docs/git-commit), and can be bypassed with the `--no-verify` option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. Exiting with a non-zero status from this script causes the `git commit` command to abort before creating a commit.\n\nThe default **pre-commit** hook, when enabled, catches introduction of lines with trailing whitespaces and aborts the commit when such a line is found.\n\nAll the `git commit` hooks are invoked with the environment variable `GIT_EDITOR=:` if the command will not bring up an editor to modify the commit message.\n\nThe default **pre-commit** hook, when enabled‚Äî‚Äãand with the `hooks.allownonascii` config option unset or set to false‚Äî‚Äãprevents the use of non-ASCII filenames."
        },
        "prepare-commit-msg": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_prepare_commit_msg",
          "description": "This hook is invoked by git-commit right after preparing the default log message, and before the editor is started.\n\nIt takes one to three parameters. The first is the name of the file that contains the commit log message. The second is the source of the commit message, and can be: message (if a -m or -F option was given); template (if a -t option was given or the configuration option commit.template is set); merge (if the commit is a merge or a .git/MERGE_MSG file exists); squash (if a .git/SQUASH_MSG file exists); or commit, followed by a commit SHA-1 (if a -c, -C or --amend option was given).\n\nIf the exit status is non-zero, git commit will abort.\n\nThe purpose of the hook is to edit the message file in place, and it is not suppressed by the --no-verify option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.\n\nThe sample prepare-commit-msg hook that comes with Git removes the help message found in the commented portion of the commit template.",
          "markdownDescription": "This hook is invoked by [git-commit](https://git-scm.com/docs/git-commit) right after preparing the default log message, and before the editor is started.\n\nIt takes one to three parameters. The first is the name of the file that contains the commit log message. The second is the source of the commit message, and can be: `message` (if a `-m` or `-F` option was given); `template` (if a `-t` option was given or the configuration option `commit.template` is set); `merge` (if the commit is a merge or a `.git/MERGE_MSG` file exists); `squash` (if a `.git/SQUASH_MSG` file exists); or `commit`, followed by a commit SHA-1 (if a `-c`, `-C` or `--amend` option was given).\n\nIf the exit status is non-zero, `git commit` will abort.\n\nThe purpose of the hook is to edit the message file in place, and it is not suppressed by the `--no-verify` option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.\n\nThe sample `prepare-commit-msg` hook that comes with Git removes the help message found in the commented portion of the commit template."
        },
        "commit-msg": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_commit_msg",
          "description": "This hook is invoked by git-commit and git-merge, and can be bypassed with the --no-verify option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the command to abort.\n\nThe hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.\n\nThe default commit-msg hook, when enabled, detects duplicate \"Signed-off-by\" lines, and aborts the commit if one is found.",
          "markdownDescription": "This hook is invoked by [git-commit](https://git-scm.com/docs/git-commit) and [git-merge](https://git-scm.com/docs/git-merge), and can be bypassed with the `--no-verify` option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the command to abort.\n\nThe hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.\n\nThe default **commit-msg** hook, when enabled, detects duplicate \"Signed-off-by\" lines, and aborts the commit if one is found."
        },
        "post-commit": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_post_commit",
          "description": "This hook is invoked by git-commit. It takes no parameters, and is invoked after a commit is made.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of git commit.",
          "markdownDescription": "This hook is invoked by [git-commit](https://git-scm.com/docs/git-commit). It takes no parameters, and is invoked after a commit is made.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of `git commit`."
        },
        "pre-rebase": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_pre_rebase",
          "description": "This hook is called by git-rebase and can be used to prevent a branch from getting rebased. The hook may be called with one or two parameters. The first parameter is the upstream from which the series was forked. The second parameter is the branch being rebased, and is not set when rebasing the current branch.",
          "markdownDescription": "This hook is called by [git-rebase](https://git-scm.com/docs/git-rebase) and can be used to prevent a branch from getting rebased. The hook may be called with one or two parameters. The first parameter is the upstream from which the series was forked. The second parameter is the branch being rebased, and is not set when rebasing the current branch."
        },
        "post-checkout": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_post_checkout",
          "description": "This hook is invoked when a git-checkout or git-switch is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0). This hook cannot affect the outcome of git switch or git checkout.\n\nIt is also run after git-clone, unless the --no-checkout (-n) option is used. The first parameter given to the hook is the null-ref, the second the ref of the new HEAD and the flag is always 1. Likewise for git worktree add unless --no-checkout is used.\n\nThis hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, or set working dir metadata properties.",
          "markdownDescription": "This hook is invoked when a [git-checkout](https://git-scm.com/docs/git-checkout) or [git-switch](https://git-scm.com/docs/git-switch) is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0). This hook cannot affect the outcome of `git switch` or `git checkout`.\n\nIt is also run after [git-clone](https://git-scm.com/docs/git-clone), unless the `--no-checkout` (`-n`) option is used. The first parameter given to the hook is the null-ref, the second the ref of the new HEAD and the flag is always 1. Likewise for `git worktree add` unless `--no-checkout` is used.\n\nThis hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, or set working dir metadata properties."
        },
        "post-merge": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_post_merge",
          "description": "This hook is invoked by git-merge, which happens when a git pull is done on a local repository. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge. This hook cannot affect the outcome of git merge and is not executed, if the merge failed due to conflicts.\n\nThis hook can be used in conjunction with a corresponding pre-commit hook to save and restore any form of metadata associated with the working tree (e.g.: permissions/ownership, ACLS, etc). See contrib/hooks/setgitperms.perl for an example of how to do this.",
          "markdownDescription": "This hook is invoked by [git-merge](https://git-scm.com/docs/git-merge), which happens when a `git pull` is done on a local repository. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge. This hook cannot affect the outcome of `git merge` and is not executed, if the merge failed due to conflicts.\n\nThis hook can be used in conjunction with a corresponding pre-commit hook to save and restore any form of metadata associated with the working tree (e.g.: permissions/ownership, ACLS, etc). See contrib/hooks/setgitperms.perl for an example of how to do this."
        },
        "pre-push": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_pre_push",
          "description": "This hook is called by git-push and can be used to prevent a push from taking place. The hook is called with two parameters which provide the name and location of the destination remote, if a named remote is not being used both values will be the same.\n\nInformation about what is to be pushed is provided on the hook‚Äôs standard input with lines of the form:\n\n<local ref> SP <local sha1> SP <remote ref> SP <remote sha1> LF\nFor instance, if the command git push origin master:foreign were run the hook would receive a line like the following:\n\nrefs/heads/master 67890 refs/heads/foreign 12345\nalthough the full, 40-character SHA-1s would be supplied. If the foreign ref does not yet exist the <remote SHA-1> will be 40 0. If a ref is to be deleted, the <local ref> will be supplied as (delete) and the <local SHA-1> will be 40 0. If the local commit was specified by something other than a name which could be expanded (such as HEAD~, or a SHA-1) it will be supplied as it was originally given.\n\nIf this hook exits with a non-zero status, git push will abort without pushing anything. Information about why the push is rejected may be sent to the user by writing to standard error.",
          "markdownDescription": "This hook is called by [git-push](https://git-scm.com/docs/git-push) and can be used to prevent a push from taking place. The hook is called with two parameters which provide the name and location of the destination remote, if a named remote is not being used both values will be the same.\n\nInformation about what is to be pushed is provided on the hook‚Äôs standard input with lines of the form:\n```\n<local ref> SP <local sha1> SP <remote ref> SP <remote sha1> LF\n```\nFor instance, if the command `git push origin master:foreign` were run the hook would receive a line like the following:\n```\nrefs/heads/master 67890 refs/heads/foreign 12345\n```\nalthough the full, 40-character SHA-1s would be supplied. If the foreign ref does not yet exist the `<remote SHA-1>` will be 40 `0`. If a ref is to be deleted, the `<local ref>` will be supplied as `(delete)` and the `<local SHA-1>` will be 40 `0`. If the local commit was specified by something other than a name which could be expanded (such as `HEAD~`, or a SHA-1) it will be supplied as it was originally given.\n\nIf this hook exits with a non-zero status, `git push` will abort without pushing anything. Information about why the push is rejected may be sent to the user by writing to standard error."
        },
        "post-update": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_post_update",
          "description": "This hook is invoked by git-receive-pack when it reacts to git push and updates reference(s) in its repository. It executes on the remote repository once after all the refs have been updated.\n\nIt takes a variable number of parameters, each of which is the name of ref that was actually updated.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of git receive-pack.\n\nThe post-update hook can tell what are the heads that were pushed, but it does not know what their original and updated values are, so it is a poor place to do log old..new. The post-receive hook does get both original and updated values of the refs. You might consider it instead if you need them.\n\nWhen enabled, the default post-update hook runs git update-server-info to keep the information used by dumb transports (e.g., HTTP) up to date. If you are publishing a Git repository that is accessible via HTTP, you should probably enable this hook.\n\nBoth standard output and standard error output are forwarded to git send-pack on the other end, so you can simply echo messages for the user.",
          "markdownDescription": "This hook is invoked by [git-receive-pack](https://git-scm.com/docs/git-receive-pack) when it reacts to `git push` and updates reference(s) in its repository. It executes on the remote repository once after all the refs have been updated.\n\nIt takes a variable number of parameters, each of which is the name of ref that was actually updated.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of `git receive-pack`.\n\nThe **post-update** hook can tell what are the heads that were pushed, but it does not know what their original and updated values are, so it is a poor place to do log old..new. The **post-receive** hook does get both original and updated values of the refs. You might consider it instead if you need them.\n\nWhen enabled, the default **post-update** hook runs `git update-server-info` to keep the information used by dumb transports (e.g., HTTP) up to date. If you are publishing a Git repository that is accessible via HTTP, you should probably enable this hook.\n\nBoth standard output and standard error output are forwarded to `git send-pack` on the other end, so you can simply `echo` messages for the user."
        },
        "push-to-checkout": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_push_to_checkout",
          "description": "This hook is invoked by git-receive-pack when it reacts to git push and updates reference(s) in its repository, and when the push tries to update the branch that is currently checked out and the receive.denyCurrentBranch configuration variable is set to updateInstead. Such a push by default is refused if the working tree and the index of the remote repository has any difference from the currently checked out commit; when both the working tree and the index match the current commit, they are updated to match the newly pushed tip of the branch. This hook is to be used to override the default behaviour.\n\nThe hook receives the commit with which the tip of the current branch is going to be updated. It can exit with a non-zero status to refuse the push (when it does so, it must not modify the index or the working tree). Or it can make any necessary changes to the working tree and to the index to bring them to the desired state when the tip of the current branch is updated to the new commit, and exit with a zero status.\n\nFor example, the hook can simply run git read-tree -u -m HEAD \"$1\" in order to emulate git fetch that is run in the reverse direction with git push, as the two-tree form of git read-tree -u -m is essentially the same as git switch or git checkout that switches branches while keeping the local changes in the working tree that do not interfere with the difference between the branches.",
          "markdownDescription": "This hook is invoked by [git-receive-pack](https://git-scm.com/docs/git-receive-pack) when it reacts to `git push` and updates reference(s) in its repository, and when the push tries to update the branch that is currently checked out and the `receive.denyCurrentBranch` configuration variable is set to `updateInstead`. Such a push by default is refused if the working tree and the index of the remote repository has any difference from the currently checked out commit; when both the working tree and the index match the current commit, they are updated to match the newly pushed tip of the branch. This hook is to be used to override the default behaviour.\n\nThe hook receives the commit with which the tip of the current branch is going to be updated. It can exit with a non-zero status to refuse the push (when it does so, it must not modify the index or the working tree). Or it can make any necessary changes to the working tree and to the index to bring them to the desired state when the tip of the current branch is updated to the new commit, and exit with a zero status.\n\nFor example, the hook can simply run `git read-tree -u -m HEAD \"$1\"` in order to emulate `git fetch` that is run in the reverse direction with `git push`, as the two-tree form of `git read-tree -u -m` is essentially the same as `git switch` or `git checkout` that switches branches while keeping the local changes in the working tree that do not interfere with the difference between the branches."
        },
        "pre-auto-gc": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_pre_auto_gc",
          "description": "This hook is invoked by git gc --auto (see git-gc). It takes no parameter, and exiting with non-zero status from this script causes the git gc --auto to abort.",
          "markdownDescription": "This hook is invoked by `git gc --auto` (see [git-gc](https://git-scm.com/docs/git-gc)). It takes no parameter, and exiting with non-zero status from this script causes the `git gc --auto` to abort."
        },
        "post-rewrite": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_post_rewrite",
          "description": "This hook is invoked by commands that rewrite commits (git-commit when called with --amend and git-rebase; however, full-history (re)writing tools like git-fast-import or git-filter-repo typically do not call it!). Its first argument denotes the command it was invoked by: currently one of amend or rebase. Further command-dependent arguments may be passed in the future.\n\nThe hook receives a list of the rewritten commits on stdin, in the format\n\n<old-sha1> SP <new-sha1> [ SP <extra-info> ] LF\nThe extra-info is again command-dependent. If it is empty, the preceding SP is also omitted. Currently, no commands pass any extra-info.\n\nThe hook always runs after the automatic note copying (see \"notes.rewrite.<command>\" in git-config) has happened, and thus has access to these notes.\n\nThe following command-specific comments apply:\n\nrebase\nFor the squash and fixup operation, all commits that were squashed are listed as being rewritten to the squashed commit. This means that there will be several lines sharing the same new-sha1.\n\nThe commits are guaranteed to be listed in the order that they were processed by rebase.",
          "markdownDescription": "This hook is invoked by commands that rewrite commits ([git-commit](https://git-scm.com/docs/git-commit) when called with `--amend` and [git-rebase](https://git-scm.com/docs/git-rebase); however, full-history (re)writing tools like [git-fast-import](https://git-scm.com/docs/git-fast-import) or [git-filter-repo](https://github.com/newren/git-filter-repo) typically do not call it!). Its first argument denotes the command it was invoked by: currently one of `amend` or `rebase`. Further command-dependent arguments may be passed in the future.\n\nThe hook receives a list of the rewritten commits on stdin, in the format\n```\n<old-sha1> SP <new-sha1> [ SP <extra-info> ] LF\n```\nThe **extra-info** is again command-dependent. If it is empty, the preceding SP is also omitted. Currently, no commands pass any **extra-info**.\n\nThe hook always runs after the automatic note copying (see \"notes.rewrite.\\<command\\>\" in [git-config](https://git-scm.com/docs/git-config)) has happened, and thus has access to these notes.\n\nThe following command-specific comments apply:\n\n**rebase**  \nFor the **squash** and **fixup** operation, all commits that were squashed are listed as being rewritten to the squashed commit. This means that there will be several lines sharing the same **new-sha1**.  \nThe commits are guaranteed to be listed in the order that they were processed by rebase."
        },
        "sendemail-validate": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_sendemail_validate",
          "description": "This hook is invoked by git-send-email. It takes a single parameter, the name of the file that holds the e-mail to be sent. Exiting with a non-zero status causes git send-email to abort before sending any e-mails.",
          "markdownDescription": "This hook is invoked by [git-send-email](https://git-scm.com/docs/git-send-email). It takes a single parameter, the name of the file that holds the e-mail to be sent. Exiting with a non-zero status causes `git send-email` to abort before sending any e-mails."
        },
        "fsmonitor-watchman": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_fsmonitor_watchman",
          "description": "This hook is invoked when the configuration option core.fsmonitor is set to .git/hooks/fsmonitor-watchman. It takes two arguments, a version (currently 1) and the time in elapsed nanoseconds since midnight, January 1, 1970.\n\nThe hook should output to stdout the list of all files in the working directory that may have changed since the requested time. The logic should be inclusive so that it does not miss any potential changes. The paths should be relative to the root of the working directory and be separated by a single NUL.\n\nIt is OK to include files which have not actually changed. All changes including newly-created and deleted files should be included. When files are renamed, both the old and the new name should be included.\n\nGit will limit what files it checks for changes as well as which directories are checked for untracked files based on the path names given.\n\nAn optimized way to tell git \"all files have changed\" is to return the filename /.\n\nThe exit status determines whether git will use the data from the hook to limit its search. On error, it will fall back to verifying all files and folders.",
          "markdownDescription": "This hook is invoked when the configuration option `core.fsmonitor` is set to `.git/hooks/fsmonitor-watchman`. It takes two arguments, a version (currently 1) and the time in elapsed nanoseconds since midnight, January 1, 1970.\n\nThe hook should output to stdout the list of all files in the working directory that may have changed since the requested time. The logic should be inclusive so that it does not miss any potential changes. The paths should be relative to the root of the working directory and be separated by a single NUL.\n\nIt is OK to include files which have not actually changed. All changes including newly-created and deleted files should be included. When files are renamed, both the old and the new name should be included.\n\nGit will limit what files it checks for changes as well as which directories are checked for untracked files based on the path names given.\n\nAn optimized way to tell git \"all files have changed\" is to return the filename `/`.\n\nThe exit status determines whether git will use the data from the hook to limit its search. On error, it will fall back to verifying all files and folders."
        },
        "p4-pre-submit": {
          "type": "string",
          "$comment": "https://git-scm.com/docs/githooks#_p4_pre_submit",
          "description": "This hook is invoked by git-p4 submit. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent git-p4 submit from launching. Run git-p4 submit --help for details.",
          "markdownDescription": "This hook is invoked by `git-p4 submit`. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent `git-p4 submit` from launching. Run `git-p4 submit --help` for details."
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "hooks"
  ]
}
