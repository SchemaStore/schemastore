{
  "title": "JSON schema for Renovate config files (https://renovatebot.com/)",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "extends": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description":
        "Configuration presets to use/extend. Note: does not work if configured in config.js"
    },
    "description": {
      "type": "array",
      "description": "Plain text description for a config or preset"
    },
    "enabled": {
      "type": "boolean",
      "description": "Enable or disable renovate"
    },
    "force": {
      "type": "object",
      "description":
        "Any configuration defined within this object will force override existing settings"
    },
    "forceCli": {
      "type": "boolean",
      "description":
        "Whether CLI configuration options should be moved to the `force` config section",
      "default": false
    },
    "logLevel": {
      "type": "string",
      "description": "Logging level",
      "default": "info"
    },
    "logFile": {
      "type": "string",
      "description": "Log file path"
    },
    "logFileLevel": {
      "type": "string",
      "description": "Log file log level",
      "default": "debug"
    },
    "onboarding": {
      "type": "boolean",
      "description": "Require a Configuration PR first"
    },
    "onboardingConfig": {
      "type": "object",
      "description": "Configuration to use in onboarding PRs",
      "default": {}
    },
    "renovateFork": {
      "type": "boolean",
      "description": "Whether to renovate a forked repository or not.",
      "default": false
    },
    "forkMode": {
      "type": "boolean",
      "description":
        "Set to true if Renovate should fork the source repository and create branches there instead",
      "default": false
    },
    "mirrorMode": {
      "type": "boolean",
      "description":
        "Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`",
      "default": false
    },
    "requireConfig": {
      "type": "boolean",
      "description":
        "Set to true if repositories must have a config to activate Renovate.",
      "default": false
    },
    "privateKey": {
      "type": "string",
      "description": "Server-side private key"
    },
    "encrypted": {
      "type": "object",
      "description":
        "A configuration object containing configuration encrypted with project key. Valid inside renovate.json only",
      "default": null
    },
    "timezone": {
      "type": "string",
      "description":
        "[IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)"
    },
    "schedule": {
      "type": "array",
      "description": "Times of day/week to renovate"
    },
    "updateNotScheduled": {
      "type": "boolean",
      "description":
        "Whether to update (but not create) branches when not scheduled"
    },
    "exposeEnv": {
      "type": "boolean",
      "description":
        "Enable this to expose bot process.env to repositories for npmrc substitution and package installation",
      "default": false
    },
    "platform": {
      "type": "string",
      "description": "Platform type of repository",
      "default": "github"
    },
    "endpoint": {
      "type": "string",
      "description": "Custom endpoint to use",
      "default": null
    },
    "token": {
      "type": "string",
      "description": "Repository Auth Token"
    },
    "npmrc": {
      "type": "string",
      "description": "String copy of npmrc file. Use \\n instead of line breaks"
    },
    "npmToken": {
      "type": "string",
      "description":
        "npm token used for autnenticating with the default registry"
    },
    "yarnrc": {
      "type": "string",
      "description":
        "String copy of yarnrc file. Use \\n instead of line breaks"
    },
    "copyLocalLibs": {
      "type": "boolean",
      "description":
        "enable copy local libraries found in package.json like `\"lib1: file:../path/to/folder\"`, warning: feature may be deprecated in future.",
      "default": false
    },
    "updateLockFiles": {
      "type": "boolean",
      "description": "Set to false to disable lock file updating"
    },
    "ignoreNpmrcFile": {
      "type": "boolean",
      "description": "Whether to ignore any .npmrc file found in repository",
      "default": false
    },
    "autodiscover": {
      "type": "boolean",
      "description": "Autodiscover all repositories",
      "default": false
    },
    "repositories": {
      "type": "array",
      "description": "List of Repositories"
    },
    "baseBranches": {
      "type": "array",
      "description":
        "An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate"
    },
    "gitAuthor": {
      "type": "string",
      "description": "Author to use for git commits. RFC5322"
    },
    "gitPrivateKey": {
      "type": "string",
      "description": "PGP key to use for signing git commits"
    },
    "enabledManagers": {
      "type": "array",
      "description":
        "A list of package managers to enable. If defined, then all managers not on the list are disabled."
    },
    "includePaths": {
      "type": "array",
      "description": "Include package files only within these defined paths",
      "default": []
    },
    "ignorePaths": {
      "type": "array",
      "description":
        "Skip any package.json whose path matches one of these. Can be string or glob pattern",
      "default": ["**/node_modules/**", "**/bower_components/**"],
      "items": {
        "type": "string"
      }
    },
    "paths": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description":
        "List of strings or glob patterns to match against package files. Applicable inside packageRules only"
    },
    "engines": {
      "type": "object",
      "description": "Configuration specifically for `package.json`>`engines`",
      "default": {}
    },
    "ignoreDeps": {
      "type": "array",
      "description": "Dependencies to ignore"
    },
    "packageRules": {
      "type": "array",
      "description": "Rules for matching package names"
    },
    "depTypeList": {
      "type": "array",
      "description":
        "List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object"
    },
    "packageNames": {
      "type": "array",
      "description":
        "Package names to match. Valid only within `packageRules` object",
      "items": {
        "type": "string"
      }
    },
    "excludePackageNames": {
      "type": "array",
      "description":
        "Package names to exclude. Valid only within `packageRules` object",
      "items": {
        "type": "string"
      }
    },
    "packagePatterns": {
      "type": "array",
      "description":
        "Package name patterns to match. Valid only within `packageRules` object.",
      "items": {
        "type": "string"
      }
    },
    "excludePackagePatterns": {
      "type": "array",
      "description":
        "Package name patterns to exclude. Valid only within `packageRules` object.",
      "items": {
        "type": "string"
      }
    },
    "matchCurrentVersion": {
      "type": "string",
      "description":
        "A version or version range to match against the current version of a package. Valid only within `packageRules` object"
    },
    "allowedVersions": {
      "type": "string",
      "description": "A semver range defining allowed versions for dependencies"
    },
    "pinDigests": {
      "type": "boolean",
      "description": "Whether to add digests to Dockerfile source images",
      "default": false
    },
    "separateMajorMinor": {
      "type": "boolean",
      "description":
        "If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches"
    },
    "separateMultipleMajor": {
      "type": "boolean",
      "description":
        "If set to true, PRs will be raised separately for each available major upgrade version",
      "default": false
    },
    "separateMinorPatch": {
      "type": "boolean",
      "description":
        "If set to true, it will separate minor and patch updates into separate branches",
      "default": false
    },
    "ignoreUnstable": {
      "type": "boolean",
      "description": "Ignore versions with unstable semver"
    },
    "unstablePattern": {
      "type": "string",
      "description": "Regex for identifying unstable versions (docker only)"
    },
    "respectLatest": {
      "type": "boolean",
      "description": "Ignore versions newer than npm \"latest\" version"
    },
    "rangeStrategy": {
      "type": "string",
      "description": "Policy for how to modify/update existing ranges.",
      "default": "replace",
      "enum": ["auto", "pin", "bump", "replace", "widen"]
    },
    "branchPrefix": {
      "type": "string",
      "description": "Prefix to use for all branch names",
      "default": "renovate/"
    },
    "bumpVersion": {
      "type": "string",
      "description": "Bump the version in the package.json being updated"
    },
    "major": {
      "type": "object",
      "description": "Configuration to apply when an update type is major",
      "default": {}
    },
    "minor": {
      "type": "object",
      "description": "Configuration to apply when an update type is minor",
      "default": {}
    },
    "patch": {
      "type": "object",
      "description":
        "Configuration to apply when an update type is patch. Only applies if `separateMinorPatch` is set to true",
      "default": {
        "branchTopic": "{{{depNameSanitized}}}-{{{newMajor}}}.{{{newMinor}}}.x"
      }
    },
    "pin": {
      "type": "object",
      "description": "Configuration to apply when an update type is pin.",
      "default": {
        "unpublishSafe": false,
        "recreateClosed": true,
        "rebaseStalePrs": true,
        "groupName": "Pin Dependencies",
        "commitMessageAction": "Pin",
        "group": {
          "commitMessageTopic": "dependencies"
        }
      }
    },
    "digest": {
      "type": "object",
      "description":
        "Configuration to apply when updating a Docker digest (same tag)",
      "default": {}
    },
    "semanticCommits": {
      "type": "boolean",
      "description":
        "Enable semantic commit prefixes for commits and PR titles",
      "default": null
    },
    "semanticCommitType": {
      "type": "string",
      "description": "Commit type to use if semantic commits is enabled",
      "default": "chore"
    },
    "semanticCommitScope": {
      "type": "string",
      "description": "Commit scope to use if semantic commits are enabled",
      "default": "deps"
    },
    "recreateClosed": {
      "type": "boolean",
      "description": "Recreate PRs even if same ones were closed previously",
      "default": false
    },
    "rebaseStalePrs": {
      "type": "boolean",
      "description": "Rebase stale PRs (GitHub only)",
      "default": null
    },
    "statusCheckVerify": {
      "type": "boolean",
      "description": "`Set a \"renovate/verify\" status check for all PRs`",
      "default": false
    },
    "unpublishSafe": {
      "type": "boolean",
      "description": "Set a status check for unpublish-safe upgrades",
      "default": false
    },
    "prCreation": {
      "type": "string",
      "description":
        "When to create the PR for a branch. Values: immediate, not-pending, status-success.",
      "default": "immediate"
    },
    "prNotPendingHours": {
      "type": "integer",
      "description": "Timeout in hours for when prCreation=not-pending",
      "default": 25
    },
    "prHourlyLimit": {
      "type": "integer",
      "description":
        "Rate limit PRs to maximum x created per hour. 0 (default) means no limit.",
      "default": 0
    },
    "prConcurrentLimit": {
      "type": "integer",
      "description":
        "Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.",
      "default": 0
    },
    "automerge": {
      "type": "boolean",
      "description":
        "Whether to automerge branches/PRs automatically, without human intervention",
      "default": false
    },
    "automergeType": {
      "type": "string",
      "description":
        "How to automerge - \"branch\", \"pr\", or \"pr-comment\". Branch support is GitHub-only",
      "default": "pr"
    },
    "automergeComment": {
      "type": "string",
      "description":
        "PR comment to add to trigger automerge. Used only if automergeType=pr-comment",
      "default": "automergeComment"
    },
    "requiredStatusChecks": {
      "type": "array",
      "description":
        "List of status checks that must pass before automerging. Set to null to enable automerging without tests."
    },
    "branchName": {
      "type": "string",
      "description": "Branch name template",
      "default": "{{{branchPrefix}}}{{{managerBranchPrefix}}}{{{branchTopic}}}"
    },
    "managerBranchPrefix": {
      "type": "string",
      "description": "Branch manager prefix",
      "default": ""
    },
    "branchTopic": {
      "type": "string",
      "description": "Branch topic",
      "default": "{{{depNameSanitized}}}-{{{newMajor}}}.x"
    },
    "commitMessage": {
      "type": "string",
      "description":
        "Message to use for commit messages and pull request titles",
      "default":
        "{{{commitMessagePrefix}}} {{{commitMessageAction}}} {{{commitMessageTopic}}} {{{commitMessageExtra}}} {{{commitMessageSuffix}}}"
    },
    "commitBody": {
      "type": "string",
      "description":
        "Commit message body template. Will be appended to commit message, separated by two line returns."
    },
    "commitMessagePrefix": {
      "type": "string",
      "description":
        "Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled"
    },
    "commitMessageAction": {
      "type": "string",
      "description": "Action verb to use in commit messages and PR titles",
      "default": "Update"
    },
    "commitMessageTopic": {
      "type": "string",
      "description":
        "The upgrade topic/noun used in commit messages and PR titles",
      "default": "dependency {{depName}}"
    },
    "commitMessageExtra": {
      "type": "string",
      "description":
        "Extra description used after the commit message topic - typically the version",
      "default":
        "to {{#if isMajor}}v{{{newMajor}}}{{else}}{{#unless isRange}}v{{/unless}}{{{newValue}}}{{/if}}"
    },
    "prTitle": {
      "type": "string",
      "description":
        "Pull Request title template (deprecated). Now uses commitMessage.",
      "default": null
    },
    "prBody": {
      "type": "string",
      "description": "Pull Request body template",
      "default":
        "This Pull Request {{#if isRollback}}rolls back{{else}}updates{{/if}} dependency {{#if repositoryUrl}}[{{{depName}}}]({{{repositoryUrl}}}){{else}}`{{{depName}}}`{{/if}} from `{{#unless isRange}}{{#unless isPin}}v{{/unless}}{{/unless}}{{{currentValue}}}` to `{{#unless isRange}}v{{/unless}}{{{newValue}}}`{{#if isRollback}}. This is necessary and important because `v{{{currentValue}}}` cannot be found in the npm registry - probably because of it being unpublished.{{/if}}\n{{#if hasTypes}}\n\nThis PR also includes an upgrade to the corresponding [@types/{{{depName}}}](https://npmjs.com/package/@types/{{{depName}}}) package.\n{{/if}}\n{{#if releases.length}}\n\n{{#if schedule}}\n**Note**: This PR was created on a configured schedule (\"{{{schedule}}}\"{{#if timezone}} in timezone `{{{timezone}}}`{{/if}}) and will not receive updates outside those times.\n{{/if}}\n\n{{#if isPin}}\n**Important**: Renovate will wait until you have merged this Pin request before creating PRs for any *upgrades*. If you do not wish to pin anything, please update your config accordingly instead of leaving this PR open.\n{{/if}}\n{{#if hasReleaseNotes}}\n\n<details>\n<summary>Release Notes</summary>\n\n{{#each releases as |release|}}\n{{#if release.releaseNotes}}\n### [`v{{{release.version}}}`]({{{release.releaseNotes.url}}})\n{{#if release.compare.url}}\n[Compare Source]({{release.compare.url}})\n{{/if}}\n{{{release.releaseNotes.body}}}\n\n---\n\n{{/if}}\n{{/each}}\n</details>\n{{/if}}\n\n{{/if}}\n\n{{#if hasErrors}}\n\n---\n\n# Errors\n\nRenovate encountered some errors when processing your repository, so you are being notified here even if they do not directly apply to this PR.\n\n{{#each errors as |error|}}\n-   `{{error.depName}}`: {{error.message}}\n{{/each}}\n{{/if}}\n\n{{#if hasWarnings}}\n\n---\n\n# Warnings\n\nPlease make sure the following warnings are safe to ignore:\n\n{{#each warnings as |warning|}}\n-   `{{warning.depName}}`: {{warning.message}}\n{{/each}}\n{{/if}}"
    },
    "prFooter": {
      "type": "string",
      "description": "Pull Request footer template",
      "default":
        "This PR has been generated by [Renovate Bot](https://renovatebot.com)."
    },
    "lockFileMaintenance": {
      "type": "object",
      "description": "Configuration for lock file maintenance",
      "default": {
        "enabled": false,
        "recreateClosed": true,
        "rebaseStalePrs": true,
        "branchTopic": "lock-file-maintenance",
        "commitMessageAction": "Lock file maintenance",
        "commitMessageTopic": null,
        "commitMessageExtra": null,
        "prBody":
          "This Pull Request updates `package.json` lock files to use the latest dependency versions.\n\n{{#if schedule}}\n**Note**: This PR was created on a configured schedule (\"{{{schedule}}}\"{{#if timezone}} in timezone `{{{timezone}}}`{{/if}}) and will not receive updates outside those times.\n{{/if}}\n\n{{#if hasErrors}}\n\n---\n\n# Errors\n\nRenovate encountered some errors when processing your repository, so you are being notified here even if they do not directly apply to this PR.\n\n{{#each errors as |error|}}\n-   `{{error.depName}}`: {{error.message}}\n{{/each}}\n{{/if}}\n\n{{#if hasWarnings}}\n\n---\n\n# Warnings\n\nPlease make sure the following warnings are safe to ignore:\n\n{{#each warnings as |warning|}}\n-   `{{warning.depName}}`: {{warning.message}}\n{{/each}}\n{{/if}}",
        "schedule": ["before 5am on monday"],
        "groupName": null
      }
    },
    "lazyGrouping": {
      "type": "boolean",
      "description": "Use group names only when multiple dependencies upgraded",
      "default": true
    },
    "groupName": {
      "type": "string",
      "description": "Human understandable name for the dependency group",
      "default": null
    },
    "groupSlug": {
      "type": "string",
      "description":
        "Slug to use for group (e.g. in branch name). Will be calculated from groupName if null",
      "default": null
    },
    "group": {
      "type": "object",
      "description": "Config if groupName is enabled",
      "default": {
        "branchTopic": "{{{groupSlug}}}",
        "commitMessageTopic": "{{{groupName}}}",
        "prBody":
          "This Pull Request renovates the package group \"{{{groupName}}}\".\n\n{{#if schedule}}\n**Note**: This PR was created on a configured schedule (\"{{{schedule}}}\"{{#if timezone}} in timezone `{{{timezone}}}`{{/if}}) and will not receive updates outside those times.\n{{/if}}\n\n{{#each upgrades as |upgrade|}}\n-   {{#if repositoryUrl}}[{{{upgrade.depName}}}]({{upgrade.repositoryUrl}}){{else}}`{{{depName}}}`{{/if}}{{#if depType}} (`{{{depType}}}`){{/if}}: from `{{{upgrade.currentValue}}}` to `{{{upgrade.newValue}}}`\n{{/each}}\n\n{{#if hasReleaseNotes}}\n# Release Notes\n{{#each upgrades as |upgrade|}}\n{{#if upgrade.hasReleaseNotes}}\n<details>\n<summary>{{upgrade.githubName}}</summary>\n\n{{#each upgrade.releases as |release|}}\n{{#if release.releaseNotes}}\n### [`v{{{release.version}}}`]({{{release.releaseNotes.url}}})\n{{#if release.compare.url}}\n[Compare Source]({{release.compare.url}})\n{{/if}}\n{{{release.releaseNotes.body}}}\n\n---\n\n{{/if}}\n{{/each}}\n\n</details>\n{{/if}}\n{{/each}}\n{{/if}}\n\n{{#if isPin}}\n**Important**: Renovate will wait until you have merged this Pin request before creating PRs for any *upgrades*. If you do not wish to pin anything, please update your config accordingly instead of leaving this PR open.\n{{/if}}\n\n{{#if hasErrors}}\n\n---\n\n# Errors\n\nRenovate encountered some errors when processing your repository, so you are being notified here even if they do not directly apply to this PR.\n\n{{#each errors as |error|}}\n-   `{{error.depName}}`: {{error.message}}\n{{/each}}\n{{/if}}\n\n{{#if hasWarnings}}\n\n---\n\n# Warnings\n\nPlease make sure the following warnings are safe to ignore:\n\n{{#each warnings as |warning|}}\n-   `{{warning.depName}}`: {{warning.message}}\n{{/each}}\n{{/if}}"
      }
    },
    "labels": {
      "type": "array",
      "description": "Labels to add to Pull Request"
    },
    "assignees": {
      "type": "array",
      "description":
        "Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)"
    },
    "reviewers": {
      "type": "array",
      "description":
        "Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)"
    },
    "fileMatch": {
      "type": "array",
      "description": "JS RegExp pattern for matching manager files"
    },
    "npm": {
      "type": "object",
      "description": "Configuration object for npm package.json renovation",
      "default": {
        "fileMatch": ["(^|/)package.json$"]
      }
    },
    "meteor": {
      "type": "object",
      "description": "Configuration object for meteor package.js renovation",
      "default": {
        "fileMatch": ["(^|/)package.js$"]
      }
    },
    "bazel": {
      "type": "object",
      "description": "Configuration object for bazel WORKSPACE renovation",
      "default": {
        "fileMatch": ["(^|/)WORKSPACE$"]
      }
    },
    "buildkite": {
      "type": "object",
      "description": "Configuration object for buildkite pipeline renovation",
      "default": {
        "fileMatch": ["\\.buildkite/.+\\.yml$"],
        "commitMessageTopic": "buildkite plugin {{depName}}",
        "commitMessageExtra":
          "to {{#if isMajor}}v{{{newMajor}}}{{else}}{{{newValue}}}{{/if}}",
        "managerBranchPrefix": "buildkite-",
        "prBody":
          "This Pull Request updates buildkite plugin {{#if repositoryUrl}}[{{{depName}}}]({{{repositoryUrl}}}){{else}}`{{{depName}}}`{{/if}} from `{{{currentValue}}}` to `{{{newValue}}}` ([release notes]({{{repositoryUrl}}}/releases/tag/{{{newValue}}})).\n\n[Compare source commits]({{{repositoryUrl}}}/compare/{{{currentValue}}}...{{{newValue}}})\n\n{{#if releases.length}}\n\n{{#if schedule}}\n**Note**: This PR was created on a configured schedule (\"{{{schedule}}}\"{{#if timezone}} in timezone `{{{timezone}}}`{{/if}}) and will not receive updates outside those times.\n{{/if}}\n\n{{#if isPin}}\n**Important**: Renovate will wait until you have merged this Pin request before creating PRs for any *upgrades*. If you do not wish to pin anything, please update your config accordingly instead of leaving this PR open.\n{{/if}}\n{{#if hasReleaseNotes}}\n\n<details>\n<summary>Release Notes</summary>\n\n{{#each releases as |release|}}\n{{#if release.releaseNotes}}\n### [`v{{{release.version}}}`]({{{release.releaseNotes.url}}})\n{{#if release.compare.url}}\n[Compare Source]({{release.compare.url}})\n{{/if}}\n{{{release.releaseNotes.body}}}\n\n---\n\n{{/if}}\n{{/each}}\n</details>\n{{/if}}\n\n{{/if}}\n\n{{#if hasErrors}}\n\n---\n\n# Errors\n\nRenovate encountered some errors when processing your repository, so you are being notified here even if they do not directly apply to this PR.\n\n{{#each errors as |error|}}\n-   `{{error.depName}}`: {{error.message}}\n{{/each}}\n{{/if}}\n\n{{#if hasWarnings}}\n\n---\n\n# Warnings\n\nPlease make sure the following warnings are safe to ignore:\n\n{{#each warnings as |warning|}}\n-   `{{warning.depName}}`: {{warning.message}}\n{{/each}}\n{{/if}}"
      }
    },
    "supportPolicy": {
      "type": "array",
      "description":
        "Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)"
    },
    "node": {
      "type": "object",
      "description": "Configuration object for node version renovation",
      "default": {
        "commitMessageTopic": "Node.js",
        "major": {
          "enabled": false
        }
      }
    },
    "travis": {
      "type": "object",
      "description":
        "Configuration object for .travis.yml node version renovation",
      "default": {
        "enabled": false,
        "fileMatch": ["^.travis.yml$"]
      }
    },
    "nvm": {
      "type": "object",
      "description": "Configuration object for .nvmrc files",
      "default": {
        "fileMatch": ["^.nvmrc$"]
      }
    },
    "docker": {
      "type": "object",
      "description": "Configuration object for Dockerfile renovation",
      "default": {
        "fileMatch": ["(^|/)Dockerfile$"],
        "managerBranchPrefix": "docker-",
        "commitMessageTopic": "{{{depName}}} Docker tag",
        "prBody":
          "This Pull Request updates Docker base image `{{{depName}}}` from tag `{{{currentTag}}}` to new tag `{{{newTag}}}`. For details on Renovate's Docker support, please visit https://renovatebot.com/docs/docker\n\n{{#if schedule}}\n**Note**: This PR was created on a configured schedule (\"{{{schedule}}}\"{{#if timezone}} in timezone `{{{timezone}}}`{{/if}}) and will not receive updates outside those times.\n{{/if}}\n\n{{#if hasErrors}}\n\n---\n\n# Errors\n\nRenovate encountered some errors when processing your repository, so you are being notified here even if they do not directly apply to this PR.\n\n{{#each errors as |error|}}\n-   `{{error.depName}}`: {{error.message}}\n{{/each}}\n{{/if}}\n\n{{#if hasWarnings}}\n\n---\n\n# Warnings\n\nPlease make sure the following warnings are safe to ignore:\n\n{{#each warnings as |warning|}}\n-   `{{warning.depName}}`: {{warning.message}}\n{{/each}}\n{{/if}}",
        "major": {
          "enabled": false
        },
        "digest": {
          "branchTopic": "{{{depNameSanitized}}}-{{{currentTag}}}",
          "commitMessageExtra": "to {{newDigestShort}}",
          "prBody":
            "This Pull Request updates Docker base image `{{{depName}}}:{{{currentTag}}}` to the latest digest (`{{{newDigest}}}`). For details on Renovate's Docker support, please visit https://renovatebot.com/docs/docker\n\n{{#if schedule}}\n**Note**: This PR was created on a configured schedule (\"{{{schedule}}}\"{{#if timezone}} in timezone `{{{timezone}}}`{{/if}}) and will not receive updates outside those times.\n{{/if}}\n\n{{#if hasErrors}}\n\n---\n\n# Errors\n\nRenovate encountered some errors when processing your repository, so you are being notified here even if they do not directly apply to this PR.\n\n{{#each errors as |error|}}\n-   `{{error.depName}}`: {{error.message}}\n{{/each}}\n{{/if}}\n\n{{#if hasWarnings}}\n\n---\n\n# Warnings\n\nPlease make sure the following warnings are safe to ignore:\n\n{{#each warnings as |warning|}}\n-   `{{warning.depName}}`: {{warning.message}}\n{{/each}}\n{{/if}}",
          "commitMessageTopic": "{{{depName}}}:{{{currentTag}}} Docker digest",
          "group": {
            "prBody":
              "This Pull Request updates Dockerfiles to the latest image digests. For details on Renovate's Docker support, please visit https://renovatebot.com/docs/docker\n\n{{#if schedule}}\n**Note**: This PR was created on a configured schedule (\"{{{schedule}}}\"{{#if timezone}} in timezone `{{{timezone}}}`{{/if}}) and will not receive updates outside those times.\n{{/if}}\n\n{{#each upgrades as |upgrade|}}\n-   {{#if repositoryUrl}}[{{upgrade.depName}}]({{upgrade.repositoryUrl}}){{else}}`{{{depName}}}`{{/if}}: `{{upgrade.newDigest}}`\n{{/each}}\n\n**Important**: Renovate will wait until you have merged this Pin request before creating PRs for any *upgrades*. If you do not wish to pin anything, please update your config accordingly instead of leaving this PR open.\n\n{{#if hasErrors}}\n\n---\n\n# Errors\n\nRenovate encountered some errors when processing your repository, so you are being notified here even if they do not directly apply to this PR.\n\n{{#each errors as |error|}}\n-   `{{error.depName}}`: {{error.message}}\n{{/each}}\n{{/if}}\n\n{{#if hasWarnings}}\n\n---\n\n# Warnings\n\nPlease make sure the following warnings are safe to ignore:\n\n{{#each warnings as |warning|}}\n-   `{{warning.depName}}`: {{warning.message}}\n{{/each}}\n{{/if}}",
            "commitMessageTopic": "{{{groupName}}}"
          }
        },
        "pin": {
          "commitMessageExtra": "",
          "prBody":
            "This Pull Request pins Docker base image `{{{depName}}}:{{{currentTag}}}` to use a digest (`{{{newDigest}}}`).\nThis digest will then be kept updated via Pull Requests whenever the image is updated on the Docker registry. For details on Renovate's Docker support, please visit https://renovatebot.com/docs/docker\n\n{{#if schedule}}\n**Note**: This PR was created on a configured schedule (\"{{{schedule}}}\"{{#if timezone}} in timezone `{{{timezone}}}`{{/if}}) and will not receive updates outside those times.\n{{/if}}\n\n**Important**: Renovate will wait until you have merged this Pin request before creating PRs for any *upgrades*. If you do not wish to pin anything, please update your config accordingly instead of leaving this PR open.\n\n{{#if hasErrors}}\n\n---\n\n# Errors\n\nRenovate encountered some errors when processing your repository, so you are being notified here even if they do not directly apply to this PR.\n\n{{#each errors as |error|}}\n-   `{{error.depName}}`: {{error.message}}\n{{/each}}\n{{/if}}\n\n{{#if hasWarnings}}\n\n---\n\n# Warnings\n\nPlease make sure the following warnings are safe to ignore:\n\n{{#each warnings as |warning|}}\n-   `{{warning.depName}}`: {{warning.message}}\n{{/each}}\n{{/if}}",
          "groupName": "Docker digests",
          "group": {
            "prBody":
              "This Pull Request pins Dockerfiles to use image digests. For details on Renovate's Docker support, please visit https://renovatebot.com/docs/docker\n\n{{#if schedule}}\n**Note**: This PR was created on a configured schedule (\"{{{schedule}}}\"{{#if timezone}} in timezone `{{{timezone}}}`{{/if}}) and will not receive updates outside those times.\n{{/if}}\n\n{{#each upgrades as |upgrade|}}\n-   {{#if repositoryUrl}}[{{upgrade.depName}}]({{upgrade.repositoryUrl}}){{else}}`{{{depName}}}`{{/if}}: `{{upgrade.newDigest}}`\n{{/each}}\n\n**Important**: Renovate will wait until you have merged this Pin request before creating PRs for any *upgrades*. If you do not wish to pin anything, please update your config accordingly instead of leaving this PR open.\n\n{{#if hasErrors}}\n\n---\n\n# Errors\n\nRenovate encountered some errors when processing your repository, so you are being notified here even if they do not directly apply to this PR.\n\n{{#each errors as |error|}}\n-   `{{error.depName}}`: {{error.message}}\n{{/each}}\n{{/if}}\n\n{{#if hasWarnings}}\n\n---\n\n# Warnings\n\nPlease make sure the following warnings are safe to ignore:\n\n{{#each warnings as |warning|}}\n-   `{{warning.depName}}`: {{warning.message}}\n{{/each}}\n{{/if}}",
            "commitMessageTopic": "{{{groupName}}}",
            "branchTopic": "digests-pin"
          }
        },
        "group": {
          "commitMessageTopic": "{{{groupName}}} Docker tags",
          "prBody":
            "This Pull Request updates Dockerfiles to use image digests.\n\n{{#if schedule}}\n**Note**: This PR was created on a configured schedule (\"{{{schedule}}}\"{{#if timezone}} in timezone `{{{timezone}}}`{{/if}}) and will not receive updates outside those times.\n{{/if}}\n\n{{#each upgrades as |upgrade|}}\n-   {{#if repositoryUrl}}[{{upgrade.depName}}]({{upgrade.repositoryUrl}}){{else}}`{{{depName}}}`{{/if}}: `{{upgrade.newDigest}}`\n{{/each}}\n\n{{#if hasErrors}}\n\n---\n\n# Errors\n\nRenovate encountered some errors when processing your repository, so you are being notified here even if they do not directly apply to this PR.\n\n{{#each errors as |error|}}\n-   `{{error.depName}}`: {{error.message}}\n{{/each}}\n{{/if}}\n\n{{#if hasWarnings}}\n\n---\n\n# Warnings\n\nPlease make sure the following warnings are safe to ignore:\n\n{{#each warnings as |warning|}}\n-   `{{warning.depName}}`: {{warning.message}}\n{{/each}}\n{{/if}}"
        }
      }
    },
    "docker-compose": {
      "type": "object",
      "description":
        "Configuration object for Docker Compose renovation. Also inherits settings from `docker` object.",
      "default": {
        "fileMatch": ["(^|/)docker-compose[^/]*\\.ya?ml$"]
      }
    },
    "circleci": {
      "type": "object",
      "description":
        "Configuration object for CircleCI yml renovation. Also inherits settings from `docker` object.",
      "default": {
        "fileMatch": ["^.circleci/config.yml$"]
      }
    },
    "composer": {
      "type": "object",
      "description": "Configuration object for composer.json files",
      "default": {
        "enabled": false,
        "fileMatch": ["(^|\\/)([\\w-]*)composer.json$"]
      }
    },
    "php": {
      "type": "object",
      "description": "Configuration object for php",
      "default": {}
    },
    "pip_requirements": {
      "type": "object",
      "description": "Configuration object for requirements.txt files",
      "default": {
        "enabled": false,
        "fileMatch": ["(^|\\/)([\\w-]*)requirements.(txt|pip)$"]
      }
    },
    "python": {
      "type": "object",
      "description": "Configuration object for python",
      "default": {}
    },
    "nuget": {
      "type": "object",
      "description": "Configuration object for C#/Nuget",
      "default": {
        "fileMatch": ["(^|/)*\\.csproj$"]
      }
    }
  }
}
