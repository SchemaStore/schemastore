{
  "$id": "https://json.schemastore.org/pre-commit-hooks.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "language": {
      "type": "string",
      "enum": [
        "conda",
        "coursier",
        "dart",
        "docker",
        "docker_image",
        "dotnet",
        "fail",
        "golang",
        "lua",
        "node",
        "perl",
        "python",
        "python_venv",
        "r",
        "ruby",
        "rust",
        "swift",
        "pygrep",
        "script",
        "system"
      ]
    },
    "file_type": {
      "type": "string",
      "enum": [
        "adobe-illustrator",
        "alpm",
        "apinotes",
        "asar",
        "asciidoc",
        "ash",
        "asm",
        "aspectj",
        "audio",
        "avif",
        "awk",
        "babelrc",
        "bash",
        "batch",
        "bats",
        "bazel",
        "bazelrc",
        "bib",
        "binary",
        "bitmap",
        "bowerrc",
        "browserslistrc",
        "bzip2",
        "c",
        "c#",
        "c++",
        "c2hs",
        "cbsd",
        "clojure",
        "clojurescript",
        "cmake",
        "codespellrc",
        "coffee",
        "coveragerc",
        "crystal",
        "csh",
        "cson",
        "csproj",
        "css",
        "csslintrc",
        "csv",
        "cuda",
        "cython",
        "dart",
        "dash",
        "def",
        "diff",
        "directory",
        "dockerfile",
        "dockerignore",
        "dtd",
        "editorconfig",
        "edn",
        "ejs",
        "eot",
        "eps",
        "erb",
        "executable",
        "expect",
        "file",
        "fish",
        "flake8",
        "gdscript",
        "geojson",
        "gherkin",
        "gif",
        "gitattributes",
        "gitconfig",
        "gitignore",
        "gitlint",
        "gitmodules",
        "go",
        "go-mod",
        "go-sum",
        "gotmpl",
        "gpx",
        "graphql",
        "groovy",
        "gyb",
        "gyp",
        "gzip",
        "handlebars",
        "haskell",
        "hcl",
        "header",
        "hgrc",
        "html",
        "icalendar",
        "icns",
        "icon",
        "idl",
        "idris",
        "image",
        "inc",
        "ini",
        "inl",
        "ino",
        "inx",
        "jade",
        "jar",
        "java",
        "java-properties",
        "javascript",
        "jenkins",
        "jinja",
        "jpeg",
        "jshintrc",
        "json",
        "json5",
        "jsonnet",
        "jsx",
        "jupyter",
        "kml",
        "kotlin",
        "ksh",
        "lean",
        "lektor",
        "lektorproject",
        "less",
        "liquid",
        "literate-haskell",
        "lua",
        "mailmap",
        "makefile",
        "manifest",
        "map",
        "markdown",
        "mdx",
        "mention-bot",
        "mib",
        "modulemap",
        "musescore",
        "myst",
        "ngdoc",
        "nim",
        "nimble",
        "nix",
        "non-executable",
        "npmignore",
        "nunjucks",
        "objective-c",
        "objective-c++",
        "ocaml",
        "otf",
        "p12",
        "pdbrc",
        "pdf",
        "pem",
        "perl",
        "php",
        "pkgbuild",
        "plain-text",
        "plantuml",
        "plist",
        "png",
        "pofile",
        "powershell",
        "prettierignore",
        "prisma",
        "proto",
        "puppet",
        "purescript",
        "pyi",
        "pylintrc",
        "pypirc",
        "pyproj",
        "python",
        "python2",
        "python3",
        "pyz",
        "qml",
        "r",
        "relax-ng",
        "rst",
        "ruby",
        "rust",
        "salt",
        "sass",
        "sbt",
        "scala",
        "scheme",
        "scss",
        "sh",
        "shell",
        "sln",
        "socket",
        "solidity",
        "spec",
        "sql",
        "stylus",
        "svelte",
        "svg",
        "swf",
        "swift",
        "swiftdeps",
        "symlink",
        "system-verilog",
        "tar",
        "tcsh",
        "terraform",
        "tex",
        "text",
        "thrift",
        "tiff",
        "toml",
        "ts",
        "tsv",
        "tsx",
        "ttf",
        "twig",
        "twisted",
        "txsprofile",
        "urdf",
        "vb",
        "vbproj",
        "vcxproj",
        "vdx",
        "verilog",
        "vhdl",
        "vim",
        "vtl",
        "vue",
        "wav",
        "webp",
        "wheel",
        "wkt",
        "woff",
        "woff2",
        "wsgi",
        "xhtml",
        "xml",
        "xquery",
        "xsd",
        "xsl",
        "yaml",
        "yamllint",
        "yang",
        "yin",
        "zcml",
        "zig",
        "zip",
        "zpt",
        "zsh"
      ]
    },
    "file_types": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/file_type"
      }
    },
    "stage": {
      "type": "string",
      "enum": [
        "commit",
        "merge-commit",
        "push",
        "prepare-commit-msg",
        "commit-msg",
        "post-checkout",
        "post-commit",
        "post-merge",
        "post-rewrite",
        "manual"
      ]
    },
    "stages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/stage"
      }
    }
  },
  "items": {
    "type": "object",
    "required": ["id", "name", "entry", "language"],
    "additionalProperties": false,
    "properties": {
      "id": {
        "$comment": "id of the hook - used in pre-commit-config.yaml.",
        "type": "string"
      },
      "name": {
        "$comment": "name of the hook - shown during hook execution.",
        "type": "string"
      },
      "entry": {
        "$comment": "entry point - the executable to run. Can also contain arguments that will not be overridden such as `entry: autopep8 -i`.",
        "type": "string"
      },
      "language": {
        "$comment": "language of the hook - tells pre-commit how to install the hook.",
        "$ref": "#/definitions/language"
      },
      "files": {
        "$comment": "(optional) the pattern of files to run on.",
        "type": "string",
        "default": ""
      },
      "exclude": {
        "$comment": "(optional) exclude files that were matched by files.",
        "type": "string",
        "default": "^$"
      },
      "types": {
        "$comment": "(optional) list of file types to run on (AND).",
        "$ref": "#/definitions/file_types",
        "default": ["file"]
      },
      "types_or": {
        "$comment": "(optional) list of file types to run on (OR).",
        "$ref": "#/definitions/file_types",
        "default": []
      },
      "exclude_types": {
        "$comment": "(optional) pattern of files to exclude.",
        "$ref": "#/definitions/file_types",
        "default": []
      },
      "always_run": {
        "$comment": "(optional) if true this hook will run even if there are no matching files.",
        "type": "boolean",
        "default": false
      },
      "fail_fast": {
        "$comment": "(optional) if true this hook will run even if there are no matching files.",
        "type": "boolean",
        "default": false
      },
      "verbose": {
        "$comment": "(optional) if true, forces the output of the hook to be printed even when the hook passes.",
        "type": "boolean",
        "default": false
      },
      "pass_filenames": {
        "$comment": "(optional) if false no filenames will be passed to the hook.",
        "type": "boolean",
        "default": true
      },
      "require_serial": {
        "$comment": "(optional) if true this hook will execute using a single process instead of in parallel.",
        "type": "boolean",
        "default": false
      },
      "description": {
        "$comment": "(optional) description of the hook. Used for metadata purposes only.",
        "type": "string",
        "default": ""
      },
      "language_version": {
        "$comment": "(optional) see Overriding language version at https://pre-commit.com/#overriding-language-version",
        "type": "string",
        "default": "default"
      },
      "minimum_pre_commit_version": {
        "$comment": "(optional) allows one to indicate a minimum compatible pre-commit version.",
        "type": "string",
        "default": "0"
      },
      "args": {
        "$comment": "(optional) list of additional parameters to pass to the hook.",
        "type": "array",
        "items": {
          "type": "string"
        },
        "default": []
      },
      "stages": {
        "$comment": "(optional) confines the hook to the commit, merge-commit, push, prepare-commit-msg, commit-msg, post-checkout, post-commit, post-merge, post-rewrite, or manual stage. See Confining hooks to run at certain stages in https://pre-commit.com/#confining-hooks-to-run-at-certain-stages",
        "$ref": "#/definitions/stages"
      }
    }
  },
  "minItems": 1,
  "type": "array"
}
