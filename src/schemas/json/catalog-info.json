{
  "$id": "https://json.schemastore.org/catalog-info.json",
  "$schema": "http://json-schema.org/draft-07/schema",
  "anyOf": [
    {
      "$id": "ApiV1alpha1",
      "$schema": "http://json-schema.org/draft-07/schema",
      "allOf": [
        {
          "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/entity"
        },
        {
          "properties": {
            "apiVersion": {
              "enum": ["backstage.io/v1alpha1", "backstage.io/v1beta1"]
            },
            "kind": {
              "enum": ["API"]
            },
            "spec": {
              "properties": {
                "definition": {
                  "description": "The definition of the API, based on the format defined by the type.",
                  "maxProperties": 1,
                  "minLength": 1,
                  "minProperties": 1,
                  "properties": {
                    "$json": {
                      "description": "Interprets the contents of the referenced file as JSON and embeds the parsed structure.",
                      "minLength": 1,
                      "type": "string"
                    },
                    "$text": {
                      "description": "Interprets the contents of the referenced file as plain text and embeds it as a string.",
                      "minLength": 1,
                      "type": "string"
                    },
                    "$yaml": {
                      "description": "Interprets the contents of the referenced file as YAML and embeds the parsed structure.",
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": ["string", "object"]
                },
                "lifecycle": {
                  "description": "The lifecycle state of the API.",
                  "examples": ["experimental", "production", "deprecated"],
                  "minLength": 1,
                  "type": "string"
                },
                "owner": {
                  "description": "An entity reference to the owner of the API.",
                  "examples": ["artist-relations-team", "user:john.johnson"],
                  "minLength": 1,
                  "type": "string"
                },
                "system": {
                  "description": "An entity reference to the system that the API belongs to.",
                  "minLength": 1,
                  "type": "string"
                },
                "type": {
                  "description": "The type of the API definition.",
                  "examples": ["openapi", "asyncapi", "graphql", "grpc"],
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["type", "lifecycle", "owner", "definition"],
              "type": "object"
            }
          },
          "required": ["spec"],
          "type": "object"
        }
      ],
      "description": "An API describes an interface that can be exposed by a component. The API can be defined in different formats, like OpenAPI, AsyncAPI, GraphQL, gRPC, or other formats.",
      "examples": [
        {
          "apiVersion": "backstage.io/v1alpha1",
          "kind": "API",
          "metadata": {
            "annotations": {
              "docs": "https://github.com/..../tree/develop/doc"
            },
            "description": "Retrieve artist details",
            "labels": {
              "product_name": "Random value Generator"
            },
            "name": "artist-api"
          },
          "spec": {
            "definition": "openapi: \"3.0.0\"\ninfo:...",
            "lifecycle": "production",
            "owner": "artist-relations-team",
            "system": "artist-engagement-portal",
            "type": "openapi"
          }
        }
      ]
    },
    {
      "$id": "ComponentV1alpha1",
      "$schema": "http://json-schema.org/draft-07/schema",
      "allOf": [
        {
          "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/entity"
        },
        {
          "properties": {
            "apiVersion": {
              "enum": ["backstage.io/v1alpha1", "backstage.io/v1beta1"]
            },
            "kind": {
              "enum": ["Component"]
            },
            "spec": {
              "properties": {
                "consumesApis": {
                  "description": "An array of entity references to the APIs that are consumed by the component.",
                  "items": {
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "dependsOn": {
                  "description": "An array of references to other entities that the component depends on to function.",
                  "items": {
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "lifecycle": {
                  "description": "The lifecycle state of the component.",
                  "examples": ["experimental", "production", "deprecated"],
                  "minLength": 1,
                  "type": "string"
                },
                "owner": {
                  "description": "An entity reference to the owner of the component.",
                  "examples": ["artist-relations-team", "user:john.johnson"],
                  "minLength": 1,
                  "type": "string"
                },
                "providesApis": {
                  "description": "An array of entity references to the APIs that are provided by the component.",
                  "items": {
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "subcomponentOf": {
                  "description": "An entity reference to another component of which the component is a part.",
                  "minLength": 1,
                  "type": "string"
                },
                "system": {
                  "description": "An entity reference to the system that the component belongs to.",
                  "minLength": 1,
                  "type": "string"
                },
                "type": {
                  "description": "The type of component.",
                  "examples": ["service", "website", "library"],
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["type", "lifecycle", "owner"],
              "type": "object"
            }
          },
          "required": ["spec"],
          "type": "object"
        }
      ],
      "description": "A Component describes a software component. It is typically intimately linked to the source code that constitutes the component, and should be what a developer may regard a \"unit of software\", usually with a distinct deployable or linkable artifact.",
      "examples": [
        {
          "apiVersion": "backstage.io/v1alpha1",
          "kind": "Component",
          "metadata": {
            "annotations": {
              "docs": "https://github.com/..../tree/develop/doc"
            },
            "description": "Creates Lorems like a pro.",
            "labels": {
              "product_name": "Random value Generator"
            },
            "name": "LoremService"
          },
          "spec": {
            "lifecycle": "production",
            "owner": "tools",
            "type": "service"
          }
        }
      ]
    },
    {
      "$id": "DomainV1alpha1",
      "$schema": "http://json-schema.org/draft-07/schema",
      "allOf": [
        {
          "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/entity"
        },
        {
          "properties": {
            "apiVersion": {
              "enum": ["backstage.io/v1alpha1", "backstage.io/v1beta1"]
            },
            "kind": {
              "enum": ["Domain"]
            },
            "spec": {
              "properties": {
                "owner": {
                  "description": "An entity reference to the owner of the component.",
                  "examples": ["artist-relations-team", "user:john.johnson"],
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["owner"],
              "type": "object"
            }
          },
          "required": ["spec"],
          "type": "object"
        }
      ],
      "description": "A Domain groups a collection of systems that share terminology, domain models, business purpose, or documentation, i.e. form a bounded context.",
      "examples": [
        {
          "apiVersion": "backstage.io/v1alpha1",
          "kind": "Domain",
          "metadata": {
            "description": "Everything about artists",
            "name": "artists"
          },
          "spec": {
            "owner": "artist-relations-team"
          }
        }
      ]
    },
    {
      "$id": "GroupV1alpha1",
      "$schema": "http://json-schema.org/draft-07/schema",
      "allOf": [
        {
          "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/entity"
        },
        {
          "properties": {
            "apiVersion": {
              "enum": ["backstage.io/v1alpha1", "backstage.io/v1beta1"]
            },
            "kind": {
              "enum": ["Group"]
            },
            "spec": {
              "properties": {
                "children": {
                  "description": "The immediate child groups of this group in the hierarchy (whose parent field points to this group). The list must be present, but may be empty if there are no child groups. The items are not guaranteed to be ordered in any particular way. The entries of this array are entity references.",
                  "items": {
                    "examples": ["backstage", "other"],
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "members": {
                  "description": "The users that are members of this group. The entries of this array are entity references.",
                  "items": {
                    "examples": ["jdoe"],
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "parent": {
                  "description": "The immediate parent group in the hierarchy, if any. Not all groups must have a parent; the catalog supports multi-root hierarchies. Groups may however not have more than one parent. This field is an entity reference.",
                  "examples": ["ops"],
                  "minLength": 1,
                  "type": "string"
                },
                "profile": {
                  "description": "Optional profile information about the group, mainly for display purposes. All fields of this structure are also optional. The email would be a group email of some form, that the group may wish to be used for contacting them. The picture is expected to be a URL pointing to an image that's representative of the group, and that a browser could fetch and render on a group page or similar.",
                  "properties": {
                    "displayName": {
                      "description": "A simple display name to present to users.",
                      "examples": ["Infrastructure"],
                      "minLength": 1,
                      "type": "string"
                    },
                    "email": {
                      "description": "An email where this entity can be reached.",
                      "examples": ["infrastructure@example.com"],
                      "minLength": 1,
                      "type": "string"
                    },
                    "picture": {
                      "description": "The URL of an image that represents this entity.",
                      "examples": [
                        "https://example.com/groups/bu-infrastructure.jpeg"
                      ],
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "The type of group. There is currently no enforced set of values for this field, so it is left up to the adopting organization to choose a nomenclature that matches their org hierarchy.",
                  "examples": ["team", "business-unit", "product-area", "root"],
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["type", "children"],
              "type": "object"
            }
          },
          "required": ["spec"],
          "type": "object"
        }
      ],
      "description": "A group describes an organizational entity, such as for example a team, a business unit, or a loose collection of people in an interest group. Members of these groups are modeled in the catalog as kind User.",
      "examples": [
        {
          "apiVersion": "backstage.io/v1alpha1",
          "kind": "Group",
          "metadata": {
            "description": "The infra business unit",
            "name": "infrastructure"
          },
          "spec": {
            "children": ["backstage", "other"],
            "parent": "ops",
            "profile": {
              "displayName": "Infrastructure",
              "email": "infrastructure@example.com",
              "picture": "https://example.com/groups/bu-infrastructure.jpeg"
            },
            "type": "business-unit"
          }
        }
      ]
    },
    {
      "$id": "LocationV1alpha1",
      "$schema": "http://json-schema.org/draft-07/schema",
      "allOf": [
        {
          "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/entity"
        },
        {
          "properties": {
            "apiVersion": {
              "enum": ["backstage.io/v1alpha1", "backstage.io/v1beta1"]
            },
            "kind": {
              "enum": ["Location"]
            },
            "spec": {
              "properties": {
                "target": {
                  "description": "A single target as a string. Can be either an absolute path/URL (depending on the type), or a relative path such as ./details/catalog-info.yaml which is resolved relative to the location of this Location entity itself.",
                  "examples": ["./details/catalog-info.yaml"],
                  "minLength": 1,
                  "type": "string"
                },
                "targets": {
                  "description": "A list of targets as strings. They can all be either absolute paths/URLs (depending on the type), or relative paths such as ./details/catalog-info.yaml which are resolved relative to the location of this Location entity itself.",
                  "items": {
                    "examples": [
                      "./details/catalog-info.yaml",
                      "http://github.com/myorg/myproject/org-data-dump/catalog-info-staff.yaml"
                    ],
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": {
                  "description": "The single location type, that's common to the targets specified in the spec. If it is left out, it is inherited from the location type that originally read the entity data.",
                  "examples": ["url"],
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            }
          },
          "required": ["spec"],
          "type": "object"
        }
      ],
      "description": "A location is a marker that references other places to look for catalog data.",
      "examples": [
        {
          "apiVersion": "backstage.io/v1alpha1",
          "kind": "Location",
          "metadata": {
            "name": "org-data"
          },
          "spec": {
            "targets": [
              "http://github.com/myorg/myproject/org-data-dump/catalog-info-staff.yaml",
              "http://github.com/myorg/myproject/org-data-dump/catalog-info-consultants.yaml"
            ],
            "type": "url"
          }
        }
      ]
    },
    {
      "$id": "ResourceV1alpha1",
      "$schema": "http://json-schema.org/draft-07/schema",
      "allOf": [
        {
          "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/entity"
        },
        {
          "properties": {
            "apiVersion": {
              "enum": ["backstage.io/v1alpha1", "backstage.io/v1beta1"]
            },
            "kind": {
              "enum": ["Resource"]
            },
            "spec": {
              "properties": {
                "dependsOn": {
                  "description": "An array of references to other entities that the resource depends on to function.",
                  "items": {
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "owner": {
                  "description": "An entity reference to the owner of the resource.",
                  "examples": ["artist-relations-team", "user:john.johnson"],
                  "minLength": 1,
                  "type": "string"
                },
                "system": {
                  "description": "An entity reference to the system that the resource belongs to.",
                  "minLength": 1,
                  "type": "string"
                },
                "type": {
                  "description": "The type of resource.",
                  "examples": ["database", "s3-bucket", "cluster"],
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["type", "owner"],
              "type": "object"
            }
          },
          "required": ["spec"],
          "type": "object"
        }
      ],
      "description": "A resource describes the infrastructure a system needs to operate, like BigTable databases, Pub/Sub topics, S3 buckets or CDNs. Modelling them together with components and systems allows to visualize resource footprint, and create tooling around them.",
      "examples": [
        {
          "apiVersion": "backstage.io/v1alpha1",
          "kind": "Resource",
          "metadata": {
            "description": "Stores artist details",
            "name": "artists-db"
          },
          "spec": {
            "owner": "artist-relations-team",
            "system": "artist-engagement-portal",
            "type": "database"
          }
        }
      ]
    },
    {
      "$id": "SystemV1alpha1",
      "$schema": "http://json-schema.org/draft-07/schema",
      "allOf": [
        {
          "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/entity"
        },
        {
          "properties": {
            "apiVersion": {
              "enum": ["backstage.io/v1alpha1", "backstage.io/v1beta1"]
            },
            "kind": {
              "enum": ["System"]
            },
            "spec": {
              "properties": {
                "domain": {
                  "description": "An entity reference to the domain that the system belongs to.",
                  "examples": ["artists"],
                  "minLength": 1,
                  "type": "string"
                },
                "owner": {
                  "description": "An entity reference to the owner of the component.",
                  "examples": ["artist-relations-team", "user:john.johnson"],
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["owner"],
              "type": "object"
            }
          },
          "required": ["spec"],
          "type": "object"
        }
      ],
      "description": "A system is a collection of resources and components. The system may expose or consume one or several APIs. It is viewed as abstraction level that provides potential consumers insights into exposed features without needing a too detailed view into the details of all components. This also gives the owning team the possibility to decide about published artifacts and APIs.",
      "examples": [
        {
          "apiVersion": "backstage.io/v1alpha1",
          "kind": "System",
          "metadata": {
            "description": "Handy tools to keep artists in the loop",
            "name": "artist-engagement-portal"
          },
          "spec": {
            "domain": "artists",
            "owner": "artist-relations-team"
          }
        }
      ]
    },
    {
      "$id": "TemplateV1beta2",
      "$schema": "http://json-schema.org/draft-07/schema",
      "allOf": [
        {
          "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/entity"
        },
        {
          "properties": {
            "apiVersion": {
              "enum": ["backstage.io/v1beta2"]
            },
            "kind": {
              "enum": ["Template"]
            },
            "spec": {
              "properties": {
                "output": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "A templated object describing the outputs of the scaffolding task.",
                  "properties": {
                    "links": {
                      "description": "A list of external hyperlinks, typically pointing to resources created or updated by the template",
                      "items": {
                        "properties": {
                          "entityRef": {
                            "description": "An entity reference to an entity in the catalog.",
                            "examples": ["Component:default/my-app"],
                            "minLength": 1,
                            "type": "string"
                          },
                          "icon": {
                            "description": "A key representing a visual icon to be displayed in the UI.",
                            "examples": ["dashboard"],
                            "minLength": 1,
                            "type": "string"
                          },
                          "title": {
                            "description": "A user friendly display name for the link.",
                            "examples": ["View new repo"],
                            "minLength": 1,
                            "type": "string"
                          },
                          "url": {
                            "description": "A url in a standard uri format.",
                            "examples": [
                              "https://github.com/my-org/my-new-repo"
                            ],
                            "minLength": 1,
                            "type": "string"
                          }
                        },
                        "required": [],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "owner": {
                  "description": "The user (or group) owner of the template",
                  "minLength": 1,
                  "type": "string"
                },
                "parameters": {
                  "oneOf": [
                    {
                      "description": "The JSONSchema describing the inputs for the template.",
                      "type": "object"
                    },
                    {
                      "description": "A list of separate forms to collect parameters.",
                      "items": {
                        "description": "The JSONSchema describing the inputs for the template.",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  ]
                },
                "steps": {
                  "description": "A list of steps to execute.",
                  "items": {
                    "description": "A description of the step to execute.",
                    "properties": {
                      "action": {
                        "description": "The name of the action to execute.",
                        "type": "string"
                      },
                      "id": {
                        "description": "The ID of the step, which can be used to refer to its outputs.",
                        "type": "string"
                      },
                      "if": {
                        "description": "A templated condition that skips the step when evaluated to false. If the condition is true or not defined, the step is executed. The condition is true, if the input is not `false`, `undefined`, `null`, `\"\"`, `0`, or `[]`.",
                        "type": ["string", "boolean"]
                      },
                      "input": {
                        "description": "A templated object describing the inputs to the action.",
                        "type": "object"
                      },
                      "name": {
                        "description": "The name of the step, which will be displayed in the UI during the scaffolding process.",
                        "type": "string"
                      }
                    },
                    "required": ["action"],
                    "type": "object"
                  },
                  "type": "array"
                },
                "type": {
                  "description": "The type of component created by the template. The software catalog accepts any type value, but an organization should take great care to establish a proper taxonomy for these. Tools including Backstage itself may read this field and behave differently depending on its value. For example, a website type component may present tooling in the Backstage interface that is specific to just websites.",
                  "examples": ["service", "website", "library"],
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["type", "steps"],
              "type": "object"
            }
          },
          "required": ["spec"],
          "type": "object"
        }
      ],
      "description": "A Template describes a scaffolding task for use with the Scaffolder. It describes the required parameters as well as a series of steps that will be taken to execute the scaffolding task.",
      "examples": [
        {
          "apiVersion": "backstage.io/v1beta2",
          "kind": "Template",
          "metadata": {
            "description": "Next.js application skeleton for creating isomorphic web applications.",
            "name": "react-ssr-template",
            "tags": ["recommended", "react"],
            "title": "React SSR Template"
          },
          "spec": {
            "output": {
              "catalogInfoUrl": "{{ steps.publish.output.catalogInfoUrl }}"
            },
            "owner": "artist-relations-team",
            "parameters": {
              "properties": {
                "description": {
                  "description": "Description of the component",
                  "title": "Description",
                  "type": "string"
                },
                "name": {
                  "description": "Unique name of the component",
                  "title": "Name",
                  "type": "string"
                }
              },
              "required": ["name", "description"]
            },
            "steps": [
              {
                "action": "fetch:plain",
                "id": "fetch",
                "name": "Fetch",
                "parameters": {
                  "url": "./template"
                }
              },
              {
                "action": "publish:github",
                "id": "publish",
                "if": "{{ parameters.repoUrl }}",
                "name": "Publish to GitHub",
                "parameters": {
                  "repoUrl": "{{ parameters.repoUrl }}"
                }
              }
            ],
            "type": "website"
          }
        }
      ]
    },
    {
      "$id": "UserV1alpha1",
      "$schema": "http://json-schema.org/draft-07/schema",
      "allOf": [
        {
          "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/entity"
        },
        {
          "properties": {
            "apiVersion": {
              "enum": ["backstage.io/v1alpha1", "backstage.io/v1beta1"]
            },
            "kind": {
              "enum": ["User"]
            },
            "spec": {
              "properties": {
                "memberOf": {
                  "description": "The list of groups that the user is a direct member of (i.e., no transitive memberships are listed here). The list must be present, but may be empty if the user is not member of any groups. The items are not guaranteed to be ordered in any particular way. The entries of this array are entity references.",
                  "items": {
                    "examples": ["team-b", "employees"],
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "profile": {
                  "description": "Optional profile information about the user, mainly for display purposes. All fields of this structure are also optional. The email would be a primary email of some form, that the user may wish to be used for contacting them. The picture is expected to be a URL pointing to an image that's representative of the user, and that a browser could fetch and render on a profile page or similar.",
                  "properties": {
                    "displayName": {
                      "description": "A simple display name to present to users.",
                      "examples": ["Jenny Doe"],
                      "minLength": 1,
                      "type": "string"
                    },
                    "email": {
                      "description": "An email where this user can be reached.",
                      "examples": ["jenny-doe@example.com"],
                      "minLength": 1,
                      "type": "string"
                    },
                    "picture": {
                      "description": "The URL of an image that represents this user.",
                      "examples": [
                        "https://example.com/staff/jenny-with-party-hat.jpeg"
                      ],
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "required": ["memberOf"],
              "type": "object"
            }
          },
          "required": ["spec"],
          "type": "object"
        }
      ],
      "description": "A user describes a person, such as an employee, a contractor, or similar. Users belong to Group entities in the catalog. These catalog user entries are connected to the way that authentication within the Backstage ecosystem works. See the auth section of the docs for a discussion of these concepts.",
      "examples": [
        {
          "apiVersion": "backstage.io/v1alpha1",
          "kind": "User",
          "metadata": {
            "name": "jdoe"
          },
          "spec": {
            "memberOf": ["team-b", "employees"],
            "profile": {
              "displayName": "Jenny Doe",
              "email": "jenny-doe@example.com",
              "picture": "https://example.com/staff/jenny-with-party-hat.jpeg"
            }
          }
        }
      ]
    }
  ],
  "definitions": {
    "common": {
      "$id": "common",
      "$schema": "http://json-schema.org/draft-07/schema",
      "definitions": {
        "error": {
          "$id": "#error",
          "additionalProperties": true,
          "description": "A serialized error object.",
          "properties": {
            "code": {
              "description": "An error code associated with the error",
              "type": "string"
            },
            "message": {
              "description": "The message of the error",
              "type": "string"
            },
            "name": {
              "description": "The type name of the error",
              "examples": ["Error", "InputError"],
              "minLength": 1,
              "type": "string"
            },
            "stack": {
              "description": "An error stack trace",
              "type": "string"
            }
          },
          "required": ["name", "message"],
          "type": "object"
        },
        "reference": {
          "$id": "#reference",
          "additionalProperties": false,
          "description": "A reference by name to another entity.",
          "properties": {
            "kind": {
              "description": "The kind field of the entity.",
              "minLength": 1,
              "type": "string"
            },
            "name": {
              "description": "The metadata.name field of the entity.",
              "minLength": 1,
              "type": "string"
            },
            "namespace": {
              "description": "The metadata.namespace field of the entity.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": ["kind", "namespace", "name"],
          "type": "object"
        },
        "relation": {
          "$id": "#relation",
          "additionalProperties": false,
          "description": "A directed relation from one entity to another.",
          "properties": {
            "target": {
              "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/common/definitions/reference"
            },
            "type": {
              "description": "The type of relation.",
              "minLength": 1,
              "pattern": "^\\w+$",
              "type": "string"
            }
          },
          "required": ["type", "target"],
          "type": "object"
        },
        "status": {
          "$id": "#status",
          "additionalProperties": true,
          "description": "The current status of the entity, as claimed by various sources.",
          "properties": {
            "items": {
              "items": {
                "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/common/definitions/statusItem"
              },
              "type": "array"
            }
          },
          "required": [],
          "type": "object"
        },
        "statusItem": {
          "$id": "#statusItem",
          "additionalProperties": true,
          "description": "A specific status item on a well known format.",
          "properties": {
            "error": {
              "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/common/definitions/error",
              "description": "An optional serialized error object related to the status."
            },
            "level": {
              "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/common/definitions/statusLevel",
              "description": "The status level / severity of the status item."
            },
            "message": {
              "description": "A brief message describing the status, intended for human consumption.",
              "type": "string"
            },
            "type": {
              "minLength": 1,
              "type": "string"
            }
          },
          "required": ["type", "level", "message"],
          "type": "object"
        },
        "statusLevel": {
          "$id": "#statusLevel",
          "description": "A status level / severity.",
          "enum": ["info", "warning", "error"],
          "type": "string"
        }
      },
      "description": "Common definitions to import from other schemas",
      "type": "object"
    },
    "entity": {
      "$id": "Entity",
      "$schema": "http://json-schema.org/draft-07/schema",
      "additionalProperties": false,
      "description": "The parts of the format that's common to all versions/kinds of entity.",
      "examples": [
        {
          "apiVersion": "backstage.io/v1alpha1",
          "kind": "Component",
          "metadata": {
            "annotations": {
              "docs": "https://github.com/..../tree/develop/doc"
            },
            "description": "Creates Lorems like a pro.",
            "labels": {
              "product_name": "Random value Generator"
            },
            "name": "LoremService"
          },
          "spec": {
            "lifecycle": "production",
            "owner": "tools",
            "type": "service"
          }
        }
      ],
      "properties": {
        "apiVersion": {
          "description": "The version of specification format for this particular entity that this is written against.",
          "examples": ["backstage.io/v1alpha1", "my-company.net/v1", "1.0"],
          "minLength": 1,
          "type": "string"
        },
        "kind": {
          "description": "The high level entity type being described.",
          "examples": [
            "API",
            "Component",
            "Domain",
            "Group",
            "Location",
            "Resource",
            "System",
            "Template",
            "User"
          ],
          "minLength": 1,
          "type": "string"
        },
        "metadata": {
          "$id": "EntityMeta",
          "$schema": "http://json-schema.org/draft-07/schema",
          "additionalProperties": true,
          "description": "Metadata fields common to all versions/kinds of entity.",
          "examples": [
            {
              "annotations": {
                "example.com/bindings": "are-secret"
              },
              "etag": "lsndfkjsndfkjnsdfkjnsd==",
              "generation": 13,
              "labels": {
                "backstage.io/custom": "ValueStuff"
              },
              "name": "my-component-yay",
              "namespace": "the-namespace",
              "tags": ["java", "data"],
              "uid": "e01199ab-08cc-44c2-8e19-5c29ded82521"
            }
          ],
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Key/value pairs of non-identifying auxiliary information attached to the entity.",
              "patternProperties": {
                "^.+$": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": {
              "description": "A short (typically relatively few words, on one line) description of the entity.",
              "type": "string"
            },
            "etag": {
              "description": "An opaque string that changes for each update operation to any part of the entity, including metadata. This field can not be set by the user at creation time, and the server will reject an attempt to do so. The field will be populated in read operations. The field can (optionally) be specified when performing update or delete operations, and the server will then reject the operation if it does not match the current stored value.",
              "examples": ["lsndfkjsndfkjnsdfkjnsd=="],
              "minLength": 1,
              "type": "string"
            },
            "generation": {
              "description": "A positive nonzero number that indicates the current generation of data for this entity; the value is incremented each time the spec changes. This field can not be set by the user at creation time, and the server will reject an attempt to do so. The field will be populated in read operations.",
              "examples": [1],
              "minimum": 1,
              "type": "integer"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Key/value pairs of identifying information attached to the entity.",
              "patternProperties": {
                "^.+$": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "links": {
              "description": "A list of external hyperlinks related to the entity. Links can provide additional contextual information that may be located outside of Backstage itself. For example, an admin dashboard or external CMS page.",
              "items": {
                "properties": {
                  "icon": {
                    "description": "A key representing a visual icon to be displayed in the UI.",
                    "examples": ["dashboard"],
                    "minLength": 1,
                    "type": "string"
                  },
                  "title": {
                    "description": "A user friendly display name for the link.",
                    "examples": ["Admin Dashboard"],
                    "minLength": 1,
                    "type": "string"
                  },
                  "url": {
                    "description": "A url in a standard uri format.",
                    "examples": ["https://admin.example-org.com"],
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": ["url"],
                "type": "object"
              },
              "type": "array"
            },
            "name": {
              "description": "The name of the entity. Must be unique within the catalog at any given point in time, for any given namespace + kind pair.",
              "examples": ["metadata-proxy"],
              "minLength": 1,
              "type": "string"
            },
            "namespace": {
              "default": "default",
              "description": "The namespace that the entity belongs to.",
              "examples": ["default", "admin"],
              "minLength": 1,
              "type": "string"
            },
            "tags": {
              "description": "A list of single-valued strings, to for example classify catalog entities in various ways.",
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "title": {
              "description": "A display name of the entity, to be presented in user interfaces instead of the name property, when available.",
              "examples": ["React SSR Template"],
              "minLength": 1,
              "type": "string"
            },
            "uid": {
              "description": "A globally unique ID for the entity. This field can not be set by the user at creation time, and the server will reject an attempt to do so. The field will be populated in read operations. The field can (optionally) be specified when performing update or delete operations, but the server is free to reject requests that do so in such a way that it breaks semantics.",
              "examples": ["e01199ab-08cc-44c2-8e19-5c29ded82521"],
              "minLength": 1,
              "type": "string"
            }
          },
          "required": ["name"],
          "type": "object"
        },
        "relations": {
          "description": "The relations that this entity has with other entities.",
          "items": {
            "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/common/definitions/relation"
          },
          "type": "array"
        },
        "spec": {
          "description": "The specification data describing the entity itself.",
          "type": "object"
        },
        "status": {
          "$ref": "https://json.schemastore.org/catalog-info.json#/definitions/common/definitions/status"
        }
      },
      "required": ["apiVersion", "kind", "metadata"],
      "type": "object"
    }
  },
  "type": "object"
}
