{
  "title": "JSON schema ASP.NET Core's appsettings.json file",
  "$schema": "http://json-schema.org/draft-04/schema#",

  "type": "object",

  "definitions": {
    "webOptimizer": {
      "type": "object",
      "description": "Settings for WebOptimizer.Core",

      "properties": {
        "enableCaching": {
          "description": "Determines if the \"cache-control\" HTTP headers should be set and if conditional GET (304) requests should be supported. This could be helpful to disable while in development mode.",
          "type": "boolean"
        },
        "enableTagHelperBundling": {
          "description": "Determines if `<script>` and `<link>` elements should point to the bundled path or a reference per source file should be created. This is helpful to disable when in development mode.",
          "type": "boolean",
          "default": true
        }
      }
    },
    "cdn": {
      "type": "object",
      "description": "Definitions for WebEssentials.AspNetCore.CdnTagHelpers",

      "properties": {
        "url": {
          "description": "An absolute URL used as a prefix for static resources",
          "type": "string",
          "pattern": "^((//|https?://).+|)$"
        },
        "prefetch": {
          "description": "If true, injects a <link rel='dns-prefetch'> tag that speeds up DNS resolution to the CDN.",
          "type": "boolean",
          "default": true
        }
      }
    },
    "pwa": {
      "properties": {
        "cacheId": {
          "description": "The cache identifier of the service worker (can be any string). Change this property to force the service worker to reload in browsers.",
          "type": "string",
          "default": "v1.0"
        },
        "offlineRoute": {
          "description": "The route to the page to show when offline.",
          "type": "string",
          "default": "/offline.html"
        },
        "registerServiceWorker": {
          "description": "Determines if a script that registers the service worker should be injected into the bottom of the HTML page.",
          "type": "boolean",
          "default": true
        },
        "registerWebmanifest": {
          "description": "Determines if a meta tag that points to the web manifest should be inserted at the end of the head element.",
          "type": "boolean",
          "default": true
        },
        "routesToPreCache": {
          "description": "A comma separated list of routes to pre-cache when service worker installs in the browser.",
          "type": "string",
          "default": ""
        },
        "strategy": {
          "description": "Selects one of the predefined service worker types.",
          "enum": [ "cacheFirst", "cacheFirstSafe", "minimal", "networkFirst" ],
          "default": "cacheFirstSafe"
        }
      }
    },
    "ElmahIo": {
      "properties": {
        "ApiKey": {
          "description": "An elmah.io API key with the Messages | Write permission.",
          "type": "string",
          "pattern": "^[0-9a-f]{32}$"
        },
        "LogId": {
          "description": "The Id of the elmah.io log to store messages in.",
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "HeartbeatId": {
          "description": "The Id of the elmah.io heartbeat to notify.",
          "type": "string",
          "pattern": "^[0-9a-f]{32}$"
        }
      },
      "required": ["ApiKey", "LogId"]
    }
  },

  "patternProperties": {
    "^WebOptimizer$": { "$ref": "#/definitions/webOptimizer" },
    "^webOptimizer$": { "$ref": "#/definitions/webOptimizer" },
    "^weboptimizer$": { "$ref": "#/definitions/webOptimizer" },
    "^(cdn|Cdn)$": { "$ref": "#/definitions/cdn" },
    "^(pwa|PWA|Pwa)$": { "$ref": "#/definitions/pwa" },
    "^(ElmahIo|Elmahio|elmahIo|elmahio)$": { "$ref": "#/definitions/ElmahIo" }
  }
}
