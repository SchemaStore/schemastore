{
  "$schema": "http://json-schema.org/draft-04/schema",
  "definitions": {
    "ElmahIo": {
      "properties": {
        "ApiKey": {
          "description": "An elmah.io API key with the Messages | Write permission.",
          "pattern": "^[0-9a-f]{32}$",
          "type": "string"
        },
        "Application": {
          "description": "An application name to put on all error messages.",
          "type": "string"
        },
        "HandledStatusCodesToLog": {
          "description": "A list of HTTP status codes (besides 404) to log even though no exception is thrown.",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "HeartbeatId": {
          "description": "The Id of the elmah.io heartbeat to notify.",
          "pattern": "^[0-9a-f]{32}$",
          "type": "string"
        },
        "LogId": {
          "description": "The Id of the elmah.io log to store messages in.",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "TreatLoggingAsBreadcrumbs": {
          "description": "Include log messages from Microsoft.Extensions.Logging as breadcrumbs.",
          "type": "boolean"
        }
      },
      "required": ["ApiKey", "LogId"]
    },
    "NLog": {
      "default": {},
      "description": "NLog configuration",
      "properties": {
        "autoReload": {
          "default": false,
          "description": "Automatically reload the NLog configuration when notified that appsettings.json file has changed.",
          "type": "boolean"
        },
        "autoShutdown": {
          "default": "true",
          "description": "Automatically call `LogFactory.Shutdown` on AppDomain.Unload or AppDomain.ProcessExit",
          "type": "boolean"
        },
        "extensions": {
          "default": [],
          "description": "Load NLog extension packages for additional targets and layouts",
          "items": {
            "default": {},
            "description": "",
            "properties": {
              "assembly": {
                "description": "Assembly Name of the NLog extension package.",
                "type": "string"
              },
              "assemblyFile": {
                "default": "",
                "description": "Absolute filepath to the Assembly-file of the NLog extension package.",
                "type": "string"
              },
              "prefix": {
                "default": "",
                "description": "Appends prefix to all type-names loaded from the assembly",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "globalThreshold": {
          "default": "Off",
          "description": "Log events below this threshold are not logged.",
          "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal", "Off"],
          "type": "string"
        },
        "internalLogFile": {
          "description": "Write internal log to the specified filepath",
          "type": "string"
        },
        "internalLogLevel": {
          "default": "Off",
          "description": "The minimal log level for the internal logger.",
          "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal", "Off"],
          "type": "string"
        },
        "internalLogToConsole": {
          "default": "false",
          "description": "Write internal log to a console",
          "type": "boolean"
        },
        "internalLogToConsoleError": {
          "default": "false",
          "description": "Write internal log to a console with error stream",
          "type": "boolean"
        },
        "rules": {
          "oneOf": [
            {
              "default": [],
              "description": "",
              "items": {
                "$ref": "#/definitions/NLogRulesItem"
              },
              "type": "array"
            },
            {
              "patternProperties": {
                ".*": {
                  "$ref": "#/definitions/NLogRulesItem"
                }
              },
              "propertyNames": {
                "pattern": "^[0-9]+$"
              },
              "type": "object"
            }
          ]
        },
        "targetDefaultWrapper": {
          "default": {},
          "description": "Wrap all defined targets with this custom target wrapper.",
          "properties": {
            "type": {
              "description": "",
              "type": "string"
            }
          },
          "required": ["type"],
          "type": "object"
        },
        "targets": {
          "default": {},
          "description": "",
          "properties": {
            "async": {
              "description": "Wrap all defined targets using AsyncWrapper with OverflowAction=Discard for better performance.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "throwConfigExceptions": {
          "default": false,
          "description": "Throws an exception when there is a config error? If not set, then throwExceptions will be used for this setting.",
          "type": ["boolean", "null"]
        },
        "throwExceptions": {
          "default": false,
          "description": "Throws an exception when there is an error. For unit testing only and advanced troubleshooting.",
          "type": "boolean"
        },
        "variables": {
          "description": "Key-value pair of variables",
          "patternProperties": {
            ".*": {
              "type": ["number", "string", "boolean"]
            }
          },
          "propertyNames": {
            "pattern": "^[A-Za-z0-9_.-]+$"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "NLogRulesItem": {
      "default": {},
      "description": "Redirect LogEvents from matching Logger objects to specified targets",
      "properties": {
        "enabled": {
          "default": true,
          "description": "",
          "type": "boolean"
        },
        "filterDefaultAction": {
          "default": "Ignore",
          "description": "Default action if none of the filters match.",
          "enum": ["Neutral", "Log", "Ignore", "LogFinal", "IgnoreFinal"],
          "type": "string"
        },
        "filters": {
          "oneOf": [
            {
              "default": [],
              "description": "",
              "items": {
                "default": {},
                "description": "",
                "properties": {
                  "action": {
                    "default": "Neutral",
                    "description": "Result action when filter matches logevent.",
                    "enum": [
                      "Neutral",
                      "Log",
                      "Ignore",
                      "LogFinal",
                      "IgnoreFinal"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "",
                    "type": "string"
                  }
                },
                "required": ["type"],
                "type": "object"
              },
              "type": "array"
            },
            {
              "default": {},
              "description": "",
              "type": "object"
            }
          ]
        },
        "final": {
          "default": false,
          "description": "Ignore further rules if this one matches.",
          "type": "boolean"
        },
        "finalMinLevel": {
          "anyOf": [
            {
              "description": "",
              "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal"],
              "type": "string"
            },
            {
              "type": "string"
            }
          ]
        },
        "level": {
          "anyOf": [
            {
              "description": "",
              "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal"],
              "type": "string"
            },
            {
              "type": "string"
            }
          ]
        },
        "levels": {
          "description": "Comma separated list of levels that this rule matches.",
          "type": "string"
        },
        "logger": {
          "description": "Match Logger objects based on their Logger-name. Can use wildcard characters ('*' or '?').",
          "type": "string"
        },
        "maxLevel": {
          "anyOf": [
            {
              "description": "",
              "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal"],
              "type": "string"
            },
            {
              "type": "string"
            }
          ]
        },
        "minLevel": {
          "anyOf": [
            {
              "description": "",
              "enum": ["Trace", "Debug", "Info", "Warn", "Error", "Fatal"],
              "type": "string"
            },
            {
              "type": "string"
            }
          ]
        },
        "ruleName": {
          "description": "Rule identifier to allow rule lookup with Configuration.FindRuleByName and Configuration.RemoveRuleByName.",
          "type": "string"
        },
        "writeTo": {
          "description": "Name or names of a target - separated by comma. Remove this property for sending events to the blackhole.",
          "type": "string"
        }
      },
      "required": ["logger"],
      "type": "object"
    },
    "allowedHosts": {
      "description": "ASP.NET Core host filtering middleware configuration. Allowed hosts is a semicolon-delimited list of host names without port numbers. Requests without a matching host name will be refused. Host names may be prefixed with a '*.' wildcard, or use '*' to allow all hosts.",
      "type": "string"
    },
    "cdn": {
      "description": "Definitions for WebEssentials.AspNetCore.CdnTagHelpers",
      "properties": {
        "prefetch": {
          "default": true,
          "description": "If true, injects a <link rel='dns-prefetch'> tag that speeds up DNS resolution to the CDN.",
          "type": "boolean"
        },
        "url": {
          "description": "An absolute URL used as a prefix for static resources",
          "pattern": "^((//|https?://).+|)$",
          "type": "string"
        }
      },
      "type": "object"
    },
    "certificate": {
      "description": "Certificate configuration.",
      "properties": {
        "AllowInvalid": {
          "default": false,
          "description": "A value indicating whether or not to load certificates that are considered invalid. Defaults to false.",
          "type": "boolean"
        },
        "KeyPath": {
          "description": "The certificate key file path. Available in .NET 5 and later.",
          "type": "string"
        },
        "Location": {
          "default": "CurrentUser",
          "description": "The certificate store location. Defaults to 'CurrentUser'.",
          "enum": ["LocalMachine", "CurrentUser"],
          "type": "string"
        },
        "Password": {
          "description": "The certificate password used to access the private key.",
          "type": "string"
        },
        "Path": {
          "description": "The certificate file path. If a file path is specified then the certificate will be loaded from the file system.",
          "type": "string"
        },
        "Store": {
          "default": "My",
          "description": "The certificate store name. Defaults to 'My'.",
          "type": "string"
        },
        "Subject": {
          "description": "The certificate subject. If a subject is specified then the certificate will be loaded from the certificate store.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "clientCertificateMode": {
      "default": "NoCertificate",
      "description": "Specifies the client certificate requirements for a HTTPS connection. Defaults to 'NoCertificate'. Available in .NET 5 and later.",
      "enum": ["NoCertificate", "AllowCertificate", "RequireCertificate"],
      "type": "string"
    },
    "connectionStrings": {
      "additionalProperties": {
        "description": "Connection string configuration. Each connection string has a name specified by its JSON property name.",
        "type": "string"
      },
      "description": "Connection string configuration. Get connection strings with the IConfiguration.GetConnectionString(string) extension method.",
      "type": "object"
    },
    "kestrel": {
      "description": "ASP.NET Core Kestrel server configuration.",
      "properties": {
        "Certificates": {
          "additionalProperties": {
            "$ref": "#/definitions/certificate"
          },
          "description": "Certificates that Kestrel uses with HTTPS endpoints. Each certificate has a name specified by its JSON property name. The 'Default' certificate is used by HTTPS endpoints that haven't specified a certificate.",
          "type": "object"
        },
        "EndpointDefaults": {
          "description": "Default configuration applied to all endpoints. Named endpoint specific configuration overrides defaults.",
          "properties": {
            "ClientCertificateMode": {
              "$ref": "#/definitions/clientCertificateMode"
            },
            "Protocols": {
              "$ref": "#/definitions/protocols"
            },
            "SslProtocols": {
              "$ref": "#/definitions/sslProtocols"
            }
          },
          "type": "object"
        },
        "Endpoints": {
          "additionalProperties": {
            "description": "Kestrel endpoint configuration.",
            "properties": {
              "Certificate": {
                "$ref": "#/definitions/certificate"
              },
              "ClientCertificateMode": {
                "$ref": "#/definitions/clientCertificateMode"
              },
              "Protocols": {
                "$ref": "#/definitions/protocols"
              },
              "Sni": {
                "additionalProperties": {
                  "description": "Endpoint SNI configuration.",
                  "properties": {
                    "Certificate": {
                      "$ref": "#/definitions/certificate"
                    },
                    "ClientCertificateMode": {
                      "$ref": "#/definitions/clientCertificateMode"
                    },
                    "Protocols": {
                      "$ref": "#/definitions/protocols"
                    },
                    "SslProtocols": {
                      "$ref": "#/definitions/sslProtocols"
                    }
                  },
                  "type": "object"
                },
                "description": "Server Name Indication (SNI) configuration. This enables the mapping of client requested host names to certificates and other TLS settings. Wildcard names prefixed with '*.', as well as a top level '*' are supported. Available in .NET 5 and later.",
                "type": "object"
              },
              "SslProtocols": {
                "$ref": "#/definitions/sslProtocols"
              },
              "Url": {
                "description": "The scheme, host name, and port the endpoint will listen on. A Url is required.",
                "format": "uri",
                "type": "string"
              }
            },
            "required": ["Url"],
            "type": "object"
          },
          "description": "Endpoints that Kestrel listens to for network requests. Each endpoint has a name specified by its JSON property name.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "logLevel": {
      "additionalProperties": {
        "$ref": "#/definitions/logLevelThreshold"
      },
      "description": "Log level configurations used when creating logs. Only logs that exceeds its matching log level will be enabled. Each log level configuration has a category specified by its JSON property name. For more information about configuring log levels, see https://docs.microsoft.com/aspnet/core/fundamentals/logging/#configure-logging.",
      "type": "object"
    },
    "logLevelThreshold": {
      "description": "Log level threshold.",
      "enum": [
        "Trace",
        "Debug",
        "Information",
        "Warning",
        "Error",
        "Critical",
        "None"
      ],
      "type": "string"
    },
    "logging": {
      "additionalProperties": {
        "description": "Logging configuration for a provider. The provider name must match the configuration's JSON property property name.",
        "properties": {
          "LogLevel": {
            "$ref": "#/definitions/logLevel"
          }
        },
        "type": "object"
      },
      "description": "Configuration for Microsoft.Extensions.Logging.",
      "properties": {
        "Console": {
          "properties": {
            "FormatterName": {
              "default": "simple",
              "description": "Name of the log message formatter to use. Defaults to 'simple'.",
              "type": "string"
            },
            "FormatterOptions": {
              "description": "Log message formatter options. Additional properties are available on the options depending on the configured formatter. The formatter is specified by FormatterName.",
              "properties": {
                "IncludeScopes": {
                  "default": false,
                  "description": "Include scopes when true. Defaults to false.",
                  "type": "boolean"
                },
                "TimestampFormat": {
                  "description": "Format string used to format timestamp in logging messages. Defaults to null.",
                  "type": "string"
                },
                "UseUtcTimestamp": {
                  "default": false,
                  "description": "Indication whether or not UTC timezone should be used to for timestamps in logging messages. Defaults to false.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "LogLevel": {
              "$ref": "#/definitions/logLevel"
            },
            "LogToStandardErrorThreshold": {
              "$ref": "#/definitions/logLevelThreshold",
              "description": "The minimum level of messages are written to Console.Error."
            }
          }
        },
        "Debug": {
          "properties": {
            "LogLevel": {
              "$ref": "#/definitions/logLevel"
            }
          }
        },
        "ElmahIo": {
          "properties": {
            "LogLevel": {
              "$ref": "#/definitions/logLevel"
            }
          }
        },
        "ElmahIoBreadcrumbs": {
          "properties": {
            "LogLevel": {
              "$ref": "#/definitions/logLevel"
            }
          }
        },
        "EventLog": {
          "properties": {
            "LogLevel": {
              "$ref": "#/definitions/logLevel"
            }
          }
        },
        "EventSource": {
          "properties": {
            "LogLevel": {
              "$ref": "#/definitions/logLevel"
            }
          }
        },
        "LogLevel": {
          "$ref": "#/definitions/logLevel"
        }
      },
      "type": "object"
    },
    "protocols": {
      "description": "The protocols enabled on the endpoint.",
      "enum": [
        "None",
        "Http1",
        "Http2",
        "Http1AndHttp2",
        "Http3",
        "Http1AndHttp2AndHttp3"
      ],
      "type": "string"
    },
    "pwa": {
      "properties": {
        "cacheId": {
          "default": "v1.0",
          "description": "The cache identifier of the service worker (can be any string). Change this property to force the service worker to reload in browsers.",
          "type": "string"
        },
        "offlineRoute": {
          "default": "/offline.html",
          "description": "The route to the page to show when offline.",
          "type": "string"
        },
        "registerServiceWorker": {
          "default": true,
          "description": "Determines if a script that registers the service worker should be injected into the bottom of the HTML page.",
          "type": "boolean"
        },
        "registerWebmanifest": {
          "default": true,
          "description": "Determines if a meta tag that points to the web manifest should be inserted at the end of the head element.",
          "type": "boolean"
        },
        "routesToPreCache": {
          "default": "",
          "description": "A comma separated list of routes to pre-cache when service worker installs in the browser.",
          "type": "string"
        },
        "strategy": {
          "default": "cacheFirstSafe",
          "description": "Selects one of the predefined service worker types.",
          "enum": ["cacheFirst", "cacheFirstSafe", "minimal", "networkFirst"]
        }
      }
    },
    "sslProtocols": {
      "description": "Specifies allowable SSL protocols. Defaults to 'None' which allows the operating system to choose the best protocol to use, and to block protocols that are not secure. Unless your app has a specific reason not to, you should use this default. Available in .NET 5 and later.",
      "items": {
        "default": "None",
        "enum": ["None", "Tls", "Tls11", "Tls12", "Tls13"],
        "type": "string"
      },
      "type": "array"
    },
    "umbraco": {
      "description": "Configuration of Open Source .NET CMS - Umbraco",
      "properties": {
        "CMS": {
          "properties": {
            "ActiveDirectory": {
              "$ref": "#/definitions/umbracoActiveDirectory"
            },
            "Content": {
              "$ref": "#/definitions/umbracoContent"
            },
            "Debug": {
              "$ref": "#/definitions/umbracoDebug"
            },
            "Examine": {
              "properties": {
                "LuceneDirectoryFactory": {
                  "description": "Lucene directory factory type",
                  "type": "string"
                }
              }
            },
            "ExceptionFilter": {
              "properties": {
                "Disabled": {
                  "default": false,
                  "description": "Indicating whether the exception filter is disabled",
                  "type": "boolean"
                }
              }
            },
            "Global": {
              "$ref": "#/definitions/umbracoGlobal"
            },
            "HealthChecks": {
              "$ref": "#/definitions/umbracoHealthChecks"
            },
            "Hosting": {
              "$ref": "#/definitions/umbracoHosting"
            },
            "Imaging": {
              "$ref": "#/definitions/umbracoImaging"
            },
            "KeepAlive": {
              "$ref": "#/definitions/umbracoKeepAlive"
            },
            "Logging": {
              "properties": {
                "MaxLogAge": {
                  "default": "1.00:00:00",
                  "description": "Maximum age of a log file - https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
                  "type": "string"
                }
              }
            },
            "ModelsBuilder": {
              "$ref": "#/definitions/umbracoModelsBuilder"
            },
            "NuCache": {
              "properties": {
                "BTreeBlockSize": {
                  "type": "integer"
                }
              }
            },
            "Plugins": {
              "properties": {
                "BrowsableFileExtensions": {
                  "description": "Allowed file extensions (including the period .) that should be accessible from the browser",
                  "type": ["string"]
                }
              }
            },
            "RequestHandler": {
              "$ref": "#/definitions/umbracoRequestHandler"
            },
            "RichTextEditor": {
              "$ref": "#/definitions/umbracoRichTextEditor"
            },
            "Runtime": {
              "properties": {
                "MaxQueryStringLength": {
                  "description": "Value for the maximum query string length",
                  "type": "integer"
                },
                "MaxRequestLength": {
                  "description": "Value for the maximum request length",
                  "type": "integer"
                }
              }
            },
            "RuntimeMinification": {
              "$ref": "#/definitions/umbracoRuntimeMinification"
            },
            "Security": {
              "$ref": "#/definitions/umbracoSecurity"
            },
            "Tours": {
              "properties": {
                "EnableTours": {
                  "default": true,
                  "description": "Indicating whether back-office tours are enabled",
                  "type": "boolean"
                }
              }
            },
            "TypeFinder": {
              "properties": {
                "AssembliesAcceptingLoadExceptions": {
                  "description": "A CSV string of assemblies that accept load exceptions during type finder operations",
                  "type": "string"
                }
              }
            },
            "Unattended": {
              "$ref": "#/definitions/umbracoUnattended"
            },
            "WebRouting": {
              "$ref": "#/definitions/umbracoWebRouting"
            }
          },
          "type": "object"
        }
      },
      "required": ["CMS"]
    },
    "umbracoActiveDirectory": {
      "description": "Configuration of Active Directory for Umbraco CMS",
      "properties": {
        "Domain": {
          "description": "Active Directory Domain",
          "type": "string"
        }
      }
    },
    "umbracoCharCollection": {
      "properties": {
        "Char": {
          "default": "ä",
          "type": "string"
        },
        "Replacement": {
          "default": "ae",
          "type": "string"
        }
      },
      "required": ["Char", "Replacement"]
    },
    "umbracoContent": {
      "properties": {
        "AllowedUploadFiles": {
          "description": "Collection of file extensions without . that are allowed for upload",
          "type": ["string"]
        },
        "DisallowedUploadFiles": {
          "description": "Collection of file extensions without . that are disallowed for upload",
          "type": ["string"]
        },
        "Error404Collection": {
          "items": {
            "$ref": "#/definitions/umbracoContentErrorPage"
          },
          "type": "array"
        },
        "Imaging": {
          "properties": {
            "AutoFillImageProperties": {
              "description": "Imaging autofill following media file upload fields",
              "properties": {
                "Alias": {
                  "default": "umbracoFile"
                },
                "ExtensionFieldAlias": {
                  "default": "umbracoExtension"
                },
                "HeightFieldAlias": {
                  "default": "umbracoHeight"
                },
                "LengthFieldAlias": {
                  "default": "umbracoBytes"
                },
                "WidthFieldAlias": {
                  "default": "umbracoWidth"
                }
              }
            },
            "ImageFileTypes": {
              "description": "Collection of accepted image file extensions",
              "type": ["string"]
            }
          }
        },
        "LoginBackgroundImage": {
          "default": "assets/img/login.jpg",
          "description": "Path to the login screen background image",
          "type": "string"
        },
        "LoginLogoImage": {
          "default": "assets/img/application/umbraco_logo_white.svg",
          "description": "Path to the login screen logo image",
          "type": "string"
        },
        "MacroErrors": {
          "description": "Macro error behaviour",
          "enum": ["Inline", "Silent", "Throw", "Content"]
        },
        "Notifications": {
          "properties": {
            "DisableHtmlEmail": {
              "default": false,
              "description": "Whether HTML email notifications should be disabled",
              "type": "boolean"
            },
            "Email": {
              "description": "Email address used for notifications",
              "type": "string"
            }
          }
        },
        "PreviewBadge": {
          "description": "Preview badge mark-up",
          "type": "string"
        },
        "ResolveUrlsFromTextString": {
          "default": false,
          "description": "URLs should be resolved from text strings",
          "type": "boolean"
        },
        "ShowDeprecatedPropertyEditors": {
          "default": false,
          "description": "Deprecated property editors should be shown",
          "type": "boolean"
        }
      }
    },
    "umbracoContentErrorPage": {
      "properties": {
        "ContentId": {
          "description": "An int of the content",
          "type": "integer"
        },
        "ContentKey": {
          "description": "A guid of the content",
          "type": "string"
        },
        "ContentXPath": {
          "description": "An XPath query for the content",
          "type": "string"
        },
        "Culture": {
          "description": "Content culture",
          "type": "string"
        }
      }
    },
    "umbracoDebug": {
      "properties": {
        "DumpOnTimeoutThreadAbort": {
          "default": false,
          "description": "Indicating whether memory dumps on thread abort should be taken",
          "type": "boolean"
        },
        "LogIncompletedScopes": {
          "default": false,
          "description": "Indicating whether incompleted scopes should be logged",
          "type": "boolean"
        }
      }
    },
    "umbracoDisabledHealthChecks": {
      "properties": {
        "Id": {
          "description": "Guid of healthcheck to disable",
          "type": "string"
        }
      }
    },
    "umbracoGlobal": {
      "properties": {
        "DatabaseServerMessenger": {
          "properties": {
            "MaxProcessingInstructionCount": {
              "default": 1000,
              "description": "The maximum number of instructions that can be processed at startup; otherwise the server cold-boots (rebuilds its caches)",
              "type": "integer"
            },
            "TimeBetweenPruneOperations": {
              "default": "00:01:00",
              "description": "The time to wait between each prune operations https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
              "type": "string"
            },
            "TimeBetweenSyncOperations": {
              "default": "00:00:05",
              "description": "The time to wait between each sync operations https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
              "type": "string"
            },
            "TimeToRetainInstructions": {
              "default": "2.00:00:00",
              "description": "The time to keep instructions in the database. Records older than this number will be pruned https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
              "type": "string"
            }
          }
        },
        "DatabaseServerRegistrar": {
          "properties": {
            "StaleServerTimeout": {
              "default": "00:02:00",
              "description": "The time span to wait before considering a server stale, after it has last been accessed https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
              "type": "string"
            },
            "WaitTimeBetweenCalls": {
              "default": "00:01:00",
              "description": "The amount of time to wait between calls to the database on the background thread https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
              "type": "string"
            }
          }
        },
        "DefaultUILanguage": {
          "default": "en-US",
          "description": "Default UI language of Umbraco backoffice",
          "type": "string"
        },
        "DisableElectionForSingleServer": {
          "default": false,
          "description": "Indicating whether to disable the election for a single server",
          "type": "boolean"
        },
        "HideTopLevelNodeFromPath": {
          "default": false,
          "description": "Indicating whether to hide the top level node from the path",
          "type": "boolean"
        },
        "IconsPath": {
          "default": "~/umbraco/assets/icons",
          "description": "Path to Umbraco Icons for backoffice",
          "type": "string"
        },
        "InstallMissingDatabase": {
          "default": false,
          "description": "Indicating whether to install the database when it is missing",
          "type": "boolean"
        },
        "NoNodesViewPath": {
          "default": "~/umbraco/UmbracoWebsite/NoNodes.cshtml",
          "description": "Path to view when the website built with Umbraco has no content nodes",
          "type": "string"
        },
        "ReservedPaths": {
          "default": "~/app_plugins/,~/install/,~/mini-profiler-resources/,~/umbraco/,",
          "description": "CSV string of reserved paths (must end with a comma)",
          "type": "string"
        },
        "ReservedUrls": {
          "default": "~/config/splashes/noNodes.aspx,~/.well-known,",
          "description": "CSV string of reserved URLs (must end with a comma)",
          "type": "string"
        },
        "Smtp": {
          "properties": {
            "DeliveryMethod": {
              "default": "Network",
              "description": "SMTP delivery method",
              "enum": [
                "Network",
                "SpecifiedPickupDirectory",
                "PickupDirectoryFromIis"
              ]
            },
            "From": {
              "description": "Email address to use for messages",
              "type": "string"
            },
            "Host": {
              "description": "SMTP Server hostname",
              "type": "string"
            },
            "Password": {
              "description": "SMTP server password",
              "type": "string"
            },
            "PickupDirectoryLocation": {
              "description": "SMTP pick-up directory path",
              "type": "string"
            },
            "Port": {
              "description": "SMTP Server Port Number",
              "type": "integer"
            },
            "SecureSocketOptions": {
              "default": "Auto",
              "description": "Secure socket options for SMTP server",
              "enum": [
                "None",
                "Auto",
                "SslOnConnect",
                "StartTls",
                "StartTlsWhenAvailable"
              ]
            },
            "Username": {
              "description": "SMTP server username",
              "type": "string"
            }
          }
        },
        "TimeOut": {
          "default": "00:20:00",
          "description": "Duration of timeout https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
          "type": "string"
        },
        "UmbracoCssPath": {
          "default": "~/css",
          "description": "Path to store CSS files used for website built with Umbraco",
          "type": "string"
        },
        "UmbracoMediaPath": {
          "default": "~/media",
          "description": "Path to store media files",
          "type": "string"
        },
        "UmbracoPath": {
          "default": "~/umbraco",
          "description": "Umbraco back-office path",
          "type": "string"
        },
        "UseHttps": {
          "default": false,
          "description": "Indicating whether HTTPS should be used",
          "type": "boolean"
        },
        "VersionCheckPeriod": {
          "default": 7,
          "description": "Check for new version. Period in days",
          "type": "integer"
        }
      }
    },
    "umbracoHealthChecks": {
      "properties": {
        "DisabledChecks": {
          "items": {
            "$ref": "#/definitions/umbracoDisabledHealthChecks"
          },
          "type": "array"
        },
        "Notification": {
          "properties": {
            "DisabledChecks": {
              "items": {
                "$ref": "#/definitions/umbracoDisabledHealthChecks"
              },
              "type": "array"
            },
            "Enabled": {
              "default": false,
              "description": "Indicating whether health check notifications are enabled",
              "type": "boolean"
            },
            "FirstRunTime": {
              "description": "The first run time of a healthcheck notification in crontab format",
              "type": "string"
            },
            "NotificationMethods": {
              "additionalProperties": {
                "properties": {
                  "Enabled": {
                    "description": "Indicating whether the health check notification method is enabled",
                    "type": "boolean"
                  },
                  "FailureOnly": {
                    "default": false,
                    "description": "Indicating whether the health check notifications should occur on failures only",
                    "type": "boolean"
                  },
                  "Settings": {
                    "description": "An object of Health Check Notification provider specific settings. For the email notification it uses a setting 'RecipientEmail'",
                    "type": "object"
                  },
                  "Verbosity": {
                    "default": "Summary",
                    "description": "The health check notifications reporting verbosity",
                    "enum": ["Summary", "Detailed"]
                  }
                },
                "type": "object"
              },
              "description": "A collection of health check notification methods that are set by their alias such as 'email'",
              "type": "object"
            },
            "Period": {
              "default": "1.00:00:00",
              "description": "The period of the healthcheck notifications are run https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
              "type": "string"
            }
          }
        }
      }
    },
    "umbracoHosting": {
      "properties": {
        "ApplicationVirtualPath": {
          "type": "string"
        },
        "Debug": {
          "default": false,
          "description": "Indicating whether umbraco is running in [debug mode]",
          "type": "boolean"
        },
        "LocalTempStorageLocation": {
          "default": "Default",
          "description": "The location of temporary files",
          "enum": ["Default", "EnvironmentTemp"]
        }
      }
    },
    "umbracoImaging": {
      "properties": {
        "Cache": {
          "properties": {
            "BrowserMaxAge": {
              "default": "7.00:00:00",
              "description": "Browser image cache maximum age https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
              "type": "string"
            },
            "CacheFolder": {
              "default": "..\\umbraco\\mediacache",
              "description": "Location of media cache folder",
              "type": "string"
            },
            "CacheMaxAge": {
              "default": "365.00:00:00",
              "description": "Image cache maximum age https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",
              "type": "string"
            },
            "CachedNameLength": {
              "default": 8,
              "description": "Length of the cached name",
              "type": "integer"
            }
          }
        },
        "Resize": {
          "properties": {
            "MaxHeight": {
              "default": 5000,
              "description": "Value for the maximum resize height",
              "type": "integer"
            },
            "MaxWidth": {
              "default": 5000,
              "description": "Value for the maximum resize width",
              "type": "integer"
            }
          }
        }
      }
    },
    "umbracoKeepAlive": {
      "properties": {
        "DisableKeepAliveTask": {
          "default": false,
          "description": "Indicating whether the keep alive task is disabled",
          "type": "boolean"
        },
        "KeepAlivePingUrl": {
          "default": "{umbracoApplicationUrl}/api/keepalive/ping",
          "description": "Keep alive ping URL. {umbracoApplicationUrl} is replaced",
          "type": "string"
        }
      }
    },
    "umbracoMemberPassword": {
      "properties": {
        "HashAlgorithmType": {
          "default": "HMACSHA256",
          "type": "string"
        },
        "MaxFailedAccessAttemptsBeforeLockout": {
          "default": 5,
          "type": "integer"
        },
        "RequireDigit": {
          "default": false,
          "type": "boolean"
        },
        "RequireLowercase": {
          "default": false,
          "type": "boolean"
        },
        "RequireNonLetterOrDigit": {
          "default": false,
          "type": "boolean"
        },
        "RequireUppercase": {
          "default": false,
          "type": "boolean"
        },
        "RequiredLength": {
          "default": 10,
          "type": "integer"
        }
      }
    },
    "umbracoModelsBuilder": {
      "properties": {
        "AcceptUnsafeModelsDirectory": {
          "default": false,
          "description": "Indicates that the directory indicated in ModelsDirectory is allowed to be outside the website root (e.g. ~/../../some/place). Because that can be a potential security risk, it is not allowed by default.",
          "type": "boolean"
        },
        "DebugLevel": {
          "default": 0,
          "description": "Indicates the debug level. For internal / development use. Set to greater than zero to enable detailed logging.",
          "type": "integer"
        },
        "FlagOutOfDateModels": {
          "default": true,
          "description": "Indicates whether out-of-date models (i.e. after a content type or data type has been modified) should be flagged.",
          "type": "boolean"
        },
        "ModelsDirectory": {
          "default": "~/umbraco/models",
          "description": "Location to generate ModelsBuilder models",
          "type": "string"
        },
        "ModelsMode": {
          "default": "InMemoryAuto",
          "description": "ModelsBuilder generation mode",
          "enum": [
            "Nothing",
            "InMemoryAuto",
            "SourceCodeManual",
            "SourceCodeAuto"
          ]
        },
        "ModelsNamespace": {
          "default": "Umbraco.Cms.Web.Common.PublishedModels",
          "description": "Namespace to use when generating strongly typed models",
          "type": "string"
        }
      }
    },
    "umbracoRequestHandler": {
      "properties": {
        "AddTrailingSlash": {
          "default": true,
          "description": "Indicating whether to add a trailing slash to URLs",
          "type": "boolean"
        },
        "CharCollection": {
          "description": "Character collection for replacements",
          "items": {
            "$ref": "#/definitions/umbracoCharCollection"
          },
          "type": "array"
        },
        "ConvertUrlsToAscii": {
          "default": "try",
          "description": "Indicating whether to convert URLs to ASCII (valid values: true, try or false)",
          "enum": ["try", "true", "false"]
        }
      }
    },
    "umbracoRichTextEditor": {
      "properties": {
        "Commands": {
          "description": "Commands to add to the TinyMCE Richtext editor",
          "items": {
            "$ref": "#/definitions/umbracoRichTextEditorCommands"
          },
          "type": "array"
        },
        "CustomConfig": {
          "description": "Custom configuration for TinyMCE and its plugins",
          "type": "object"
        },
        "InvalidElements": {
          "description": "A CSV string of invalid HTML elements in the richtext editor. Ex: font",
          "type": "string"
        },
        "Plugins": {
          "description": "An array of TinyMCE Plugins to load such as 'paste', 'table'",
          "type": ["string"]
        },
        "ValidElements": {
          "description": "A CSV string of valid HTML elements in the richtext editor. Ex: iframe[*],button[class|title]",
          "type": "string"
        }
      }
    },
    "umbracoRichTextEditorCommands": {
      "properties": {
        "Alias": {
          "description": "Alias of the Richtext Editor Command",
          "type": "string"
        },
        "Mode": {
          "description": "Set how the Richtext Editor Command can be used. Such as when a selection is made",
          "enum": ["Insert", "Selection", "All"]
        },
        "Name": {
          "description": "Friendly name of Richtext Editor Command",
          "type": "string"
        }
      }
    },
    "umbracoRuntimeMinification": {
      "properties": {
        "CacheBuster": {
          "default": "Version",
          "description": "Cache buster type to use",
          "enum": ["Version", "AppDomain", "Timestamp"]
        },
        "UseInMemoryCache": {
          "default": false,
          "type": "boolean"
        }
      }
    },
    "umbracoSecurity": {
      "properties": {
        "AllowPasswordReset": {
          "default": true,
          "description": "Indicating whether to allow user password reset",
          "type": "boolean"
        },
        "AuthCookieDomain": {
          "description": "Authorization cookie domain",
          "type": "string"
        },
        "AuthCookieName": {
          "default": "UMB_UCONTEXT",
          "description": "The authorization cookie name",
          "type": "string"
        },
        "HideDisabledUsersInBackOffice": {
          "default": false,
          "description": "Indicating whether to hide disabled users in the back-office",
          "type": "boolean"
        },
        "KeepUserLoggedIn": {
          "default": false,
          "description": "Indicating whether to keep the user logged in",
          "type": "boolean"
        },
        "MemberPassword": {
          "$ref": "#/definitions/umbracoMemberPassword"
        },
        "UserPassword": {
          "$ref": "#/definitions/umbracoUserPassword"
        },
        "UsernameIsEmail": {
          "default": true,
          "description": "Indicating whether the user's email address is to be considered as their username",
          "type": "boolean"
        }
      }
    },
    "umbracoUnattended": {
      "properties": {
        "InstallUnattended": {
          "default": false,
          "description": "Indicating whether unattended installs are enabled",
          "type": "boolean"
        },
        "UnattendedUserEmail": {
          "description": "Use for creating a user with an email for Unattended Installs",
          "type": "string"
        },
        "UnattendedUserName": {
          "description": "Use for creating a user with a name for Unattended Installs",
          "type": "string"
        },
        "UnattendedUserPassword": {
          "description": "Use for creating a user with a password for Unattended Installs",
          "type": "string"
        },
        "UpgradeUnattended": {
          "default": false,
          "description": "Indicating whether unattended upgrades are enabled",
          "type": "boolean"
        }
      }
    },
    "umbracoUserPassword": {
      "properties": {
        "HashAlgorithmType": {
          "default": "PBKDF2.ASPNETCORE.V3",
          "type": "string"
        },
        "MaxFailedAccessAttemptsBeforeLockout": {
          "default": 5,
          "type": "integer"
        },
        "RequireDigit": {
          "default": false,
          "type": "boolean"
        },
        "RequireLowercase": {
          "default": false,
          "type": "boolean"
        },
        "RequireNonLetterOrDigit": {
          "default": false,
          "type": "boolean"
        },
        "RequireUppercase": {
          "default": false,
          "type": "boolean"
        },
        "RequiredLength": {
          "default": 10,
          "type": "integer"
        }
      }
    },
    "umbracoWebRouting": {
      "properties": {
        "DisableAlternativeTemplates": {
          "default": false,
          "description": "Indicating whether the use of alternative templates are disabled",
          "type": "boolean"
        },
        "DisableFindContentByIdPath": {
          "default": false,
          "description": "Indicating whether find content ID by path is disabled",
          "type": "boolean"
        },
        "DisableRedirectUrlTracking": {
          "default": false,
          "description": "Indicating whether redirect URL tracking is disabled",
          "type": "boolean"
        },
        "InternalRedirectPreservesTemplate": {
          "default": false,
          "description": "Indicating whether an internal redirect should preserve the template",
          "type": "boolean"
        },
        "TryMatchingEndpointsForAllPages": {
          "default": false,
          "description": "Indicating whether to check if any routed endpoints match a front-end request before the Umbraco dynamic router tries to map the request to an Umbraco content item",
          "type": "boolean"
        },
        "TrySkipIisCustomErrors": {
          "default": false,
          "description": "Indicating whether IIS custom errors should be skipped",
          "type": "boolean"
        },
        "UmbracoApplicationUrl": {
          "type": "string"
        },
        "UrlProviderMode": {
          "default": "Auto",
          "enum": ["Default", "Relative", "Absolute", "Auto"]
        },
        "ValidateAlternativeTemplates": {
          "default": false,
          "description": "Indicating whether the use of alternative templates should be validated",
          "type": "boolean"
        }
      }
    },
    "webOptimizer": {
      "description": "Settings for WebOptimizer.Core",
      "properties": {
        "enableCaching": {
          "description": "Determines if the \"cache-control\" HTTP headers should be set and if conditional GET (304) requests should be supported. This could be helpful to disable while in development mode.",
          "type": "boolean"
        },
        "enableTagHelperBundling": {
          "default": true,
          "description": "Determines if `<script>` and `<link>` elements should point to the bundled path or a reference per source file should be created. This is helpful to disable when in development mode.",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "patternProperties": {
    "^(ElmahIo|Elmahio|elmahIo|elmahio)$": {
      "$ref": "#/definitions/ElmahIo"
    },
    "^(Umbraco|umbraco)$": {
      "$ref": "#/definitions/umbraco"
    },
    "^(cdn|Cdn)$": {
      "$ref": "#/definitions/cdn"
    },
    "^(nlog|Nlog|NLog)$": {
      "$ref": "#/definitions/NLog"
    },
    "^(pwa|PWA|Pwa)$": {
      "$ref": "#/definitions/pwa"
    },
    "^WebOptimizer$": {
      "$ref": "#/definitions/webOptimizer"
    },
    "^webOptimizer$": {
      "$ref": "#/definitions/webOptimizer"
    },
    "^weboptimizer$": {
      "$ref": "#/definitions/webOptimizer"
    }
  },
  "properties": {
    "AllowedHosts": {
      "$ref": "#/definitions/allowedHosts"
    },
    "ConnectionStrings": {
      "$ref": "#/definitions/connectionStrings"
    },
    "Kestrel": {
      "$ref": "#/definitions/kestrel"
    },
    "Logging": {
      "$ref": "#/definitions/logging"
    }
  },
  "title": "JSON schema ASP.NET Core's appsettings.json file",
  "type": "object"
}
