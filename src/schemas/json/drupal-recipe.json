{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://json.schemastore.org/drupal-recipe.json",
  "type": "object",
  "required": ["name", "description", "type"],
  "title": "New recipe",
  "description": "Required fields",
  "additionalProperties": true,
  "properties": {
    "name": {
      "title": "User interface name for the recipe",
      "type": "string",
      "default": "''"
    },
    "description": {
      "type": "string",
      "default": "''"
    },
    "type": {
      "title": "The type of the recipe. Used for administrative purposes.",
      "type": "string",
      "$ref": "#/$defs/recipeTypes"
    },
    "recipes": {
      "type": "array",
      "title": "List of recipes that this recipe depends on. Recipes must be installed relative to the Drupal root directory.",
      "items": {
        "type": "string"
      },
      "examples": [
        "core/recipes/remote_video_media_type",
        "starshot_admin_theme"
      ]
    },
    "install": {
      "title": "List of modules to be installed.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "config": {
      "type": "object",
      "properties": {
        "import": {
          "title": "A list of configurations to be installed.",
          "description": "The key is the configuration provider and the value is the list of configuration names.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          }
        },
        "actions": {
          "title": "Key/Value",
          "description": "The key is the configuration object targeted and the value is the action to be performed. For each action additional properties can be provided.",
          "type": "object",
          "patternProperties": {
            "block.block.*" : {
              "$ref": "#/$defs/actionsList/block.block.*"
            },
            "core.entity_form_display.*.*.*": {
              "$ref": "#/$defs/actionsList/core.entity_form_display.*.*.*"
            },
            "core.entity_view_display.*.*.*": {
              "$ref": "#/$defs/actionsList/core.entity_form_display.*.*.*"
            },
            "contact.form.*": {
              "$ref": "#/$defs/actionsList/contact.form.*"
            },
            "editor.editor.*": {
              "$ref": "#/$defs/actionsList/editor.editor.*"
            },
            "field.field.*.*.*": {
              "$ref": "#/$defs/actionsList/field.field.*.*.*"
            }
          }
        }
      }
    },
    "content": {
      "title": "List of content to be created.",
      "description": "The contents are stored in a directory relative to the recipe file.",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "$defs": {
    "theme": {
      "defaultRegions": {
        "enum": [
          "sidebar_first",
          "sidebar_second",
          "content",
          "header",
          "primary_menu",
          "secondary_menu",
          "footer",
          "highlighted",
          "help",
          "page_top",
          "page_bottom",
          "breadcrumb"
        ]
      }
    },
    "recipeTypes": {
      "type": "string",
      "enum": [
        "Administration",
        "Block type",
        "Comment type",
        "Contact form",
        "Content field",
        "Content type",
        "Editor",
        "Maintenance",
        "Media type",
        "Performance",
        "Responsive image",
        "Search",
        "Site",
        "Taxonomy",
        "Text format",
        "Text format editor",
        "Theme",
        "User role",
        "User type",
        "Users",
        "Workflow"
      ]
    },
    "actionsList": {
      "block.block.*": {
        "type": "object",
        "properties": {
          "setRegion": {
            "$comment": "@TODO: This should be auto-populated from all available theme regions",
            "description": "Sets the region in which a block should be. Which regions are available depends on which theme the block is in. Only works on blocks.",
            "type": "string",
            "$ref": "#/$defs/theme/defaultRegions",
            "default": "content"
          },
          "setWeight": {
            "description": "Sets the weight (position relative to other blocks in the same region of the same theme) of a block. Accepts any number. Works on Blocks.",
            "type": "number",
            "minimum": 0
          },
          "placeBlockInDefaultTheme": {
            "type": "object",
            "properties": {
              "id": {
                "$comment": "@TODO: This should be auto-populated from the parent property",
                "description": "The block id",
                "type": "string"
              },
              "region": {
                "$comment": "@TODO: The values should be auto-populated",
                "description": "The region accepts an array keyed by theme name.",
                "type": "object",
                "default": {
                  "bootstrap": "footer",
                  "olivero": "footer_top"
                }
              },
              "default_region": {
                "description": "A fallback used if no match found in the region array.",
                "type": "string",
                "default": "content"
              },
              "position": {
                "description": "Place the block before/after any blocks already in the region.",
                "type": "string",
                "enum": ["first", "last"],
                "default": "first"
              },
              "plugin": {
                "$comment": "@TODO: The value should be auto-populated",
                "description": "The plugin id",
                "type": "string",
                "default": "system_powered_by_block"
              }
            },
            "required": ["id", "region", "default_region", "position", "plugin"]
          },
          "placeBlockInAdminTheme": {
            "$ref": "#/$defs/actionsList/block.block.*/properties/placeBlockInDefaultTheme"
          }
        },
        "additionalProperties": false
      },
      "core.entity_form_display.*.*.*": {
        "$comment": "",
        "type": "object",
        "title": "Hides components from an entity view display or entity form display.",
        "description": "",
        "properties": {
          "hideComponent": {
            "$comment": "@TODO: This should be auto-populated",
            "type": "string",
            "title": "Hides a component from an entity view display or entity form display.",
            "description": "Value: The component id",
            "default": "uid"
          },
          "hideComponents": {
            "$comment": "@TODO: This should be auto-populated",
            "type": "array",
            "description": "Value: The list of component ids",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "contact.form.*": {
        "type": "object",
        "properties": {
          "setMessage": {
            "description": "Sets the message that a contact form should display to users when they submit the form. Only works on contact forms.",
            "type": "string",
            "default": "'Hello world'"
          },
          "setRecipients": {
            "description": "Sets the email addresses that should be notified when a user submits a contact form. Accepts an array of email addresses. Only works on contact forms.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "default": "me@example.com"
            }
          },
          "setRedirectPath": {
            "description": "Sets the path (URL) where users should be redirected when they submit a contact form. Must start with a slash. Only works on contact forms.",
            "type": "string",
            "default": "'/thank-you'"
          },
          "setReply": {
            "description": "Sets a message to be emailed to the person who submitted a contact form. Only works on contact forms.",
            "type": "string",
            "default": "'Thanks for your message.'"
          },
          "setWeight": {
            "description": "Sets the weight (position relative to other blocks in the same region of the same theme) of a block. Accepts any number. Works on Blocks.",
            "type": "number",
            "minimum": 0
          }
        }
      },
      "editor.editor.*": {
        "properties": {
          "addItemToToolbar": {
            "description": "Add a new toolbar item.",
            "tupe": "object",
            "properties": {
              "item_name": {
                "description": "The toolbar item name",
                "type": "string"
              },
              "position": {
                "description": "Specific the position, optionally replacing the item that's already in that position.",
                "type": "number",
                "minimum": 0
              },
              "replace": {
                "description": "If there's already something at that position, replace it.",
                "type": "boolean"
              }
            },
            "required": ["item_name"]
          }
        }
      },
      "field.field.*.*.*": {
        "properties": {
          "setDefaultValue": {
            "description": "Sets the default value of a field, which can be changed by users when editing content. Exactly what the default value should look like, varies by field type. Works on fields and base field overrides.",
            "type": "string",
            "default": "''"
          },
          "setDescription": {
            "description": "Changes the user-facing description of a field. Works on fields and base field overrides.",
            "type": "string",
            "default": "''"
          },
          "setLabel": {
            "description": "Changes the human-readable label of a field. Works on fields and base field overrides.",
            "type": "string",
            "default": "''"
          },
          "setRequired": {
            "description": "Sets whether users must enter a value for a field. Works on fields and base field overrides.",
            "type": "boolean",
            "default": true
          },
          "setTranslatable": {
            "description": "Sets whether a field should be translatable in the UI, or not. Works on fields and base field overrides. (Note that most fields are translatable by default.)",
            "type": "boolean",
            "default": true
          },
          "setSettings": {
            "description": "Changes field settings. Exactly which settings are available, and what they mean, varies by the field type. Any preexisting settings are added automatically, with the incoming settings taking precedence. Works on fields and base field overrides.",
            "type": "object",
            "properties": {
              "display_summary": {
                "type": "boolean",
                "default": "true"
              },
              "required_summary": {
                "type": "boolean",
                "default": "true"
              }
            }
          }
        }
      }
    }
  }
}
