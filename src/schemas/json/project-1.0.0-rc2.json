{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "buildOptions": {
      "description": "Options that are passed to the compiler.",
      "properties": {
        "allowUnsafe": {
          "default": false,
          "type": "boolean"
        },
        "compile": {
          "description": "Defines glob patterns and file path to include for compilation.",
          "items": {
            "type": "string"
          },
          "properties": {
            "builtIns": {
              "items": {
                "type": "string"
              },
              "properties": {
                "exclude": {
                  "description": "List of file globbing patterns to be included.",
                  "items": {
                    "type": "string"
                  },
                  "type": ["string", "array"]
                },
                "include": {
                  "description": "List of file globbing patterns to be included.",
                  "items": {
                    "type": "string"
                  },
                  "type": ["string", "array"]
                }
              },
              "type": ["string", "array", "object"]
            },
            "exclude": {
              "description": "List of file globbing patterns to be excluded.",
              "items": {
                "type": "string"
              },
              "type": ["string", "array"]
            },
            "excludeFiles": {
              "description": "List of file paths to be excluded.",
              "items": {
                "type": "string"
              },
              "type": ["string", "array"]
            },
            "include": {
              "description": "List of file globbing patterns to be included.",
              "items": {
                "type": "string"
              },
              "type": ["string", "array"]
            },
            "includeFiles": {
              "description": "List of file paths to be included.",
              "items": {
                "type": "string"
              },
              "type": ["string", "array"]
            },
            "mappings": {
              "description": "Pairs of destination folders and glob patterns specifying additional files to include/exclude.",
              "type": "object"
            }
          },
          "type": ["string", "array", "object"]
        },
        "compilerName": {
          "default": "csc",
          "type": "string"
        },
        "copyToOutput": {
          "allOf": [
            {
              "$ref": "#/definitions/buildOptions/properties/compile"
            },
            {
              "description": "Defines glob patterns and file paths to include for copying to build output."
            }
          ]
        },
        "debugType": {
          "enum": ["portable", "full", "none"],
          "type": "string"
        },
        "define": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "delaySign": {
          "default": false,
          "type": "boolean"
        },
        "embed": {
          "allOf": [
            {
              "$ref": "#/definitions/buildOptions/properties/compile"
            },
            {
              "description": "Defines glob patterns and file paths of resource files to include for compilation."
            }
          ]
        },
        "emitEntryPoint": {
          "default": false,
          "type": "boolean"
        },
        "keyFile": {
          "type": "string"
        },
        "languageVersion": {
          "enum": [
            "csharp1",
            "csharp2",
            "csharp3",
            "csharp4",
            "csharp5",
            "csharp6",
            "experimental"
          ],
          "type": "string"
        },
        "nowarn": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "optimize": {
          "default": false,
          "type": "boolean"
        },
        "outputName": {
          "type": "string"
        },
        "platform": {
          "enum": [
            "anycpu",
            "anycpu32bitpreferred",
            "ARM",
            "x86",
            "x64",
            "Itanium"
          ],
          "type": "string"
        },
        "preserveCompilationContext": {
          "description": "Set this option to preserve reference assemblies and other context data to allow for runtime compilation.",
          "type": "boolean"
        },
        "publicSign": {
          "default": false,
          "type": "boolean"
        },
        "warningsAsErrors": {
          "default": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "compilationOptions": {
      "description": "[Deprecated] Options that are passed to the compiler. Use 'buildOptions' instead.",
      "properties": {
        "allowUnsafe": {
          "default": false,
          "type": "boolean"
        },
        "debugType": {
          "enum": ["portable", "full", "none"],
          "type": "string"
        },
        "define": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "delaySign": {
          "default": false,
          "type": "boolean"
        },
        "emitEntryPoint": {
          "default": false,
          "type": "boolean"
        },
        "keyFile": {
          "type": "string"
        },
        "languageVersion": {
          "enum": [
            "csharp1",
            "csharp2",
            "csharp3",
            "csharp4",
            "csharp5",
            "csharp6",
            "experimental"
          ],
          "type": "string"
        },
        "nowarn": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "optimize": {
          "default": false,
          "type": "boolean"
        },
        "outputName": {
          "type": "string"
        },
        "platform": {
          "enum": [
            "anycpu",
            "anycpu32bitpreferred",
            "ARM",
            "x86",
            "x64",
            "Itanium"
          ],
          "type": "string"
        },
        "preserveCompilationContext": {
          "description": "Set this option to preserve reference assemblies and other context data to allow for runtime compilation",
          "type": "boolean"
        },
        "publicSign": {
          "default": false,
          "type": "boolean"
        },
        "warningsAsErrors": {
          "default": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "configType": {
      "properties": {
        "buildOptions": {
          "$ref": "#/definitions/buildOptions"
        },
        "compilationOptions": {
          "$ref": "#/definitions/compilationOptions"
        },
        "dependencies": {
          "$ref": "#/definitions/dependencies"
        },
        "frameworkAssemblies": {
          "$ref": "#/definitions/dependencies"
        },
        "imports": {
          "description": "Allow packages supporting these frameworks to be installed in this target, regardless of the compatibility rules.",
          "items": {
            "type": "string"
          },
          "type": ["string", "array"]
        }
      },
      "type": "object"
    },
    "dependencies": {
      "additionalProperties": {
        "properties": {
          "exclude": {
            "$ref": "#/definitions/libraryIncludeFlags"
          },
          "include": {
            "$ref": "#/definitions/libraryIncludeFlags"
          },
          "suppressParent": {
            "$ref": "#/definitions/libraryIncludeFlags"
          },
          "target": {
            "description": "Restrict this dependency to matching only a Project or a Package.",
            "enum": ["project", "package"],
            "type": "string"
          },
          "type": {
            "default": "default",
            "enum": ["default", "build", "platform"],
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": ["string", "object"]
      },
      "description": "Each dependency is defined by a name and a version. Dependencies are resolved from NuGet feeds defined by your package sources and projects located in the directories specified by the 'global.json' file.",
      "type": "object"
    },
    "libraryIncludeFlag": {
      "enum": [
        "all",
        "runtime",
        "compile",
        "build",
        "contentFiles",
        "native",
        "analyzers",
        "none"
      ],
      "type": "string"
    },
    "libraryIncludeFlags": {
      "oneOf": [
        {
          "$ref": "#/definitions/libraryIncludeFlag"
        },
        {
          "items": {
            "$ref": "#/definitions/libraryIncludeFlag"
          },
          "type": "array"
        }
      ]
    },
    "packOptions": {
      "description": "Defines options pertaining to the packaging of the project output into a NuGet package.",
      "properties": {
        "files": {
          "allOf": [
            {
              "$ref": "#/definitions/buildOptions/properties/compile"
            },
            {
              "description": "Defines glob patterns and file paths to include in the generated NuGet package."
            }
          ]
        },
        "iconUrl": {
          "description": "A URL for the image to use as the icon for the package. This should be a 32x32-pixel .png file that has a transparent background.",
          "type": "string"
        },
        "licenseUrl": {
          "description": "A link to the license for the package.",
          "type": "string"
        },
        "owners": {
          "description": "List of owners of the package.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "releaseNotes": {
          "description": "A description of the changes made in each release of the package.",
          "type": "string"
        },
        "repository": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Contains information about the repository where the project is stored.",
          "properties": {
            "type": {
              "default": "git",
              "enum": ["git"],
              "type": "string"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "requireLicenseAcceptance": {
          "default": false,
          "description": "A Boolean value that specifies whether the client needs to ensure that the package license (described by licenseUrl) is accepted before the package is installed.",
          "type": "boolean"
        },
        "summary": {
          "description": "A short description of the package.",
          "type": "string"
        },
        "tags": {
          "description": "A space-delimited list of tags and keywords that describe the package.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "publishOptions": {
      "allOf": [
        {
          "$ref": "#/definitions/buildOptions/properties/compile"
        },
        {
          "description": "Defines glob patterns and file paths to include in publish output."
        }
      ]
    },
    "runtimeOptions": {
      "properties": {
        "configProperties": {
          "properties": {
            "System.GC.Concurrent": {
              "default": false,
              "description": "Enables/disables concurrent garbage collection.",
              "type": "boolean"
            },
            "System.GC.Server": {
              "default": false,
              "description": "Enables/disables server garbage collection.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "script": {
      "description": "A command line script or scripts.\r\rAvailable variables:\r%project:Directory% - The project directory\r%project:Name% - The project name\r%project:Version% - The project version",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    }
  },
  "properties": {
    "authors": {
      "description": "The author of the application.",
      "items": {
        "type": "string"
      },
      "type": "array",
      "uniqueItems": true
    },
    "buildOptions": {
      "$ref": "#/definitions/buildOptions"
    },
    "commands": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object"
    },
    "compilationOptions": {
      "$ref": "#/definitions/compilationOptions"
    },
    "compile": {
      "default": "**/*.cs",
      "description": "[Deprecated] Glob pattern to specify files to compile. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'compile' in 'buildOptions' instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "compileExclude": {
      "description": "[Deprecated] Glob pattern to specify files to exclude from compilation. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'compile' in 'buildOptions' instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "compileFiles": {
      "description": "[Deprecated] Files to include in compilation (overrides 'compileExclude'). (data type: string or array). Example: [ \"Folder1/File1.ext\", \"Folder2/File2.ext\" ]. Use 'compile' in 'buildOptions' instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "configurations": {
      "additionalProperties": {
        "properties": {
          "buildOptions": {
            "$ref": "#/definitions/buildOptions"
          },
          "compilationOptions": {
            "$ref": "#/definitions/compilationOptions"
          }
        },
        "type": "object"
      },
      "description": "Configurations are named groups of compilation settings. There are two defaults built into the runtime: 'Debug' and 'Release'.",
      "type": "object"
    },
    "content": {
      "default": "**/*",
      "description": "[Deprecated] Glob pattern to specify files to include as content. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'publishOptions' to publish or 'copyToOutput' in 'buildOptions' to copy to build output instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "contentExclude": {
      "description": "[Deprecated] Glob pattern to specify files to exclude from the content list. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'publishOptions' to publish or 'copyToOutput' in 'buildOptions' to copy to build output instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "contentFiles": {
      "description": "[Deprecated] Files to include as content (overrides 'contentExclude'). (data type: string or array). Example: [ \"Folder1/File1.ext\", \"Folder2/File2.ext\" ]. Use 'publishOptions' to publish or 'copyToOutput' in 'buildOptions' to copy to build output instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "copyright": {
      "description": "Copyright details for the package.",
      "type": "string"
    },
    "dependencies": {
      "$ref": "#/definitions/dependencies"
    },
    "description": {
      "description": "The description of the project/package.",
      "type": "string"
    },
    "exclude": {
      "description": "[Deprecated] Glob pattern to indicate files to exclude from other glob patterns, in addition to the default patterns specified in 'excludeBuiltIn'. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'exclude' within 'compile' or 'embed' instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "excludeBuiltIn": {
      "default": ["bin/**", "obj/**", "**/*.xproj"],
      "description": "[Deprecated] Default glob pattern to indicate files to exclude from other glob patterns. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'exclude' within 'compile' or 'embed' instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "frameworks": {
      "additionalProperties": {
        "$ref": "#/definitions/configType"
      },
      "description": "Target frameworks that will be built, and dependencies that are specific to the build of this project for that framework.",
      "type": "object"
    },
    "iconUrl": {
      "description": "[Deprecated] A URL for the image to use as the icon for the package. This should be a 32x32-pixel .png file that has a transparent background. Use this in 'packOptions' instead.",
      "type": "string"
    },
    "language": {
      "description": "The locale ID for the package, such as en-us.",
      "type": "string"
    },
    "licenseUrl": {
      "description": "[Deprecated] A link to the license for the package. Use this in 'packOptions' instead.",
      "type": "string"
    },
    "namedResource": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Overrides the generated resource names with custom ones.",
      "type": "object"
    },
    "owners": {
      "description": "[Deprecated] List of owners of the package. Use this in 'packOptions' instead.",
      "items": {
        "type": "string"
      },
      "type": "array",
      "uniqueItems": true
    },
    "packInclude": {
      "description": "[Deprecated] Pairs of destination folders and glob patterns specifying additional files to include in the output NuGet package. (data type: JSON map). Example: { \"tools/\": \"tools/**/*.*\" }. Use 'files' in 'packOptions' instead.",
      "type": "object"
    },
    "packOptions": {
      "$ref": "#/definitions/packOptions"
    },
    "preprocess": {
      "default": "compiler/preprocess/**/*.cs",
      "description": "Glob pattern to specify files to use for preprocessing. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "preprocessExclude": {
      "description": "Glob pattern to specify files to exclude from use for preprocessing. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "preprocessFiles": {
      "description": "Files to include to use for preprocessing (overrides 'preprocessExclude'). (data type: string or array). Example: [ \"Folder1/File1.ext\", \"Folder2/File2.ext\" ]",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "projectUrl": {
      "description": "A URL for the home page of the package.",
      "type": "string"
    },
    "publishExclude": {
      "default": ["obj/**/*.*", "bin/**/*.*", "**/.*/**"],
      "description": "[Deprecated] Glob pattern to specify files to exclude from publish output. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'publishOptions' instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "publishOptions": {
      "$ref": "#/definitions/publishOptions"
    },
    "releaseNotes": {
      "description": "[Deprecated] A description of the changes made in each release of the package. Use this in 'packOptions' instead.",
      "type": "string"
    },
    "repository": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "[Deprecated] Contains information about the repository where the project is stored. Use this in 'packOptions' instead.",
      "properties": {
        "type": {
          "default": "git",
          "enum": ["git"],
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "type": "object"
    },
    "requireLicenseAcceptance": {
      "default": false,
      "description": "[Deprecated] A Boolean value that specifies whether the client needs to ensure that the package license (described by licenseUrl) is accepted before the package is installed. Use this in 'packOptions' instead.",
      "type": "boolean"
    },
    "resource": {
      "default": ["compiler/resources/**/*", "**/*.resx"],
      "description": "[Deprecated] Glob pattern to specify files to include as resources. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'embed' in 'buildOptions' instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "resourceExclude": {
      "description": "[Deprecated] Glob pattern to specify files to exclude from the resources list. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'embed' in 'buildOptions' instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "resourceFiles": {
      "description": "[Deprecated] Files to include as resources (overrides 'resourceExclude'). (data type: string or array). Example: [ \"Folder1/File1.ext\", \"Folder2/File2.ext\" ]. Use 'embed' in 'buildOptions' instead.",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "runtimeOptions": {
      "$ref": "#/definitions/runtimeOptions"
    },
    "runtimes": {
      "description": "List of runtime identifiers supported by this project (used when building standalone applications).",
      "type": "object"
    },
    "scripts": {
      "description": "Scripts to execute during the various stages.",
      "properties": {
        "postcompile": {
          "$ref": "#/definitions/script"
        },
        "postpack": {
          "$ref": "#/definitions/script"
        },
        "postpublish": {
          "$ref": "#/definitions/script"
        },
        "postrestore": {
          "$ref": "#/definitions/script"
        },
        "precompile": {
          "$ref": "#/definitions/script"
        },
        "prepack": {
          "$ref": "#/definitions/script"
        },
        "prepare": {
          "$ref": "#/definitions/script"
        },
        "prepublish": {
          "$ref": "#/definitions/script"
        },
        "prerestore": {
          "$ref": "#/definitions/script"
        }
      },
      "type": "object"
    },
    "shared": {
      "default": "compiler/shared/**/*.cs",
      "description": "Glob pattern to specify files to share with dependent projects. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "sharedExclude": {
      "description": "Glob pattern to specify files to exclude from sharing with dependent projects. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "sharedFiles": {
      "description": "Files to include for sharing with dependent projects (overrides 'sharedExclude'). (data type: string or array). Example: [ \"Folder1/File1.ext\", \"Folder2/File2.ext\" ]",
      "items": {
        "type": "string"
      },
      "type": ["string", "array"]
    },
    "summary": {
      "description": "[Deprecated] A short description of the package. Use this in 'packOptions' instead.",
      "type": "string"
    },
    "tags": {
      "description": "[Deprecated] A space-delimited list of tags and keywords that describe the package. Use this in 'packOptions' instead.",
      "items": {
        "type": "string"
      },
      "type": "array",
      "uniqueItems": true
    },
    "testRunner": {
      "description": "The name of the test runner to use with this project",
      "type": "string"
    },
    "title": {
      "description": "The human-friendly title of the package",
      "type": "string"
    },
    "tools": {
      "additionalProperties": {
        "properties": {
          "version": {
            "type": "string"
          }
        },
        "type": ["string", "object"]
      },
      "description": "Project-specific command line tools accessible when in the project.json directory.",
      "type": "object"
    },
    "version": {
      "description": "The version of the project/package. Examples: 1.2.3, 1.2.3-beta, 1.2.3-*",
      "type": "string"
    }
  },
  "title": "JSON schema for .NET Core project.json files",
  "type": "object"
}
