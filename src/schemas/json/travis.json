{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "allOf": [
    {
      "$ref": "#/definitions/job"
    },
    {
      "properties": {
        "import": {
          "description": "Import YAML config snippets that can be shared across repositories.",
          "oneOf": [
            {
              "items": {
                "$ref": "#/definitions/import"
              },
              "type": "array",
              "uniqueItems": true
            },
            {
              "$ref": "#/definitions/import"
            }
          ]
        },
        "jobs": {
          "additionalProperties": false,
          "properties": {
            "allow_failures": {
              "items": {
                "$ref": "#/definitions/job"
              },
              "type": "array"
            },
            "exclude": {
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/job"
                  },
                  {
                    "properties": {
                      "stage": {
                        "default": "test",
                        "description": "The name of the build stage",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "type": "array"
            },
            "fast_finish": {
              "description": "If some rows in the build matrix are allowed to fail, the build won’t be marked as finished until they have completed. To mark the build as finished as soon as possible, add fast_finish: true",
              "type": "boolean"
            },
            "include": {
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/job"
                  },
                  {
                    "properties": {
                      "stage": {
                        "default": "test",
                        "description": "The name of the build stage",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "matrix": {
          "additionalProperties": false,
          "properties": {
            "allow_failures": {
              "items": {
                "$ref": "#/definitions/job"
              },
              "type": "array"
            },
            "exclude": {
              "items": {
                "$ref": "#/definitions/job"
              },
              "type": "array"
            },
            "fast_finish": {
              "description": "If some rows in the build matrix are allowed to fail, the build won’t be marked as finished until they have completed. To mark the build as finished as soon as possible, add fast_finish: true",
              "type": "boolean"
            },
            "include": {
              "items": {
                "$ref": "#/definitions/job"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "notifications": {
          "additionalProperties": false,
          "properties": {
            "campfire": {
              "oneOf": [
                {
                  "$ref": "#/definitions/possiblySecretStringOrPossiblySecretStringTypeArrayUnique"
                },
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/definitions/notificationObject/campfire"
                },
                {
                  "items": {
                    "$ref": "#/definitions/notificationObject/campfire"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              ]
            },
            "email": {
              "oneOf": [
                {
                  "$ref": "#/definitions/possiblySecretStringOrPossiblySecretStringTypeArrayUnique"
                },
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/definitions/notificationObject/email"
                },
                {
                  "items": {
                    "$ref": "#/definitions/notificationObject/email"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              ]
            },
            "flowdock": {
              "oneOf": [
                {
                  "$ref": "#/definitions/possiblySecretString"
                },
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/definitions/notificationObject/flowdock"
                },
                {
                  "items": {
                    "$ref": "#/definitions/notificationObject/flowdock"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              ]
            },
            "hipchat": {
              "oneOf": [
                {
                  "$ref": "#/definitions/possiblySecretStringOrPossiblySecretStringTypeArrayUnique"
                },
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/definitions/notificationObject/hipchat"
                },
                {
                  "items": {
                    "$ref": "#/definitions/notificationObject/hipchat"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              ]
            },
            "irc": {
              "oneOf": [
                {
                  "$ref": "#/definitions/possiblySecretStringOrPossiblySecretStringTypeArrayUnique"
                },
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/definitions/notificationObject/irc"
                },
                {
                  "items": {
                    "$ref": "#/definitions/notificationObject/irc"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              ]
            },
            "pushover": {
              "oneOf": [
                {
                  "$ref": "#/definitions/nonEmptyStringOrArrayOfNonEmptyStrings"
                },
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/definitions/notificationObject/pushover"
                },
                {
                  "items": {
                    "$ref": "#/definitions/notificationObject/pushover"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              ]
            },
            "slack": {
              "oneOf": [
                {
                  "$ref": "#/definitions/slackRoom"
                },
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/definitions/notificationObject/slack"
                },
                {
                  "items": {
                    "$ref": "#/definitions/notificationObject/slack"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              ]
            },
            "webhooks": {
              "oneOf": [
                {
                  "$ref": "#/definitions/possiblySecretStringOrPossiblySecretStringTypeArrayUnique"
                },
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/definitions/notificationObject/webhooks"
                },
                {
                  "items": {
                    "$ref": "#/definitions/notificationObject/webhooks"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              ]
            }
          },
          "type": "object"
        },
        "stages": {
          "description": "Specifies the order of build stages",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "if": {
                    "description": "Specifies a condition for the stage",
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          },
          "type": "array"
        },
        "version": {
          "description": "Build config specification version",
          "pattern": "^(~>|>|>=|=|<=|<) (\\d+(?:\\.\\d+)?(?:\\.\\d+)?)$",
          "type": "string"
        }
      },
      "type": "object"
    }
  ],
  "definitions": {
    "arrayOfNonEmptyStrings": {
      "items": {
        "$ref": "#/definitions/nonEmptyString"
      },
      "type": "array"
    },
    "cache": {
      "enum": [
        "apt",
        "bundler",
        "cargo",
        "ccache",
        "cocoapods",
        "packages",
        "pip",
        "yarn",
        "npm"
      ]
    },
    "deployment": {
      "allOf": [
        {
          "properties": {
            "on": {
              "properties": {
                "all_branches": {
                  "type": "boolean"
                },
                "branch": {
                  "type": "string"
                },
                "condition": {
                  "description": "if [[ <condition> ]]; then <deploy>; fi",
                  "type": "string"
                },
                "repo": {
                  "type": "string"
                },
                "skip_cleanup": {
                  "description": "After your tests ran and before the release, Travis CI will clean up any additional files and changes you made. Maybe that is not what you want, as you might generate some artifacts that are supposed to be released, too.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Tell Travis CI to only deploy on tagged commits",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        {
          "oneOf": [
            {
              "properties": {
                "provider": {
                  "enum": ["script"]
                },
                "script": {
                  "type": "string"
                }
              },
              "required": ["provider", "script"],
              "type": "object"
            },
            {
              "oneOf": [
                {
                  "required": ["provider", "email", "api_key"]
                },
                {
                  "required": ["provider", "email", "api_token"]
                }
              ],
              "properties": {
                "api_key": {
                  "$ref": "#/definitions/possiblySecretString"
                },
                "api_token": {
                  "$ref": "#/definitions/possiblySecretString"
                },
                "email": {
                  "$ref": "#/definitions/possiblySecretString"
                },
                "provider": {
                  "enum": ["npm"]
                },
                "tag": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            {
              "properties": {
                "domain": {
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "provider": {
                  "enum": ["surge"]
                }
              },
              "required": ["provider"],
              "type": "object"
            },
            {
              "properties": {
                "api_key": {
                  "$ref": "#/definitions/possiblySecretString"
                },
                "file": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ]
                },
                "file_glob": {
                  "type": "boolean"
                },
                "overwrite": {
                  "description": "If you need to overwrite existing files",
                  "type": "boolean"
                },
                "password": {
                  "$ref": "#/definitions/possiblySecretString"
                },
                "provider": {
                  "enum": ["releases"]
                },
                "user": {
                  "$ref": "#/definitions/possiblySecretString"
                }
              },
              "required": ["provider"],
              "type": "object"
            },
            {
              "description": "deploy to heroku, to see https://docs.travis-ci.com/user/deployment/heroku/",
              "properties": {
                "api_key": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/possiblySecretString"
                    },
                    {
                      "additionalProperties": {
                        "$ref": "#/definitions/possiblySecretString"
                      },
                      "type": "object"
                    }
                  ],
                  "description": "heroku auth token"
                },
                "app": {
                  "oneOf": [
                    {
                      "description": "Deploy master branch to heroku app",
                      "type": "string"
                    },
                    {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Deploy the different branch to the different heroku app",
                      "type": "object"
                    }
                  ]
                },
                "provider": {
                  "enum": ["heroku"]
                },
                "run": {
                  "description": "to run a command on Heroku after a successful deploy",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ]
                },
                "skip_cleanup": {
                  "description": "Travis CI default will clean up any additional files and changes you made, you can by it to skip the clean up",
                  "type": "boolean"
                },
                "strategy": {
                  "description": "Travis CI supports different mechanisms for deploying to Heroku: api is default",
                  "enum": ["api", "git"]
                }
              },
              "required": ["provider", "api_key"],
              "type": "object"
            },
            {
              "properties": {
                "access_key_id": {
                  "$ref": "#/definitions/possiblySecretString"
                },
                "acl": {
                  "enum": [
                    "private",
                    "public_read",
                    "public_read_write",
                    "authenticated_read",
                    "bucket_owner_read",
                    "bucket_owner_full_control"
                  ]
                },
                "bucket": {
                  "type": "string"
                },
                "cache_control": {
                  "type": "string"
                },
                "default_text_charset": {
                  "type": "string"
                },
                "detect_encoding": {
                  "default": false,
                  "type": "boolean"
                },
                "endpoint": {
                  "type": "string"
                },
                "expires": {
                  "type": "string"
                },
                "local_dir": {
                  "type": "string"
                },
                "provider": {
                  "enum": ["s3"]
                },
                "region": {
                  "type": "string"
                },
                "secret_access_key": {
                  "$ref": "#/definitions/possiblySecretString"
                },
                "skip_cleanup": {
                  "default": false,
                  "type": "boolean"
                },
                "upload-dir": {
                  "type": "string"
                }
              },
              "required": [
                "provider",
                "access_key_id",
                "secret_access_key",
                "bucket"
              ],
              "type": "object"
            },
            {
              "properties": {
                "provider": {
                  "not": {
                    "enum": [
                      "script",
                      "npm",
                      "surge",
                      "releases",
                      "heroku",
                      "s3"
                    ]
                  },
                  "type": "string"
                }
              },
              "required": ["provider"],
              "type": "object"
            }
          ]
        }
      ]
    },
    "envVar": {
      "oneOf": [
        {
          "pattern": "[^=]+=.*",
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "secure": {
              "pattern": "[^=]+=.*",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "envVars": {
      "oneOf": [
        {
          "$ref": "#/definitions/envVar"
        },
        {
          "items": {
            "$ref": "#/definitions/envVar"
          },
          "type": "array"
        }
      ]
    },
    "import": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "if": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Specifies a condition for the import"
            },
            "mode": {
              "description": "How to merge the imported config into the target config (defaults to deep_merge_append)",
              "enum": [
                "merge",
                "deep_merge",
                "deep_merge_append",
                "deep_merge_prepend"
              ],
              "type": "string"
            },
            "source": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "The source to import build config from"
            }
          },
          "required": ["source"],
          "type": "object"
        },
        {
          "$ref": "#/definitions/nonEmptyString"
        }
      ]
    },
    "job": {
      "properties": {
        "addons": {
          "additionalProperties": false,
          "properties": {
            "apt": {
              "additionalProperties": false,
              "description": "To install packages not included in the default container-based-infrastructure you need to use the APT addon, as sudo apt-get is not available",
              "properties": {
                "packages": {
                  "description": "To install packages from the package whitelist before your custom build steps",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "sources": {
                  "items": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "key_url": {
                            "description": "When APT sources require GPG keys, you can specify this with key_url",
                            "type": "string"
                          },
                          "sourceline": {
                            "description": "Key-value pairs which will be added to /etc/apt/sources.list",
                            "type": "string"
                          }
                        },
                        "required": ["sourceline"],
                        "type": "object"
                      },
                      {
                        "description": "Alias defined in source whitelist",
                        "type": "string"
                      }
                    ]
                  },
                  "type": "array"
                },
                "update": {
                  "description": "To update the list of available packages",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "artifacts": {
              "oneOf": [
                {
                  "enum": [true]
                },
                {
                  "properties": {
                    "debug": {
                      "description": "If you’d like to see more detail about what the artifacts addon is doing",
                      "type": "boolean"
                    },
                    "paths": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "s3_region": {
                      "type": "string"
                    },
                    "working_dir": {
                      "description": "If you’d like to upload file from a specific directory, you can change your working directory ",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "browserstack": {
              "description": "BrowserStack addon",
              "properties": {
                "access_key": {
                  "$ref": "#/definitions/possiblySecretString"
                },
                "app_path": {
                  "$ref": "#/definitions/nonEmptyString"
                },
                "forcelocal": {
                  "type": "boolean"
                },
                "only": {
                  "$ref": "#/definitions/nonEmptyString"
                },
                "proxyHost": {
                  "$ref": "#/definitions/nonEmptyString"
                },
                "proxyPass": {
                  "$ref": "#/definitions/nonEmptyString"
                },
                "proxyPort": {
                  "$ref": "#/definitions/nonEmptyString"
                },
                "proxyUser": {
                  "$ref": "#/definitions/nonEmptyString"
                },
                "username": {
                  "$ref": "#/definitions/nonEmptyString"
                }
              },
              "type": "object"
            },
            "chrome": {
              "description": "Chrome addon",
              "enum": ["stable", "beta"],
              "type": "string"
            },
            "coverity_scan": {
              "description": "Coverity Scan addon",
              "properties": {
                "branch_pattern": {
                  "description": "Pattern to match selecting branches that will run analysis. We recommend leaving this set to 'coverity_scan'",
                  "type": "string"
                },
                "build_command": {
                  "description": "The command that will be added as an argument to 'cov-build' to compile your project for analysis",
                  "type": "string"
                },
                "build_command_prepend": {
                  "description": "Commands to prepare for build_command",
                  "type": "string"
                },
                "notification_email": {
                  "description": "Where email notification of build analysis results will be sent",
                  "type": "string"
                },
                "project": {
                  "description": "GitHub project metadata",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "version": {
                      "type": "number"
                    }
                  },
                  "required": ["name"],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "firefox": {
              "anyOf": [
                {
                  "enum": [
                    "latest",
                    "latest-esr",
                    "latest-beta",
                    "latest-dev",
                    "latest-nightly",
                    "latest-unsigned"
                  ],
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/nonEmptyString"
                }
              ],
              "description": "Firefox addon"
            },
            "homebrew": {
              "additionalProperties": false,
              "description": "Homebrew addon",
              "properties": {
                "brewfile": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/nonEmptyString"
                    },
                    {
                      "default": true,
                      "type": "boolean"
                    }
                  ]
                },
                "casks": {
                  "$ref": "#/definitions/stringOrStringArrayUnique"
                },
                "packages": {
                  "$ref": "#/definitions/stringOrStringArrayUnique"
                },
                "taps": {
                  "$ref": "#/definitions/stringOrStringArrayUnique"
                },
                "update": {
                  "default": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "hosts": {
              "description": "If your build requires setting up custom hostnames, you can specify a single host or a list of them. Travis CI will automatically setup the hostnames in /etc/hosts for both IPv4 and IPv6.",
              "oneOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "string"
                }
              ]
            },
            "mariadb": {
              "description": "MariaDB addon",
              "type": "string"
            },
            "postgresql": {
              "description": "PostgreSQL addon",
              "type": "string"
            },
            "rethinkdb": {
              "description": "RethinkDB addon",
              "type": "string"
            },
            "sauce_connect": {
              "description": "Sauce Connect addon",
              "oneOf": [
                {
                  "properties": {
                    "access_key": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "snaps": {
              "description": "Snaps addon",
              "oneOf": [
                {
                  "$ref": "#/definitions/nonEmptyString"
                },
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/nonEmptyString"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "channel": {
                            "$ref": "#/definitions/nonEmptyString"
                          },
                          "classic": {
                            "description": "'classic:' is deprecated, use 'confinement:'",
                            "type": "boolean"
                          },
                          "confinement": {
                            "enum": ["classic", "devmode"]
                          },
                          "name": {
                            "$ref": "#/definitions/nonEmptyString"
                          }
                        },
                        "required": ["name"],
                        "type": "object"
                      }
                    ]
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              ]
            },
            "sonarcloud": {
              "description": "SonarCloud addon",
              "properties": {
                "organization": {
                  "type": "string"
                },
                "token": {
                  "$ref": "#/definitions/secretString"
                }
              },
              "type": "object"
            },
            "srcclr": {
              "description": "SourceClear addon",
              "oneOf": [
                {
                  "default": true,
                  "type": "boolean"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "debug": {
                      "default": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "ssh_known_hosts": {
              "$ref": "#/definitions/stringOrStringArrayUnique",
              "description": "Travis CI can add entries to ~/.ssh/known_hosts prior to cloning your git repository, which is necessary if there are git submodules from domains other than github.com, gist.github.com, or ssh.github.com."
            }
          },
          "type": "object"
        },
        "after_deploy": {
          "$ref": "#/definitions/step"
        },
        "after_failure": {
          "$ref": "#/definitions/step"
        },
        "after_script": {
          "$ref": "#/definitions/step"
        },
        "after_success": {
          "$ref": "#/definitions/step"
        },
        "android": {
          "additionalProperties": false,
          "properties": {
            "components": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "licenses": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "apt_packages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "arch": {
          "description": "The CPU Architecture to run the job on",
          "oneOf": [
            {
              "enum": [
                "amd64",
                "x86_64",
                "arm64",
                "ppc64le",
                "s390x",
                "arm64-graviton2"
              ]
            },
            {
              "items": {
                "enum": [
                  "amd64",
                  "arm64",
                  "ppc64le",
                  "s390x",
                  "arm64-graviton2"
                ]
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true
            }
          ]
        },
        "before_cache": {
          "$ref": "#/definitions/step"
        },
        "before_deploy": {
          "$ref": "#/definitions/step"
        },
        "before_install": {
          "$ref": "#/definitions/step"
        },
        "before_script": {
          "$ref": "#/definitions/step"
        },
        "bioc_packages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "branches": {
          "additionalProperties": false,
          "description": "Specify which branches to build",
          "properties": {
            "except": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "only": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "brew_packages": {
          "description": "A list of packages to install via brew. This option is ignored on non-OS X builds.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "bundler_args": {
          "type": "string"
        },
        "cache": {
          "oneOf": [
            {
              "enum": [false]
            },
            {
              "$ref": "#/definitions/cache"
            },
            {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cache"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "directories": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "type": "array"
            },
            {
              "additionalProperties": false,
              "properties": {
                "apt": {
                  "type": "boolean"
                },
                "bundler": {
                  "type": "boolean"
                },
                "cargo": {
                  "type": "boolean"
                },
                "ccache": {
                  "type": "boolean"
                },
                "cocoapods": {
                  "type": "boolean"
                },
                "directories": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "npm": {
                  "type": "boolean"
                },
                "packages": {
                  "type": "boolean"
                },
                "pip": {
                  "type": "boolean"
                },
                "timeout": {
                  "default": 1800,
                  "description": "Upload timeout in seconds",
                  "type": "number"
                },
                "yarn": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          ]
        },
        "compiler": {
          "oneOf": [
            {
              "items": {
                "enum": ["clang", "gcc"]
              },
              "type": "array"
            },
            {
              "enum": ["clang", "gcc"]
            }
          ]
        },
        "cran": {
          "description": "CRAN mirror to use for fetching packages",
          "type": "string"
        },
        "crystal": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "d": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dart": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dart_task": {
          "items": {
            "properties": {
              "dartanalyzer": {
                "type": "boolean"
              },
              "dartfmt": {
                "type": "boolean"
              },
              "install_dartium": {
                "type": "boolean"
              },
              "test": {
                "type": "string"
              },
              "xvfb": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "deploy": {
          "oneOf": [
            {
              "items": {
                "$ref": "#/definitions/deployment"
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/deployment"
            }
          ]
        },
        "dist": {
          "description": "The Ubuntu distribution to use",
          "enum": ["precise", "trusty", "xenial", "bionic", "focal", "jammy"]
        },
        "elixir": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ]
        },
        "elm": {
          "$ref": "#/definitions/stringOrStringArrayUnique"
        },
        "elm-format": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "elm-test": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "env": {
          "oneOf": [
            {
              "$ref": "#/definitions/envVars"
            },
            {
              "additionalProperties": false,
              "properties": {
                "global": {
                  "$ref": "#/definitions/envVars"
                },
                "jobs": {
                  "$ref": "#/definitions/envVars"
                },
                "matrix": {
                  "$ref": "#/definitions/envVars"
                }
              },
              "type": "object"
            }
          ]
        },
        "erlang": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ]
        },
        "gemfile": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "ghc": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "git": {
          "additionalProperties": false,
          "properties": {
            "autocrlf": {
              "description": "Specify handling of line endings when cloning repository",
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "enum": ["input"],
                  "type": "string"
                }
              ]
            },
            "clone": {
              "description": "In some work flows, like build stages, it might be beneficial to skip the automatic git clone step.",
              "type": "boolean"
            },
            "depth": {
              "oneOf": [
                {
                  "default": 50,
                  "description": "Set the git clone depth",
                  "type": "integer"
                },
                {
                  "enum": [false]
                }
              ]
            },
            "lfs_skip_smudge": {
              "description": "Skip fetching the git-lfs files during the initial git clone (equivalent to git lfs smudge --skip),",
              "type": "boolean"
            },
            "quiet": {
              "description": "Travis CI clones repositories without the quiet flag (-q) by default. Enabling the quiet flag can be useful if you’re trying to avoid log file size limits or even if you just don’t need to include it.",
              "type": "boolean"
            },
            "sparse_checkout": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Is a path to the existing file in the current repository with data you’d like to put into $GIT_DIR/info/sparse-checkout file of format described in Git documentation."
            },
            "submodules": {
              "description": "Control whether submodules should be cloned",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "go": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ]
        },
        "haxe": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hxml": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "install": {
          "$ref": "#/definitions/step"
        },
        "jdk": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "julia": {
          "$ref": "#/definitions/stringOrNumberOrAcceptBothTypeAsArrayUnique"
        },
        "language": {
          "enum": [
            "android",
            "bash",
            "c",
            "c++",
            "clojure",
            "cpp",
            "crystal",
            "csharp",
            "d",
            "dart",
            "dartlang",
            "elixir",
            "elm",
            "erlang",
            "generic",
            "go",
            "golang",
            "groovy",
            "haskell",
            "haxe",
            "java",
            "javascript",
            "julia",
            "jvm",
            "matlab",
            "minimal",
            "nix",
            "node",
            "node.js",
            "node_js",
            "nodejs",
            "obj-c",
            "obj_c",
            "objective-c",
            "objective_c",
            "perl",
            "perl6",
            "php",
            "python",
            "r",
            "ruby",
            "rust",
            "scala",
            "sh",
            "shell",
            "smalltalk"
          ]
        },
        "lein": {
          "type": "string"
        },
        "matlab": {
          "$ref": "#/definitions/stringOrStringArrayUnique"
        },
        "mono": {
          "oneOf": [
            {
              "enum": ["none"]
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "neko": {
          "type": "string"
        },
        "node_js": {
          "$ref": "#/definitions/stringOrNumberOrAcceptBothTypeAsArrayUnique"
        },
        "opt_release": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ]
        },
        "os": {
          "description": "The operating system to run the job on",
          "oneOf": [
            {
              "enum": ["osx", "linux", "windows"]
            },
            {
              "items": {
                "enum": ["osx", "linux", "windows"]
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true
            }
          ]
        },
        "osx_image": {
          "default": "xcode9.4",
          "oneOf": [
            {
              "$ref": "#/definitions/xcodeVersions"
            },
            {
              "items": {
                "$ref": "#/definitions/xcodeVersions"
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true
            }
          ]
        },
        "pandoc_version": {
          "type": "string"
        },
        "perl": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "perl6": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "php": {
          "$ref": "#/definitions/stringOrNumberOrAcceptBothTypeAsArrayUnique"
        },
        "podfile": {
          "description": "By default, Travis CI will assume that your Podfile is in the root of the repository. If this is not the case, you can specify where the Podfile is",
          "type": "string"
        },
        "python": {
          "$ref": "#/definitions/stringOrNumberOrAcceptBothTypeAsArrayUnique"
        },
        "r": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ]
        },
        "r_binary_packages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "r_github_packages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "r_packages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "repos": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Dictionary of repositories to pass to options(repos)",
          "type": "object"
        },
        "rust": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        "rvm": {
          "$ref": "#/definitions/stringOrNumberOrAcceptBothTypeAsArrayUnique"
        },
        "sbt_args": {
          "type": "string"
        },
        "scala": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "script": {
          "$ref": "#/definitions/step"
        },
        "services": {
          "oneOf": [
            {
              "$ref": "#/definitions/service"
            },
            {
              "items": {
                "$ref": "#/definitions/service"
              },
              "type": "array"
            }
          ]
        },
        "smalltalk": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "solution": {
          "description": "When the optional solution key is present, Travis will run NuGet package restore and build the given solution.",
          "type": "string"
        },
        "sudo": {
          "description": "sudo is deprecated",
          "enum": [true, false, "", "required", "enabled"]
        },
        "xcode_project": {
          "type": "string"
        },
        "xcode_scheme": {
          "type": "string"
        },
        "xcode_sdk": {
          "type": "string"
        },
        "xcode_workspace": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "nonEmptyString": {
      "minLength": 1,
      "type": "string"
    },
    "nonEmptyStringOrArrayOfNonEmptyStrings": {
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyString"
        },
        {
          "$ref": "#/definitions/arrayOfNonEmptyStrings"
        }
      ]
    },
    "notRequiredNonEmptyString": {
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyString"
        },
        {
          "type": "null"
        }
      ]
    },
    "notRequiredNonEmptyStringOrArrayOfNonEmptyStrings": {
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringOrArrayOfNonEmptyStrings"
        },
        {
          "type": "null"
        }
      ]
    },
    "notificationFrequency": {
      "enum": ["always", "never", "change"]
    },
    "notificationObject": {
      "campfire": {
        "additionalProperties": false,
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "on_cancel": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_error": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_failure": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_start": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "never"
          },
          "on_success": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "rooms": {
            "$ref": "#/definitions/possiblySecretStringOrPossiblySecretStringTypeArrayUnique"
          },
          "template": {
            "$ref": "#/definitions/nonEmptyStringOrArrayOfNonEmptyStrings"
          }
        },
        "type": "object"
      },
      "email": {
        "additionalProperties": false,
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "on_cancel": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_error": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_failure": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_start": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "never"
          },
          "on_success": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "change"
          },
          "recipients": {
            "$ref": "#/definitions/possiblySecretStringOrPossiblySecretStringTypeArrayUnique"
          }
        },
        "type": "object"
      },
      "flowdock": {
        "additionalProperties": false,
        "properties": {
          "api_token": {
            "$ref": "#/definitions/nonEmptyString"
          },
          "disabled": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "on_cancel": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_error": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_failure": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_start": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "never"
          },
          "on_success": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          }
        },
        "type": "object"
      },
      "hipchat": {
        "additionalProperties": false,
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "format": {
            "enum": ["html", "text"]
          },
          "notify": {
            "type": "boolean"
          },
          "on_cancel": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_error": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_failure": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_pull_requests": {
            "type": "boolean"
          },
          "on_start": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "never"
          },
          "on_success": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "rooms": {
            "$ref": "#/definitions/possiblySecretStringOrPossiblySecretStringTypeArrayUnique"
          },
          "template": {
            "$ref": "#/definitions/nonEmptyStringOrArrayOfNonEmptyStrings"
          }
        },
        "type": "object"
      },
      "irc": {
        "additionalProperties": false,
        "properties": {
          "channel_key": {
            "$ref": "#/definitions/possiblySecretString"
          },
          "channels": {
            "$ref": "#/definitions/possiblySecretStringOrPossiblySecretStringTypeArrayUnique"
          },
          "disabled": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "nick": {
            "$ref": "#/definitions/nonEmptyString"
          },
          "on_cancel": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_error": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_failure": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_start": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "never"
          },
          "on_success": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "password": {
            "$ref": "#/definitions/possiblySecretString"
          },
          "skip_join": {
            "type": "boolean"
          },
          "template": {
            "$ref": "#/definitions/notRequiredNonEmptyStringOrArrayOfNonEmptyStrings"
          },
          "use_notice": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "pushover": {
        "additionalProperties": false,
        "properties": {
          "api_key": {
            "$ref": "#/definitions/possiblySecretString"
          },
          "disabled": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "on_cancel": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_error": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_failure": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_start": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "never"
          },
          "on_success": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "template": {
            "$ref": "#/definitions/notRequiredNonEmptyStringOrArrayOfNonEmptyStrings"
          },
          "users": {
            "$ref": "#/definitions/possiblySecretStringOrPossiblySecretStringTypeArrayUnique"
          }
        },
        "type": "object"
      },
      "slack": {
        "additionalProperties": false,
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "on_cancel": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_error": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_failure": {
            "$ref": "#/definitions/notificationFrequency"
          },
          "on_pull_requests": {
            "type": "boolean"
          },
          "on_start": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "never"
          },
          "on_success": {
            "$ref": "#/definitions/notificationFrequency"
          },
          "rooms": {
            "items": {
              "$ref": "#/definitions/slackRoom"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "template": {
            "$ref": "#/definitions/notRequiredNonEmptyStringOrArrayOfNonEmptyStrings"
          }
        },
        "type": "object"
      },
      "webhooks": {
        "additionalProperties": false,
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "on_cancel": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_error": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_failure": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "on_start": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "never"
          },
          "on_success": {
            "$ref": "#/definitions/notificationFrequency",
            "default": "always"
          },
          "urls": {
            "oneOf": [
              {
                "format": "uri",
                "type": "string"
              },
              {
                "$ref": "#/definitions/secretString"
              },
              {
                "items": {
                  "oneOf": [
                    {
                      "format": "uri",
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/secretString"
                    }
                  ]
                },
                "minItems": 1,
                "type": "array",
                "uniqueItems": true
              }
            ]
          }
        },
        "type": "object"
      }
    },
    "possiblySecretString": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "secure": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "possiblySecretStringOrPossiblySecretStringTypeArrayUnique": {
      "oneOf": [
        {
          "$ref": "#/definitions/possiblySecretString"
        },
        {
          "items": {
            "$ref": "#/definitions/possiblySecretString"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        }
      ]
    },
    "secretString": {
      "additionalProperties": false,
      "properties": {
        "secure": {
          "$ref": "#/definitions/nonEmptyString"
        }
      },
      "type": "object"
    },
    "service": {
      "enum": [
        "cassandra",
        "couchdb",
        "docker",
        "elasticsearch",
        "mariadb",
        "memcached",
        "mongodb",
        "mysql",
        "neo4j",
        "postgresql",
        "rabbitmq",
        "redis",
        "rethinkdb",
        "riak",
        "xvfb"
      ]
    },
    "slackRoom": {
      "description": "Your account name, token and optional channel",
      "oneOf": [
        {
          "pattern": ".+:.+(#.+)?",
          "type": "string"
        },
        {
          "$ref": "#/definitions/secretString"
        }
      ]
    },
    "step": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "enum": ["skip", "ignore"]
        },
        {
          "type": "string"
        },
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      ]
    },
    "stringArrayUnique": {
      "items": {
        "$ref": "#/definitions/nonEmptyString"
      },
      "minItems": 1,
      "type": "array",
      "uniqueItems": true
    },
    "stringOrNumber": {
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyString"
        },
        {
          "type": "number"
        }
      ]
    },
    "stringOrNumberAndBothAreTypeArrayUnique": {
      "items": {
        "$ref": "#/definitions/stringOrNumber"
      },
      "minItems": 1,
      "type": "array",
      "uniqueItems": true
    },
    "stringOrNumberOrAcceptBothTypeAsArrayUnique": {
      "oneOf": [
        {
          "$ref": "#/definitions/stringOrNumber"
        },
        {
          "$ref": "#/definitions/stringOrNumberAndBothAreTypeArrayUnique"
        }
      ]
    },
    "stringOrStringArrayUnique": {
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyString"
        },
        {
          "$ref": "#/definitions/stringArrayUnique"
        }
      ]
    },
    "xcodeVersions": {
      "enum": [
        "xcode6.4",
        "xcode7.3",
        "xcode8",
        "xcode8.3",
        "xcode9",
        "xcode9.1",
        "xcode9.2",
        "xcode9.3",
        "xcode9.4",
        "xcode10",
        "xcode10.1",
        "xcode10.2",
        "xcode10.3",
        "xcode11",
        "xcode11.1",
        "xcode11.2",
        "xcode11.3",
        "xcode11.4",
        "xcode11.4.1",
        "xcode11.5",
        "xcode11.6",
        "xcode12u",
        "xcode12",
        "xcode12.2",
        "xcode12.3",
        "xcode12.4",
        "xcode12.5",
        "xcode13.1",
        "xcode13.2",
        "xcode13.3",
        "xcode13.4"
      ]
    }
  },
  "title": "JSON schema for Travis CI configuration files"
}
