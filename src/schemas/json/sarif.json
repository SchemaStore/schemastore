{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Static Analysis Results Format (SARIF) Version 1.0 JSON Schema (Draft 0.4)",
  "description": "Static Analysis Results Format (SARIF) Version 1.0 JSON Schema (Draft 0.4). SARIF defines a standard format for the output of static analysis tools.",
  "additionalMembers": false,
  "type": "object",
  "properties": {
    "version": 
    {
      "description": "The SARIF tool format version of this log file. This value should be set to 0.4, currently. This is the third proposed revision of a file format that is not yet completely finalized.",
      "enum": [ "0.4"]
    },

    "runLogs": 
    {
      "description": "The set of runLogs contained in this SARIF log.",
      "type": "array",
      "minItems": 1,
      "items":
      {
        "$ref": "#/definitions/runLog"
      }
    }
  },
  "required": ["version", "runLogs"],
  "definitions":
  {
    "annotatedCodeLocation": 
    {
      "description": "A code annotation that consists of single physical location and associated message, used to express stacks, execution flow through a method, or other locations that are related to a result.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "physicalLocation": 
        {
          "description": "A code location to which this annotation refers.",
          "type": "array",
          "items":
          {
            "$ref": "#/definitions/physicalLocationComponent"
          }
        },

        "message": 
        {
          "description": "A message associated with this annotation, if applicable.",
          "type": "string"
        }
      },
      "required": ["physicalLocation"]
    },
    "fileChange": 
    {
      "description": "A change to a single file.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "uri": 
        {
          "description": "A string that represents the location of the file to change as a valid URI.",
          "type": "string",
          "format": "uri"
        },

        "replacements": 
        {
          "description": "An array of replacement objects, each of which represents the replacement of a single range of bytes in a single file specified by the uri property.",
          "type": "array",
          "minItems": 1,
          "items":
          {
            "$ref": "#/definitions/replacement"
          }
        }
      },
      "required": ["uri", "replacements"]
    },
    "fileReference": 
    {
      "description": "A fileReference object represents a single file",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "uri": 
        {
          "description": "The location of the file as a valid URI",
          "type": "string",
          "format": "uri"
        },

        "hashes": 
        {
          "description": "An optional array of hash objects, each of which specifies a hashed value for the file specified by the uri property, along with the name of the algorithm used to compute the hash.",
          "type": "array",
          "minItems": 1,
          "items":
          {
            "$ref": "#/definitions/hash"
          }
        }
      },
      "required": ["uri"]
    },
    "fix": 
    {
      "description": "A proposed fix an a code defect represented by a result object. A fix specifies a set of file to modify. For each file, the fix specifies a set of bytes to remove and provides a set of new bytes to replace them.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "description": 
        {
          "description": "A string that describes the proposed fix, enabling viewers to present a proposed change to an end user.",
          "type": "string"
        },

        "fileChanges": 
        {
          "description": "A message associated with this annotation, if applicable.",
          "type": "array",
          "items":
          {
            "$ref": "#/definitions/fileChange"
          }
        }
      },
      "required": ["description", "fileChanges"]
    },
    "formattedMessage": 
    {
      "description": "A formatted message object encapsulates information that can be used to construct a fully formatted message that describes an issue.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "specifierId": 
        {
          "description": "A string that identifies the format string used to format the message that describes this result. The value of specifierId must correspond to one of the names in the set of name/value pairs contained in the format specifiers property of the rule info object whose id property matches the rule id property of this issue.",
          "type": "string"
        },

        "arguments": 
        {
          "description": "An array of string values that will be used, in combination with a format specifier, to construct a result message.",
          "type": "array",
          "items":
          {
            "type": "string"
          }
        }
      },
      "required": ["specifierId", "arguments"]
    },
    "hash": 
    {
      "description": "A hash value of some file or collection of files, together with the algorithm used to compute the hash.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "value": 
        {
          "description": "The hash value of some file or collection of files, computed by the algorithm named in the algorithm property.",
          "type": "string"
        },

        "algorithm": 
        {
          "description": "A string specifying the name of the algorithm used to compute the hash value specified in the value property. This shall be one of the following: BLAKE-256, BLAKE-512, ECOH, FSB, GOST, Groestl, HAS-160, HAVAL, JH, MD2, MD4, MD5, MD6, RadioGatun, RIPEMD, RIPEMD-128, RIPEMD-160, RIPEMD-320, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA-3, Skein, Snefru, Spectral Hash, SWIFFT, Tiger, Whirlpool.",
          "enum": [ "BLAKE-256","BLAKE-512","ECOH","FSB","GOST","Groestl","HAS-160","HAVAL","JH","MD2","MD4","MD5","MD6","RadioGatun","RIPEMD","RIPEMD-128","RIPEMD-160","RIPEMD-320","SHA-1","SHA-224","SHA-256","SHA-384","SHA-512","SHA-3","Skein","Snefru","Spectral Hash","SWIFFT","Tiger","Whirlpool"]
        }
      },
      "required": ["value", "algorithm"]
    },
    "location": 
    {
      "description": "Specifies a location within a file, or within an object nested within a file (such as a location within an assembly contained in an appx file).",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "analysisTarget": 
        {
          "description": "A source file that is associated with the item that the static analysis tool scanned. This may be a .dll in the case of a binary analysis tool like FxCop, or a C++ file in the case of a source analysis tool like PREfast. Note that the defect may not actually occur in this file.",
          "type": "array",
          "items":
          {
            "$ref": "#/definitions/physicalLocationComponent"
          }
        },

        "resultFile": 
        {
          "description": "A source file that is associated with the current result if and only if that is not the same as the analysis target. This member will populated or not, in many cases, depending on whether PDBs associated with the analysis target are available. Examples include a C# file in the FxCop-like binary analysis case, or possibly a .H C++ file in the case of a source analysis tool like PREfast.",
          "type": "array",
          "items":
          {
            "$ref": "#/definitions/physicalLocationComponent"
          }
        },

        "logicalLocation": 
        {
          "description": "An object that specifies the logical location for which a result is produced.",
          "type": "array",
          "items":
          {
            "$ref": "#/definitions/logicalLocationComponent"
          }
        },

        "fullyQualifiedLogicalName": 
        {
          "description": "A string containing the language-specific logical name of the location where the result occurs; e.g. C: Foo C++: Namespace::Class::MemberFunction(int, double) const&& C++: Namespace::NonmemberFunction(int, double) C#: SecurityCryptographyRuleTests.DESCannotBeUsed.EncryptData(System.String,System.String,System.Byte[],System.Byte[])",
          "type": "string"
        },

        "properties": 
        {
          "description": "Key/value pairs that provide additional information about this location. This might be used to annotate specific stack frames or points in code with additional information, such as assumed values of variables at that point of execution, etc.",
          "type": "object",
          "default": {}
        }
      }
    },
    "logicalLocationComponent": 
    {
      "description": "One level (e.g. namespace, function, etc.) of a logical location tree.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "name": 
        {
          "description": "Name of the item specified by this location component.",
          "type": "string"
        },

        "kind": 
        {
          "description": "The type of item this location refers to.",
          "type": "string"
        }
      },
      "required": ["name"]
    },
    "physicalLocationComponent": 
    {
      "description": "A part of a location that refers to a file.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "uri": 
        {
          "description": "Uri to the file specified by this location.",
          "type": "string",
          "format": "uri"
        },

        "mimeType": 
        {
          "description": "The MIME content type (RFC 2045) of the item referred to by this location.",
          "type": "string",
          "pattern": "[^/]+/.+"
        },

        "region": 
        {
          "description": "The specific region within the analysis where the result was detected. This SHOULD only be set on the last physicalLocationComponent in a physicalLocation most of the time. (There are some exceptions e.g. an embedded .SWF in an Office 2003 format ppt)",
          "$ref": "#/definitions/region"
        }
      },
      "required": ["uri"]
    },
    "region": 
    {
      "description": "Specifies a region within a file where a result was detected.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "startLine": 
        {
          "description": "The starting line location associated with a region in the text file.",
          "type": "integer",
          "minimum": 1
        },

        "startColumn": 
        {
          "description": "The starting column location associated with a region in the text file.",
          "type": "integer",
          "minimum": 1
        },

        "endLine": 
        {
          "description": "The ending line location associated with a region in the text file.",
          "type": "integer",
          "minimum": 1
        },

        "endColumn": 
        {
          "description": "The ending column location associated with a region in the text file.",
          "type": "integer",
          "minimum": 1
        },

        "offset": 
        {
          "description": "The zero-based offset into the file.",
          "type": "integer",
          "minimum": 0
        },

        "length": 
        {
          "description": "The length of the region.",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "replacement": 
    {
      "description": "The replacement of a single range of bytes in a file. Each instance specifies the location within the file where the replacement is to be made, the number of bytes to remove at that location, and a sequence of bytes to insert at that location.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "offset": 
        {
          "description": "A non-negative integer specifying the offset in bytes from the beginning of the file at which bytes are to be removed, inserted or both. An offset of 0 shall denote the first byte in the file.",
          "type": "integer",
          "minimum": 0
        },

        "deletedLength": 
        {
          "description": "An optional integer specifying the number of bytes to delete, start at the byte offset specified by the offset property, measured from the beginning of the file.",
          "type": "integer",
          "minimum": 1
        },

        "insertedBytes": 
        {
          "description": "An optional string that specifies the byte sequence to be inserted at the byte offset specified by the offset property, measured from the beginning of the file.",
          "type": "integer"
        }
      },
      "required": ["offset", "deletedLength", "insertedBytes"]
    },
    "result": 
    {
      "description": "Represents one or more observations about an analysis target produced by a static analysis tool.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "ruleId": 
        {
          "description": "An opaque, stable identifier that uniquely identifies the specific rule associated with the result (e.g., CA2001).",
          "type": "string"
        },

        "kind": 
        {
          "description": "A string specifying the kind of observation this result represents. This shall be one of the following: warning, error, pass, pending, note, notApplicable, internalError. If this member is not present, its implied value is 'warning'.",
          "default": "warning",
          "enum": [ "error","warning","pass","note","notApplicable","internalError","configurationError"]
        },

        "fullMessage": 
        {
          "description": "A string that comprehensively describes the result to the users.",
          "type": "string"
        },

        "shortMessage": 
        {
          "description": "A short description that summarizes an issue to the user in one or two lines.",
          "type": "string"
        },

        "formattedMessage": 
        {
          "description": "A formattedMessage object that can be used to construct a fully formatted message that describes the result. If the formatted message property is present on an result, the full message property shall not be present. If the full message property is present on an result, the formatted message property shall not be present",
          "$ref": "#/definitions/formattedMessage"
        },

        "locations": 
        {
          "description": "Specifies one or more peer locations where an issue is located. Note that this is not used to point to multiple instances of the same issue; separate instances should have separate issue objects. For example, a misspelled partial class in C# may list all the source lines on which the partial class is declared as separate top-level locations. However, two independent misspellings of the same word need to be top level issues.",
          "type": "array",
          "minItems": 1,
          "items":
          {
            "$ref": "#/definitions/location"
          }
        },

        "toolFingerprint": 
        {
          "description": "A string that baselining mechanisms can merge with other data to help uniquely identify this issue, run-over-run.",
          "type": "string"
        },

        "stacks": 
        {
          "description": "A grouped set of locations, if available, that represent stacks associated with this result.",
          "type": "array",
          "minItems": 1,
          "items":
          {
            "$ref": "#/definitions/annotatedCodeLocation"
          }
        },

        "executionFlows": 
        {
          "description": "A grouped set of location, if available, that comprise annotated execution flows through code which are associated with this result.",
          "type": "array",
          "minItems": 1,
          "items":
          {
            "type": "array",
            "minItems": 1,
            "items":
            {
              "$ref": "#/definitions/annotatedCodeLocation"
            }
          }
        },

        "relatedLocations": 
        {
          "description": "A grouped set of locations and messages, if available, that represent code areas that are related to this result.",
          "type": "array",
          "minItems": 1,
          "items":
          {
            "$ref": "#/definitions/annotatedCodeLocation"
          }
        },

        "isSuppressedInSource": 
        {
          "description": "A flag that indicates whether or not this result was suppressed in source code.",
          "type": "boolean"
        },

        "fixes": 
        {
          "description": "An array of fix objects, if available, that can be applied in order to correct this result.",
          "type": "array",
          "minItems": 1,
          "items":
          {
            "$ref": "#/definitions/fix"
          }
        },

        "properties": 
        {
          "description": "Key/value pairs that provide additional details about the result.",
          "type": "object",
          "default": {}
        }
      },
      "required": ["ruleId", "fullMessage", "locations"]
    },
    "ruleDescriptor": 
    {
      "description": "An object that contains information about an analysis rule.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "id": 
        {
          "description": "A string that contains a stable, opaque identifier for a rule.",
          "type": "string"
        },

        "name": 
        {
          "description": "An optional string that contains a rule identifier that is understandable to an end user.",
          "type": "string"
        },

        "shortDescription": 
        {
          "description": "A string that contains a concise description of the rule. The short description property should be a single sentence that is understandable when displayed in user interface contexts where the available space is limited to a single line of text.",
          "type": "string"
        },

        "fullDescription": 
        {
          "description": "A string whose value is a string that describes the rule. The fullDescription property should, as far as possible, provide details sufficient to enable resolution of any problem indicated by the result.",
          "type": "string"
        },

        "options": 
        {
          "description": "A dictionary consisting of a set of name/value pairs with arbitrary names. The options objects shall describe the set of configurable options supported by the rule. The value within each name/value pair shall be a string, which may be the empty string. The value shall not be a dictionary or sub-object.",
          "type": "object"
        },

        "formatSpecifiers": 
        {
          "description": "A dictionary consisting of a set of name/value pairs with arbitrary names. The value within each name/value pair shall be a string that can be passed to a string formatting function (e.g., the C language printf function) to construct a formatted message in combination with an arbitrary number of additional function arguments.",
          "type": "object"
        },

        "properties": 
        {
          "description": "A dictionary consisting of a set of name/value pairs with arbitrary names. This allows tools to include information about the rule that is not explicitly specified in the SARIF format. The value within each name/value pair shall be a string, which may be the empty string. The value shall not be a dictionary or sub-object.",
          "type": "object",
          "default": {}
        }
      },
      "required": ["id"]
    },
    "runInfo": 
    {
      "description": "A runInfo object describes the invocation of the static analysis tool that produced the results specified in the containing runLog object. NOTE: The information in the runInfo object makes it possible to precisely repeat a run of a static analysis tool, and to verify that the results reported in the log file were generated by an appropriate invocation of the tool.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "invocationInfo": 
        {
          "description": "A string that describes any parameterization for the tool invocation. For command line tools this string may consist of the completely specified command line used to invoke the tool.",
          "type": "string"
        },

        "analysisTargets": 
        {
          "description": "An array, each of whose elements is a fileReference object representing the location of a single analysis target scanned during the run. When present, this array shall contain one entry fo reach analysis target that was scanned, even if the analysis targets were not individually specified on the command line. NOTE 1: The command line with which the tool was invoked might specify its input files by means of a wild card such as *.cc, or it might specify them implicitly, for example, by scanning the files in the current directory. The analysisTargets array shall be empty if no analysis targets were scanned in the course of the run. NOTE 2: This could happen if the command line specified a wildcard such as *.cc for the input files, and no files matched the wildcard.",
          "type": "array",
          "minItems": 0,
          "items":
          {
            "$ref": "#/definitions/fileReference"
          }
        }
      }
    },
    "runLog": 
    {
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "toolInfo": 
        {
          "description": "Information about the tool or tool pipeline that generated the results in this log. A results log can only contain results produced by a single tool or tool pipeline. A results log can aggregate results from multiple tool log files, as long as context around the tool run (tool command-line arguments and the like) is identical for all aggregated files.",
          "$ref": "#/definitions/toolInfo"
        },

        "runInfo": 
        {
          "description": "A runInfo object describes the invocation of the static analysis tool that produced the results specified in the containing runLog object.",
          "$ref": "#/definitions/runInfo"
        },

        "results": 
        {
          "description": "The set of results contained in an SARIF log.",
          "type": "array",
          "minItems": 0,
          "items":
          {
            "$ref": "#/definitions/result"
          }
        }
      },
      "required": ["toolInfo", "results"]
    },
    "toolInfo": 
    {
      "description": "Information about the tool or tool pipeline that generated the results in this log.",
      "additionalMembers": false,
      "type": "object",
      "properties": {
        "name": 
        {
          "description": "The name of the tool or tool pipeline that generated the results in this log, e.g., FxCop.",
          "type": "string"
        },

        "fullName": 
        {
          "description": "The name of the tool along with its version and any other useful identifying information, such as its locale, e.g., 'CodeScanner 2.0, Developer Preview (en-US)'.",
          "type": "string"
        },

        "version": 
        {
          "description": "A version that refers to the tool as a whole (as opposed to, for example, the build version of an individual binary in the tool).",
          "type": "string",
          "pattern": "[0-9]+\\.[0-9]+\\.[0-9]+(-[0-9A-Za-z-]+)?(\\+[0-9A-Za-z-]+)?"
        },

        "fileVersion": 
        {
          "description": "For operating systems (such as Windows) that provide the data, the binary version of the primary tool exe.",
          "type": "string",
          "pattern": "[0-9]+(\\.[0-9]+){3}"
        },

        "ruleInfo": 
        {
          "description": "An array of rule descriptor objects that describe all rules associated with an analysis tool or a specific run of an analysis tool.",
          "type": "array",
          "minItems": 1,
          "items":
          {
            "$ref": "#/definitions/ruleDescriptor"
          }
        }
      },
      "required": ["name"]
    }
  }
}