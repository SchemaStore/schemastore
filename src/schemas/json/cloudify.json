{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Blueprint",
  "type": "object",
  "properties": {
    "tosca_definitions_version": {
      "description": "tosca_definitions_version is a top level property of the blueprint which is used to specify the DSL version used. For Cloudify, the versions that are currently defined are cloudify_dsl_1_0, cloudify_dsl_1_1, cloudify_dsl_1_2 and cloudify_dsl_1_3.",
      "type": "string",
      "enum": [
        "cloudify_dsl_1_0",
        "cloudify_dsl_1_1",
        "cloudify_dsl_1_2",
        "cloudify_dsl_1_3"
      ],
      "default": "cloudify_dsl_1_3"
    },
    "alex": {
      "type":"string"
    },
    "imports": {
      "description": "imports enable the author of a blueprint to reuse blueprint files, or parts of them, and to use predefined types (e.g. from the types.yaml file).",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": "http://www.getcloudify.org/spec/cloudify/4.5/types.yaml"
    },
    "data_types": {
      "$ref": "#/definitions/dataTypes"
    },
    "inputs": {
      "description": "inputs are parameters that are injected into a blueprint when a deployment is created. These parameters can be referenced by using the get_input intrinsic function.",
      "type": "object",
      "properties": {
        "aws_access_key_id": {"$ref": "#/definitions/inputProperty"},
        "aws_secret_access_key": {"$ref": "#/definitions/inputProperty"},
        "aws_region_name":  {"$ref": "#/definitions/inputProperty"},
        "aws_account_id":  {"$ref": "#/definitions/inputProperty"},
        "aws_region_zone1":  {"$ref": "#/definitions/inputProperty"},
        "aws_region_zone2":  {"$ref": "#/definitions/inputProperty"},
        "aws_cloudwatch_log_arn":  {"$ref": "#/definitions/inputProperty"}
      },
      "patternProperties": {
        "": { "$ref": "#/definitions/inputProperty"}
      }
    },
    "dsl_definitions": {
      "type": "object"
    },
    "node_type": {"$ref": "#/definitions/nodeTypes"},
    "node_templates": { "$ref": "#/definitions/nodeTemplates" }
  },
  "definitions": {
    "dataTypes": {
      "description": "To use data_types, the definitions version must be cloudify_dsl_1_2 or higher.",
      "type": "object",
      "patternProperties": {
        "": {
          "$ref": "#/definitions/dataType"
        }
      }
    },
    "dataType": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description for the data type."
        },
        "properties": {
          "type": "object",
          "description": "Dictionary of the data type properties."
        },
        "derived_from": {
          "type": "string",
          "description": "Parent data type."
        }
      },
      "additionalProperties": false
    },
    "inputProperty": {
      "description": "inputs are parameters that are injected into a blueprint when a deployment is created. These parameters can be referenced by using the get_input intrinsic function.",
      "type": "object",
      "properties": {
        "description": {
          "description": "An optional description for the input.",
          "type": "string"
        },
        "type": {
          "description": "The required data type of the input. Not specifying a data type means the type can be anything, including a list, an array or a dictionary. Valid types: string, integer, float, boolean, list, dict, regex or a custom data type.",
          "anyOf": [
            { "type": "string" },
            { "type": "string", "enum": ["string", "integer", "float", "boolean", "list", "dict", "regex"] }
          ]
        },
        "default": {
          "description": "An optional default value for the input.",
          "type": ["number", "string", "array", "boolean", "integer", "object"]
        },
        "constraints": {
          "$ref": "#/definitions/inputPropertyConstraints"
        },
        "required": {
          "description": "a boolean value to indicate whether the input is required must be passed or not.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "inputPropertyConstraints": {
      "description": "The constraints the input value must comply with. Read more details about the format and usage of the constraints in the Constraints section below.",
      "type": "object",
      "properties": {
        "equal": {
          "description": "",
          "type": ["number", "string", "boolean", "integer"]
        },
        "greater_than": {
          "type": ["number", "string", "boolean", "integer"]
        },
        "greater_or_equal": {
          "type": ["number", "string", "boolean", "integer"]
        },
        "less_than": {
          "type": ["number", "string", "boolean", "integer"]
        },
        "less_or_equal": {
          "type": ["number", "string", "boolean", "integer"]
        }
      }
    },
    "nodeTemplates": {
      "type": "object",
      "description": "node_templates represent the actual instances of node types that eventually represent the running application/service, as described in the blueprint. node_templates are more commonly referred to as nodes. Nodes can comprise more than one instance. For example, you might define a node that contains two VMs. Each VM is a node_instance.",
      "patternProperties": {
        "": { 
          "$ref": "#/definitions/nodeTemplate"
        }
      }
    },
    "nodeTemplate" : {
      "type": "object",
      "properties": {
        "type": { 
          "type": "string",
          "description": "The node-type of this node template.",
          "anyOf": [
            { "type": "string" },
            {
              "type": "string", 
              "enum": [
                "cloudify.nodes.Root",
                "cloudify.nodes.Tier",
                "cloudify.nodes.Compute",
                "cloudify.nodes.Container",
                "cloudify.nodes.Network",
                "clouydify.nodes.Subnet",
                "cloudify.nodes.Router",
                "cloudify.nodes.Port",
                "cloudify.nodes.VirtualIP",
                "cloudify.nodes.SecurityGroup",
                "cloudify.nodes.LoadBalancer",
                "cloudify.nodes.Volume",
                "cloudify.nodes.FileSystem",
                "cloudify.nodes.ObjectStorage",
                "cloudify.nodes.SoftwareComponent",
                "cloudify.nodes.WebServer",
                "cloudify.nodes.ApplicationServer",
                "cloudify.nodes.DBMS",
                "cloudify.nodes.MessageBugServer",
                "cloudify.nodes.ApplicationModule",
                "cloudify.nodes.Component",
                "cloudify.nodes.ServiceComponent",
                "cloudify.nodes.SharedResource",
                "cloudify.nodes.aws.dynamodb.Table",
                "cloudify.nodes.aws.iam.Group",
                "cloudify.nodes.aws.iam.AccessKey",
                "cloudify.nodes.aws.iam.LoginProfile",
                "cloudify.nodes.aws.iam.User",
                "cloudify.nodes.aws.iam.Role",
                "cloudify.nodes.aws.iam.RolePolicy",
                "cloudify.nodes.aws.iam.InstanceProfile",
                "cloudify.nodes.aws.iam.Policy",
                "cloudify.nodes.aws.lambda.Function",
                "cloudify.nodes.aws.lambda.Invoke",
                "cloudify.nodes.aws.lambda.Permission",
                "cloudify.nodes.aws.rds.Instance",
                "cloudify.nodes.aws.rds.InstanceReadReplica",
                "cloudify.nodes.aws.rds.SubnetGroup",
                "cloudify.nodes.aws.rds.OptionGroup",
                "cloudify.nodes.aws.rds.Option",
                "cloudify.nodes.aws.rds.ParameterGroup",
                "cloudify.nodes.aws.rds.Parameter",
                "cloudify.nodes.aws.route53.HostedZone",
                "cloudify.nodes.aws.route53.RecordSet",
                "cloudify.nodes.aws.SQS.Queue",
                "cloudify.nodes.aws.SNS.Topic",
                "cloudify.nodes.aws.SNS.Subscription",
                "cloudify.nodes.aws.elb.LoadBalancer",
                "cloudify.nodes.aws.elb.Classic.LoadBalancer",
                "cloudify.nodes.aws.elb.Classic.HealthCheck",
                "cloudify.nodes.aws.elb.Listener",
                "cloudify.nodes.aws.elb.Classic.Listener",
                "cloudify.nodes.aws.elb.Rule",
                "cloudify.nodes.aws.elb.TargetGroup",
                "cloudify.nodes.aws.elb.Classic.Policy",
                "cloudify.nodes.aws.elb.Classic.Policy.Stickiness",
                "cloudify.nodes.aws.s3.BaseBucket",
                "cloudify.nodes.aws.s3.BaseBucketObject",
                "cloudify.nodes.aws.s3.Bucket",
                "cloudify.nodes.aws.s3.BucketPolicy",
                "cloudify.nodes.aws.s3.BucketLifecycleConfiguration",
                "cloudify.nodes.aws.s3.BucketTagging",
                "cloudify.nodes.aws.s3.BucketObject",
                "cloudify.nodes.aws.ec2.BaseType",
                "cloudify.nodes.aws.ec2.Vpc",
                "cloudify.nodes.aws.ec2.VpcPeering",
                "cloudify.nodes.aws.ec2.VpcPeeringRequest",
                "cloudify.nodes.aws.ec2.VpcPeeringAcceptRequest",
                "cloudify.nodes.aws.ec2.VpcPeeringRejectRequest",
                "cloudify.nodes.aws.ec2.Subnet",
                "cloudify.nodes.aws.ec2.SecurityGroup",
                "cloudify.nodes.aws.ec2.SecurityGroupRuleIngress",
                "cloudify.nodes.aws.ec2.SecurityGroupRuleEgress",
                "cloudify.nodes.aws.ec2.NATGateway",
                "cloudify.nodes.aws.ec2.Interface",
                "cloudify.nodes.aws.ec2.Instances",
                "cloudify.nodes.aws.ec2.Keypair",
                "cloudify.nodes.aws.ec2.ElasticIP",
                "cloudify.nodes.aws.ec2.NetworkACL",
                "cloudify.nodes.aws.ec2.NetworkAclEntry",
                "cloudify.nodes.aws.ec2.DHCPOptions",
                "cloudify.nodes.aws.ec2.VPNGateway",
                "cloudify.nodes.aws.ec2.VPNConnection",
                "cloudify.nodes.aws.ec2.VPNConnectionRoute",
                "cloudify.nodes.aws.ec2.CustomerGateway",
                "cloudify.nodes.aws.ec2.InternetGateway",
                "cloudify.nodes.aws.ec2.RouteTable",
                "cloudify.nodes.aws.ec2.Route",
                "cloudify.nodes.aws.ec2.Image",
                "cloudify.nodes.aws.ec2.Tags",
                "cloudify.nodes.aws.ec2.EBSVolume",
                "cloudify.nodes.aws.ec2.EBSAttachment",
                "cloudify.nodes.aws.autoscaling.Group",
                "cloudify.nodes.aws.autoscaling.LaunchConfiguration",
                "cloudify.nodes.aws.autoscaling.Policy",
                "cloudify.nodes.aws.autoscaling.LifecycleHook",
                "cloudify.nodes.aws.autoscaling.NotificationConfiguration",
                "cloudify.nodes.aws.cloudwatch.Alarm",
                "cloudify.nodes.aws.cloudwatch.Rule",
                "cloudify.nodes.aws.cloudwatch.Event",
                "cloudify.nodes.aws.cloudwatch.Target",
                "cloudify.nodes.aws.efs.FileSystem",
                "cloudify.nodes.aws.efs.MountTarget",
                "cloudify.nodes.aws.efs.FileSystemTags",
                "cloudify.nodes.aws.kms.CustomerMasterKey",
                "cloudify.nodes.aws.kms.Alias",
                "cloudify.nodes.aws.kms.Grant",
                "cloudify.nodes.aws.CloudFormation.Stack",
                "cloudify.nodes.aws.ecs.Cluster",
                "cloudify.nodes.aws.ecs.Service",
                "cloudify.nodes.aws.ecs.TaskDefinition",
                "cloudify.nodes.swift.s3.Bucket",
                "cloudify.nodes.swift.s3.BucketObject",
                "cloudify.nodes.aws.eks.Cluster",
                "cloudify.nodes.aws.eks.NodeGroup",
                "cloudify.azure.nodes.storage.StorageAccount",
                "cloudify.azure.nodes.storage.DataDisk",
                "cloudify.azure.nodes.storage.FileShare",
                "cloudify.azure.nodes.network.VirtualNetwork",
                "cloudify.azure.nodes.network.NetworkSecurityGroup",
                "cloudify.azure.nodes.network.NetworkSecurityRule",
                "cloudify.azure.nodes.network.Subnet",
                "cloudify.azure.nodes.network.RouteTable",
                "cloudify.azure.nodes.network.Route",
                "cloudify.azure.nodes.network.NetworkInterfaceCard",
                "cloudify.azure.nodes.network.IPConfiguration",
                "cloudify.azure.nodes.network.PublicIPAddress",
                "cloudify.azure.nodes.compute.AvailabilitySet",
                "cloudify.azure.nodes.compute.VirtualMachine",
                "cloudify.azure.nodes.compute.WindowsVirtualMachine",
                "cloudify.azure.nodes.compute.VirtualMachineExtension",
                "cloudify.azure.nodes.network.LoadBalancer",
                "cloudify.azure.nodes.network.LoadBalancer.BackendAddressPool",
                "cloudify.azure.nodes.network.LoadBalancer.Probe",
                "cloudify.azure.nodes.network.LoadBalancer.IncomingNATRule",
                "cloudify.azure.nodes.network.LoadBalancer.Rule",
                "cloudify.azure.Deployment",
                "cloudify.azure.nodes.compute.ContainerService",
                "cloudify.azure.nodes.Plan",
                "cloudify.azure.nodes.WebApp",
                "cloudify.azure.nodes.PublishingUser",
                "cloudify.azure.nodes.compute.ManagedCluster",
                "cloudify.gcp.project",
                "cloudify.gcp.nodes.Instance",
                "cloudify.gcp.nodes.InstanceGroup",
                "cloudify.gcp.nodes.Volume",
                "cloudify.gcp.nodes.Snapshot",
                "cloudify.gcp.nodes.Network",
                "cloudify.gcp.nodes.SubNetwork",
                "cloudify.gcp.nodes.VPCNetworkPeering",
                "cloudify.gcp.nodes.Route",
                "cloudify.gcp.nodes.FirewallRule",
                "cloudify.gcp.nodes.SecurityGroup",
                "cloudify.gcp.nodes.Access",
                "cloudify.gcp.nodes.KeyPair",
                "cloudify.gcp.nodes.ExternalIP",
                "cloudify.gcp.nodes.GlobalAddress",
                "cloudify.gcp.nodes.StaticIP",
                "cloudify.gcp.nodes.Address",
                "cloudify.gcp.nodes.Image",
                "cloudify.gcp.nodes.HealthCheck",
                "cloudify.gcp.nodes.BackendService",
                "cloudify.gcp.nodes.RegionBackendService",
                "cloudify.gcp.nodes.UrlMap",
                "cloudify.gcp.nodes.TargetProxy",
                "cloudify.gcp.nodes.SslCertificate",
                "cloudify.gcp.nodes.ForwardingRule",
                "cloudify.gcp.nodes.GlobalForwardingRule",
                "cloudify.gcp.nodes.DNSZone",
                "cloudify.gcp.nodes.DNSRecord",
                "cloudify.gcp.nodes.DNSAAAARecord",
                "cloudify.gcp.nodes.DNSMXRecord",
                "cloudify.gcp.nodes.DNSNSRecord",
                "cloudify.gcp.nodes.DNSTXTRecord",
                "cloudify.gcp.nodes.KubernetesCluster",
                "cloudify.gcp.nodes.KubernetesNodePool",
                "cloudify.gcp.nodes.KubernetesClusterMonitoring",
                "cloudify.gcp.nodes.KubernetesClusterlegacyAbac",
                "cloudify.gcp.nodes.KubernetesClusterNetworkPolicy",
                "cloudify.gcp.nodes.Topic",
                "cloudify.gcp.nodes.TopicPolicy",
                "cloudify.gcp.nodes.TopicMessage",
                "cloudify.gcp.nodes.Subscription",
                "cloudify.gcp.nodes.SubscriptionPolicy",
                "cloudify.gcp.nodes.Acknowledge",
                "cloudify.gcp.nodes.PullRequest",
                "cloudify.gcp.nodes.StackDriverGroup",
                "cloudify.gcp.nodes.StackDriverTimeSeries",
                "cloudify.gcp.nodes.StackDriverUpTimeCheckConfig",
                "cloudify.gcp.nodes.LoggingSink",
                "cloudify.gcp.nodes.LoggingExclusion",
                "cloudify.gcp.nodes.Logging.BillingAccounts.sinks",
                "cloudify.gcp.nodes.Logging.Folders.sinks",
                "cloudify.gcp.nodes.Logging.Organizations.sinks",
                "cloudify.gcp.nodes.Logging.Projects.sinks",
                "cloudify.gcp.nodes.Logging.BillingAccounts.exclusions",
                "cloudify.gcp.nodes.Logging.Folders.exclusions",
                "cloudify.gcp.nodes.Logging.Organizatios.exclusions",
                "cloudify.gcp.nodes.Logging.Projects.exclusions",
                "cloudify.gcp.nodes.Logging.Projects.metrics"
              ]
            }  
          ]
        },
        "properties": { 
          "type": "object",
          "description": "The properties of the node template, matching its node type properties schema."
        },
        "instances": { 
          "type": "object",
          "description": "Instances configuration. (Deprecated. Replaced with capabilities.scalable)"
        },
        "interfaces": { 
          "$ref": "#/definitions/nodeTemplateInterfaces",
          "description": "Used for a mapping plugins to interfaces operation, or for specifying inputs for already-mapped node type operations."
        },
        "relationships": { 
          "$ref": "#/definitions/nodeTemplateRelationships",
          "description": "Used for specifying the relationships that this node template has with other node templates."
        },
        "capabilities": { 
          "type": "object",
          "description": "Used for specifying the node template capabilities (Supported since: cloudify_dsl_1_3.) Only the scalable capability is supported." 
        }
      },
      "required": ["type"],
      "additionalProperties": false 
    },
    "nodeTemplateInterfaces": {
      "type": "object",
      "description": "Interfaces enable you to map logical tasks to executable operations.",
      "patternProperties": {
        "": {"$ref": "#/definitions/nodeTemplateInterface"}
      }
    },
    "nodeTemplateInterface": {
      "type": "object",
      "properties": {
        "condifure": { "$ref": "#/definitions/nodeTemplateInterfaceAction" },
        "delete": { "$ref": "#/definitions/nodeTemplateInterfaceAction" }
      },
      "patternProperties": { 
        "": {"$ref": "#/definitions/nodeTemplateInterfaceAction" }
      }
    },
    "nodeTemplateInterfaceAction": {
      "type": "object",
      "properties": {
        "implementation": {
          "type": "string",
          "description": "The script or plugin task name to execute."
        },
        "inputs": {
          "type": "object",
          "description": "Schema of inputs to be passed to the implementation as kwargs."
        },
        "executor": {
          "type": "string",
          "description": "Valid values: central_deployment_agent, host_agent. See the Plugins Specification for more info.",
          "enum": [
            "central_deployment_agent",
            "host_agent"
          ]
        },
        "max_retries": {
          "type":"number",
          "description": "Maximum number of retries for a task. -1 means infinite retries (Default: task_retries in the Cloudify Manager config.yaml file for remote workflows, and task_retries workflow configuration for local workflows)."
        },
        "retry_interval": {
          "type": "number",
          "description": "Minimum wait time (in seconds) between task retries (Default: task_retry_interval in the Cloudify Manager config.yaml file for remote workflows and task_retry_interval workflow configuration for local workflows)."
        },
        "timeone": {
          "type": "number",
          "description": "Number of seconds to wait before the operation is terminated by the orchestrator. A value of 0 (or no value at all, which is the default) means no timeout.",
          "default": 0
        },
        "timeout_recoverable": {
          "type": "boolean",
          "description": "If true (the default), and a timeout occured, then, the operation will raise a RecoverableError, resulting in the operation being retried. Otherwise, a NonRecoverableError is raised, ending the execution with a failure.",
          "default": true
        }
      },
      "additionalProperties": false
    },
    "nodeTemplateRelationships": {
      "type": "array",
      "description": "relationships enable you to define how nodes relate to one another. For example, a web_server node can be contained_in a vm node or an application node can be connected_to a database node.",
      "items": { "$ref": "#/definitions/nodeTemplateRelationship" }
    },
    "nodeTemplateRelationship": {
      "type": "object",
      "properties": {
        "type": {
          "type":"string",
          "description": "Either a newly-declared relationship type or one of the relationship types provided by default when importing the types.yaml file."
        },
        "target": {
          "type":"string",
          "description": "The name of the node to which the current node is related."
        },
        "connection_type": {
          "type": "string",
          "description": "Valid values: all_to_all and all_to_one (See explanation below.)",
          "enum": ["all_to_all", "all_to_one"]
        },
        "source_interface": {
          "type": "object",
          "description": "A dictionary of interfaces."
        },
        "target_interface": {
          "type": "object",
          "description": "A dictionary of interfaces."
        }
      },
      "required": ["type"],
      "additionalProperties": false
    },
    "nodeTypes": {
      "type":"object",
      "patternProperties": {
        "": { "$ref": "#/definitions/nodeType"}
      }
    },
    "nodeType": {
      "type": "object",
      "properties": {
        "derived_from": { 
          "type": "string",
          "description": "A string referencing a parent type."
        },
        "interfaces": { 
          "type": "object",
          "description": "A dictionary of node interfaces."
        },
        "properties": { 
          "type":"object",
          "description": "A dictionary of node properties."
        }
      }
    }
  }
}