{
  "$schema": "http://json-schema.org/draft-04/schema",
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string"
    },
    "disablePlugins": {
      "description": "Disable plugins",
      "type": "boolean"
    },
    "dom": {
      "description": "DOM-related options",
      "properties": {
        "containerQuerySelector": {
          "description": "Document selector for existing element to use as component parent (eg. #root). A blank container element is created from scratch if no selector is provided. [default: null]",
          "minLength": 1,
          "type": ["string", "null"]
        }
      },
      "type": "object"
    },
    "experimentalRendererUrl": {
      "anyOf": [
        {
          "minLength": 1,
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "description": "Custom renderer URL. This setting disables webpack bundling and allows integration with other build tools like Snowpack. [default: null]"
    },
    "exportPath": {
      "description": "Where to generate static exports on disk. [default: \"cosmos-export\"]",
      "minLength": 1,
      "type": "string"
    },
    "fixtureFileSuffix": {
      "description": "Suffix for fixture files (eg. example.fixture.jsx). [default: \"fixture\"]",
      "minLength": 1,
      "type": "string"
    },
    "fixturesDir": {
      "description": "Name for directories that contain fixtures (eg. __fixtures__/example.jsx). [default: \"__fixtures__\"]",
      "minLength": 1,
      "type": "string"
    },
    "globalImports": {
      "description": "Modules to be imported before loading components. Stuff like reset.css, polyfills, etc.",
      "items": {
        "minLength": 1,
        "type": "string"
      },
      "type": "array",
      "uniqueItems": true
    },
    "hostname": {
      "anyOf": [
        {
          "minLength": 1,
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "description": "Dev server hostname. Set to null to accept connections with any hostname. [default: null]"
    },
    "httpProxy": {
      "additionalProperties": true,
      "description": "Proxy some URLs to a different HTTP server (eg. an API backend dev server). Similar to devServer.proxy in webpack config.",
      "patternProperties": {
        ".*": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "additionalProperties": true,
              "description": "Advanced HTTP proxy config.",
              "properties": {
                "logLevel": {
                  "enum": ["error", "debug", "info", "warn", "silent"],
                  "type": "string"
                },
                "pathRewrite": {
                  "patternProperties": {
                    ".*": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "secure": {
                  "type": "boolean"
                },
                "target": {
                  "type": "string"
                }
              },
              "required": ["target"],
              "type": "object"
            }
          ]
        }
      },
      "type": "object"
    },
    "https": {
      "description": "Server will be served over HTTPS",
      "type": "boolean"
    },
    "httpsOptions": {
      "additionalProperties": false,
      "description": "Additional options for HTTPS server",
      "properties": {
        "certPath": {
          "description": "Path of a certificate file",
          "type": "string"
        },
        "keyPath": {
          "description": "Path of a certificate's key file",
          "type": "string"
        }
      },
      "type": "object"
    },
    "port": {
      "description": "Dev server port. [default: 5000]",
      "type": "number"
    },
    "publicUrl": {
      "description": "Base URL for static assets. [default: \"/\"]",
      "type": "string"
    },
    "rootDir": {
      "description": "The root directory that all others paths in this config are relative to. Usually the root of your repo. If omitted, rootDir is equal to the directory containing your Cosmos config. When you don't use a Cosmos config, rootDir defaults to the current working directory.",
      "minLength": 1,
      "type": "string"
    },
    "staticPath": {
      "description": "Dir path to serve static assets from.",
      "minLength": 1,
      "type": "string"
    },
    "ui": {
      "additionalProperties": true,
      "description": "UI plugin options",
      "properties": {
        "responsivePreview": {
          "additionalProperties": false,
          "properties": {
            "devices": {
              "description": "List of device viewports",
              "items": {
                "additionalProperties": false,
                "properties": {
                  "height": {
                    "minimum": 1,
                    "type": "number"
                  },
                  "label": {
                    "minLength": 1,
                    "type": "string"
                  },
                  "width": {
                    "minimum": 1,
                    "type": "number"
                  }
                },
                "required": ["label", "width", "height"],
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "userDepsFilePath": {
      "description": "Where to generate a file that contains a map to all fixtures and other Cosmos-related user modules. Only used in setups where Cosmos can't piggyback on the user's build (eg. React Native setups). [default: \"cosmos.userdeps.js\"]",
      "minLength": 1,
      "type": "string"
    },
    "watchDirs": {
      "description": "Directories where the Cosmos server watches for fixture files changes while running. [default: [\".\"]]",
      "items": {
        "minLength": 1,
        "type": "string"
      },
      "type": "array",
      "uniqueItems": true
    },
    "webpack": {
      "additionalProperties": false,
      "description": "Webpack-related options",
      "properties": {
        "configPath": {
          "anyOf": [
            {
              "minLength": 1,
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Path to an existing webpack config, which Cosmos will reuse to build your code. Set to null to disable this behavior. [default \"webpack.config.js\"]"
        },
        "hotReload": {
          "description": "Enable webpack's Hot Module Replacement. [default: true]",
          "type": "boolean"
        },
        "includeHashInOutputFilename": {
          "description": "Changes output filename from \"[name].js\" to \"[name].[contenthash].js\". [default: false]",
          "type": "boolean"
        },
        "overridePath": {
          "anyOf": [
            {
              "minLength": 1,
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Path to a user module that customizes the webpack config used by Cosmos. Set to null to disable this behavior. [default \"webpack.override.js\"]"
        },
        "reloadOnFail": {
          "description": "When using webpack's Hot Module Replacement, enable automatic location reload after webpack fails to update modules. [default: true]",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "title": "JSON schema for React Cosmos configs",
  "type": "object"
}
