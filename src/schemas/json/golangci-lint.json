{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "gocritic-checks": {
      "enum": [
        "appendAssign",
        "appendCombine",
        "argOrder",
        "assignOp",
        "badCall",
        "badCond",
        "badLock",
        "badRegexp",
        "boolExprSimplify",
        "builtinShadow",
        "builtinShadowDecl",
        "captLocal",
        "caseOrder",
        "codegenComment",
        "commentFormatting",
        "commentedOutCode",
        "commentedOutImport",
        "defaultCaseOrder",
        "deferUnlambda",
        "deferInLoop",
        "deprecatedComment",
        "docStub",
        "dupArg",
        "dupBranchBody",
        "dupCase",
        "dupImport",
        "dupSubExpr",
        "elseif",
        "emptyDecl",
        "emptyFallthrough",
        "emptyStringTest",
        "equalFold",
        "evalOrder",
        "exitAfterDefer",
        "exposedSyncMutex",
        "externalErrorReassign",
        "filepathJoin",
        "flagDeref",
        "flagName",
        "hexLiteral",
        "httpNoBody",
        "hugeParam",
        "ifElseChain",
        "importShadow",
        "indexAlloc",
        "initClause",
        "ioutilDeprecated",
        "mapKey",
        "methodExprCall",
        "nestingReduce",
        "newDeref",
        "nilValReturn",
        "octalLiteral",
        "offBy1",
        "paramTypeCombine",
        "preferDecodeRune",
        "preferFilepathJoin",
        "preferFprint",
        "preferStringWriter",
        "preferWriteByte",
        "ptrToRefParam",
        "rangeExprCopy",
        "rangeValCopy",
        "redundantSprint",
        "regexpMust",
        "regexpPattern",
        "regexpSimplify",
        "returnAfterHttpError",
        "ruleguard",
        "singleCaseSwitch",
        "sliceClear",
        "sloppyLen",
        "sloppyReassign",
        "sloppyTypeAssert",
        "sortSlice",
        "sprintfQuotedString",
        "sqlQuery",
        "stringConcatSimplify",
        "stringXbytes",
        "suspiciousSorting",
        "switchTrue",
        "syncMapLoadAndDelete",
        "timeExprSimplify",
        "tooManyResultsChecker",
        "truncateCmp",
        "typeAssertChain",
        "typeDefFirst",
        "typeSwitchVar",
        "typeUnparen",
        "underef",
        "unlabelStmt",
        "unlambda",
        "unnamedResult",
        "unnecessaryBlock",
        "unnecessaryDefer",
        "unslice",
        "valSwap",
        "weakCond",
        "whyNoLint",
        "wrapperFunc",
        "yodaStyleExpr"
      ]
    },
    "gocritic-tags": {
      "enum": [
        "diagnostic",
        "style",
        "performance",
        "experimental",
        "opinionated",
        "security"
      ]
    },
    "gosec-rules": {
      "enum": [
        "G101",
        "G102",
        "G103",
        "G104",
        "G106",
        "G107",
        "G108",
        "G109",
        "G110",
        "G111",
        "G112",
        "G113",
        "G201",
        "G202",
        "G203",
        "G204",
        "G301",
        "G302",
        "G303",
        "G304",
        "G305",
        "G306",
        "G307",
        "G401",
        "G402",
        "G403",
        "G404",
        "G501",
        "G502",
        "G503",
        "G504",
        "G505",
        "G601"
      ]
    },
    "govet-analyzers": {
      "enum": [
        "asmdecl",
        "assign",
        "atomic",
        "atomicalign",
        "bools",
        "buildtag",
        "cgocall",
        "composites",
        "copylocks",
        "deepequalerrors",
        "errorsas",
        "fieldalignment",
        "findcall",
        "framepointer",
        "httpresponse",
        "ifaceassert",
        "loopclosure",
        "lostcancel",
        "nilfunc",
        "nilness",
        "printf",
        "reflectvaluecompare",
        "shadow",
        "shift",
        "sigchanyzer",
        "sortslice",
        "stdmethods",
        "stringintconv",
        "structtag",
        "testinggoroutine",
        "tests",
        "unmarshal",
        "unreachable",
        "unsafeptr",
        "unusedresult",
        "unusedwrite"
      ]
    },
    "issue-match-linters": {
      "additionalProperties": false,
      "properties": {
        "linters": {
          "items": {
            "$ref": "#/definitions/linters"
          },
          "type": "array"
        },
        "severity": {
          "$comment": "This is here only to allow `additionalProperties: false`."
        }
      },
      "type": "object"
    },
    "issue-match-path": {
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string"
        },
        "severity": {
          "$comment": "This is here only to allow `additionalProperties: false`."
        }
      },
      "type": "object"
    },
    "issue-match-source": {
      "additionalProperties": false,
      "properties": {
        "severity": {
          "$comment": "This is here only to allow `additionalProperties: false`."
        },
        "source": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "issue-match-text": {
      "additionalProperties": false,
      "properties": {
        "severity": {
          "$comment": "This is here only to allow `additionalProperties: false`."
        },
        "text": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "linters": {
      "$comment": "anyOf with enum is used to allow auto completion of non-custom linters",
      "anyOf": [
        {
          "enum": [
            "asasalint",
            "asciicheck",
            "bidichk",
            "bodyclose",
            "containedctx",
            "contextcheck",
            "cyclop",
            "deadcode",
            "decorder",
            "depguard",
            "dogsled",
            "dupl",
            "durationcheck",
            "errcheck",
            "errchkjson",
            "errname",
            "errorlint",
            "execinquery",
            "exhaustive",
            "exhaustivestruct",
            "exhaustruct",
            "exportloopref",
            "forbidigo",
            "forcetypeassert",
            "funlen",
            "gci",
            "gochecknoglobals",
            "gochecknoinits",
            "gocognit",
            "goconst",
            "gocritic",
            "gocyclo",
            "godot",
            "godox",
            "goerr113",
            "gofmt",
            "gofumpt",
            "goheader",
            "goimports",
            "golint",
            "gomnd",
            "gomoddirectives",
            "gomodguard",
            "goprintffuncname",
            "gosec",
            "gosimple",
            "govet",
            "grouper",
            "ifshort",
            "importas",
            "ineffassign",
            "interfacer",
            "ireturn",
            "lll",
            "maintidx",
            "makezero",
            "maligned",
            "misspell",
            "nakedret",
            "nestif",
            "nilerr",
            "nilnil",
            "nlreturn",
            "noctx",
            "nolintlint",
            "nonamedreturns",
            "nosnakecase",
            "nosprintfhostport",
            "paralleltest",
            "prealloc",
            "predeclared",
            "promlinter",
            "revive",
            "rowserrcheck",
            "scopelint",
            "sqlclosecheck",
            "staticcheck",
            "structcheck",
            "stylecheck",
            "tagliatelle",
            "tenv",
            "testpackage",
            "thelper",
            "tparallel",
            "typecheck",
            "unconvert",
            "unparam",
            "unused",
            "varcheck",
            "varnamelen",
            "wastedassign",
            "whitespace",
            "wrapcheck",
            "wsl"
          ]
        },
        {
          "type": "string"
        }
      ],
      "description": "Linters usable."
    }
  },
  "properties": {
    "issues": {
      "properties": {
        "exclude": {
          "description": "List of regular expressions of issue texts to exclude.\nBut independently from this option we use default exclude patterns. Their usage can be controlled through `exclude-use-default`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "exclude-case-sensitive": {
          "default": false,
          "description": "If set to true, exclude and exclude-rules regular expressions become case sensitive.",
          "type": "boolean"
        },
        "exclude-rules": {
          "description": "Exclude configuration per-path, per-linter, per-text and per-source",
          "items": {
            "properties": {
              "linters": {
                "items": {
                  "$ref": "#/definitions/linters"
                },
                "type": "array"
              },
              "path": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "text": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "exclude-use-default": {
          "default": true,
          "description": "Independently from option `exclude` we use default exclude patterns. This behavior can be disabled by this option.",
          "type": "boolean"
        },
        "include": {
          "default": [],
          "description": "The list of ids of default excludes to include or disable.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "max-issues-per-linter": {
          "default": 50,
          "description": "Maximum issues count per one linter. Set to 0 to disable.",
          "minimum": 0,
          "type": "integer"
        },
        "max-same-issues": {
          "default": 3,
          "description": "Maximum count of issues with the same text. Set to 0 to disable.",
          "minimum": 0,
          "type": "integer"
        },
        "new": {
          "default": false,
          "description": "Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.",
          "type": "boolean"
        },
        "new-from-patch": {
          "description": "Show only new issues created in git patch with this file path.",
          "examples": ["path/to/patch/file"],
          "type": "string"
        },
        "new-from-rev": {
          "description": "Show only new issues created after this git revision.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "linters": {
      "properties": {
        "disable": {
          "description": "List of disabled linters.",
          "items": {
            "$ref": "#/definitions/linters"
          },
          "type": "array"
        },
        "disable-all": {
          "default": false,
          "description": "Whether to disable all linters. You can re-enable them with `enable` explicitly.",
          "type": "boolean"
        },
        "enable": {
          "description": "List of enabled linters.",
          "items": {
            "$ref": "#/definitions/linters"
          },
          "type": "array"
        },
        "enable-all": {
          "default": false,
          "description": "Whether to enable all linters. You can re-disable them with `disable` explicitly.",
          "type": "boolean"
        },
        "fast": {
          "default": false,
          "description": "Enable run of fast linters.",
          "type": "boolean"
        },
        "presets": {
          "description": "Allow to use different presets of linters",
          "items": {
            "enum": [
              "bugs",
              "comment",
              "complexity",
              "error",
              "format",
              "import",
              "metalinter",
              "module",
              "performance",
              "sql",
              "style",
              "test",
              "unused"
            ]
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "linters-settings": {
      "description": "All available settings of specific linters.",
      "properties": {
        "asasalint": {
          "properties": {
            "exclude": {
              "description": "To specify a set of function names to exclude.",
              "items": {
                "examples": ["\\.Wrapf"],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "ignore-test": {
              "default": false,
              "description": "Ignore *_test.go files.",
              "type": "boolean"
            },
            "use-builtin-exclusions": {
              "default": true,
              "description": "To enable/disable the asasalint builtin exclusions of function names.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "bidichk": {
          "properties": {
            "first-strong-isolate": {
              "default": false,
              "description": "Disallow: FIRST-STRONG-ISOLATE",
              "type": "boolean"
            },
            "left-to-right-embedding": {
              "default": false,
              "description": "Disallow: LEFT-TO-RIGHT-EMBEDDING",
              "type": "boolean"
            },
            "left-to-right-isolate": {
              "default": false,
              "description": "Disallow: LEFT-TO-RIGHT-ISOLATE",
              "type": "boolean"
            },
            "left-to-right-override": {
              "default": false,
              "description": "Disallow: LEFT-TO-RIGHT-OVERRIDE",
              "type": "boolean"
            },
            "pop-directional-formatting": {
              "default": false,
              "description": "Disallow: POP-DIRECTIONAL-FORMATTING",
              "type": "boolean"
            },
            "pop-directional-isolate": {
              "default": false,
              "description": "Disallow: POP-DIRECTIONAL-ISOLATE",
              "type": "boolean"
            },
            "right-to-left-embedding": {
              "default": false,
              "description": "Disallow: RIGHT-TO-LEFT-EMBEDDING",
              "type": "boolean"
            },
            "right-to-left-isolate": {
              "default": false,
              "description": "Disallow: RIGHT-TO-LEFT-ISOLATE",
              "type": "boolean"
            },
            "right-to-left-override": {
              "default": false,
              "description": "Disallow: RIGHT-TO-LEFT-OVERRIDE",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "custom": {
          "description": "The custom section can be used to define linter plugins to be loaded at runtime. See README of golangci-lint for more information.\nEach custom linter should have a unique name.",
          "patternProperties": {
            "^.*$": {
              "properties": {
                "description": {
                  "description": "The description of the linter, for documentation purposes only.",
                  "type": "string"
                },
                "original-url": {
                  "description": "Intended to point to the repo location of the linter, for documentation purposes only.",
                  "type": "string"
                },
                "path": {
                  "description": "The path to the plugin *.so. Can be absolute or local.",
                  "examples": ["/path/to/example.so"],
                  "type": "string"
                }
              },
              "required": ["path"],
              "type": "object"
            }
          },
          "type": "object"
        },
        "cyclop": {
          "properties": {
            "max-complexity": {
              "default": 10,
              "description": "Max complexity the function can have",
              "minimum": 0,
              "type": "integer"
            },
            "package-average": {
              "default": 0,
              "description": "Max average complexity in package",
              "minimum": 0,
              "type": "number"
            },
            "skip-tests": {
              "default": false,
              "description": "Should the linter execute on test files as well",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "decorder": {
          "properties": {
            "dec-order": {
              "default": [["type", "const", "var", "func"]],
              "items": {
                "enum": ["type", "const", "var", "func"]
              },
              "type": "array"
            },
            "disable-dec-num-check": {
              "default": true,
              "description": "Multiple global type, const and var declarations are allowed",
              "type": "boolean"
            },
            "disable-dec-order-check": {
              "default": true,
              "description": "Order of declarations is not checked",
              "type": "boolean"
            },
            "disable-init-func-first-check": {
              "default": true,
              "description": "Allow init func to be anywhere in file",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "depguard": {
          "properties": {
            "additional-guards": {
              "items": {
                "properties": {
                  "ignore-file-rules": {
                    "description": "Specify rules by which the linter ignores certain files for consideration.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "include-go-root": {
                    "type": "boolean"
                  },
                  "list-type": {},
                  "packages": {
                    "description": "List of packages for the list type specified.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "ignore-file-rules": {
              "description": "Specify rules by which the linter ignores certain files for consideration.",
              "items": {
                "examples": ["ignore/**/*.go"],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "include-go-root": {
              "default": false,
              "description": "Whether to check the list against the standard lib.",
              "type": "boolean"
            },
            "list-type": {
              "default": "denylist",
              "description": "List kind (`allowlist` or `denylist`)",
              "enum": ["allowlist", "denylist", "blacklist", "whitelist"]
            },
            "packages": {
              "description": "List of packages for the list type specified.",
              "items": {
                "examples": ["github.com/OpenPeeDeeP/depguard"],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "packages-with-error-message": {
              "description": "Specify a mapping from packages to the error message to display.",
              "items": {
                "examples": [
                  {
                    "github.com/OpenPeeDeeP/depguards": "Please use \"github.com/OpenPeeDeeP/depguard\"."
                  }
                ],
                "patternProperties": {
                  "^.*$": {
                    "type": "string"
                  }
                },
                "type": "object",
                "uniqueItems": true
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "dogsled": {
          "properties": {
            "max-blank-identifiers": {
              "default": 2,
              "description": "Check assignments with too many blank identifiers.",
              "minimum": 0,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "dupl": {
          "properties": {
            "threshold": {
              "default": 150,
              "description": "Tokens count to trigger issue.",
              "minimum": 0,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "errcheck": {
          "properties": {
            "check-blank": {
              "default": false,
              "description": "Report about assignment of errors to blank identifier",
              "type": "boolean"
            },
            "check-type-assertions": {
              "default": false,
              "description": "Report about not checking errors in type assertions, i.e.: `a := b.(MyStruct)`",
              "type": "boolean"
            },
            "disable-default-exclusions": {
              "default": false,
              "description": "To disable the errcheck built-in exclude list",
              "type": "boolean"
            },
            "exclude": {
              "description": "DEPRECATED: use `exclude-functions` instead. Path to a file containing a list of functions to exclude from checking.",
              "examples": ["/path/to/file.txt"],
              "type": "string"
            },
            "exclude-functions": {
              "description": "List of functions to exclude from checking, where each entry is a single function to exclude",
              "examples": ["io/ioutil.ReadFile", "io.Copy(*bytes.Buffer)"],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ignore": {
              "default": "fmt:.*",
              "description": "DEPRECATED: use `exclude-functions` instead. Comma-separated list of pairs of the form \"pkg:regex\".",
              "type": "string"
            }
          },
          "type": "object"
        },
        "errchkjson": {
          "properties": {
            "check-error-free-encoding": {
              "default": false,
              "type": "boolean"
            },
            "report-no-exported": {
              "default": false,
              "description": "Issue on struct that doesn't have exported fields.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "errorlint": {
          "properties": {
            "asserts": {
              "default": true,
              "description": "Check for plain type assertions and type switches.",
              "type": "boolean"
            },
            "comparison": {
              "default": true,
              "description": "Check for plain error comparisons",
              "type": "boolean"
            },
            "errorf": {
              "default": true,
              "description": "Check whether fmt.Errorf uses the %w verb for formatting errors",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "exhaustive": {
          "properties": {
            "check-generated": {
              "default": false,
              "description": "Check switch statements in generated files",
              "type": "boolean"
            },
            "default-signifies-exhaustive": {
              "default": false,
              "description": "Presence of `default` case in switch statements satisfies exhaustiveness, even if all enum members are not listed.",
              "type": "boolean"
            },
            "ignore-enum-members": {
              "description": "Enum members matching `regex` do not have to be listed in switch statements to satisfy exhaustiveness",
              "type": "string"
            },
            "package-scope-only": {
              "default": false,
              "description": "Consider enums only in package scopes, not in inner scopes.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "exhaustivestruct": {
          "properties": {
            "struct-patterns": {
              "description": "Struct Patterns is list of expressions to match struct packages (written using `path` matching syntax)",
              "examples": ["^print.*$"],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "exhaustruct": {
          "properties": {
            "exclude": {
              "description": "List of regular expressions to exclude struct packages and names from check.",
              "examples": ["cobra\\.Command$"],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "include": {
              "description": "List of regular expressions to match struct packages and names.",
              "examples": [".*\\.Test"],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "forbidigo": {
          "properties": {
            "exclude_godoc_examples": {
              "default": true,
              "description": "Exclude code in godoc examples.",
              "type": "boolean"
            },
            "forbid": {
              "description": "List of identifiers to forbid (written using `regexp`)",
              "examples": ["^print.*$"],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "funlen": {
          "properties": {
            "lines": {
              "default": 60,
              "description": "Limit lines number per function.",
              "type": "integer"
            },
            "statements": {
              "default": 40,
              "description": "Limit statements number per function",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "gci": {
          "properties": {
            "local-prefixes": {
              "description": "DEPRECATED: use 'sections' and 'prefix(github.com/org/project)' instead.",
              "examples": ["github.com/org/project"],
              "type": "string"
            },
            "sections": {
              "default": ["standard", "default"],
              "description": "Section configuration to compare against.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "skip-generated": {
              "default": true,
              "description": "Skip generated files.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "gocognit": {
          "properties": {
            "min-complexity": {
              "default": 30,
              "description": "Minimal code complexity to report (we recommend 10-20).",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "goconst": {
          "properties": {
            "ignore-calls": {
              "default": true,
              "description": "Ignore when constant is not used as function argument",
              "type": "boolean"
            },
            "ignore-tests": {
              "default": false,
              "description": "Ignore test files.",
              "type": "boolean"
            },
            "match-constant": {
              "default": true,
              "description": "Look for existing constants matching the values",
              "type": "boolean"
            },
            "max": {
              "default": 3,
              "description": "Maximum value, only works with `numbers`",
              "type": "integer"
            },
            "min": {
              "default": 3,
              "description": "Minimum value, only works with `numbers`",
              "type": "integer"
            },
            "min-len": {
              "default": 3,
              "description": "Minimum length of string constant.",
              "type": "integer"
            },
            "min-occurrences": {
              "default": 3,
              "description": "Minimum occurrences count to trigger.",
              "type": "integer"
            },
            "numbers": {
              "default": false,
              "description": "Search also for duplicated numbers.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "gocritic": {
          "properties": {
            "disabled-checks": {
              "default": [],
              "description": "Which checks should be disabled.",
              "items": {
                "$ref": "#/definitions/gocritic-checks"
              },
              "type": "array"
            },
            "disabled-tags": {
              "description": "Disable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.",
              "items": {
                "$ref": "#/definitions/gocritic-tags"
              },
              "type": "array"
            },
            "enabled-checks": {
              "description": "Which checks should be enabled. By default, a list of stable checks is used. To see it, run `GL_DEBUG=gocritic golangci-lint run`.",
              "items": {
                "$ref": "#/definitions/gocritic-checks"
              },
              "type": "array"
            },
            "enabled-tags": {
              "description": "Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.",
              "items": {
                "$ref": "#/definitions/gocritic-tags"
              },
              "type": "array"
            },
            "settings": {
              "description": "Settings passed to gocritic. Properties must be valid and enabled check names.",
              "propertyNames": {
                "$ref": "#/definitions/gocritic-checks"
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "gocyclo": {
          "properties": {
            "min-complexity": {
              "default": 30,
              "description": "Minimum code complexity to report (we recommend 10-20).",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "godot": {
          "properties": {
            "capital": {
              "default": false,
              "description": "Check that each sentence starts with a capital letter.",
              "type": "boolean"
            },
            "check-all": {
              "default": false,
              "description": "DEPRECATED: Check all top-level comments, not only declarations.",
              "type": "boolean"
            },
            "exclude": {
              "description": "List of regexps for excluding particular comment lines from check.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "period": {
              "default": true,
              "description": "Check that each sentence ends with a period.",
              "type": "boolean"
            },
            "scope": {
              "default": "declarations",
              "description": "Comments to be checked.",
              "enum": ["declarations", "toplevel", "all"]
            }
          },
          "type": "object"
        },
        "godox": {
          "properties": {
            "keywords": {
              "default": ["TODO", "BUG", "FIXME"],
              "description": "Report any comments starting with one of theses keywords. This is useful for TODO or FIXME comments that might be left in the code accidentally and should be resolved before merging.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "gofmt": {
          "properties": {
            "simplify": {
              "default": true,
              "description": "Simplify code.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "gofumpt": {
          "properties": {
            "extra-rules": {
              "default": false,
              "description": "Choose whether or not to use the extra rules that are disabled by default.",
              "type": "boolean"
            },
            "lang-version": {
              "default": "1.15",
              "description": "Select the Go version to target.",
              "type": "string"
            },
            "module-path": {
              "description": " Module path which contains the source code being formatted.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "goheader": {
          "allOf": [
            {
              "properties": {
                "values": {
                  "properties": {
                    "const": {
                      "additionalProperties": false,
                      "description": "Constants to use in the template.",
                      "examples": [
                        {
                          "COMPANY": "MY FUTURISTIC COMPANY",
                          "YEAR": "2030"
                        }
                      ],
                      "patternProperties": {
                        "^.+$": {
                          "description": "Value for the constant.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "regexp": {
                      "additionalProperties": false,
                      "description": "Regular expressions to use in your template.",
                      "examples": [
                        {
                          "AUTHOR": ".*@mycompany\\.com"
                        }
                      ],
                      "patternProperties": {
                        "^.+$": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            {
              "oneOf": [
                {
                  "properties": {
                    "template": {
                      "description": "Template to put on top of every file.",
                      "examples": [
                        "{{ MY COMPANY }}\nSPDX-License-Identifier: Apache-2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at:\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
                      ],
                      "type": "string"
                    }
                  },
                  "required": ["template"]
                },
                {
                  "properties": {
                    "template-path": {
                      "description": "Path to the file containing the template source.",
                      "examples": ["my_header_template.txt"],
                      "type": "string"
                    }
                  },
                  "required": ["template-path"]
                }
              ]
            }
          ],
          "type": "object"
        },
        "goimports": {
          "properties": {
            "local-prefixes": {
              "description": "Put imports beginning with prefix after 3rd-party packages. It is a comma-separated list of prefixes.",
              "examples": ["github.com/org/project"],
              "type": "string"
            }
          },
          "type": "object"
        },
        "golint": {
          "properties": {
            "min-confidence": {
              "description": "Minimum confidence for issues.",
              "exclusiveMaximum": 1,
              "minimum": 0,
              "type": "number"
            }
          },
          "type": "object"
        },
        "gomnd": {
          "properties": {
            "checks": {
              "description": "The list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.",
              "items": {
                "enum": [
                  "argument",
                  "case",
                  "condition",
                  "operation",
                  "return",
                  "assign"
                ]
              },
              "type": "array"
            },
            "ignored-files": {
              "description": "List of file patterns to exclude from analysis.",
              "examples": [["magic1_.*.go"]],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ignored-functions": {
              "description": "Comma-separated list of function patterns to exclude from the analysis.",
              "examples": [["math.*", "http.StatusText", "make"]],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ignored-numbers": {
              "description": "List of numbers to exclude from analysis.",
              "examples": [["1000", "1234_567_890", "3.14159264"]],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "settings": {
              "properties": {
                "mnd": {
                  "properties": {
                    "checks": {
                      "description": "The list of enabled checks.",
                      "items": {
                        "enum": [
                          "argument",
                          "case",
                          "condition",
                          "operation",
                          "return",
                          "assign"
                        ]
                      },
                      "type": "array"
                    },
                    "ignored-files": {
                      "description": "Comma-separated list of file patterns to exclude from the analysis.",
                      "examples": ["magic1_.*.go"],
                      "type": "string"
                    },
                    "ignored-functions": {
                      "description": "Comma-separated list of function patterns to exclude from the analysis.",
                      "examples": ["math.*,http.StatusText,make"],
                      "type": "string"
                    },
                    "ignored-numbers": {
                      "description": "Comma-separated list of numbers to exclude from the analysis.",
                      "examples": ["1000,1234_567_890,3.14159264"],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "gomodguard": {
          "properties": {
            "allowed": {
              "properties": {
                "domains": {
                  "description": "List of allowed module domains.",
                  "items": {
                    "examples": ["golang.org"],
                    "type": "string"
                  },
                  "type": "array"
                },
                "modules": {
                  "description": "List of allowed modules.",
                  "items": {
                    "examples": ["gopkg.in/yaml.v2"],
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "blocked": {
              "properties": {
                "local_replace_directives": {
                  "default": true,
                  "description": "Raise lint issues if loading local path with replace directive",
                  "type": "boolean"
                },
                "modules": {
                  "description": "List of blocked modules.",
                  "items": {
                    "additionalProperties": false,
                    "patternProperties": {
                      "^.+$": {
                        "properties": {
                          "reason": {
                            "description": "Reason why the recommended module should be used.",
                            "type": "string"
                          },
                          "recommendations": {
                            "description": "Recommended modules that should be used instead.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "versions": {
                  "description": "List of blocked module version constraints.",
                  "items": {
                    "patternProperties": {
                      "^.*$": {
                        "properties": {
                          "reason": {
                            "description": "Reason why the version constraint exists.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version constraint.",
                            "type": "string"
                          }
                        },
                        "required": ["reason"],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "gosec": {
          "properties": {
            "concurrency": {
              "description": "Concurrency value",
              "type": "integer"
            },
            "confidence": {
              "default": "low",
              "description": "Filter out the issues with a lower confidence than the given value",
              "enum": ["low", "medium", "high"],
              "type": "string"
            },
            "config": {
              "description": "To specify the configuration of rules",
              "type": "object"
            },
            "exclude-generated": {
              "default": false,
              "description": "Exclude generated files",
              "type": "boolean"
            },
            "excludes": {
              "description": "To specify a set of rules to explicitly exclude",
              "examples": [["G401"]],
              "items": {
                "$ref": "#/definitions/gosec-rules"
              },
              "type": "array"
            },
            "includes": {
              "description": "To select a subset of rules to run",
              "examples": [["G401"]],
              "items": {
                "$ref": "#/definitions/gosec-rules"
              },
              "type": "array"
            },
            "severity": {
              "default": "low",
              "description": "Filter out the issues with a lower severity than the given value",
              "enum": ["low", "medium", "high"],
              "type": "string"
            }
          },
          "type": "object"
        },
        "gosimple": {
          "properties": {
            "checks": {
              "items": {
                "anyOf": [
                  {
                    "enum": ["all"]
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            "go": {
              "default": "1.13",
              "description": "Targeted Go version",
              "type": "string"
            }
          },
          "type": "object"
        },
        "govet": {
          "properties": {
            "check-shadowing": {
              "default": true,
              "description": "Report shadowed variables.",
              "type": "boolean"
            },
            "disable": {
              "description": "Disable analyzers by name.",
              "items": {
                "$ref": "#/definitions/govet-analyzers"
              },
              "type": "array"
            },
            "disable-all": {
              "default": false,
              "description": "Disable all analyzers.",
              "type": "boolean"
            },
            "enable": {
              "description": "Enable analyzers by name.",
              "items": {
                "$ref": "#/definitions/govet-analyzers"
              },
              "type": "array"
            },
            "enable-all": {
              "default": false,
              "description": "Enable all analyzers.",
              "type": "boolean"
            },
            "settings": {
              "description": "Settings per analyzer. Map of analyzer name to specific settings.\nRun `go tool vet help` to find out more.",
              "patternProperties": {
                "^.*$": {
                  "description": "Run `go tool vet help <analyzer>` to see all settings.",
                  "type": "object"
                }
              },
              "propertyNames": {
                "$ref": "#/definitions/govet-analyzers"
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "grouper": {
          "properties": {
            "const-require-grouping": {
              "default": false,
              "type": "boolean"
            },
            "const-require-single-const": {
              "default": false,
              "type": "boolean"
            },
            "import-require-grouping": {
              "default": false,
              "type": "boolean"
            },
            "import-require-single-const": {
              "default": false,
              "type": "boolean"
            },
            "type-require-grouping": {
              "default": false,
              "type": "boolean"
            },
            "type-require-single-const": {
              "default": false,
              "type": "boolean"
            },
            "var-require-grouping": {
              "default": false,
              "type": "boolean"
            },
            "var-require-single-const": {
              "default": false,
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "ifshort": {
          "properties": {
            "max-decl-chars": {
              "default": 30,
              "description": "maximum length of variable declaration measured in number of characters, after which the linter won't suggest using short syntax.",
              "minimum": 1,
              "type": "integer"
            },
            "max-decl-lines": {
              "default": 1,
              "description": "maximum length of variable declaration measured in numbers of lines, after which the linter won't suggest using short syntax. Has precedence over max-decl-chars",
              "minimum": 1,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "importas": {
          "properties": {
            "alias": {
              "description": "List of aliases",
              "items": {
                "properties": {
                  "alias": {
                    "description": "Package alias e.g. autoscalingv1alpha1",
                    "type": "string"
                  },
                  "pkg": {
                    "description": "Package path e.g. knative.dev/serving/pkg/apis/autoscaling/v1alpha1",
                    "type": "string"
                  }
                },
                "required": ["pkg", "alias"],
                "type": "object"
              },
              "type": "array"
            },
            "no-extra-aliases": {
              "default": false,
              "description": "Do not allow non-required aliases.",
              "type": "boolean"
            },
            "no-unaliased": {
              "default": false,
              "description": "Do not allow unaliased imports of aliased packages.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "ireturn": {
          "anyOf": [
            {
              "not": {
                "properties": {
                  "allow": {
                    "const": "reject"
                  }
                }
              },
              "required": ["allow"]
            },
            {
              "required": ["reject"]
            }
          ],
          "description": "Use either `reject` or `allow` properties for interfaces matching.",
          "properties": {
            "allowed": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "enum": ["anon", "error", "empty", "stdlib"]
                  }
                ]
              },
              "type": "array"
            },
            "reject": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "enum": ["anon", "error", "empty", "stdlib"]
                  }
                ]
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "lll": {
          "properties": {
            "line-length": {
              "default": 120,
              "description": "Maximum allowed line length, lines longer will be reported.",
              "minimum": 1,
              "type": "integer"
            },
            "tab-width": {
              "default": 1,
              "description": "Width of \"\\t\" in spaces.",
              "minimum": 0,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "maintidx": {
          "description": "Maintainability index https://docs.microsoft.com/en-us/visualstudio/code-quality/code-metrics-maintainability-index-range-and-meaning?view=vs-2022",
          "properties": {
            "under": {
              "default": 20,
              "description": "Minimum accatpable maintainability index level (see https://docs.microsoft.com/en-us/visualstudio/code-quality/code-metrics-maintainability-index-range-and-meaning?view=vs-2022)",
              "type": "number"
            }
          },
          "type": "object"
        },
        "makezero": {
          "properties": {
            "suggest-new": {
              "default": false,
              "description": "Allow only slices initialized with a length of zero.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "maligned": {
          "properties": {
            "suggest-new": {
              "default": false,
              "description": "Whether to print struct with more effective memory layout.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "misspell": {
          "description": "Correct spellings using locale preferences for US or UK. Default is to use a neutral variety of English.",
          "properties": {
            "ignore-words": {
              "description": "List of words to ignore.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locale": {
              "enum": ["US", "UK"]
            }
          },
          "type": "object"
        },
        "nakedret": {
          "properties": {
            "max-func-lines": {
              "default": 30,
              "description": "Report if a function has more lines of code than this value and it has naked returns.",
              "minimum": 0,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "nestif": {
          "properties": {
            "min-complexity": {
              "default": 5,
              "description": "Minimum complexity of \"if\" statements to report.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "nilnil": {
          "properties": {
            "checked-types": {
              "default": ["ptr", "func", "iface", "map", "chan"],
              "description": "Order of return types to check.",
              "items": {
                "enum": ["ptr", "func", "iface", "map", "chan"]
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "nlreturn": {
          "properties": {
            "block-size": {
              "default": 0,
              "description": "set block size that is still ok",
              "minimum": 0,
              "type": "number"
            }
          },
          "type": "object"
        },
        "nolintlint": {
          "properties": {
            "allow-leading-space": {
              "default": true,
              "description": "Disable to ensure that nolint directives don't have a leading space.",
              "type": "boolean"
            },
            "allow-no-explanation": {
              "default": [],
              "description": "Exclude these linters from requiring an explanation.",
              "items": {
                "$ref": "#/definitions/linters"
              },
              "type": "array"
            },
            "allow-unused": {
              "default": true,
              "description": "Enable to ensure that nolint directives are all used.",
              "type": "boolean"
            },
            "require-explanation": {
              "default": false,
              "description": "Enable to require an explanation of nonzero length after each nolint directive.",
              "type": "boolean"
            },
            "require-specific": {
              "default": false,
              "description": "Enable to require nolint directives to mention the specific linter being suppressed.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "nonamedreturns": {
          "properties": {
            "report-error-in-defer": {
              "default": false,
              "description": "Report named error if it is assigned inside defer.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "paralleltest": {
          "properties": {
            "ignore-missing": {
              "default": false,
              "description": "Ignore missing calls to `t.Parallel()` and only report incorrect uses of it.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "prealloc": {
          "description": "We do not recommend using this linter before doing performance profiling.\nFor most programs usage of `prealloc` will be premature optimization.",
          "properties": {
            "for-loops": {
              "default": false,
              "description": "Report preallocation suggestions on for loops.",
              "type": "boolean"
            },
            "range-loops": {
              "default": true,
              "description": "Report preallocation suggestions on range loops.",
              "type": "boolean"
            },
            "simple": {
              "default": true,
              "description": "Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "predeclared": {
          "properties": {
            "ignored": {
              "description": "Comma-separated list of predeclared identifiers to not report on.",
              "type": "string"
            },
            "q": {
              "default": false,
              "description": "Include method names and field names (i.e., qualified names) in checks.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "promlinter": {
          "properties": {
            "disabled-linters": {
              "items": {
                "enum": [
                  "Help",
                  "MetricUnits",
                  "Counter",
                  "HistogramSummaryReserved",
                  "MetricTypeInName",
                  "ReservedChars",
                  "CamelCase",
                  "UnitAbbreviations"
                ]
              },
              "type": "array"
            },
            "strict": {}
          },
          "type": "object"
        },
        "revive": {
          "examples": [
            {
              "ignore-generated-header": true,
              "rules": [
                {
                  "name": "indent-error-flow",
                  "severity": "warning"
                },
                {
                  "arguments": [
                    {
                      "allowFloats": "0.0,0.,1.0,1.,2.0,2.",
                      "allowInts": "0,1,2",
                      "allowStrs": "\"\"",
                      "maxLitCount": "3"
                    }
                  ],
                  "name": "add-constant",
                  "severity": "warning"
                }
              ],
              "severity": "warning"
            }
          ],
          "properties": {
            "confidence": {
              "type": "number"
            },
            "enable-all-rules": {
              "default": false,
              "type": "boolean"
            },
            "ignore-generated-header": {
              "type": "boolean"
            },
            "max-open-files": {
              "type": "integer"
            },
            "rules": {
              "items": {
                "properties": {
                  "arguments": {
                    "type": "array"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "name": {
                    "title": "The rule name",
                    "type": "string"
                  },
                  "severity": {
                    "enum": ["warning", "error"],
                    "type": "string"
                  }
                },
                "required": ["name"],
                "type": "object"
              },
              "type": "array"
            },
            "severity": {
              "enum": ["warning", "error"],
              "type": "string"
            }
          },
          "type": "object"
        },
        "rowserrcheck": {
          "properties": {
            "packages": {
              "items": {
                "description": "",
                "examples": ["github.com/jmoiron/sqlx"],
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "staticcheck": {
          "properties": {
            "checks": {
              "items": {
                "anyOf": [
                  {
                    "enum": ["all"]
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            "go": {
              "default": "1.13",
              "description": "Targeted Go version",
              "type": "string"
            }
          },
          "type": "object"
        },
        "stylecheck": {
          "properties": {
            "checks": {
              "default": [
                "all",
                "-ST1000",
                "-ST1003",
                "-ST1016",
                "-ST1020",
                "-ST1021",
                "-ST1022"
              ],
              "items": {
                "anyOf": [
                  {
                    "enum": ["all"]
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            "dot-import-whitelist": {
              "description": "By default, ST1001 forbids all uses of dot imports in non-test packages. This setting allows setting a whitelist of import paths that can be dot-imported anywhere.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "go": {
              "default": "1.13",
              "description": "Targeted Go version",
              "type": "string"
            },
            "http-status-code-whitelist": {
              "default": ["200", "400", "404", "500"],
              "description": "ST1013 recommends using constants from the net/http package instead of hard-coding numeric HTTP status codes. This setting specifies a list of numeric status codes that this check does not complain about.",
              "items": {
                "enum": [
                  "100",
                  "101",
                  "102",
                  "103",
                  "200",
                  "201",
                  "202",
                  "203",
                  "204",
                  "205",
                  "206",
                  "207",
                  "208",
                  "226",
                  "300",
                  "301",
                  "302",
                  "303",
                  "304",
                  "305",
                  "306",
                  "307",
                  "308",
                  "400",
                  "401",
                  "402",
                  "403",
                  "404",
                  "405",
                  "406",
                  "407",
                  "408",
                  "409",
                  "410",
                  "411",
                  "412",
                  "413",
                  "414",
                  "415",
                  "416",
                  "417",
                  "418",
                  "421",
                  "422",
                  "423",
                  "424",
                  "425",
                  "426",
                  "428",
                  "429",
                  "431",
                  "451",
                  "500",
                  "501",
                  "502",
                  "503",
                  "504",
                  "505",
                  "506",
                  "507",
                  "508",
                  "510",
                  "511"
                ]
              },
              "type": "array"
            },
            "initialisms": {
              "description": "ST1003 check, among other things, for the correct capitalization of initialisms. The set of known initialisms can be configured with this option.",
              "items": {
                "default": [
                  "ACL",
                  "API",
                  "ASCII",
                  "CPU",
                  "CSS",
                  "DNS",
                  "EOF",
                  "GUID",
                  "HTML",
                  "HTTP",
                  "HTTPS",
                  "ID",
                  "IP",
                  "JSON",
                  "QPS",
                  "RAM",
                  "RPC",
                  "SLA",
                  "SMTP",
                  "SQL",
                  "SSH",
                  "TCP",
                  "TLS",
                  "TTL",
                  "UDP",
                  "UI",
                  "GID",
                  "UID",
                  "UUID",
                  "URI",
                  "URL",
                  "UTF8",
                  "VM",
                  "XML",
                  "XMPP",
                  "XSRF",
                  "XSS",
                  "SIP",
                  "RTP",
                  "AMQP",
                  "DB",
                  "TS"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "tagliatelle": {
          "properties": {
            "case": {
              "properties": {
                "rules": {
                  "patternProperties": {
                    "^.+$": {
                      "enum": [
                        "camel",
                        "pascal",
                        "kebab",
                        "snake",
                        "goCamel",
                        "goPascal",
                        "goKebab",
                        "goSnake",
                        "upper",
                        "lower"
                      ]
                    }
                  },
                  "type": "object"
                },
                "use-field-name": {
                  "default": false,
                  "description": "Use the struct field name to check the name of the struct tag.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "tenv": {
          "properties": {
            "all": {
              "default": false,
              "description": "The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "testpackage": {
          "properties": {
            "allow-packages": {
              "description": "List of packages that don't end with _test that tests are allowed to be in.",
              "items": {
                "examples": ["example"],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "skip-regexp": {
              "description": "Files with names matching this regular expression are skipped.",
              "examples": ["(export|internal)_test\\.go"],
              "type": "string"
            }
          },
          "type": "object"
        },
        "thelper": {
          "properties": {
            "benchmark": {
              "properties": {
                "begin": {
                  "default": true,
                  "description": "Check if `b.Helper()` begins helper function.",
                  "type": "boolean"
                },
                "first": {
                  "default": true,
                  "description": "Check if *testing.B is first param of helper function.",
                  "type": "boolean"
                },
                "name": {
                  "default": true,
                  "description": "Check if *testing.B param has b name.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "fuzz": {
              "properties": {
                "begin": {
                  "default": true,
                  "description": "Check if `f.Helper()` begins helper function.",
                  "type": "boolean"
                },
                "first": {
                  "default": true,
                  "description": "Check if *testing.F is first param of helper function.",
                  "type": "boolean"
                },
                "name": {
                  "default": true,
                  "description": "Check if *testing.F param has f name.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "tb": {
              "properties": {
                "begin": {
                  "default": true,
                  "description": "Check if `tb.Helper()` begins helper function.",
                  "type": "boolean"
                },
                "first": {
                  "default": true,
                  "description": "Check if *testing.TB is first param of helper function.",
                  "type": "boolean"
                },
                "name": {
                  "default": true,
                  "description": "Check if *testing.TB param has tb name.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "test": {
              "properties": {
                "begin": {
                  "default": true,
                  "description": "Check if `t.Helper()` begins helper function.",
                  "type": "boolean"
                },
                "first": {
                  "default": true,
                  "description": "Check if *testing.T is first param of helper function.",
                  "type": "boolean"
                },
                "name": {
                  "default": true,
                  "description": "Check if *testing.T param has t name.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "unparam": {
          "properties": {
            "check-exported": {
              "default": false,
              "description": "Inspect exported functions. Set to true if no external program/library imports your code.\n\nWARNING: if you enable this setting, unparam will report a lot of false-positives in text editors:\nif it's called for subdir of a project it can't find external interfaces. All text editor integrations\nwith golangci-lint call it on a directory with the changed file.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "varcheck": {
          "properties": {
            "exported-fields": {
              "default": false,
              "description": "Check usage of exported variables",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "varnamelen": {
          "properties": {
            "check-receiver": {
              "default": false,
              "description": "Check method receiver names.",
              "type": "boolean"
            },
            "check-return": {
              "default": false,
              "description": "Check named return values.",
              "type": "boolean"
            },
            "check-type-param": {
              "default": false,
              "description": "Check type parameters.",
              "type": "boolean"
            },
            "ignore-chan-recv-ok": {
              "default": false,
              "description": "Ignore `ok` variables that hold the bool return value of a channel receive.",
              "type": "boolean"
            },
            "ignore-decls": {
              "description": "Optional list of variable declarations that should be ignored completely.",
              "examples": [
                ["c echo.Context", "t testing.T", "f *foo.Bar", "const C"]
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ignore-map-index-ok": {
              "default": false,
              "description": "Ignore `ok` variables that hold the bool return value of a map index.",
              "type": "boolean"
            },
            "ignore-names": {
              "default": [[]],
              "description": "Optional list of variable names that should be ignored completely.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ignore-type-assert-ok": {
              "default": false,
              "description": "Ignore `ok` variables that hold the bool return value of a type assertion",
              "type": "boolean"
            },
            "max-distance": {
              "default": 5,
              "description": "Variables used in at most this N-many lines will be ignored.",
              "type": "integer"
            },
            "min-name-length": {
              "default": 3,
              "description": "The minimum length of a variable's name that is considered `long`.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "whitespace": {
          "properties": {
            "multi-func": {
              "default": false,
              "description": "Enforces newlines (or comments) after every multi-line function signature",
              "type": "boolean"
            },
            "multi-if": {
              "default": false,
              "description": "Enforces newlines (or comments) after every multi-line if statement",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "wrapcheck": {
          "properties": {
            "ignoreInterfaceRegexps": {
              "default": [""],
              "description": "An array of glob patterns which, if matched to an underlying interface name, will ignore unwrapped errors returned from a function whose call is defined on the given interface.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ignorePackageGlobs": {
              "default": [""],
              "description": "An array of glob patterns which, if any match the package of the function returning the error, will skip wrapcheck analysis for this error.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ignoreSigRegexps": {
              "default": [""],
              "description": "An array of strings which specify regular expressions of signatures to ignore.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ignoreSigs": {
              "default": [
                ".Errorf(",
                "errors.New(",
                "errors.Unwrap(",
                ".Wrap(",
                ".Wrapf(",
                ".WithMessage(",
                ".WithMessagef(",
                ".WithStack("
              ],
              "description": "An array of strings which specify substrings of signatures to ignore.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "wsl": {
          "properties": {
            "allow-assign-and-anything": {
              "default": false,
              "description": "Controls if you may cuddle assignments and anything without needing an empty line between them.",
              "type": "boolean"
            },
            "allow-assign-and-call": {
              "default": true,
              "description": "Allow calls and assignments to be cuddled as long as the lines have any matching variables, fields or types.",
              "type": "boolean"
            },
            "allow-cuddle-declarations": {
              "default": false,
              "description": "Allow declarations (var) to be cuddled.",
              "type": "boolean"
            },
            "allow-multiline-assign": {
              "default": true,
              "description": "Allow multiline assignments to be cuddled.",
              "type": "boolean"
            },
            "allow-separated-leading-comment": {
              "default": false,
              "description": "Allow leading comments to be separated with empty lines.",
              "type": "boolean"
            },
            "allow-trailing-comment": {
              "default": false,
              "description": "Allow trailing comments in ending of blocks.",
              "type": "boolean"
            },
            "force-case-trailing-whitespace": {
              "default": 0,
              "description": "Force newlines in end of case at this limit (0 = never).",
              "minimum": 0,
              "type": "integer"
            },
            "force-err-cuddling": {
              "default": false,
              "description": "Force cuddling of err checks with err var assignment.",
              "type": "boolean"
            },
            "strict-append": {
              "default": true,
              "description": "If true, append is only allowed to be cuddled if appending value is matching variables, fields or types on line above.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "output": {
      "description": "Output configuration options.",
      "properties": {
        "format": {
          "default": "colored-line-number",
          "description": "Output format to use.",
          "enum": [
            "colored-line-number",
            "line-number",
            "json",
            "tab",
            "checkstyle",
            "code-climate"
          ]
        },
        "path-prefix": {
          "default": "",
          "description": "Add a prefix to the output file references.",
          "type": "string"
        },
        "print-issued-lines": {
          "default": true,
          "description": "Print lines of code with issue.",
          "type": "boolean"
        },
        "print-linter-name": {
          "default": true,
          "description": "Print linter name in the end of issue text.",
          "type": "boolean"
        },
        "unique-by-line": {
          "default": true,
          "description": "Make issues output unique by line.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "run": {
      "description": "Options for analysis running,",
      "properties": {
        "allow-parallel-runners": {
          "default": false,
          "description": "Allow multiple parallel golangci-lint instances running. If disabled, golangci-lint acquires file lock on start.",
          "type": "boolean"
        },
        "build-tags": {
          "default": [],
          "description": "List of build tags to pass to all linters.",
          "examples": [["mytag"]],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "concurrency": {
          "description": "Number of concurrent runners. Defaults to the number of available CPU cores.",
          "examples": [4],
          "minimum": 1,
          "type": "integer"
        },
        "go": {
          "default": "1.17",
          "description": "Targeted Go version.",
          "type": "string"
        },
        "issue-exit-code": {
          "default": 1,
          "description": "Exit code when at least one issue was found.",
          "type": "integer"
        },
        "modules-download-mode": {
          "description": "Option to pass to \"go list -mod={option}\".\nSee \"go help modules\" for more information.",
          "enum": ["mod", "readonly", "vendor"]
        },
        "skip-dirs": {
          "default": [],
          "description": "Which directories to skip: issues from them won't be reported.",
          "examples": [["src/external_libs", "autogenerated_by_my_lib"]],
          "items": {
            "description": "You can use regexp here. The regexp is applied on the full path.\n\"/\" will be replaced by current OS file path separator to properly work on Windows.",
            "examples": ["generated.*"],
            "type": "string"
          },
          "type": "array"
        },
        "skip-dirs-use-default": {
          "default": true,
          "description": "Enable skipping of directories \"vendor\", \"third_party\", \"testdata\", \"examples\", \"Godeps\", and \"builtin\".",
          "type": "boolean"
        },
        "skip-files": {
          "default": [],
          "description": "Which files to skip: they will be analyzed, but issues from them will not be reported.",
          "examples": [[".*\\.my\\.go$", "lib/bad.go"]],
          "items": {
            "description": "You can use regexp here. There is no need to include all autogenerated files, we confidently recognize them. If that is not the case, please let us know.\n\"/\" will be replaced by current OS file path separator to properly work on Windows.",
            "examples": [".*\\.my\\.go$"],
            "type": "string"
          },
          "type": "array"
        },
        "tests": {
          "default": true,
          "description": "Enable inclusion of test files.",
          "type": "boolean"
        },
        "timeout": {
          "default": "1m",
          "description": "Timeout for the analysis.",
          "examples": ["30s", "5m"],
          "pattern": "^\\d*[sm]$",
          "type": "string"
        }
      },
      "type": "object"
    },
    "severity": {
      "properties": {
        "case-sensitive": {
          "default": false,
          "description": "If set to true, severity-rules regular expressions become case sensitive.",
          "type": "boolean"
        },
        "default-severity": {
          "default": "",
          "description": "Set the default severity for issues. If severity rules are defined and the issues do not match or no severity is provided to the rule this will be the default severity applied. Severities should match the supported severity names of the selected out format.",
          "type": "string"
        },
        "rules": {
          "default": [],
          "description": "When a list of severity rules are provided, severity information will be added to lint issues. Severity rules have the same filtering capability as exclude rules except you are allowed to specify one matcher per severity rule.\nOnly affects out formats that support setting severity information.",
          "items": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/definitions/issue-match-path"
                  },
                  {
                    "$ref": "#/definitions/issue-match-source"
                  },
                  {
                    "$ref": "#/definitions/issue-match-linters"
                  },
                  {
                    "$ref": "#/definitions/issue-match-text"
                  }
                ]
              },
              {
                "properties": {
                  "severity": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "type": "object"
}
