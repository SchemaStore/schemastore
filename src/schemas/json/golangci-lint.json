{
  "$schema": "https://json-schema.org/draft/2019-09/schema#",
  "type": "object",
  "definitions": {
    "gocritic-checks": {
      "enum": [
        "appendAssign",
        "argOrder",
        "badCall",
        "badCond",
        "caseOrder",
        "codegenComment",
        "commentedOutCode",
        "deprecatedComment",
        "dupArg",
        "dupBranchBody",
        "dupCase",
        "dupSubExpr",
        "evalOrder",
        "exitAfterDefer",
        "flagDeref",
        "flagName",
        "mapKey",
        "nilValReturn",
        "octalLiteral",
        "offBy1",
        "regexpPattern",
        "sloppyReassign",
        "truncateCmp",
        "weakCond",
        "assignOp",
        "boolExprSimplify",
        "builtinShadow",
        "captLocal",
        "commentFormatting",
        "commentedOutImport",
        "defaultCaseOrder",
        "docStub",
        "dupImport",
        "elseif",
        "emptyFallthrough",
        "emptyStringTest",
        "hexLiteral",
        "ifElseChain",
        "importShadow",
        "initClause",
        "methodExprCall",
        "nestingReduce",
        "newDeref",
        "paramTypeCombine",
        "ptrToRefParam",
        "regexpMust",
        "singleCaseSwitch",
        "sloppyLen",
        "stringXbytes",
        "switchTrue",
        "typeAssertChain",
        "typeSwitchVar",
        "typeUnparen",
        "underef",
        "unlabelStmt",
        "unlambda",
        "unnamedResult",
        "unnecessaryBlock",
        "unslice",
        "valSwap",
        "whyNoLint",
        "wrapperFunc",
        "yodaStyleExpr",
        "appendCombine",
        "equalFold",
        "hugeParam",
        "indexAlloc",
        "rangeExprCopy",
        "rangeValCopy"
      ]
    },
    "gocritic-tags": {
      "enum": [
        "diagnostic",
        "style",
        "performance",
        "experimental",
        "opinionated",
        "security"
      ]
    },
    "govet-analyzers": {
      "enum": [
        "asmdecl",
        "assign",
        "atomic",
        "bools",
        "buildtag",
        "cgocall",
        "composites",
        "copylocks",
        "httpresponse",
        "loopclosure",
        "lostcancel",
        "nilfunc",
        "printf",
        "shift",
        "stdmethods",
        "structtag",
        "tests",
        "unmarshal",
        "unreachable",
        "unsafeptr",
        "unusedresult"
      ]
    },
    "linters": {
      "description": "Linters usable.",
      "$comment": "anyOf with enum is used to allow auto completion of non-custom linters",
      "anyOf": [
        {
          "enum": [
            "govet",
            "errcheck",
            "staticcheck",
            "unused",
            "gosimple",
            "structcheck",
            "varcheck",
            "ineffassign",
            "deadcode",
            "bodyclose",
            "noctx",
            "golint",
            "rowserrcheck",
            "stylecheck",
            "gosec",
            "interfacer",
            "unconvert",
            "dupl",
            "goconst",
            "gocyclo",
            "gocognit",
            "asciicheck",
            "gofmt",
            "gofumpt",
            "goimports",
            "goheader",
            "gci",
            "maligned",
            "depguard",
            "misspell",
            "lll",
            "unparam",
            "dogsled",
            "nakedret",
            "prealloc",
            "scopelint",
            "gocritic",
            "gochecknoinits",
            "gochecknoglobals",
            "godox",
            "funlen",
            "whitespace",
            "wsl",
            "goprintffuncname",
            "gomnd",
            "goerr113",
            "gomodguard",
            "godot",
            "testpackage",
            "nestif",
            "exportloopref",
            "exhaustive",
            "sqlclosecheck",
            "nlreturn",
            "wrapcheck",
            "tparallel",
            "exhaustivestruct",
            "errorlint",
            "nolintlint"
          ]
        },
        {
          "type": "string"
        }
      ]
    },
    "issue-match-path": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "severity": {
          "$comment": "This is here only to allow `additionalProperties: false`."
        }
      },
      "additionalProperties": false
    },
    "issue-match-linters": {
      "type": "object",
      "properties": {
        "linters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linters"
          }
        },
        "severity": {
          "$comment": "This is here only to allow `additionalProperties: false`."
        }
      },
      "additionalProperties": false
    },
    "issue-match-source": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string"
        },
        "severity": {
          "$comment": "This is here only to allow `additionalProperties: false`."
        }
      },
      "additionalProperties": false
    },
    "issue-match-text": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "severity": {
          "$comment": "This is here only to allow `additionalProperties: false`."
        }
      },
      "additionalProperties": false
    }
  },
  "properties": {
    "run": {
      "description": "Options for analysis running,",
      "type": "object",
      "properties": {
        "concurrency": {
          "description": "Number of concurrent runners. Defaults to the number of available CPU cores.",
          "type": "integer",
          "minimum": 1,
          "examples": [
            4
          ]
        },
        "timeout": {
          "description": "Timeout for the analysis.",
          "type": "string",
          "pattern": "^\\d*[sm]$",
          "default": "1m",
          "examples": [
            "30s",
            "5m"
          ]
        },
        "issue-exit-code": {
          "description": "Exit code when at least one issue was found.",
          "type": "integer",
          "default": 1
        },
        "tests": {
          "description": "Enable inclusion of test files.",
          "type": "boolean",
          "default": true
        },
        "build-tags": {
          "description": "List of build tags to pass to all linters.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "examples": [
            [
              "mytag"
            ]
          ]
        },
        "skip-dirs": {
          "description": "Which directories to skip: issues from them won't be reported.",
          "type": "array",
          "items": {
            "description": "You can use regexp here. The regexp is applied on the full path.\n\"/\" will be replaced by current OS file path separator to properly work on Windows.",
            "type": "string",
            "examples": [
              "generated.*"
            ]
          },
          "default": [],
          "examples": [
            [
              "src/external_libs",
              "autogenerated_by_my_lib"
            ]
          ]
        },
        "skip-dirs-use-default": {
          "description": "Enable skipping of directories \"vendor\", \"third_party\", \"testdata\", \"examples\", \"Godeps\", and \"builtin\".",
          "type": "boolean",
          "default": true
        },
        "skip-files": {
          "description": "Which files to skip: they will be analyzed, but issues from them will not be reported.",
          "type": "array",
          "items": {
            "description": "You can use regexp here. There is no need to include all autogenerated files, we confidently recognize them. If that is not the case, please let us know.\n\"/\" will be replaced by current OS file path separator to properly work on Windows.",
            "type": "string",
            "examples": [
              ".*\\.my\\.go$"
            ]
          },
          "default": [],
          "examples": [
            [
              ".*\\.my\\.go$",
              "lib/bad.go"
            ]
          ]
        },
        "modules-download-mode": {
          "description": "Option to pass to \"go list -mod={option}\".\nSee \"go help modules\" for more information.",
          "enum": [
            "readonly",
            "release",
            "vendor"
          ]
        },
        "allow-parallel-runners": {
          "description": "Allow multiple parallel golangci-lint instances running. If disabled, golangci-lint acquires file lock on start.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "output": {
      "description": "Output configuration options.",
      "type": "object",
      "properties": {
        "format": {
          "description": "Output format to use.",
          "enum": [
            "colored-line-number",
            "line-number",
            "json",
            "tab",
            "checkstyle",
            "code-climate"
          ],
          "default": "colored-line-number"
        },
        "print-issued-lines": {
          "description": "Print lines of code with issue.",
          "type": "boolean",
          "default": true
        },
        "print-linter-name": {
          "description": "Print linter name in the end of issue text.",
          "type": "boolean",
          "default": true
        },
        "unique-by-line": {
          "description": "Make issues output unique by line.",
          "type": "boolean",
          "default": true
        },
        "path-prefix": {
          "description": "Add a prefix to the output file references.",
          "type": "string",
          "default": ""
        }
      }
    },
    "linters-settings": {
      "description": "All available settings of specific linters.",
      "type": "object",
      "properties": {
        "dogsled": {
          "type": "object",
          "properties": {
            "max-blank-identifiers": {
              "description": "Check assignments with too many blank identifiers.",
              "type": "integer",
              "default": 2,
              "minimum": 0
            }
          }
        },
        "dupl": {
          "type": "object",
          "properties": {
            "threshold": {
              "description": "Tokens count to trigger issue.",
              "type": "integer",
              "default": 150,
              "minimum": 0
            }
          }
        },
        "errcheck": {
          "type": "object",
          "properties": {
            "check-type-assertions": {
              "description": "Report about not checking errors in type assertions, i.e.: `a := b.(MyStruct)`",
              "type": "boolean",
              "default": false
            },
            "check-blank": {
              "description": "Report about assignment of errors to blank identifier, i.e.: `num, _ := strconv.Atoi(numStr)`",
              "type": "boolean",
              "default": false
            },
            "ignore": {
              "description": "DEPRECATED: use \"exclude\" instead. Comma-separated list of pairs of the form \"pkg:regex\".",
              "type": "string",
              "default": "fmt:.*"
            },
            "exclude": {
              "description": "Path to a file containing a list of functions to exclude from checking. See https://github.com/kisielk/errcheck#excluding-functions for more information.",
              "type": "string",
              "examples": [
                "/path/to/file.txt"
              ]
            }
          }
        },
        "exhaustive": {
          "type": "object",
          "properties": {
            "check-generated": {
              "description": "Also check generated files.",
              "type": "boolean",
              "default": false
            },
            "default-signifies-exhaustive": {
              "description": "Indicates whether switch statements are considered exhaustive if a 'default' case is present, even if not all enum members are listed in the cases.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "funlen": {
          "type": "object",
          "properties": {
            "lines": {
              "type": "integer",
              "default": 60
            },
            "statements": {
              "type": "integer",
              "default": 40
            }
          }
        },
        "gci": {
          "type": "object",
          "properties": {
            "local-prefixes": {
              "description": "Put imports beginning with this prefix after 3rd-party packages.",
              "type": "string",
              "examples": [
                "github.com/org/project"
              ]
            }
          }
        },
        "gocognit": {
          "type": "object",
          "properties": {
            "min-complexity": {
              "description": "Minimum code complexity to report (we recommend 10-20).",
              "type": "integer",
              "default": 30
            }
          }
        },
        "nestif": {
          "type": "object",
          "properties": {
            "min-complexity": {
              "description": "Minimum complexity of \"if\" statements to report.",
              "type": "integer",
              "default": 5
            }
          }
        },
        "goconst": {
          "type": "object",
          "properties": {
            "min-len": {
              "description": "Minimum length of string constant.",
              "type": "integer",
              "default": 3
            },
            "min-occurrences": {
              "description": "Minimum occurrences count to trigger.",
              "type": "integer",
              "default": 3
            }
          }
        },
        "gocritic": {
          "type": "object",
          "properties": {
            "enabled-checks": {
              "description": "Which checks should be enabled. By default, a list of stable checks is used. To see it, run `GL_DEBUG=gocritic golangci-lint run`.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/gocritic-checks"
              }
            },
            "disabled-checks": {
              "description": "Which checks should be disabled.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/gocritic-checks"
              },
              "default": []
            },
            "enabled-tags": {
              "description": "Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/gocritic-tags"
              }
            },
            "disabled-tags": {
              "description": "Disable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/gocritic-tags"
              }
            },
            "settings": {
              "description": "Settings passed to gocritic. Properties must be valid and enabled check names.",
              "type": "object",
              "propertyNames": {
                "$ref": "#/definitions/gocritic-checks"
              }
            }
          }
        },
        "gocyclo": {
          "type": "object",
          "properties": {
            "min-complexity": {
              "description": "Minimum code complexity to report (we recommend 10-20).",
              "type": "integer",
              "default": 30
            }
          }
        },
        "godot": {
          "type": "object",
          "properties": {
            "check-all": {
              "description": "Check all top-level comments, not only declarations.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "godox": {
          "type": "object",
          "properties": {
            "keywords": {
              "description": "Report any comments starting with one of theses keywords. This is useful for TODO or FIXME comments that might be left in the code accidentally and should be resolved before merging.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "TODO",
                "BUG",
                "FIXME"
              ]
            }
          }
        },
        "gofmt": {
          "type": "object",
          "properties": {
            "simplify": {
              "description": "Simplify code.",
              "type": "boolean",
              "default": true
            }
          }
        },
        "goheader": {
          "type": "object",
          "allOf": [
            {
              "properties": {
                "values": {
                  "type": "object",
                  "properties": {
                    "const": {
                      "description": "Constants to use in the template.",
                      "type": "object",
                      "patternProperties": {
                        "^.*$": {
                          "description": "Value for the constant.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "examples": [
                        {
                          "YEAR": "2030",
                          "COMPANY": "MY FUTURISTIC COMPANY"
                        }
                      ]
                    },
                    "regexp": {
                      "description": "Regular expressions to use in your template.",
                      "type": "object",
                      "patternProperties": {
                        "^.*$": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "examples": [
                        {
                          "AUTHOR": ".*@mycompany\\.com"
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              "oneOf": [
                {
                  "properties": {
                    "template": {
                      "description": "Template to put on top of every file.",
                      "type": "string",
                      "examples": [
                        "{{ MY COMPANY }}\nSPDX-License-Identifier: Apache-2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at:\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
                      ]
                    }
                  },
                  "required": [
                    "template"
                  ]
                },
                {
                  "properties": {
                    "template-path": {
                      "description": "Path to the file containing the template source.",
                      "type": "string",
                      "examples": [
                        "my_header_template.txt"
                      ]
                    }
                  },
                  "required": [
                    "template-path"
                  ]
                }
              ]
            }
          ]
        },
        "goimports": {
          "type": "object",
          "properties": {
            "local-prefixes": {
              "description": "Put imports beginning with prefix after 3rd-party packages. It is a comma-separated list of prefixes.",
              "type": "string",
              "examples": [
                "github.com/org/project"
              ]
            }
          }
        },
        "golint": {
          "type": "object",
          "properties": {
            "min-confidence": {
              "description": "Minimum confidence for issues.",
              "type": "number",
              "minimum": 0,
              "exclusiveMaximum": 1
            }
          }
        },
        "gomnd": {
          "type": "object",
          "properties": {
            "settings": {
              "type": "object",
              "properties": {
                "mnd": {
                  "type": "object",
                  "properties": {
                    "checks": {
                      "description": "The list of enabled checks.",
                      "type": "array",
                      "items": {
                        "enum": [
                          "argument",
                          "case",
                          "condition",
                          "operation",
                          "return",
                          "assign"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "gomodguard": {
          "type": "object",
          "properties": {
            "allowed": {
              "type": "object",
              "properties": {
                "modules": {
                  "description": "List of allowed modules.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "examples": [
                      "gopkg.in/yaml.v2"
                    ]
                  }
                },
                "domains": {
                  "description": "List of allowed module domains.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "examples": [
                      "golang.org"
                    ]
                  }
                }
              }
            },
            "blocked": {
              "type": "object",
              "properties": {
                "modules": {
                  "description": "List of blocked modules.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "patternProperties": {
                      "^.*$": {
                        "type": "object",
                        "properties": {
                          "recommendations": {
                            "description": "Recommended modules that should be used instead.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "reason": {
                            "description": "Reason why the recommended module should be used.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "versions": {
                  "description": "List of blocked module version constraints.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "patternProperties": {
                      "^.*$": {
                        "type": "object",
                        "properties": {
                          "version": {
                            "description": "Version constraint.",
                            "type": "string"
                          },
                          "reason": {
                            "description": "Reason why the version constraint exists.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "reason"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "govet": {
          "type": "object",
          "properties": {
            "check-shadowing": {
              "description": "Report shadowed variables.",
              "type": "boolean",
              "default": true
            },
            "settings": {
              "description": "Settings per analyzer. Map of analyzer name to specific settings.\nRun `go tool vet help` to find out more.",
              "type": "object",
              "propertyNames": {
                "$ref": "#/definitions/govet-analyzers"
              },
              "patternProperties": {
                "^.*$": {
                  "description": "Run `go tool vet help <analyzer>` to see all settings.",
                  "type": "object"
                }
              }
            },
            "enable": {
              "description": "Enable analyzers by name.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/govet-analyzers"
              }
            },
            "disable": {
              "description": "Disable analyzers by name.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/govet-analyzers"
              }
            },
            "enable-all": {
              "description": "Enable all analyzers.",
              "type": "boolean",
              "default": false
            },
            "disable-all": {
              "description": "Disable all analyzers.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "depguard": {
          "type": "object",
          "properties": {
            "list-type": {
              "enum": [
                "blacklist",
                "whitelist"
              ],
              "default": "blacklist"
            },
            "include-go-root": {
              "description": "Whether to check the list against the standard lib.",
              "type": "boolean",
              "default": false
            },
            "packages": {
              "description": "List of packages for the list type specified.",
              "type": "array",
              "items": {
                "type": "string",
                "examples": [
                  "github.com/OpenPeeDeeP/depguard"
                ]
              }
            },
            "packages-with-error-message": {
              "description": "Specify a mapping from packages to the error message to display.",
              "type": "object",
              "patternProperties": {
                "^.*$": {
                  "type": "string"
                }
              },
              "examples": [
                {
                  "github.com/OpenPeeDeeP/depguards": "Please use \"github.com/OpenPeeDeeP/depguard\"."
                }
              ]
            }
          }
        },
        "lll": {
          "type": "object",
          "properties": {
            "line-length": {
              "description": "Maximum allowed line length, lines longer will be reported.",
              "type": "integer",
              "minimum": 1,
              "default": 120
            },
            "tab-width": {
              "description": "Width of \"\\t\" in spaces.",
              "type": "integer",
              "minimum": 0,
              "default": 1
            }
          }
        },
        "maligned": {
          "type": "object",
          "properties": {
            "suggest-new": {
              "description": "Whether to print struct with more effective memory layout.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "misspell": {
          "description": "Correct spellings using locale preferences for US or UK. Default is to use a neutral variety of English.",
          "type": "object",
          "properties": {
            "locale": {
              "enum": [
                "US",
                "UK"
              ]
            },
            "ignore-words": {
              "description": "List of words to ignore.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "nakedret": {
          "type": "object",
          "properties": {
            "max-func-lines": {
              "description": "Report if a function has more lines of code than this value and it has naked returns.",
              "type": "integer",
              "minimum": 0,
              "default": 30
            }
          }
        },
        "prealloc": {
          "description": "We do not recommend using this linter before doing performance profiling.\nFor most programs usage of prealloc will be a premature optimization.",
          "type": "object",
          "properties": {
            "simple": {
              "description": "Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.",
              "type": "boolean",
              "default": true
            },
            "range-loops": {
              "description": "Report preallocation suggestions on range loops.",
              "type": "boolean",
              "default": true
            },
            "for-loops": {
              "description": "Report preallocation suggestions on for loops.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "nolintlint": {
          "type": "object",
          "properties": {
            "allow-unused": {
              "description": "Enable to ensure that nolint directives are all used.",
              "type": "boolean",
              "default": true
            },
            "allow-leading-space": {
              "description": "Disable to ensure that nolint directives don't have a leading space.",
              "type": "boolean",
              "default": true
            },
            "allow-no-explanation": {
              "description": "Exclude these linters from requiring an explanation.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "require-explanation": {
              "description": "Enable to require an explanation of nonzero length after each nolint directive.",
              "type": "boolean",
              "default": false
            },
            "require-specific": {
              "description": "Enable to require nolint directives to mention the specific linter being suppressed.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "rowserrcheck": {
          "type": "object",
          "properties": {
            "packages": {
              "type": "array",
              "items": {
                "type": "string",
                "examples": [
                  "github.com/jmoiron/sqlx"
                ]
              }
            }
          }
        },
        "testpackage": {
          "type": "object",
          "properties": {
            "skip-regexp": {
              "description": "Files with names matching this regular expression are skipped.",
              "type": "string",
              "examples": [
                "(export|internal)_test\\.go"
              ]
            }
          }
        },
        "unparam": {
          "type": "object",
          "properties": {
            "check-exported": {
              "description": "Inspect exported functions. Set to true if no external program/library imports your code.\n\nWARNING: if you enable this setting, unparam will report a lot of false-positives in text editors:\nif it's called for subdir of a project it can't find external interfaces. All text editor integrations\nwith golangci-lint call it on a directory with the changed file.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "unused": {
          "type": "object",
          "properties": {
            "check-exported": {
              "description": "Treat code as a program (not a library) and report unused exported identifiers.\n\nWARNING: if you enable this setting, unused will report a lot of false-positives in text editors:\nif it's called for subdir of a project it can't find funcs usages. All text editor integrations\nwith golangci-lint call it on a directory with the changed file.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "whitespace": {
          "type": "object",
          "properties": {
            "multi-if": {
              "description": "Enforces newlines (or comments) after every multi-line if statement",
              "type": "boolean",
              "default": false
            },
            "multi-func": {
              "description": "Enforces newlines (or comments) after every multi-line function signature",
              "type": "boolean",
              "default": false
            }
          }
        },
        "wsl": {
          "type": "object",
          "properties": {
            "strict-append": {
              "description": " If true, append is only allowed to be cuddled if appending value is matching variables, fields or types on line above.",
              "type": "boolean",
              "default": true
            },
            "allow-assign-and-call": {
              "description": "Allow calls and assignments to be cuddled as long as the lines have any matching variables, fields or types.",
              "type": "boolean",
              "default": true
            },
            "allow-multiline-assign": {
              "description": "Allow multiline assignments to be cuddled.",
              "type": "boolean",
              "default": true
            },
            "allow-cuddle-declarations": {
              "description": "Allow declarations (var) to be cuddled.",
              "type": "boolean",
              "default": false
            },
            "allow-trailing-comment": {
              "description": "Allow trailing comments in ending of blocks.",
              "type": "boolean",
              "default": false
            },
            "force-case-trailing-whitespace": {
              "description": "Force newlines in end of case at this limit (0 = never).",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "force-err-cuddling": {
              "description": "Force cuddling of err checks with err var assignment.",
              "type": "boolean",
              "default": false
            },
            "allow-separated-leading-comment": {
              "description": "Allow leading comments to be separated with empty lines.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "gofumpt": {
          "type": "object",
          "properties": {
            "extra-rules": {
              "description": "Choose whether or not to use the extra rules that are disabled by default.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "errorlint": {
          "type": "object",
          "properties": {
            "errorf": {
              "description": "Report non-wrapping error creation using fmt.Errorf",
              "type": "boolean",
              "default": true
            }
          }
        },
        "custom": {
          "description": "The custom section can be used to define linter plugins to be loaded at runtime. See README of golangci-lint for more information.\nEach custom linter should have a unique name.",
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "type": "object",
              "properties": {
                "path": {
                  "description": "The path to the plugin *.so. Can be absolute or local.",
                  "type": "string",
                  "examples": [
                    "/path/to/example.so"
                  ]
                },
                "description": {
                  "description": "The description of the linter, for documentation purposes only.",
                  "type": "string"
                },
                "original-url": {
                  "description": "Intended to point to the repo location of the linter, for documentation purposes only.",
                  "type": "string"
                }
              },
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "linters": {
      "type": "object",
      "properties": {
        "enable": {
          "description": "List of enabled linters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/linters"
          }
        },
        "disable": {
          "description": "List of disabled linters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/linters"
          }
        },
        "disable-all": {
          "description": "Whether to disable all linters. You can re-enable them with `enable` explicitly.",
          "type": "boolean",
          "default": false
        },
        "presets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fast": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "issues": {
      "type": "object",
      "properties": {
        "exclude": {
          "description": "List of regular expressions of issue texts to exclude.\nBut independently from this option we use default exclude patterns. Their usage can be controlled through `exclude-use-default`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "exclude-rules": {
          "description": "Exclude configuration per-path, per-linter, per-text and per-source",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "linters": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/linters"
                }
              },
              "text": {
                "type": "string"
              },
              "source": {
                "type": "string"
              }
            }
          }
        },
        "exclude-use-default": {
          "description": "Independently from option `exclude` we use default exclude patterns. This behavior can be disabled by this option.",
          "type": "boolean",
          "default": true
        },
        "exclude-case-sensitive": {
          "description": "If set to true, exclude and exclude-rules regular expressions become case sensitive.",
          "type": "boolean",
          "default": false
        },
        "include": {
          "description": "The list of ids of default excludes to include or disable.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "max-issues-per-linter": {
          "description": "Maximum issues count per one linter. Set to 0 to disable.",
          "type": "integer",
          "default": 50,
          "minimum": 0
        },
        "max-same-issues": {
          "description": "Maximum count of issues with the same text. Set to 0 to disable.",
          "type": "integer",
          "default": 3,
          "minimum": 0
        },
        "new": {
          "description": "Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.",
          "type": "boolean",
          "default": false
        },
        "new-from-rev": {
          "description": "Show only new issues created after this git revision.",
          "type": "string"
        },
        "new-from-patch": {
          "description": "Show only new issues created in git patch with this file path.",
          "type": "string",
          "examples": [
            "path/to/patch/file"
          ]
        }
      }
    },
    "severity": {
      "type": "object",
      "properties": {
        "default-severity": {
          "description": "Set the default severity for issues. If severity rules are defined and the issues do not match or no severity is provided to the rule this will be the default severity applied. Severities should match the supported severity names of the selected out format.",
          "type": "string",
          "default": ""
        },
        "case-sensitive": {
          "description": "If set to true, severity-rules regular expressions become case sensitive.",
          "type": "boolean",
          "default": false
        },
        "rules": {
          "description": "When a list of severity rules are provided, severity information will be added to lint issues. Severity rules have the same filtering capability as exclude rules except you are allowed to specify one matcher per severity rule.\nOnly affects out formats that support setting severity information.",
          "type": "array",
          "items": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/definitions/issue-match-path"
                  },
                  {
                    "$ref": "#/definitions/issue-match-source"
                  },
                  {
                    "$ref": "#/definitions/issue-match-linters"
                  },
                  {
                    "$ref": "#/definitions/issue-match-text"
                  }
                ]
              },
              {
                "properties": {
                  "severity": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "default": []
        }
      }
    }
  }
}
