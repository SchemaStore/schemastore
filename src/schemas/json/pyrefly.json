{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Pyrefly Configuration",
  "description": "Schema for pyrefly.toml configuration file",
  "type": "object",
  "properties": {
    "project-includes": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Files to include as sources (user-space code)",
      "default": ["**/*"]
    },
    "project-excludes": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Files to exclude from sources",
      "default": ["**/*venv/**"]
    },
    "search-path": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of directories where imports are resolved from"
    },
    "typeshed-path": {
      "type": "string",
      "description": "Override bundled typeshed with custom path"
    },
    "python-interpreter": {
      "type": "string",
      "description": "Path to Python executable for environment querying"
    },
    "python-platform": {
      "type": "string",
      "description": "Platform for sys.platform checks",
      "enum": ["darwin", "linux", "win32"]
    },
    "python-version": {
      "type": "string",
      "description": "Python version string",
      "pattern": "^\\d+\\.\\d+(\\.\\d+)?$"
    },
    "site-package-path": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of directories containing third-party packages"
    },
    "conda-environment": {
      "type": "string",
      "description": "Name of conda environment to use"
    },
    "untyped-def-behavior": {
      "type": "string",
      "description": "How to handle untyped function definitions",
      "enum": [
        "check-and-infer-return-type",
        "check-and-infer-return-any",
        "skip-and-infer-return-any"
      ],
      "default": "check-and-infer-return-type"
    },
    "replace-imports-with-any": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Module patterns to replace with typing.Any"
    },
    "ignore-errors-in-generated-code": {
      "type": "boolean",
      "description": "Ignore errors in generated code (marked with @generated)",
      "default": false
    },
    "use-untyped-imports": {
      "type": "boolean",
      "description": "Skip py.typed checks for site-package imports",
      "default": true
    },
    "ignore-missing-source": {
      "type": "boolean",
      "description": "Skip checks for missing non-stub packages",
      "default": true
    },
    "permissive-ignores": {
      "type": "boolean",
      "description": "Consider any ignore comment to suppress errors",
      "default": false
    },
    "errors": {
      "type": "object",
      "description": "Enable/disable specific error types",
      "properties": {
        "assert-type": { "type": "boolean" },
        "bad-argument-count": { "type": "boolean" },
        "bad-argument-type": { "type": "boolean" },
        "bad-assignment": { "type": "boolean" },
        "bad-return": { "type": "boolean" },
        "invalid-inheritance": { "type": "boolean" },
        "missing-return": { "type": "boolean" },
        "undefined-import": { "type": "boolean" },
        "undefined-variable": { "type": "boolean" },
        "unused-import": { "type": "boolean" },
        "unused-variable": { "type": "boolean" }
      },
      "additionalProperties": {
        "type": "boolean"
      }
    },
    "sub-config": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "matches": {
            "type": "string",
            "description": "File pattern to match"
          },
          "untyped-def-behavior": {
            "type": "string",
            "enum": [
              "check-and-infer-return-type",
              "check-and-infer-return-any",
              "skip-and-infer-return-any"
            ]
          }
        },
        "required": ["matches"],
        "additionalProperties": true
      }
    }
  },
  "additionalProperties": false
}
