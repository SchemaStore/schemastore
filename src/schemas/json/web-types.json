{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "additionalProperties": false,
  "definitions": {
    "abstract": {
      "description": "Mark contribution as abstract. Such contributions serve only as super contributions for other contributions.",
      "type": "boolean"
    },
    "base-contribution": {
      "description": "The base for any contributions.",
      "javaAbstract": true,
      "javaInterfaces": ["GenericContributionsHost"],
      "properties": {
        "abstract": {
          "$ref": "#/definitions/abstract"
        },
        "css": {
          "$ref": "#/definitions/css"
        },
        "deprecated": {
          "$ref": "#/definitions/deprecated"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "description-sections": {
          "$ref": "#/definitions/description-sections"
        },
        "doc-url": {
          "$ref": "#/definitions/doc-url"
        },
        "exclusive-contributions": {
          "$ref": "#/definitions/exclusive-contributions"
        },
        "experimental": {
          "$ref": "#/definitions/experimental"
        },
        "extends": {
          "$ref": "#/definitions/extends"
        },
        "extension": {
          "$ref": "#/definitions/extension"
        },
        "html": {
          "$ref": "#/definitions/html"
        },
        "icon": {
          "$ref": "#/definitions/icon"
        },
        "js": {
          "$ref": "#/definitions/js"
        },
        "name": {
          "$ref": "#/definitions/name"
        },
        "pattern": {
          "$ref": "#/definitions/name-pattern-root"
        },
        "priority": {
          "$ref": "#/definitions/priority"
        },
        "proximity": {
          "$ref": "#/definitions/proximity"
        },
        "source": {
          "$ref": "#/definitions/source"
        },
        "virtual": {
          "$ref": "#/definitions/virtual"
        }
      },
      "type": "object"
    },
    "css": {
      "allOf": [
        {
          "$ref": "#/definitions/css-contributions-host"
        }
      ],
      "description": "Contains contributions to CSS namespace. It's property names represent symbol kinds, its property values contain list of contributions of particular kind. There are 5 predefined kinds, which integrate directly with IDE - properties, classes, functions, pseudo-elements and pseudo-classes.",
      "type": "object"
    },
    "css-contributions-host": {
      "javaInterface": true,
      "javaInterfaces": ["GenericContributionsHost"],
      "patternProperties": {
        "^(?!pattern$).*$": {
          "$ref": "#/definitions/generic-css-contributions"
        }
      },
      "properties": {
        "classes": {
          "description": "CSS classes",
          "items": {
            "$ref": "#/definitions/css-generic-item"
          },
          "type": "array"
        },
        "functions": {
          "description": "CSS functions",
          "items": {
            "$ref": "#/definitions/css-generic-item"
          },
          "type": "array"
        },
        "properties": {
          "description": "CSS properties",
          "items": {
            "$ref": "#/definitions/css-property"
          },
          "type": "array"
        },
        "pseudo-classes": {
          "description": "CSS pseudo-classes",
          "items": {
            "$ref": "#/definitions/css-pseudo-class"
          },
          "type": "array"
        },
        "pseudo-elements": {
          "description": "CSS pseudo-elements",
          "items": {
            "$ref": "#/definitions/css-pseudo-element"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "css-generic-item": {
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        },
        {
          "$ref": "#/definitions/css-contributions-host"
        }
      ],
      "type": "object"
    },
    "css-property": {
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        },
        {
          "$ref": "#/definitions/css-contributions-host"
        }
      ],
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "css-pseudo-class": {
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        },
        {
          "$ref": "#/definitions/css-contributions-host"
        }
      ],
      "properties": {
        "arguments": {
          "description": "Specify whether the pseudo-class requires arguments.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "css-pseudo-element": {
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        },
        {
          "$ref": "#/definitions/css-contributions-host"
        }
      ],
      "properties": {
        "arguments": {
          "description": "Specify whether the pseudo-element requires arguments.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "default": {
      "type": "string"
    },
    "deprecated": {
      "default": false,
      "type": "boolean"
    },
    "deprecated-description-markup": {
      "deprecationMessage": "Use top-level property.",
      "description": "Deprecated, use top-level property.",
      "oneOf": [
        {
          "$ref": "#/definitions/description-markup"
        }
      ]
    },
    "deprecated-html-attribute-vue-argument": {
      "additionalProperties": false,
      "deprecationMessage": "Contribute Vue directives to /contributions/html/vue-directives",
      "description": "Deprecated vue-specific property - contribute Vue directives to /contributions/html/vue-directives",
      "properties": {
        "description": {
          "$ref": "#/definitions/description"
        },
        "doc-url": {
          "$ref": "#/definitions/doc-url"
        },
        "pattern": {
          "$ref": "#/definitions/name-pattern-root"
        },
        "required": {
          "default": false,
          "description": "Whether directive requires an argument",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "deprecated-html-attribute-vue-modifier": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "$ref": "#/definitions/description"
        },
        "doc-url": {
          "$ref": "#/definitions/doc-url"
        },
        "name": {
          "$ref": "#/definitions/name"
        },
        "pattern": {
          "$ref": "#/definitions/name-pattern-root"
        }
      },
      "required": ["name"],
      "type": "object"
    },
    "deprecated-types-syntax": {
      "deprecationMessage": "Use top-level js-types-syntax property.",
      "description": "Deprecated, use top-level js-types-syntax property.",
      "oneOf": [
        {
          "$ref": "#/definitions/js-types-syntax"
        }
      ]
    },
    "description": {
      "description": "Short description to be rendered in documentation popup. It will be rendered according to description-markup setting.",
      "type": "string"
    },
    "description-markup": {
      "default": "none",
      "description": "Markup language in which descriptions are formatted.",
      "enum": ["html", "markdown", "none"],
      "type": "string"
    },
    "description-sections": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Custom sections to be shown below description in the documentation popup.",
      "type": "object"
    },
    "disablement-rules": {
      "additionalProperties": false,
      "description": "Specify rules for disabling web framework support. These rules take precedence over enable-when rules. They allow to turn off framework support in case of some conflicts between frameworks priority.",
      "properties": {
        "file-extensions": {
          "description": "Extensions of files, which should have the framework support disabled",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "file-name-patterns": {
          "description": "RegExp patterns to match file names, which should have the framework support disabled",
          "items": {
            "$ref": "#/definitions/pattern"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "doc-url": {
      "description": "Link to online documentation.",
      "type": "string"
    },
    "enablement-rules": {
      "additionalProperties": false,
      "description": "Specify rules for enabling web framework support. Only one framework can be enabled in a particular file. If you need your contributions to be enabled in all files, regardless of the context, do not specify the framework.",
      "properties": {
        "file-extensions": {
          "description": "Extensions of files, which should have the framework support enabled. Use this to support custom file extensions like '.vue' or '.svelte'. Never specify generic extensions like '.html', '.js' or '.ts'. If you need your contributions to be present in every file don't specify the framework at all",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "file-name-patterns": {
          "description": "RegExp patterns to match file names, which should have the framework support enabled. Use carefully as broken pattern may even freeze IDE.",
          "items": {
            "$ref": "#/definitions/pattern"
          },
          "type": "array"
        },
        "ide-libraries": {
          "description": "Global JavaScript libraries names enabled within the IDE, which enable framework support in the whole project",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "node-packages": {
          "description": "Node.js package names, which enable framework support within the folder containing the package.json.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "script-url-patterns": {
          "description": "RegExps to match script URLs, which enable framework support within a particular HTML.",
          "items": {
            "$ref": "#/definitions/pattern"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "exclusive-contributions": {
      "description": "Specify list of contribution kinds qualified with a namespace, for which during reference resolution this will be the final contribution host. E.g. if a special HTML element does not accept standard attributes, add:\n\"exclusive-contributions\": [\"/html/attributes\"].",
      "items": {
        "pattern": "/(html|js|css)/[^/\\n\\r]+",
        "type": "string"
      },
      "type": "array"
    },
    "experimental": {
      "default": false,
      "type": "boolean"
    },
    "extends": {
      "$ref": "#/definitions/reference"
    },
    "extension": {
      "description": "Mark contribution as an extension. Such contributions do not define a new contribution on their own, but can provide additional properties or contributions to existing contributions.",
      "type": "boolean"
    },
    "framework-config": {
      "additionalProperties": false,
      "description": "Provide configuration for the specified web framework. This is an advanced feature, which is used to provide support for templating frameworks like Angular, Vue, Svelte, etc.",
      "properties": {
        "canonical-names": {
          "additionalProperties": false,
          "description": "In many frameworks symbols can have multiple versions of a name. Specify canonical name conversion rule for names of particular symbol kinds against which comparisons will be made. Format of the 'canonical-names' property names is '{namespace}/{symbol kind}'. By default symbol names in HTML namespace are converted to lower-case, and in CSS and JS namespaces are left as-is. In case of name patterns, rules are applied to each part of the pattern separately, so even if the symbol with pattern is in HTML namespace, references to JS events will be case-sensitive.",
          "patternProperties": {
            "^/(html|css|js)/[^/\\n\\r]+$": {
              "$ref": "#/definitions/name-converter"
            }
          },
          "type": "object"
        },
        "disable-when": {
          "$ref": "#/definitions/disablement-rules"
        },
        "enable-when": {
          "$ref": "#/definitions/enablement-rules"
        },
        "match-names": {
          "additionalProperties": false,
          "description": "Provide an array of name conversions, in which particular symbol kinds should be matched against canonical names of symbols. By default symbol names are converted using canonical-names rule.",
          "patternProperties": {
            "^/(html|css|js)/[^/\\n\\r]+$": {
              "$ref": "#/definitions/name-converters"
            }
          },
          "type": "object"
        },
        "name-variants": {
          "additionalProperties": false,
          "description": "Provide an array of name conversions, in which particular symbol kinds should be proposed in auto completion. Format of the 'name-variants' property names is '{namespace}/{symbol kind}'. All symbol kinds are by default provided as-is.",
          "patternProperties": {
            "^/(html|css|js)/[^/\\n\\r]+$": {
              "$ref": "#/definitions/name-converters"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "generic-contribution": {
      "allOf": [
        {
          "$ref": "#/definitions/typed-contribution"
        }
      ],
      "description": "A generic contribution. All contributions are of this type, except for HTML attributes and elements, as well as predefined CSS contribution kinds.",
      "javaAbstract": true,
      "properties": {
        "attribute-value": {
          "$ref": "#/definitions/html-attribute-value"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "required": {
          "$ref": "#/definitions/required"
        }
      },
      "type": "object"
    },
    "generic-css-contribution": {
      "allOf": [
        {
          "$ref": "#/definitions/generic-contribution"
        },
        {
          "$ref": "#/definitions/css-contributions-host"
        }
      ],
      "type": "object"
    },
    "generic-css-contribution-or-property": {
      "javaInterfaces": ["GenericContributionOrProperty"],
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/generic-css-contribution"
        }
      ]
    },
    "generic-css-contributions": {
      "javaLenientDeserialize": true,
      "oneOf": [
        {
          "$ref": "#/definitions/generic-css-contribution-or-property"
        },
        {
          "items": {
            "$ref": "#/definitions/generic-css-contribution-or-property"
          },
          "type": "array"
        }
      ]
    },
    "generic-html-contribution": {
      "allOf": [
        {
          "$ref": "#/definitions/generic-contribution"
        },
        {
          "$ref": "#/definitions/html-contributions-host"
        }
      ],
      "type": "object"
    },
    "generic-html-contribution-or-property": {
      "javaInterfaces": ["GenericContributionOrProperty"],
      "oneOf": [
        {
          "$ref": "#/definitions/generic-html-contribution"
        },
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        }
      ]
    },
    "generic-html-contributions": {
      "javaLenientDeserialize": true,
      "oneOf": [
        {
          "$ref": "#/definitions/generic-html-contribution-or-property"
        },
        {
          "items": {
            "$ref": "#/definitions/generic-html-contribution-or-property"
          },
          "type": "array"
        }
      ]
    },
    "generic-js-contribution": {
      "allOf": [
        {
          "$ref": "#/definitions/generic-contribution"
        },
        {
          "$ref": "#/definitions/js-contributions-host"
        }
      ],
      "type": "object"
    },
    "generic-js-contribution-or-property": {
      "javaInterfaces": ["GenericContributionOrProperty"],
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/generic-js-contribution"
        }
      ]
    },
    "generic-js-contributions": {
      "javaLenientDeserialize": true,
      "oneOf": [
        {
          "$ref": "#/definitions/generic-js-contribution-or-property"
        },
        {
          "items": {
            "$ref": "#/definitions/generic-js-contribution-or-property"
          },
          "type": "array"
        }
      ]
    },
    "html": {
      "allOf": [
        {
          "$ref": "#/definitions/html-contributions-host"
        }
      ],
      "description": "Contains contributions to HTML namespace. It's property names represent symbol kinds, its property values contain list of contributions of particular kind. There are 2 predefined kinds, which integrate directly with IDE - HTML elements and HTML attributes. There are also 2 deprecated kinds: tags (which is equivalent to 'elements') and 'events' (which was moved to JS namespace)",
      "properties": {
        "description-markup": {
          "$ref": "#/definitions/deprecated-description-markup"
        },
        "tags": {
          "deprecationMessage": "Use `elements` property.",
          "description": "Deprecated, use `elements` property.",
          "items": {
            "$ref": "#/definitions/html-element"
          },
          "type": "array"
        },
        "types-syntax": {
          "$ref": "#/definitions/deprecated-types-syntax"
        }
      },
      "type": "object"
    },
    "html-attribute": {
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        },
        {
          "$ref": "#/definitions/html-contributions-host"
        }
      ],
      "properties": {
        "default": {
          "type": "string"
        },
        "required": {
          "$ref": "#/definitions/required"
        },
        "value": {
          "$ref": "#/definitions/html-attribute-value"
        },
        "vue-argument": {
          "$ref": "#/definitions/deprecated-html-attribute-vue-argument"
        },
        "vue-modifiers": {
          "deprecationMessage": "Contribute Vue directives to /contributions/html/vue-directives",
          "description": "Deprecated vue-specific property - contribute Vue directives to /contributions/html/vue-directives",
          "items": {
            "$ref": "#/definitions/deprecated-html-attribute-vue-modifier"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "html-attribute-value": {
      "additionalProperties": false,
      "properties": {
        "default": {
          "type": "string"
        },
        "kind": {
          "enum": ["no-value", "plain", "expression"],
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/html-value-type"
        }
      },
      "type": "object"
    },
    "html-contributions-host": {
      "javaInterface": true,
      "javaInterfaces": ["GenericContributionsHost"],
      "patternProperties": {
        "^(?!pattern$).*$": {
          "$ref": "#/definitions/generic-html-contributions"
        }
      },
      "properties": {
        "attributes": {
          "description": "HTML attributes.",
          "items": {
            "$ref": "#/definitions/html-attribute"
          },
          "type": "array"
        },
        "elements": {
          "description": "HTML elements.",
          "items": {
            "$ref": "#/definitions/html-element"
          },
          "type": "array"
        },
        "events": {
          "deprecationMessage": "Contribute events to JS namespace: /js/events",
          "description": "DOM events are deprecated in HTML namespace. Contribute events to JS namespace: /js/events",
          "items": {
            "$ref": "#/definitions/generic-html-contribution"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "html-element": {
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        },
        {
          "$ref": "#/definitions/html-contributions-host"
        }
      ],
      "type": "object"
    },
    "html-value-type": {
      "oneOf": [
        {
          "description": "Provide one of special attribute value types:  \"enum\", \"of-match\", or a simple JavaScript type according to the specified type format.",
          "type": "string"
        },
        {
          "$ref": "#/definitions/type-reference"
        },
        {
          "items": {
            "$ref": "#/definitions/type"
          },
          "type": "array"
        }
      ]
    },
    "icon": {
      "description": "Relative path to the icon representing the symbol.",
      "type": "string"
    },
    "js": {
      "allOf": [
        {
          "$ref": "#/definitions/js-contributions-host"
        }
      ],
      "description": "Contains contributions to JS namespace. It's property names represent symbol kinds, its property values contain list of contributions of particular kind. There are 2 predefined kinds, which integrate directly with IDE - properties and events.",
      "type": "object"
    },
    "js-contributions-host": {
      "javaInterface": true,
      "javaInterfaces": ["GenericContributionsHost"],
      "patternProperties": {
        "^(?!pattern$).*$": {
          "$ref": "#/definitions/generic-js-contributions"
        }
      },
      "properties": {
        "events": {
          "description": "DOM events",
          "items": {
            "$ref": "#/definitions/generic-js-contribution"
          },
          "type": "array"
        },
        "properties": {
          "description": "JavaScript properties of an object, HTML tag, framework component, etc.",
          "items": {
            "$ref": "#/definitions/generic-js-contribution"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "js-types-syntax": {
      "description": "Language in which JavaScript objects types are specified.",
      "enum": ["typescript"],
      "type": "string"
    },
    "list-reference": {
      "description": "A reference to an element in Web-Types model.",
      "oneOf": [
        {
          "$ref": "#/definitions/reference"
        },
        {
          "items": {
            "$ref": "#/definitions/reference"
          },
          "type": "array"
        }
      ]
    },
    "name": {
      "type": "string"
    },
    "name-converter": {
      "enum": [
        "as-is",
        "PascalCase",
        "camelCase",
        "lowercase",
        "UPPERCASE",
        "kebab-case",
        "snake_case"
      ],
      "type": "string"
    },
    "name-converters": {
      "items": {
        "$ref": "#/definitions/name-converter"
      },
      "type": "array"
    },
    "name-pattern": {
      "oneOf": [
        {
          "additionalProperties": false,
          "properties": {
            "delegate": {
              "$ref": "#/definitions/reference"
            },
            "deprecated": {
              "$ref": "#/definitions/deprecated"
            },
            "items": {
              "$ref": "#/definitions/list-reference"
            },
            "or": {
              "$ref": "#/definitions/name-pattern-template"
            },
            "priority": {
              "$ref": "#/definitions/priority"
            },
            "proximity": {
              "$ref": "#/definitions/proximity"
            },
            "repeat": {
              "type": "boolean"
            },
            "required": {
              "$ref": "#/definitions/required"
            },
            "template": {
              "$ref": "#/definitions/name-pattern-template"
            },
            "unique": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "case-sensitive": {
              "default": true,
              "type": "boolean"
            },
            "regex": {
              "type": "string"
            }
          },
          "required": ["regex"],
          "type": "object"
        }
      ],
      "type": "object"
    },
    "name-pattern-root": {
      "oneOf": [
        {
          "$ref": "#/definitions/name-pattern"
        },
        {
          "type": "string"
        }
      ]
    },
    "name-pattern-template": {
      "items": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "$ref": "#/definitions/name-pattern-template"
          },
          {
            "$ref": "#/definitions/name-pattern"
          }
        ]
      },
      "minItems": 1,
      "type": "array"
    },
    "pattern": {
      "description": "A RegEx pattern to match whole content. Syntax should work with at least ECMA, Java and Python implementations.",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "properties": {
            "case-sensitive": {
              "default": true,
              "type": "boolean"
            },
            "regex": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "priority": {
      "enum": ["lowest", "low", "normal", "high", "highest"],
      "type": "string"
    },
    "proximity": {
      "type": "integer"
    },
    "reference": {
      "description": "A reference to an element in Web-Types model.",
      "oneOf": [
        {
          "$ref": "#/definitions/reference-with-props"
        },
        {
          "type": "string"
        }
      ]
    },
    "reference-with-props": {
      "properties": {
        "filter": {
          "type": "string"
        },
        "includeAbstract": {
          "type": "boolean"
        },
        "includeVirtual": {
          "default": true,
          "type": "boolean"
        },
        "path": {
          "type": "string"
        }
      },
      "required": ["path"],
      "type": "object"
    },
    "required": {
      "type": "boolean"
    },
    "source": {
      "description": "Allows to specify the source of the entity. For Vue.js component this may be for instance a class.",
      "oneOf": [
        {
          "additionalProperties": false,
          "properties": {
            "file": {
              "description": "Path to the file, relative to the web-types JSON.",
              "type": "string"
            },
            "offset": {
              "description": "Offset in the file under which the source symbol, like class name, is located.",
              "type": "integer"
            }
          },
          "required": ["file", "offset"],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "module": {
              "description": "Name of module, which exports the symbol. May be omitted, in which case it's assumed to be the name of the library.",
              "type": "string"
            },
            "symbol": {
              "description": "Name of the exported symbol.",
              "type": "string"
            }
          },
          "required": ["symbol"],
          "type": "object"
        }
      ],
      "type": "object"
    },
    "type": {
      "oneOf": [
        {
          "$ref": "#/definitions/type-reference"
        },
        {
          "type": "string"
        }
      ]
    },
    "type-list": {
      "description": "Specify type according to selected language for type syntax. The type can be specified by a string expression, an object with list of imports and an expression, or an array of possible types.",
      "oneOf": [
        {
          "$ref": "#/definitions/type"
        },
        {
          "items": {
            "$ref": "#/definitions/type"
          },
          "type": "array"
        }
      ]
    },
    "type-reference": {
      "additionalProperties": false,
      "properties": {
        "module": {
          "description": "Name of module, which exports the type. May be omitted, in which case it's assumed to be the name of the library.",
          "type": "string"
        },
        "name": {
          "description": "Name of the symbol to import",
          "type": "string"
        }
      },
      "required": ["name"],
      "type": "object"
    },
    "typed-contribution": {
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        }
      ],
      "description": "The base for any contribution, which can possibly have a JS type.",
      "javaAbstract": true,
      "properties": {
        "type": {
          "$ref": "#/definitions/type-list"
        }
      },
      "type": "object"
    },
    "virtual": {
      "description": "Mark contribution as virtual. Virtual contributions can be filtered out if needed in references. A virtual contribution meaning may differ by framework or kind contexts, but usually means something synthetic or something, which gets erased in the runtime by the framework. E.g. Vue or Angular attribute bindings are virtual. ",
      "type": "boolean"
    }
  },
  "properties": {
    "$schema": {
      "type": "string"
    },
    "contributions": {
      "additionalProperties": false,
      "description": "Symbol can be contributed to one of the 3 namespaces - HTML, CSS and JS. Within a particular namespace there can be different kinds of symbols. In each of the namespaces, there are several predefined kinds, which integrate directly with IDE, but providers are free to define their own.",
      "properties": {
        "css": {
          "$ref": "#/definitions/css"
        },
        "html": {
          "$ref": "#/definitions/html"
        },
        "js": {
          "$ref": "#/definitions/js"
        }
      },
      "type": "object"
    },
    "default-icon": {
      "$ref": "#/definitions/icon"
    },
    "description-markup": {
      "$ref": "#/definitions/description-markup"
    },
    "framework": {
      "description": "Framework, for which the components are provided by the library. If the library is not enabled in a particular context, all symbols from this file will not be available as well. If you want symbols to be always available do not specify framework.",
      "type": "string"
    },
    "framework-config": {
      "$ref": "#/definitions/framework-config"
    },
    "js-types-syntax": {
      "$ref": "#/definitions/js-types-syntax"
    },
    "name": {
      "description": "Name of the library.",
      "type": "string"
    },
    "version": {
      "description": "Version of the library, for which Web-Types are provided.",
      "type": "string"
    }
  },
  "required": ["name", "version"],
  "title": "JSON schema for Web-Types",
  "type": "object"
}
