{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "additionalProperties": true,
  "definitions": {
    "base": {
      "properties": {
        "level": {
          "description": "Determines the error level",
          "enum": ["error", "warn", "ignore"],
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "arrow_spacing": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule checks to see that there is spacing before and after the arrow operator that declares a function. [default level: ignore]"
    },
    "braces_spacing": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule checks to see that there is the proper spacing inside curly braces. The spacing amount is specified by `spaces`. The spacing amount for empty objects is specified by `empty_object_spaces`. [default level: ignore]",
      "properties": {
        "empty_object_spaces": {
          "enum": [0, 1],
          "type": "integer"
        },
        "spaces": {
          "enum": [0, 1],
          "type": "integer"
        }
      }
    },
    "camel_case_classes": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule mandates that all class names are CamelCased. Camel casing class names is a generally accepted way of distinguishing constructor functions - which require the `new` prefix to behave properly - from plain old functions. [default level: error]"
    },
    "coffeescript_error": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "[default level: error]"
    },
    "colon_assignment_spacing": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule checks to see that there is spacing before and after the colon in a colon assignment (i.e., classes, objects). [default level: ignore]",
      "properties": {
        "spacing": {
          "properties": {
            "left": {
              "enum": [0, 1],
              "type": "integer"
            },
            "right": {
              "enum": [0, 1],
              "type": "integer"
            }
          },
          "type": "object"
        }
      }
    },
    "cyclomatic_complexity": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Examine the complexity of your application. [default level: ignore]",
      "properties": {
        "value": {
          "type": "integer"
        }
      }
    },
    "duplicate_key": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Prevents defining duplicate keys in object literals and classes. [default level: error]"
    },
    "empty_constructor_needs_parens": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Requires constructors with no parameters to include the parens. [default level: ignore]"
    },
    "ensure_comprehensions": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule makes sure that parentheses are around comprehensions. [default level: warn]"
    },
    "eol_last": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Checks that the file ends with a single newline. [default level: ignore]"
    },
    "indentation": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule imposes a standard number of spaces to be used for indentation. Since whitespace is significant in CoffeeScript, it's critical that a project chooses a standard indentation format and stays consistent. Other roads lead to darkness. [default level: error]",
      "properties": {
        "value": {
          "enum": [2, 4],
          "type": "integer"
        }
      }
    },
    "line_endings": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule ensures your project uses only windows or unix line endings. [default level: ignore]",
      "properties": {
        "value": {
          "enum": ["unix", "windows"],
          "type": "string"
        }
      }
    },
    "max_line_length": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule imposes a maximum line length on your code. [default level: error]",
      "properties": {
        "limitComments": {
          "type": "boolean"
        },
        "value": {
          "type": "integer"
        }
      }
    },
    "missing_fat_arrows": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Warns when you use `this` inside a function that wasn't defined with a fat arrow. This rule does not apply to methods defined in a class, since they have `this` bound to the class instance (or the class itself, for class methods). [default level: ignore]"
    },
    "newlines_after_classes": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Checks the number of newlines between classes and other code. [default level: ignore]",
      "properties": {
        "value": {
          "type": "integer"
        }
      }
    },
    "no_backticks": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Backticks allow snippets of JavaScript to be embedded in CoffeeScript. While some folks consider backticks useful in a few niche circumstances, they should be avoided because so none of JavaScript's 'bad parts', like with and eval, sneak into CoffeeScript. [default level: error]"
    },
    "no_debugger": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule detects the `debugger` statement. [default level: warn]"
    },
    "no_empty_functions": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Disallows declaring empty functions. The goal of this rule is that unintentional empty callbacks can be detected. [default level: ignore]"
    },
    "no_empty_param_list": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule prohibits empty parameter lists in function definitions. [default level: ignore]"
    },
    "no_implicit_braces": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule prohibits implicit braces when declaring object literals. Implicit braces can make code more difficult to understand, especially when used in combination with optional parenthesis. [default level: ignore]",
      "properties": {
        "strict": {
          "type": "boolean"
        }
      }
    },
    "no_implicit_parens": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule prohibits implicit parens on function calls. [default level: ignore]"
    },
    "no_interpolation_in_single_quotes": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule prohibits string interpolation in a single quoted string. [default level: ignore]"
    },
    "no_nested_string_interpolation": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule warns about nested string interpolation, as it tends to make code harder to read and understand. [default level: warn]"
    },
    "no_plusplus": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule forbids the increment and decrement arithmetic operators. Some people believe the `++` and `--` to be cryptic and the cause of bugs due to misunderstandings of their precedence rules. [default level: ignore]"
    },
    "no_private_function_fat_arrows": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Warns when you use the fat arrow for a private function inside a class definition scope. It is not necessary and it does not do anything. [default level: warn]"
    },
    "no_stand_alone_at": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule checks that no stand alone `@` are in use, they are discouraged. [default level: ignore]",
      "type": "object"
    },
    "no_tabs": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule forbids tabs in indentation. Enough said. [default level: error]",
      "type": "object"
    },
    "no_this": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule prohibits `this`. Use `@` instead. [default level: ignore]"
    },
    "no_throwing_strings": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule forbids throwing string literals or interpolations. While JavaScript (and CoffeeScript by extension) allow any expression to be thrown, it is best to only throw `Error` objects, because they contain valuable debugging information like the stack trace. [default level: error]"
    },
    "no_trailing_semicolons": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule prohibits trailing semicolons, since they are needless cruft in CoffeeScript. [default level: error]"
    },
    "no_trailing_whitespace": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule forbids trailing whitespace in your code, since it is needless cruft. [default level: error]",
      "properties": {
        "allowed_in_comments": {
          "type": "boolean"
        },
        "allowed_in_empty_lines": {
          "type": "boolean"
        }
      }
    },
    "no_unnecessary_double_quotes": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule prohibits double quotes unless string interpolation is used or the string contains single quotes. [default level: ignore]"
    },
    "no_unnecessary_fat_arrows": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Disallows defining functions with fat arrows when `this` is not used within the function.  [default level: warn]"
    },
    "non_empty_constructor_needs_parens": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "Requires constructors with parameters to include the parens. [default level: ignore]"
    },
    "prefer_english_operator": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule prohibits `&&`, `||`, `==`, `!=` and `!`. Use `and`, `or`, `is`, `isnt`, and `not` instead. `!!` (for converting to a boolean) is ignored. [default level: ignore]"
    },
    "space_operators": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule enforces that operators have space around them.  [default level: ignore]"
    },
    "spacing_after_comma": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule checks to make sure you have a space after commas. [default level: ignore]"
    },
    "transform_messes_up_line_numbers": {
      "allOf": [
        {
          "$ref": "#/definitions/base"
        }
      ],
      "description": "This rule detects when changes are made by transform function, and warns that line numbers are probably incorrect. [default level: warn]"
    }
  },
  "title": "JSON schema for coffeelint.json files",
  "type": "object"
}
