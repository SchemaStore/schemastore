{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": {
    "description": "While the standard is structured to be meaningful on an international level, there are additional information that can be added that makes sense in specific countries, such as declaring compliance with local laws or regulations. The provided extension mechanism is the usage of country-specific sections.",
    "type": "object",
    "additionalProperties": true,
    "required": ["countryExtensionVersion"],
    "properties": {
      "countryExtensionVersion": {
        "description": "This key specifies the version to which the current extension schema adheres to, for forward compatibility.\n\nPlease note how the value of this key is independent from the top-level publiccodeYmlVersion one (see The Standard (core)). In such a way, the extensions schema versioning is independent both from the core version of the schema and from every other Country.",
        "type": "string"
      }
    }
  },
  "definitions": {
    "Contact": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name"],
      "properties": {
        "name": {
          "description": "This key contains the full name of one of the technical contacts. It must be a real person; do NOT populate this key with generic contact information, company departments, associations, etc.",
          "type": "string"
        },
        "email": {
          "description": "This key contains the e-mail address of the technical contact. It must be an email address of where the technical contact can be directly reached; do NOT populate this key with mailing-lists or generic contact points like “info@acme.inc”. The e-mail address must not be obfuscated. To improve resistance against e-mail collection, use \\x64 to replace @, as allowed by the YAML specification.",
          "type": "string",
          "format": "email"
        },
        "phone": {
          "description": "phone number (with international prefix). This has to be a string.",
          "type": "string"
        },
        "affiliation": {
          "description": "This key contains an explicit affiliation information for the technical contact. In case of multiple maintainers, this can be used to create a relation between each technical contact and each maintainer entity. It can contain for instance a company name, an association name, etc.",
          "type": "string"
        }
      }
    },
    "Contractor": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name", "until"],
      "properties": {
        "name": {
          "description": "The name of the contractor, whether it’s a company or a physical person.",
          "type": "string"
        },
        "until": {
          "description": "This is a date (YYYY-MM-DD). This key must contain the date at which the maintenance is going to end. In case of community maintenance, the value should not be more than 2 years in the future, and thus will need to be regularly updated as the community continues working on the project.",
          "type": "string",
          "format": "date"
        },
        "email": {
          "description": "This key contains the e-mail address of the technical contact. It must be an email address of where the technical contact can be directly reached; do NOT populate this key with mailing-lists or generic contact points like “info@acme.inc”. The e-mail address must not be obfuscated. To improve resistance against e-mail collection, use \\x64 to replace @, as allowed by the YAML specification.",
          "type": "string",
          "format": "email"
        },
        "website": {
          "description": "This key points to the maintainer website. It can either point to the main institutional website, or to a more project-specific page or website.",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "Dependency": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name"],
      "properties": {
        "name": {
          "description": "The name of the dependency (e.g. MySQL, NFC Reader)",
          "type": "string"
        },
        "versionMin": {
          "description": "The first compatible version",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        "versionMax": {
          "description": "The latest compatible version",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        "version": {
          "description": "The only major version for which the software is compatible. It assumes compatibility with all patches and bugfixes later applied to this version.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        "optional": {
          "description": "Whether the dependency is optional or mandatory",
          "type": "boolean"
        }
      }
    }
  },
  "description": "publiccode.yml is a metadata standard for repositories containing software developed or acquired by the Public Administration, aimed at making them easily discoverabile and thus reusable by other entities.\n\nBy including a publiccode.yml file in the root of a repository, and populating it with information about the software, technicians and civil servants can evaluate it. Automatic indexing tools can also be built, since the format is easily readable by both humans and machines.\n\npubliccode.yml is mandatory for all public software developed in Italy, according to the national guidelines: this enables the Developers Italia crawler to build the national software catalog. The standard is designed to be interoperable internationally, thus the country-specific keys are separated by the core part and are defined in specific sections that each government can rule.",
  "properties": {
    "publiccodeYmlVersion": {
      "description": "This key specifies the version to which the current publiccode.yml adheres to, for forward compatibility.",
      "type": "string"
    },
    "name": {
      "description": "This key contains the name of the software. It contains the (short) public name of the product, which can be localised in the specific localisation section. It should be the name most people usually refer to the software. In case the software has both an internal “code” name and a commercial name, use the commercial name.",
      "type": "string"
    },
    "applicationSuite": {
      "description": "This key contains the name of the “suite” to which the software belongs.",
      "type": "string"
    },
    "url": {
      "description": "A unique identifier for this software. This string must be a URL to the source code repository (git, svn, …) in which the software is published. If the repository is available under multiple protocols, prefer HTTP/HTTPS URLs which don’t require user authentication.\n\nForks created for the purpose of contributing upstream should not modify this file; this helps software parsing publiccode.yml to immediately skip technical forks. On the contrary, a complete fork that is meant to be maintained separately from the original software should modify this line, to give themselves the status of a different project.\n\n",
      "type": "string",
      "format": "uri"
    },
    "landingURL": {
      "description": "If the url parameter does not serve a human readable or browsable page, but only serves source code to a source control client, with this key you have an option to specify a landing page. This page, ideally, is where your users will land when they will click a button labeled something like “Go to the application source code”. In case the product provides an automated graphical installer, this URL can point to a page which contains a reference to the source code but also offers the download of such an installer.",
      "type": "string",
      "format": "uri"
    },
    "isBasedOn": {
      "description": "In case this software is a variant or a fork of another software, which might or might not contain a publiccode.yml file, this key will contain the url of the original project(s).\n\nThe existence of this key identifies the fork as a software variant, descending from the specified repositories.",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "softwareVersion": {
      "description": "This key contains the latest stable version number of the software. The version number is a string that is not meant to be interpreted and parsed but just displayed; parsers should not assume semantic versioning or any other specific version format.\n\nThe key can be omitted if the software is currently in initial development and has never been released yet.",
      "type": "string"
    },
    "releaseDate": {
      "description": "This key contains the date at which the latest version was released. This date is mandatory if the software has been released at least once and thus the version number is present.",
      "type": "string",
      "format": "date"
    },
    "logo": {
      "description": "This key contains the path to the logo of the software. Logos should be in vector format; raster formats are only allowed as a fallback. In this case, they should be transparent PNGs, minimum 1000px of width. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the logo in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.",
      "type": "string"
    },
    "monochromeLogo": {
      "description": "A monochromatic (black) logo. The logo should be in vector format; raster formats are only allowed as a fallback. In this case, they should be transparent PNGs, minimum 1000px of width. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the logo in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.",
      "type": "string"
    },
    "inputTypes": {
      "description": "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as input.\n\nIn case the software does not support any input, you can skip this field or use application/x.empty.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "outputTypes": {
      "description": "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as output.\n\nIn case the software does not support any output, you can skip this field or use application/x.empty.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "platforms": {
      "description": "This key specifies which platform the software runs on. It is meant to describe the platforms that users will use to access and operate the software, rather than the platform the software itself runs on.\n\nUse the predefined values if possible. If the software runs on a platform for which a predefined value is not available, a different value can be used.",
      "type": "array",
      "items": {
        "enum": ["web", "windows", "mac", "linux", "ios", "android"]
      }
    },
    "categories": {
      "description": "A list of words that can be used to describe the software and can help building catalogs of open software.",
      "type": "array",
      "items": {
        "enum": [
          "accounting",
          "agile-project-management",
          "applicant-tracking",
          "application-development",
          "appointment-scheduling",
          "backup",
          "billing-and-invoicing",
          "blog",
          "budgeting",
          "business-intelligence",
          "business-process-management",
          "cad",
          "call-center-management",
          "cloud-management",
          "collaboration",
          "communications",
          "compliance-management",
          "contact-management",
          "content-management",
          "crm",
          "customer-service-and-support",
          "data-analytics",
          "data-collection",
          "data-visualization",
          "digital-asset-management",
          "digital-citizenship",
          "document-management",
          "donor-management",
          "e-commerce",
          "e-signature",
          "email-management",
          "email-marketing",
          "employee-management",
          "enterprise-project-management",
          "enterprise-social-networking",
          "erp",
          "event-management",
          "facility-management",
          "feedback-and-reviews-management",
          "financial-reporting",
          "fleet-management",
          "fundraising",
          "gamification",
          "geographic-information-systems",
          "grant-management",
          "graphic-design",
          "help-desk",
          "hr",
          "ide",
          "identity-management",
          "instant-messaging",
          "inventory-management",
          "it-asset-management",
          "it-development",
          "it-management",
          "it-security",
          "it-service-management",
          "knowledge-management",
          "learning-management-system",
          "marketing",
          "mind-mapping",
          "mobile-marketing",
          "mobile-payment",
          "network-management",
          "office",
          "online-booking",
          "online-community",
          "payment-gateway",
          "payroll",
          "predictive-analysis",
          "procurement",
          "productivity-suite",
          "project-collaboration",
          "project-management",
          "property-management",
          "real-estate-management",
          "remote-support",
          "resource-management",
          "sales-management",
          "seo",
          "service-desk",
          "social-media-management",
          "survey",
          "talent-management",
          "task-management",
          "taxes-management",
          "test-management",
          "time-management",
          "time-tracking",
          "translation",
          "video-conferencing",
          "video-editing",
          "visitor-management",
          "voip",
          "warehouse-management",
          "web-collaboration",
          "web-conferencing",
          "website-builder",
          "workflow-management"
        ]
      }
    },
    "usedBy": {
      "description": "A list of the names of prominent public administrations (that will serve as “testimonials”) that are currently known to the software maintainer to be using this software.\n\nParsers are encouraged to enhance this list also with other information that can obtain independently; for instance, a fork of a software, owned by an administration, could be used as a signal of usage of the software.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "roadmap": {
      "description": "A link to a public roadmap of the software.",
      "type": "string",
      "format": "uri"
    },
    "developmentStatus": {
      "enum": ["concept", "development", "beta", "stable", "obsolete"]
    },
    "softwareType": {
      "enum": [
        "standalone/mobile",
        "standalone/iot",
        "standalone/desktop",
        "standalone/web",
        "standalone/backend",
        "standalone/other",
        "addon",
        "library",
        "configurationFiles"
      ]
    },
    "intendedAudience": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "countries": {
          "description": "This key explicitly includes certain countries in the intended audience, i.e. the software explicitly claims compliance with specific processes, technologies or laws. All countries are specified using lowercase ISO 3166-1 alpha-2 two-letter country codes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unsupportedCountries": {
          "description": "This key explicitly marks countries as NOT supported. This might be the case if there is a conflict between how software is working and a specific law, process or technology. All countries are specified using lowercase ISO 3166-1 alpha-2 two-letter country codes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "description": "This key contains a list of tags related to the field of application of the software.",
          "type": "array",
          "items": {
            "enum": [
              "agriculture",
              "culture",
              "defence",
              "education",
              "emergency-services",
              "employment",
              "energy",
              "environment",
              "finance-and-economic-development",
              "foreign-affairs",
              "government",
              "healthcare",
              "infrastructures",
              "justice",
              "local-authorities",
              "manufacturing",
              "research",
              "science-and-technology",
              "security",
              "society",
              "sport",
              "tourism",
              "transportation",
              "welfare"
            ]
          }
        }
      }
    },
    "description": {
      "description": "This section contains a general description of the software. Parsers can use this section for instance to create a web page describing the software.,\n\nNote: since all the strings contained in this section are user-visible and written in a specific language, you must specify the language you are editing the text in (using the IETF BCP 47 specifications) by creating a sub-section with that name. The primary language subtag cannot be omitted, as mandated by the BCP 47.",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "additionalProperties": false,
        "required": ["genericName", "shortDescription"],
        "properties": {
          "localisedName": {
            "description": "This key is an opportunity to localise the name in a specific language. It contains the (short) public name of the product. It should be the name most people usually refer to the software. In case the software has both an internal “code” name and a commercial name, use the commercial name.",
            "type": "string"
          },
          "genericName": {
            "description": "This key is the “Generic name”, which refers to the specific category to which the software belongs. You can usually find the generic name in the presentation of the software, when you write: “Software xxx is a yyy”. Notable examples include “Text Editor”, “Word Processor”, “Web Browser”, “Chat” and so on… The generic name can be up to 35 characters long.",
            "type": "string",
            "maxLength": 35
          },
          "shortDescription": {
            "description": "This key contains a short description of the software. It should be a single line containing a single sentence. Maximum 150 characters are allowed.",
            "type": "string",
            "maxLength": 150
          },
          "longDescription": {
            "description": "This key contains a longer description of the software, between 500 and 10000 chars. It is meant to provide an overview of the capabilities of the software for a potential user. The audience for this text should be that of users of the software, not developers. You can think of this text as the description of the software that would be in its website (if the software had one).\n\nThis description can contain some basic markdown: *italic*, **bold**, bullet points and [links](#).",
            "type": "string",
            "minLength": 500,
            "maxLength": 10000
          },
          "documentation": {
            "description": "This key contains a reference to the user-level (not developer-level) documentation of the software. The value must be a URL to a hosted version of the documentation.\n\nIt is suggested that the URL points to a hosted version of the documentation that is immediately readable through a common web browser in both desktop and mobile format. The documentation should be rendered in HTML and browsable like a website (with a navigation index, a search bar, etc.).\n\nIf the documentation is instead available only as a document, put a direct view/download link as URL in this key. You should commit the document as part of the source code repository, and then link to it using the code hosting source browser URL (e.g.: GitHub URL to the file). Prefer using open formats like PDF or ODT for maximum interoperability.\n\nWhichever the format for the documentation, remember to make its source files available under an open license, possibly by committing them as part of the repository itself.",
            "type": "string",
            "format": "uri"
          },
          "apiDocumentation": {
            "description": "This key contains a reference to the API documentation of the software. The value must be a URL to a hosted version of the documentation.\n\nIt is suggested that the URL points to a hosted version of the documentation that is immediately readable through a common web browser. The documentation should be rendered in HTML and browsable like a website (with a navigation index, a search bar, etc.), and if there is a reference or test deployment, possibly offer an interactive interface (e.g. Swagger).\n\nIf the documentation is instead available only as a document, put a direct view/download link as URL in this key. You should commit the document as part of the source code repository, and then link to it using the code hosting source browser URL (e.g.: GitHub URL to the file). Prefer using open formats like PDF or ODT for maximum interoperability.\n\nWhichever the format for the documentation, remember to make its source files available under an open license, possibly by committing them as part of the repository itself.",
            "type": "string",
            "format": "uri"
          },
          "features": {
            "description": "This key contains a list of software features, describing what capabilities the software allows to do. The audience for this text should be that of public decision makers who will be commissioning the software. The features should thus not target developers; instead of listing technical features referring to implementation details, prefer listing user-visible functionalities of the software.\n\nWhile the key is mandatory, there is no mandatory minimum or maximum number of features that should be listed in this key. Each feature must use a maximum of 100 characters.\n\nThe suggested number of features to list is between 5 and 20, depending on the software size and complexity. There is no need for exhaustiveness, as users can always read the documentation for additional information.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 100
            }
          },
          "screenshots": {
            "description": "This key contains one or multiple paths to files showing screenshots of the software. They are meant to give a quick idea on how the software looks like and how it works. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the screenshot in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "videos": {
            "description": "This key contains one or multiple URLs of videos showing how the software works. Like screenshots, videos should be used to give a quick overview on how the software looks like and how it works. Videos must be hosted on a video sharing website that supports the oEmbed standard; popular options are YouTube and Vimeo.\n\nSince videos are an integral part of the documentation, it is recommended to publish them with an open license.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "awards": {
            "description": "A list of awards won by the software.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "legal": {
      "type": "object",
      "additionalProperties": false,
      "required": ["license"],
      "properties": {
        "license": {
          "description": "This string describes the license under which the software is distributed. The string must contain a valid SPDX expression, referring to one (or multiple) open-source license. Please refer to the SPDX documentation for further information.",
          "type": "string"
        },
        "mainCopyrightOwner": {
          "description": "This string describes the entity that owns the copyright on “most” of the code in the repository. Normally, this is the line that is reported with the copyright symbol at the top of most files in the repo.\n\nIt is possible to list multiple owners if required so, using an English sentence. It is also possible to informally refer to a community of group of people like “Linus Torvalds and all Linux contributors”.\n\nIn case it is not possible to name a main copyright owner, it is possible to omit this key; in those cases, if the repo has a authors file, you can point to it through legal/authorsFile.",
          "type": "string"
        },
        "repoOwner": {
          "description": "This string describes the entity that owns this repository; this might or might not be the same entity who owns the copyright on the code itself. For instance, in case of a fork of the original software, the repoOwner is probably different from the mainCopyrightOwner.",
          "type": "string"
        },
        "authorsFile": {
          "description": "Some open-source software adopt a convention of identify the copyright holders through a file that lists all the entities that own the copyright. This is common in projects strongly backed by a community where there are many external contributors and no clear single/main copyright owner. In such cases, this key can be used to refer to the authors file, using a path relative to the root of the repository.",
          "type": "string"
        }
      }
    },
    "maintenance": {
      "description": "This section provides information on the maintenance status of the software, useful to evaluate whether the software is actively developed or not.",
      "type": "object",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "description": "This key describes how the software is currently maintained.",
          "enum": ["internal", "contract", "community", "none"]
        },
        "contractors": {
          "description": "This key describes the entity or entities, if any, that are currently contracted for maintaining the software. They can be companies, organizations, or other collective names.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contractor"
          }
        },
        "contacts": {
          "description": "One or more contacts maintaining this software.\n\nThis key describes the technical people currently responsible for maintaining the software. All contacts need to be a physical person, not a company or an organisation. If somebody is acting as a representative of an institution, it must be listed within the affiliation of the contact.\n\nIn case of a commercial agreement (or a chain of such agreements), specify the final entities actually contracted to deliver the maintenance. Do not specify the software owner unless it is technically involved with the maintenance of the product as well.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        }
      }
    },
    "localisation": {
      "description": "This section provides an overview of the localization features of the software.",
      "type": "object",
      "additionalProperties": false,
      "required": ["localisationReady", "availableLanguages"],
      "properties": {
        "localisationReady": {
          "description": "If yes, the software has infrastructure in place or is otherwise designed to be multilingual. It does not need to be available in more than one language.",
          "type": "boolean"
        },
        "availableLanguages": {
          "description": "If present, this is the list of languages in which the software is available. Of course, this list will contain at least one language. The primary language subtag cannot be omitted, as mandated by the BCP 47.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "dependsOn": {
      "description": "This section provides an overview on the system-level dependencies required to install and use this software.\n\nNOTE: do not list dependencies at the source code level (e.g.: software libraries being used), and focus only on runtime and/or system-level dependencies that must be installed and maintained separately. For instance, a database is a good example of such dependencies.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "open": {
          "description": "This key contains a list of runtime dependencies that are distributed under an open-source license.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dependency"
          }
        },
        "proprietary": {
          "description": "This key contains a list of runtime dependencies that are distributed under a proprietary license.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dependency"
          }
        },
        "hardware": {
          "description": "This key contains a list of hardware dependencies that must be owned to use the software.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dependency"
          }
        }
      }
    },
    "it": {
      "type": "object",
      "additionalProperties": false,
      "required": ["countryExtensionVersion"],
      "properties": {
        "countryExtensionVersion": {
          "description": "This key specifies the version to which the current extension schema adheres to, for forward compatibility.\n\nPlease note how the value of this key is independent from the top-level publiccodeYmlVersion one (see The Standard (core)). In such a way, the extensions schema versioning is independent both from the core version of the schema and from every other Country.",
          "type": "string"
        },
        "conforme": {
          "description": "This section contains the keys for auto-declaring the compliance with the current legislation, with respect to the following sections. Not including these keys implies that the compliance is not known or not declared.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "lineeGuidaDesign": {
              "description": "If present and set to yes, the software is compliant with the Italian accessibility laws (L. 4/2004), as further explained in the linee guida di design (Italian language).",
              "type": "boolean"
            },
            "modelloInteroperatibilita": {
              "description": "If present and set to yes, the software is compliant with the linee guida sull’interoperabilità.\n\nRegulatory reference: Art. 73 del CAD (Italian language).",
              "type": "boolean"
            },
            "misureMinimeSicurezza": {
              "description": "If present and set to yes, the software is compliant with the Misure minime di sicurezza ICT per le Pubbliche amministrazioni (Italian language).",
              "type": "boolean"
            },
            "gdpr": {
              "description": "If present and set to yes, the software is compliant with the Misure minime di sicurezza ICT per le Pubbliche amministrazioni (Italian language).",
              "type": "boolean"
            }
          }
        },
        "piattaforme": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "spid": {
              "description": "If present and set to yes, the software interfaces with SPID - il Sistema Pubblico di Identità Digitale.",
              "type": "boolean"
            },
            "cie": {
              "description": "If present and set to yes, the software interfaces with the Italian electronic ID card (Carta di Identità Elettronica).",
              "type": "boolean"
            },
            "anpr": {
              "description": "If present and set to yes, the software interfaces with ANPR.",
              "type": "boolean"
            },
            "pagopa": {
              "description": "If present and set to yes, the software interfaces with pagoPA.",
              "type": "boolean"
            }
          }
        },
        "riuso": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "codiceIPA": {
              "description": "This key represents the administration code inside the Public Administration index (codice IPA).",
              "type": "string"
            }
          }
        }
      }
    }
  },
  "required": [
    "publiccodeYmlVersion",
    "name",
    "url",
    "releaseDate",
    "platforms",
    "categories",
    "developmentStatus",
    "softwareType",
    "description",
    "legal",
    "maintenance",
    "localisation"
  ],
  "title": "JSON schema for publiccode.yml",
  "type": "object"
}
