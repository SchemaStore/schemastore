{
  "$comment": "https://minecraft.fandom.com/wiki/Predicate",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "allOf": [
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:alternative"
          }
        }
      },
      "then": {
        "properties": {
          "terms": {
            "description": "A list of conditions to join using 'or'.",
            "title": "Terms",
            "type": "object"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:block_state_property"
          }
        }
      },
      "then": {
        "properties": {
          "block": {
            "description": "A block ID.",
            "title": "Block",
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of block property names to values.",
            "title": "Properties",
            "type": "object"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:damage_source_properties"
          }
        }
      },
      "then": {
        "properties": {
          "predicate": {
            "$ref": "#/definitions/tagsCommonToAllDamageTypes",
            "description": "Predicate applied to the damage source.",
            "title": "Predicate"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:entity_properties"
          }
        }
      },
      "then": {
        "description": "Test properties of an entity.",
        "properties": {
          "entity": {
            "description": "Specifies the entity to check for the condition.",
            "enum": ["this", "killer", "killer_player"],
            "title": "Entity",
            "type": "string"
          },
          "predicate": {
            "$ref": "#/definitions/tagsCommonToAllEntities",
            "description": "Predicate applied to entity.",
            "title": "Predicate"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:entity_scores"
          }
        }
      },
      "then": {
        "description": "Test the scoreboard scores of an entity.",
        "properties": {
          "entity": {
            "description": "Specifies the entity to check for the condition.",
            "enum": ["this", "killer", "killer_player"],
            "title": "Entity",
            "type": "string"
          },
          "scores": {
            "additionalProperties": {
              "$ref": "#/definitions/integerRange",
              "type": ["integer", "object"]
            },
            "description": "Scores to check. All specified scores must pass for the condition to pass.",
            "title": "Scores",
            "type": "object"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:inverted"
          }
        }
      },
      "then": {
        "description": "Inverts condition from parameter term.",
        "properties": {
          "term": {
            "description": "The condition to be negated.",
            "title": "Term",
            "type": "object"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:killed_by_player"
          }
        }
      },
      "then": {
        "description": "Test if a killer_player entity is available.",
        "properties": {
          "inverse": {
            "description": "If true, the condition passes if killer_player is not available.",
            "title": "Inverse",
            "type": "boolean"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:location_check"
          }
        }
      },
      "then": {
        "description": "Checks if the current location matches.",
        "properties": {
          "offsetX": {
            "description": "Offsets to location.",
            "title": "Offset X",
            "type": "integer"
          },
          "offsetY": {
            "description": "Offsets to location.",
            "title": "Offset Y",
            "type": "integer"
          },
          "offsetZ": {
            "description": "Offsets to location.",
            "title": "Offset Z",
            "type": "integer"
          },
          "predicate": {
            "$ref": "#/definitions/tagsCommonToAllLocations",
            "description": "Predicate applied to location.",
            "title": "Predicate"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:match_tool"
          }
        }
      },
      "then": {
        "description": "Checks tool.",
        "properties": {
          "predicate": {
            "$ref": "#/definitions/tagsCommonToAllItems",
            "description": "Predicate applied to item.",
            "title": "Predicate"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:random_chance"
          }
        }
      },
      "then": {
        "description": "Test if a random number 0.0–1.0 is less than a specified value.",
        "properties": {
          "chance": {
            "description": "Success rate.",
            "maximum": 1,
            "minimum": 0,
            "title": "Chance",
            "type": "number"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:random_chance_with_looting"
          }
        }
      },
      "then": {
        "description": "Test if a random number 0.0–1.0 is less than a specified value, affected by the level of Looting on the killer entity.",
        "properties": {
          "chance": {
            "description": "Base success rate.",
            "title": "Chance",
            "type": "number"
          },
          "looting_multiplier": {
            "description": "Looting adjustment to the base success rate. Formula is chance + (looting_level * looting_multiplier).",
            "title": "Looting Multiplier",
            "type": "number"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:reference"
          }
        }
      },
      "then": {
        "description": "Test if another referred condition (predicate) passes.",
        "properties": {
          "name": {
            "description": "The namespaced ID of the condition (predicate) referred to. A cyclic reference causes a parsing failure.",
            "title": "Name",
            "type": "string"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:survives_explosion"
          }
        }
      },
      "then": {
        "description": "Returns true with 1/explosion radius probability."
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:table_bonus"
          }
        }
      },
      "then": {
        "description": "Passes with probability picked from table, indexed by enchantment level.",
        "properties": {
          "chances": {
            "description": "List of probabilities for enchantment level, indexed from 0.",
            "title": "Chances",
            "type": "array"
          },
          "enchantment": {
            "description": "Id of enchantment.",
            "title": "Enchantment",
            "type": "integer"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:time_check"
          }
        }
      },
      "then": {
        "description": "Checks the current time.",
        "properties": {
          "period": {
            "description": "Time gets modulo-divided by this value (for example, if set to 24000, value operates on a time period of daytime ticks just like /time query daytime).",
            "title": "Period",
            "type": "integer"
          },
          "value": {
            "$ref": "#/definitions/integerRange",
            "description": "The time value in ticks.",
            "title": "Value",
            "type": ["integer", "object"]
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:weather_check"
          }
        }
      },
      "then": {
        "description": "Checks for a current weather state.",
        "properties": {
          "raining": {
            "description": "If true, the condition evaluates to true only if it's raining or thundering.",
            "title": "Raining",
            "type": "boolean"
          },
          "thundering": {
            "description": "If true, the condition evaluates to true only if it's thundering.",
            "title": "Thundering",
            "type": "boolean"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "conditions": {
            "const": "minecraft:value_check"
          }
        }
      },
      "then": {
        "description": "Checks for range of value.",
        "properties": {
          "range": {
            "$ref": "#/definitions/integerRange",
            "description": "If true, the condition evaluates to true only if it's thundering.",
            "title": "Range",
            "type": ["integer", "object"]
          },
          "value": {
            "$ref": "#/definitions/numberProvider",
            "description": "The value to test.",
            "title": "Value",
            "type": ["integer", "object"]
          }
        }
      }
    }
  ],
  "definitions": {
    "enchantments": {
      "items": {
        "properties": {
          "enchantment": {
            "description": "An enchantment ID.",
            "title": "Enchantment",
            "type": "string"
          },
          "levels": {
            "$ref": "#/definitions/integerRange",
            "description": "The level of the enchantment.",
            "title": "Levels",
            "type": ["integer", "object"]
          }
        },
        "title": "Enchantment",
        "type": "object"
      },
      "type": "array"
    },
    "integerRange": {
      "properties": {
        "max": {
          "$ref": "#/definitions/numberProvider",
          "description": "The max value.",
          "title": "Max",
          "type": ["integer", "object"]
        },
        "min": {
          "$ref": "#/definitions/numberProvider",
          "description": "The minimum value.",
          "title": "Minimum",
          "type": ["integer", "object"]
        }
      }
    },
    "numberProvider": {
      "$comment": "https://minecraft.fandom.com/wiki/Loot_table#Number_Providers",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "minecraft:constant"
              }
            }
          },
          "then": {
            "description": "A constant value.",
            "properties": {
              "value": {
                "description": "The exact value.",
                "title": "Value",
                "type": "number"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "minecraft:uniform"
              }
            }
          },
          "then": {
            "description": "A random number following a uniform distribution between two values (inclusive).",
            "properties": {
              "max": {
                "$ref": "#/definitions/numberProvider",
                "description": "The maximum value.",
                "title": "Max",
                "type": ["number", "object"]
              },
              "min": {
                "$ref": "#/definitions/numberProvider",
                "description": "The minimum value.",
                "title": "Minimum",
                "type": ["number", "object"]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "minecraft:binomial"
              }
            }
          },
          "then": {
            "description": "A random number following a binomial distribution.",
            "properties": {
              "n": {
                "$ref": "#/definitions/numberProvider",
                "description": "The amount of trials.",
                "title": "n",
                "type": ["integer", "object"]
              },
              "p": {
                "$ref": "#/definitions/numberProvider",
                "description": "The probability of success on an individual trial.",
                "title": "p"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "minecraft:score"
              }
            }
          },
          "then": {
            "description": "A scoreboard value.",
            "properties": {
              "scale": {
                "description": "Scale to multiply the score before returning it.",
                "title": "Scale",
                "type": "number"
              },
              "score": {
                "description": "The scoreboard objective.",
                "title": "Score",
                "type": "string"
              },
              "target": {
                "allOf": [
                  {
                    "if": {
                      "properties": {
                        "type": {
                          "const": "fixed"
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "name": {
                          "description": "A UUID or player name.",
                          "title": "Name",
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "type": {
                          "const": "context"
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "target": {
                          "enum": [
                            "this",
                            "killer",
                            "direct_killer",
                            "player_killer"
                          ],
                          "title": "Target",
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "description": "Scoreboard name provider.",
                "enum": ["this", "killer", "direct_killer", "player_killer"],
                "properties": {
                  "type": {
                    "description": "Resource location.",
                    "enum": ["fixed", "context"],
                    "title": "Type",
                    "type": "string"
                  }
                },
                "title": "Target",
                "type": ["string", "object"]
              }
            }
          }
        }
      ],
      "properties": {
        "type": {
          "description": "The number provider type.",
          "enum": [
            "minecraft:constant",
            "minecraft:uniform",
            "minecraft:binomial",
            "minecraft:score"
          ],
          "title": "Type",
          "type": "string"
        }
      }
    },
    "numberRange": {
      "properties": {
        "max": {
          "description": "The max value.",
          "title": "Max",
          "type": "number"
        },
        "min": {
          "description": "The minimum value.",
          "title": "Minimum",
          "type": "number"
        }
      },
      "type": "object"
    },
    "tagsCommonToAllDamageTypes": {
      "properties": {
        "bypasses_armor": {
          "description": "Checks if the damage bypassed the armor of the player (suffocation damage predominantly).",
          "title": "Bypasses Armor",
          "type": "boolean"
        },
        "bypasses_invulnerability": {
          "description": "Checks if the damage bypassed the invulnerability status of the player (void or /kill damage).",
          "title": "Bypasses Invulnerability",
          "type": "boolean"
        },
        "bypasses_magic": {
          "description": "Checks if the damage was caused by starvation.",
          "title": "Bypasses Magic",
          "type": "boolean"
        },
        "direct_entity": {
          "description": "The entity that was the direct cause of the damage.",
          "title": "Direct Entity",
          "type": "object"
        },
        "is_explosion": {
          "description": "Checks if the damage originated from an explosion.",
          "title": "Is Explosion",
          "type": "boolean"
        },
        "is_fire": {
          "description": "Checks if the damage originated from fire.",
          "title": "Is Fire",
          "type": "boolean"
        },
        "is_lightning": {
          "description": "Checks if the damage originated from lightning.",
          "title": "Is Lightning",
          "type": "boolean"
        },
        "is_magic": {
          "description": "Checks if the damage originated from magic.",
          "title": "Is Magic",
          "type": "boolean"
        },
        "is_projectile": {
          "description": "Checks if the damage originated from a projectile.",
          "title": "Is Projectile",
          "type": "boolean"
        },
        "source_entity": {
          "$ref": "#/definitions/tagsCommonToAllEntities",
          "description": "Checks the entity that was the source of the damage (for example: The skeleton that shot the arrow).",
          "title": "Source Entity"
        }
      },
      "type": "object"
    },
    "tagsCommonToAllEntities": {
      "properties": {
        "distance": {
          "properties": {
            "absolute": {
              "$ref": "#/definitions/numberRange",
              "title": "Absolute"
            },
            "horizontal": {
              "$ref": "#/definitions/numberRange",
              "title": "Horizontal"
            },
            "x": {
              "$ref": "#/definitions/numberRange",
              "title": "X"
            },
            "y": {
              "$ref": "#/definitions/numberRange",
              "title": "Y"
            },
            "z": {
              "$ref": "#/definitions/numberRange",
              "title": "Z"
            }
          },
          "title": "Distance",
          "type": "object"
        },
        "effects": {
          "additionalProperties": {
            "description": "A status effect with the key name being the status effect name.",
            "properties": {
              "ambient": {
                "description": "Whether the effect is from a beacon.",
                "title": "Ambient",
                "type": "boolean"
              },
              "amplifier": {
                "$ref": "#/definitions/integerRange",
                "description": "The effect amplifier.",
                "title": "Amplifier",
                "type": ["integer", "object"]
              },
              "duration": {
                "$ref": "#/definitions/integerRange",
                "description": "The effect duration in ticks.",
                "title": "Duration",
                "type": ["integer", "object"]
              },
              "visible": {
                "description": "Whether the effect has visible particles.",
                "title": "Visible",
                "type": "boolean"
              }
            },
            "title": "Effect",
            "type": "object"
          },
          "description": "A map of status effects.",
          "title": "Effects"
        },
        "equipment": {
          "properties": {
            "chest": {
              "$ref": "#/definitions/tagsCommonToAllItems",
              "title": "Chest"
            },
            "feet": {
              "$ref": "#/definitions/tagsCommonToAllItems",
              "title": "Feet"
            },
            "head": {
              "$ref": "#/definitions/tagsCommonToAllItems",
              "title": "Head"
            },
            "legs": {
              "$ref": "#/definitions/tagsCommonToAllItems",
              "title": "Legs"
            },
            "mainhand": {
              "$ref": "#/definitions/tagsCommonToAllItems",
              "title": "Mainhand"
            },
            "offhand": {
              "$ref": "#/definitions/tagsCommonToAllItems",
              "title": "Offhand"
            }
          },
          "title": "Equipment",
          "type": "object"
        },
        "flags": {
          "description": "Predicate Flags to be checked.",
          "properties": {
            "is_baby": {
              "description": "Test whether the entity is or is not a baby variant.",
              "title": "Is Baby",
              "type": "boolean"
            },
            "is_on_fire": {
              "description": "Test whether the entity is or is not on fire.",
              "title": "Is on Fire"
            },
            "is_sneaking": {
              "description": "Test whether the entity is or is not sneaking.",
              "title": "Is Sneaking",
              "type": "boolean"
            },
            "is_sprinting": {
              "description": "Test whether the entity is or is not sprinting.",
              "title": "Is Sprinting",
              "type": "boolean"
            },
            "is_swimming": {
              "description": "Test whether the entity is or is not swimming.",
              "title": "Is Swimming",
              "type": "boolean"
            }
          },
          "title": "Flags",
          "type": "object"
        },
        "lightning_bolt": {
          "description": "Lightning bolt properties to be checked. Fails when entity is not a lightning bolt.",
          "properties": {
            "blocks_set_on_fire": {
              "description": "Number of blocks set on fire by this lightning bolt.",
              "title": "Blocks Set on Fire",
              "type": "integer"
            },
            "entity_struck": {
              "$ref": "#/definitions/tagsCommonToAllEntities",
              "description": "Entity properties of entities struck by this lightning bolt. If present, this tag must match one or more entities.",
              "title": "Entity Struck"
            }
          },
          "title": "Lightning Bolt",
          "type": "object"
        },
        "location": {
          "$ref": "#/definitions/tagsCommonToAllLocations",
          "title": "Location"
        },
        "nbt": {
          "description": "An NBT string.",
          "title": "NBT",
          "type": "string"
        },
        "passenger": {
          "$ref": "#/definitions/tagsCommonToAllEntities",
          "description": "The entity directly riding this entity.",
          "title": "Passanger"
        },
        "player": {
          "description": "Player properties to be checked. Fails when entity is not a player.",
          "properties": {
            "advancements": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "boolean"
                },
                "description": "An advancement ID.",
                "type": ["boolean", "object"]
              },
              "description": "A map of advancements to check.",
              "title": "Advancements",
              "type": "object"
            },
            "gamemode": {
              "description": "The game mode of the player.",
              "enum": ["survival", "adventure", "creative", "spectator"],
              "title": "Game Mode",
              "type": "string"
            },
            "level": {
              "$ref": "#/definitions/integerRange",
              "description": "The level of the player.",
              "title": "Level",
              "type": ["integer", "object"]
            },
            "looking_at": {
              "$ref": "#/definitions/tagsCommonToAllEntities",
              "description": "The entity that the player is looking at, as long as it is visible and within a radius of 100 blocks.",
              "title": "Looking At"
            },
            "recipes": {
              "additionalProperties": {
                "type": "boolean"
              },
              "description": "A map of recipies to check.",
              "title": "Recipies",
              "type": "object"
            },
            "stats": {
              "additionalProperties": {
                "properties": {
                  "stat": {
                    "description": "The statistic ID. Mostly mimics the criteria used for defining scoreboard objectives.",
                    "title": "Stat",
                    "type": "string"
                  },
                  "type": {
                    "description": "The statistic base.",
                    "enum": [
                      "minecraft:custom",
                      "minecraft:crafted",
                      "minecraft:used",
                      "minecraft:broken",
                      "minecraft:mined",
                      "minecraft:killed",
                      "minecraft:picked_up",
                      "minecraft:dropped",
                      "minecraft:killed_by"
                    ],
                    "title": "Type",
                    "type": "string"
                  },
                  "value": {
                    "$ref": "#/definitions/integerRange",
                    "description": "The value of the statistic.",
                    "title": "Value",
                    "type": ["integer", "object"]
                  }
                },
                "type": "object"
              },
              "description": "List of statistics to match.",
              "title": "Stats",
              "type": "object"
            }
          },
          "title": "Player",
          "type": "object"
        },
        "stepping_on": {
          "$ref": "#/definitions/tagsCommonToAllLocations",
          "description": "Location predicate for the block the entity is standing on.",
          "title": "Stepping On"
        },
        "targeted_entity": {
          "$ref": "#/definitions/tagsCommonToAllEntities",
          "description": "The entity which this entity is targeting for attacks.",
          "title": "Targeted Entity"
        },
        "team": {
          "description": "The team the entity belongs to.",
          "title": "Team",
          "type": "string"
        },
        "type": {
          "description": "An entity ID.",
          "title": "Type",
          "type": "string"
        },
        "vehicle": {
          "$ref": "#/definitions/tagsCommonToAllEntities",
          "description": " The vehicle that the entity is riding on.",
          "title": "Vehicle"
        }
      },
      "type": "object"
    },
    "tagsCommonToAllItems": {
      "properties": {
        "count": {
          "$ref": "#/definitions/integerRange",
          "description": "The amount of the item.",
          "title": "Count",
          "type": ["integer", "object"]
        },
        "durability": {
          "$ref": "#/definitions/integerRange",
          "description": "The durability of the item.",
          "title": "Durability",
          "type": ["integer", "object"]
        },
        "enchantments": {
          "$ref": "#/definitions/enchantments",
          "description": "List of enchantments.",
          "title": "Enchantments"
        },
        "items": {
          "description": "List of item IDs.",
          "title": "Items",
          "type": "array"
        },
        "nbt": {
          "description": "An NBT string.",
          "title": "NBT",
          "type": "string"
        },
        "potion": {
          "description": "A brewed potion ID.",
          "title": "Potion",
          "type": "string"
        },
        "stored_enchantments": {
          "$ref": "#/definitions/enchantments",
          "description": "List of stored enchantments.",
          "title": "Stored Enchantments"
        },
        "tag": {
          "description": "An item data pack tag.",
          "title": "Tag",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tagsCommonToAllLocations": {
      "properties": {
        "biome": {
          "description": "The biome the entity is currently in.",
          "enum": [
            "badlands",
            "badlands_plateau",
            "beach",
            "birch_forest",
            "birch_forest_hills",
            "cold_ocean",
            "dark_forest",
            "dark_forest_hills",
            "deep_cold_ocean",
            "deep_frozen_ocean",
            "deep_lukewarm_ocean",
            "deep_ocean",
            "deep_warm_ocean",
            "desert",
            "desert_hills",
            "desert_lakes",
            "end_barrens",
            "end_highlands",
            "end_midlands",
            "eroded_badlands",
            "flower_forest",
            "forest",
            "frozen_ocean",
            "frozen_river",
            "giant_spruce_taiga",
            "giant_spruce_taiga_hills",
            "giant_tree_taiga",
            "giant_tree_taiga_hills",
            "gravelly_mountains",
            "ice_spikes",
            "jungle",
            "jungle_edge",
            "jungle_hills",
            "lukewarm_ocean",
            "modified_badlands_plateau",
            "modified_gravelly_mountains",
            "modified_jungle",
            "modified_jungle_edge",
            "modified_wooded_badlands_plateau",
            "mountain_edge",
            "mountains",
            "mushroom_field_shore",
            "mushroom_fields",
            "nether",
            "ocean",
            "plains",
            "river",
            "savanna",
            "savanna_plateau",
            "shattered_savanna",
            "shattered_savanna_plateau",
            "small_end_islands",
            "snowy_beach",
            "snowy_mountains",
            "snowy_taiga",
            "snowy_taiga_hills",
            "snowy_taiga_mountains",
            "snowy_tundra",
            "stone_shore",
            "sunflower_plains",
            "swamp",
            "swamp_hills",
            "taiga",
            "taiga_hills",
            "taiga_mountains",
            "tall_birch_forest",
            "tall_birch_hills",
            "the_end",
            "the_void",
            "warm_ocean",
            "wooded_badlands_plateau",
            "wooded_hills",
            "wooded_mountains"
          ],
          "title": "Biome",
          "type": "string"
        },
        "block": {
          "description": "The block at the location.",
          "properties": {
            "blocks": {
              "description": "A list of block IDs.",
              "title": "Blocks",
              "type": "array"
            },
            "nbt": {
              "description": "The block NBT.",
              "title": "NBT",
              "type": "string"
            },
            "state": {
              "description": "A map of block property names to values. Test will fail if the block doesn't match.",
              "properties": {
                "key": {
                  "$ref": "#/definitions/integerRange",
                  "description": "Block property key and value pair.",
                  "title": "Key",
                  "type": ["boolean", "integer", "string", "object"]
                }
              },
              "title": "State",
              "type": "object"
            },
            "tag": {
              "description": "The block tag.",
              "title": "Tag",
              "type": "string"
            }
          },
          "title": "Block",
          "type": "object"
        },
        "dimension": {
          "description": "The dimension the entity is currently in.",
          "title": "Dimension",
          "type": "string"
        },
        "feature": {
          "description": "Name of a structure.",
          "enum": [
            "buried_treasure",
            "desert_pyramid",
            "endcity",
            "fortress",
            "igloo",
            "jungle_pyramid",
            "mansion",
            "mineshaft",
            "monument",
            "ocean_ruin",
            "pillager_outpost",
            "shipwreck",
            "stronghold",
            "swamp_hut",
            "village"
          ],
          "title": "Feature",
          "type": "string"
        },
        "fluid": {
          "description": "The fluid at the location.",
          "properties": {
            "fluid": {
              "description": "The fluid ID.",
              "title": "Fluid",
              "type": "string"
            },
            "state": {
              "$ref": "#/definitions/integerRange",
              "description": "A map of fluid property names to values. Test will fail if the fluid doesn't match.",
              "title": "State",
              "type": ["boolean", "integer", "string", "object"]
            },
            "tag": {
              "description": "The fluid tag.",
              "title": "Tag",
              "type": "string"
            }
          },
          "title": "Fluid",
          "type": "object"
        },
        "light": {
          "description": "The light at the location.",
          "properties": {
            "light": {
              "$ref": "#/definitions/integerRange",
              "description": "The light Level of visible light. Calculated using: (max(sky-darkening,block)).",
              "title": "Light",
              "type": ["integer", "object"]
            }
          },
          "title": "Light",
          "type": "object"
        },
        "position": {
          "properties": {
            "x": {
              "$ref": "#/definitions/numberRange",
              "description": "The X position.",
              "title": "X"
            },
            "y": {
              "$ref": "#/definitions/numberRange",
              "description": "The Y position.",
              "title": "Y"
            },
            "z": {
              "$ref": "#/definitions/numberRange",
              "description": "The Z position.",
              "title": "Z"
            }
          },
          "title": "Position",
          "type": "object"
        },
        "smokey": {
          "description": "True if the block is closely above a campfire or soul campfire.",
          "title": "Smokey",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "description": "Configuration file defining a predicate for a data pack for Minecraft.",
  "properties": {
    "conditions": {
      "description": "The condition's ID.",
      "enum": [
        "minecraft:alternative",
        "minecraft:block_state_property",
        "minecraft:damage_source_properties",
        "minecraft:entity_properties",
        "minecraft:entity_scores",
        "minecraft:inverted",
        "minecraft:killed_by_player",
        "minecraft:location_check",
        "minecraft:match_tool",
        "minecraft:random_chance",
        "minecraft:random_chance_with_looting",
        "minecraft:reference",
        "minecraft:survives_explosion",
        "minecraft:table_bonus",
        "minecraft:time_check",
        "minecraft:weather_check",
        "minecraft:value_check"
      ],
      "title": "Conditions",
      "type": "string"
    }
  },
  "title": "Minecraft Data Pack Predicate",
  "type": "object"
}
