{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "additionalProperties": false,
  "definitions": {
    "dependency-type": {
      "enum": ["direct", "indirect", "all", "production", "development"],
      "type": "string",
      "x-intellij-enum-metadata": {
        "all": {
          "description": "All explicitly defined dependencies. For bundler, pip, composer, cargo, also the dependencies of direct dependencies."
        },
        "development": {
          "description": "Only dependencies in the 'Development dependency group'."
        },
        "direct": {
          "description": "All explicitly defined dependencies."
        },
        "indirect": {
          "description": "Dependencies of direct dependencies (also known as sub-dependencies, or transient dependencies)."
        },
        "production": {
          "description": "Only dependencies in the 'Product dependency group'."
        }
      }
    },
    "package-ecosystem": {
      "enum": [
        "bundler",
        "cargo",
        "composer",
        "docker",
        "elm",
        "gitsubmodule",
        "github-actions",
        "gomod",
        "gradle",
        "maven",
        "mix",
        "npm",
        "nuget",
        "pip",
        "terraform"
      ],
      "type": "string"
    },
    "registry": {
      "additionalProperties": false,
      "description": "The top-level registries key is optional. It allows you to specify authentication details that Dependabot can use to access private package registries.",
      "patternProperties": {
        ".*": {
          "additionalProperties": false,
          "properties": {
            "key": {
              "description": "A reference to a Dependabot secret containing an access key for this registry.",
              "type": "string"
            },
            "organization": {
              "description": "",
              "type": "string"
            },
            "password": {
              "description": "A reference to a Dependabot secret containing the password for the specified user.",
              "type": "string"
            },
            "replaces-base": {
              "description": "For registries with type: python-index, if the boolean value is true, pip resolves dependencies by using the specified URL rather than the base URL of the Python Package Index (by default https://pypi.org/simple).",
              "type": "boolean"
            },
            "token": {
              "description": "A reference to a Dependabot secret containing an access token for this registry.",
              "type": "string"
            },
            "type": {
              "description": "Identifies the type of registry.",
              "enum": [
                "composer-repository",
                "docker-registry",
                "git",
                "hex-organization",
                "maven-repository",
                "npm-registry",
                "nuget-feed",
                "python-index",
                "rubygems-server",
                "terraform-registry"
              ]
            },
            "url": {
              "description": "The URL to use to access the dependencies in this registry. The protocol is optional. If not specified, https:// is assumed. Dependabot adds or ignores trailing slashes as required.",
              "type": "string"
            },
            "username": {
              "description": "The username that Dependabot uses to access the registry.",
              "type": "string"
            }
          },
          "required": ["type"],
          "type": "object"
        }
      },
      "title": "registries",
      "type": "object"
    },
    "schedule-day": {
      "enum": [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday"
      ],
      "type": "string"
    },
    "schedule-interval": {
      "enum": ["daily", "weekly", "monthly"],
      "type": "string"
    },
    "update": {
      "properties": {
        "allow": {
          "description": "Customize which updates are allowed",
          "items": {
            "properties": {
              "dependency-name": {
                "type": "string"
              },
              "dependency-type": {
                "$ref": "#/definitions/dependency-type"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "assignees": {
          "description": "Assignees to set on pull requests",
          "items": {
            "type": "string"
          },
          "minimum": 1,
          "type": "array"
        },
        "commit-message": {
          "description": "Commit message preferences",
          "properties": {
            "include": {
              "default": "scope",
              "enum": ["scope"],
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "prefix-development": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "directory": {
          "default": "/",
          "description": "Location of package manifests",
          "type": "string"
        },
        "ignore": {
          "description": "Ignore certain dependencies or versions",
          "items": {
            "properties": {
              "dependency-name": {
                "type": "string"
              },
              "dependency-type": {
                "$ref": "#/definitions/dependency-type"
              },
              "versions": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "labels": {
          "default": ["dependencies"],
          "description": "Labels to set on pull requests",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "milestone": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "description": "Milestone to set on pull requests"
        },
        "open-pull-requests-limit": {
          "default": 5,
          "description": "Limit number of open pull requests for version updates",
          "type": "integer"
        },
        "package-ecosystem": {
          "$ref": "#/definitions/package-ecosystem",
          "description": "Package manager to use"
        },
        "pull-request-branch-name": {
          "description": "Pull request branch name preferences",
          "properties": {
            "separator": {
              "default": "/",
              "description": "Change separator for PR branch name",
              "type": "string"
            }
          },
          "required": ["separator"],
          "type": "object"
        },
        "rebase-strategy": {
          "default": "auto",
          "description": "Disable automatic rebasing",
          "enum": ["auto", "disabled"],
          "type": "string"
        },
        "reviewers": {
          "description": "Reviewers to set on pull requests",
          "items": {
            "type": "string"
          },
          "minimum": 1,
          "type": "array"
        },
        "schedule": {
          "description": "Schedule preferences",
          "properties": {
            "day": {
              "$ref": "#/definitions/schedule-day",
              "description": "Specify an alternative day to check for updates"
            },
            "interval": {
              "$ref": "#/definitions/schedule-interval"
            },
            "time": {
              "description": "Specify an alternative time of day to check for updates (format: hh:mm)",
              "type": "string"
            },
            "timezone": {
              "default": "05:00 UTC",
              "description": "The time zone identifier must be from the Time Zone database maintained by IANA",
              "type": "string"
            }
          },
          "type": "object"
        },
        "target-branch": {
          "description": "Branch to create pull requests against",
          "type": "string"
        },
        "versioning-strategy": {
          "$ref": "#/definitions/versioning-strategy",
          "description": "How to update manifest version requirements"
        }
      },
      "required": ["package-ecosystem", "directory", "schedule"],
      "type": "object"
    },
    "versioning-strategy": {
      "enum": [
        "lockfile-only",
        "auto",
        "widen",
        "increase",
        "increase-if-necessary"
      ],
      "type": "string",
      "x-intellij-enum-metadata": {
        "auto": {
          "description": "Follow the default strategy described above."
        },
        "increase": {
          "description": "Always increase the version requirement to match the new version."
        },
        "increase-if-necessary": {
          "description": "Increase the version requirement only when required by the new version."
        },
        "lockfile-only": {
          "description": "Only create pull requests to update lockfiles updates. Ignore any new versions that would require package manifest changes."
        },
        "widen": {
          "description": "Relax the version requirement to include both the new and old version, when possible."
        }
      }
    }
  },
  "properties": {
    "registries": {
      "$ref": "#/definitions/registry",
      "type": "object"
    },
    "updates": {
      "items": {
        "$ref": "#/definitions/update",
        "description": "Element for each one package manager that you want GitHub Dependabot to monitor for new versions",
        "title": "Package Ecosystem"
      },
      "type": "array"
    },
    "version": {
      "anyOf": [
        {
          "default": "2",
          "type": "string"
        },
        {
          "default": 2,
          "type": "integer"
        }
      ]
    }
  },
  "required": ["version", "updates"],
  "title": "GitHub Dependabot v2 config",
  "type": "object"
}
