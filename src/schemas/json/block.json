{
  "title": "JSON schema for WordPress blocks",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string"
    },
    "apiVersion": {
      "type": "integer",
      "enum": [
        1,
        2
      ],
      "default": 1,
      "description": "The version of the Block API used by the block. The most recent version is 2 and it was introduced in WordPress 5.6.\n\n See the the API versions documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-api-versions/ for more details."
    },
    "name": {
      "type": "string",
      "description": "The name for a block is a unique string that identifies a block. Names have to be structured as `namespace/block-name`, where namespace is the name of your plugin or theme.\nNote: A block name can only contain lowercase alphanumeric characters, dashes, and at most one forward slash to designate the plugin-unique namespace prefix. It must begin with a letter.\nNote: This name is used on the comment delimiters as `<!-- wp:my-plugin/book -->`. Block types in the core namespace do not include a namespace when serialized."
    },
    "title": {
      "type": "string",
      "description": "This is the display title for your block, which can be translated with our translation functions. The block inserter will show this name."
    },
    "category": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "enum": [
            "text",
            "media",
            "design",
            "widgets",
            "theme",
            "embed"
          ]
        }
      ],
      "description": "Blocks are grouped into categories to help users browse and discover them.\n Core provided categories are: text, media, design, widgets, theme, embed\n\nPlugins and Themes can also register custom block categories.\n\nhttps://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/#managing-block-categories\n\nAn implementation should expect and tolerate unknown categories, providing some reasonable fallback behavior (e.g. a “text” category)."
    },
    "parent": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Setting parent lets a block require that it is only available when nested within the specified blocks. For example, you might want to allow an ‘Add to Cart’ block to only be available within a ‘Product’ block."
    },
    "icon": {
      "type": "string",
      "description": "An icon property should be specified to make it easier to identify a block. These can be any of WordPress’ Dashicons (slug serving also as a fallback in non-js contexts).\n\nNote: It’s also possible to override this property on the client-side with the source of the SVG element. In addition, this property can be defined with JavaScript as an object containing background and foreground colors. This colors will appear with the icon when they are applicable e.g.: in the inserter. Custom SVG icons are automatically wrapped in the wp.primitives.SVG component to add accessibility attributes (aria-hidden, role, and focusable)."
    },
    "description": {
      "type": "string",
      "description": "This is a short description for your block, which can be translated with our translation functions. This will be shown in the block inspector."
    },
    "keywords": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Sometimes a block could have aliases that help users discover it while searching. For example, an image block could also want to be discovered by photo. You can do so by providing an array of unlimited terms (which are translated)."
    },
    "version": {
      "type": "string",
      "description": "The current version number of the block, such as 1.0 or 1.0.3. It’s similar to how plugins are versioned. This field might be used with block assets to control cache invalidation, and when the block author omits it, then the installed version of WordPress is used instead."
    },
    "textdomain": {
      "type": "string",
      "description": "The gettext text domain of the plugin/block. More information can be found in the Text Domain section of the How to Internationalize your Plugin page.\n\nhttps://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/"
    },
    "attributes": {
      "type": "object",
      "description": "Attributes provide the structured data needs of a block. They can exist in different forms when they are serialized, but they are declared together under a common interface.\n\nSee the attributes documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/ for more details."
    },
    "providesContext": {
      "type": "object",
      "description": "Context provided for available access by descendants of blocks of this type, in the form of an object which maps a context name to one of the block’s own attribute.\n\nSee the block context documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-context/ for more details."
    },
    "usesContext": {
      "type": "object",
      "description": "Array of the names of context values to inherit from an ancestor provider.\n\nSee the block context documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-context/ for more details."
    },
    "supports": {
      "type": "object",
      "description": "It contains as set of options to control features used in the editor. See the the supports documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/ for more details."
    },
    "styles": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "name",
          "label"
        ],
        "additionalProperties": false
      },
      "description": "Block styles can be used to provide alternative styles to block. It works by adding a class name to the block’s wrapper. Using CSS, a theme developer can target the class name for the block style if it is selected.\n\nPlugins and Themes can also register custom block style for existing blocks.\n\nhttps://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/#block-styles"
    },
    "example": {
      "type": "object",
      "properties": {
        "viewportWidth": {
          "type": "number"
        },
        "attributes": {
          "type": "object"
        },
        "innerBlocks": {
          "type": "array"
        }
      },
      "description": "It provides structured example data for the block. This data is used to construct a preview for the block to be shown in the Inspector Help Panel when the user mouses over the block.\n\nSee the the example documentation at https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/#example-optional for more details."
    },
    "editorScript": {
      "type": "string",
      "description": "Block type editor script definition. It will only be enqueued in the context of the editor."
    },
    "script": {
      "type": "string",
      "description": "Block type frontend script definition. It will be enqueued both in the editor and when viewing the content on the front of the site."
    },
    "editorStyle": {
      "type": "string",
      "description": "Block type editor style definition. It will only be enqueued in the context of the editor."
    },
    "style": {
      "type": "string",
      "description": "Block type frontend style definition. It will be enqueued both in the editor and when viewing the content on the front of the site."
    }
  },
  "required": [
    "name",
    "title",
    "category"
  ],
  "additionalProperties": false
}
