{
  "title": "JSON schema for unist syntax trees",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "//": {
      "explainer": "https://github.com/syntax-tree/unist#readme",
      "reference": "https://github.com/syntax-tree/unist#nodes"
    },
    "branchDefinition": {
      "description": "A branch is a node with one or more children.",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/nodeDefinition" }],
      "properties": {
        "children": {
          "minItems": 1
        },
        "data": {},
        "id": {},
        "parent": {},
        "position": {},
        "type": {}
      },
      "required": ["children", "type"],
      "additionalProperties": false
    },
    "childDefinition": {
      "description": "A child is a direct descending nodes of another node.",
      "type": "object",
      "oneOf": [
        { "$ref": "#/definitions/branchDefinition" },
        { "$ref": "#/definitions/literalDefinition" }
      ]
    },
    "literalDefinition": {
      "description": "A literal is a node with a value field.",
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/nodeDefinition" }],
      "properties": {
        "data": {},
        "id": {},
        "parent": {},
        "position": {},
        "type": {},
        "value": {}
      },
      "required": ["type", "value"],
      "additionalProperties": false
    },
    "nodeDefinition": {
      "description": "A node is a syntactic unit in unist syntax trees.",
      "type": "object",
      "properties": {
        "children": {
          "description": "Children are direct descending nodes of another node.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/childDefinition"
          }
        },
        "data": {
          "description": "The data field represents information from the ecosystem. This space is guaranteed to never be specified by unist or specifications implementing unist.",
          "type": "object"
        },
        "id": {
          "description": "The node ID.",
          "anyOf": [
            {
              "type": "integer",
              "minimum": 1
            },
            {
              "type": "string",
              "minLength": 1
            }
          ]
        },
        "parent": {
          "$ref": "#/definitions/branchDefinition"
        },
        "position": {
          "$ref": "#/definitions/positionDefinition"
        },
        "type": {
          "description": "The type field is a non-empty string representing the variant of a node. This field can be used to determine the type a node implements.",
          "type": "string"
        },
        "value": {
          "description": "The value field can contain any value."
        }
      },
      "additionalProperties": false,
      "required": ["type"]
    },
    "pointDefinition": {
      "description": "A point represents one place in a source file.",
      "type": "object",
      "properties": {
        "column": {
          "description": "The column field (1-indexed integer) represents a column in a source file.",
          "type": "integer",
          "minimum": 1
        },
        "line": {
          "description": "The line field (1-indexed integer) represents a line in a source file.",
          "type": "integer",
          "minimum": 1
        },
        "offset": {
          "description": "The offset field (0-indexed integer) represents a character in a source file.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": ["column", "line"]
    },
    "positionDefinition": {
      "description": "A position represents the location of a node in a source file.",
      "type": "object",
      "properties": {
        "end": {
          "description": "The end field of Position represents the place of the first character after the parsed source region, whether it exists or not.",
          "$ref": "#/definitions/pointDefinition"
        },
        "start": {
          "description": "The start field of Position represents the place of the first character of the parsed source region.",
          "$ref": "#/definitions/pointDefinition"
        }
      },
      "required": ["end", "start"]
    }
  },
  "type": "object",
  "properties": {
    "children": {
      "description": "The root tree branches.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/branchDefinition"
      }
    },
    "type": {
      "description": "The root tree type (must be \"root\").",
      "type": "string",
      "const": "root"
    }
  },
  "required": ["children", "type"]
}
