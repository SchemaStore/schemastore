pipelines:
  - name: test_pipeline_1
    steps:
      - name: download_win
        type: PowerShell
        configuration:
          nodePool: win_2019
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: connecting_resource
              trigger: true
        execution:
          onExecute:
            - echo "executing step..."

      - name: download_linux
        type: Bash
        configuration:
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: connecting_resource
        execution:
          onExecute:
            - echo "executing step..."

      - name: install_jfrog_cli
        type: Bash
        configuration:
          integrations:
            - name: artifactory_integration
        execution:
          onExecute:
            - task: jfrog/setup-jfrog-cli@v0.1.0
              input:
                version: '2.26.1'

      - name: to_build_docker_image
        type: DockerBuild
        configuration:
          affinityGroup: test_affinity_group
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: docker_image
          dockerImageTag: latest
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: dockerBuild_gitRepo_resource
            - name: connecting_resource

      - name: to_push_docker_image
        type: DockerPush
        configuration:
          affinityGroup: test_affinity_group
          autoPublishBuildInfo: false
          targetRepository: artifactory/docker-local
          integrations:
            - name: artifactory_integration
          inputSteps:
            - name: docker_image

      - name: to_publish_buildInfo
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: to_push_docker_image
          outputResources:
            - name: ns_buildInfo

      - name: to_promote_build
        type: PromoteBuild
        configuration:
          targetRepository: artifactory/docker-local
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: ns_buildInfo
          outputResources:
            - name: ns_promotedInfo

      - name: docker_releaseBundle
        type: CreateReleaseBundle
        configuration:
          releaseBundleName: test1
          releaseBundleVersion: 1.0.0
          inputResources:
            - name: ns_promotedInfo
          dryRun: false
        execution:
          onStart:
            - echo "Preparing for work..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"

      - name: build_go
        type: GoBuild
        configuration:
          sourceLocation: golang-example/hello
          repository: test-go-local
          outputLocation: /tmp/dist
          outputFile: hello_sample
          inputResources:
            - name: artifactory_go_example
            - name: connecting_resource
          integrations:
            - name: artifactory_integration
        execution:
          onStart:
            - pwd

      - name: publish_go_binary_test
        type: GoPublishBinary
        configuration:
          inputSteps:
            - name: build_go
          targetRepository: artifactory/docker-local
          integrations:
            - name: artifactory_integration

      - name: publish_build_test
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: publish_go_binary_test
          outputResources:
            - name: go_build_info_publish_test

      - name: publish_go_module_test
        type: GoPublishModule
        execution:
          onStart:
            - go version
        configuration:
          sourceLocation: .
          version: v0.0.0
          targetRepository: artifactory/docker-local
          autoPublishBuildInfo: true
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: artifactory_go_module_resource
          outputResources:
            - name: go_build_info_publish_module_test

      - name: promote_build_go_test_binary
        type: PromoteBuild
        configuration:
          targetRepository: artifactory/docker-local
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: go_build_info_publish_test
          outputResources:
            - name: promoted_go_build_info_go_publish

      - name: promote_build_go_test_module
        type: PromoteBuild
        configuration:
          targetRepository: artifactory/docker-local
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: go_build_info_publish_module_test
          outputResources:
            - name: promoted_go_build_info_go_publish

      - name: go_releaseBundle_v
        type: CreateReleaseBundle
        configuration:
          dryRun: false
          releaseBundleName: demo_rb
          releaseBundleVersion: ${run_number}
          inputResources:
            - name: promoted_go_build_info_go_publish
          outputResources:
            - name: release_bundle_v

      - name: go_signReleaseBundle_v
        type: SignReleaseBundle
        configuration:
          inputResources:
            - name: release_bundle_v
          outputResources:
            - name: signed_bundle_v

      - name: my_distribute_v
        type: DistributeReleaseBundle
        configuration:
          dryRun: true
          inputResources:
            - name: signed_bundle_v
              trigger: false
            - name: distribution_rule_resource
              trigger: false

        execution:
          onStart:
            - echo "Preparing for work..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"

      - name: go_signReleaseBundle
        type: SignReleaseBundle
        configuration:
          inputResources:
            - name: release_bundle_v
              trigger: false
          outputResources:
            - name: signed_bundle_v

      - name: my_distribute
        type: DistributeReleaseBundle
        configuration:
          dryRun: true
          inputResources:
            - name: signed_bundle_v
              trigger: false
            - name: distribution_rule_resource
              trigger: false
        execution:
          onStart:
            - echo "Preparing for work..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"

      - name: gradle_build_step
        type: GradleBuild
        configuration:
          gradleCommand: clean artifactoryPublish -b build.gradle
          sourceLocation: gradle-examples/gradle-example-minimal
          configFileLocation: .
          configFileName: gradle-art-config
          inputResources:
            - name: gradle_repo
            - name: connecting_resource
          integrations:
            - name: artifactory_integration
        execution:
          onStart:
            - javac -version
            - gradle --version

      - name: publish_build_info_gradle
        type: PublishBuildInfo
        execution:
          onStart:
            - echo "hello"
        configuration:
          inputSteps:
            - name: gradle_build_step
          outputResources:
            - name: build_info_gradle

      - name: promote_build_info_gradle
        type: PromoteBuild
        configuration:
          targetRepository: artifactory/docker-local
          copy: true
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: build_info_gradle
          outputResources:
            - name: promoted_build_info_gradle

      - name: mvnBuild_sample
        type: MvnBuild
        configuration:
          sourceLocation: ./artifactory-maven-plugin-example
          mvnCommand: clean install
          configFileLocation: .
          configFileName: mvn-art-config
          inputResources:
            - name: maven_repo
            - name: connecting_resource
          integrations:
            - name: artifactory_integration
        execution:
          onStart:
            - mvn --version

      - name: mvnBuild_publish
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: mvnBuild_sample
          outputResources:
            - name: mvnBuild_info

      - name: mvn_build_promote
        type: PromoteBuild
        configuration:
          targetRepository: artifactory/docker-local
          includeDependencies: true
          status: success
          comment: 'build needs to be promoted'
          copy: true
          inputResources:
            - name: mvnBuild_info
          outputResources:
            - name: mvnBuild_info_promoted_resource

      - name: build_npm
        type: NpmBuild
        configuration:
          repositoryName: npm-virtual
          sourceLocation: .
          inputResources:
            - name: npmHelloWorld_repo
            - name: connecting_resource
          integrations:
            - name: artifactory_integration

      - name: publish_npm
        type: NpmPublish
        configuration:
          repositoryName: npm-virtual
          inputSteps:
            - name: build_npm
          integrations:
            - name: artifactory_integration
          outputResources:
            - name: build_info_for_npmPublish

      - name: publish_build_info
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: publish_npm
          outputResources:
            - name: npm_build_info_publish_resource

      - name: build_npm_remote
        type: NpmBuild
        configuration:
          repositoryName: npm-virtual
          sourceLocation: .
          inputResources:
            - name: npmHelloWorld_repo
            - name: connecting_resource
          integrations:
            - name: artifactory_integration

      - name: publish_npm_auto_true
        type: NpmPublish
        configuration:
          environmentVariables:
            JFROG_CLI_BUILD_NAME: 'test_buildt12'
            JFROG_CLI_BUILD_NUMBER: 1
          repositoryName: npm-virtual
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_npm_remote
          outputResources:
            - name: npm_build_info_publish_resource
          integrations:
            - name: artifactory_integration

      - name: promote_build_npm
        type: PromoteBuild
        configuration:
          targetRepository: artifactory/docker-local
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: npm_build_info_publish_resource
            - name: connecting_resource
          outputResources:
            - name: npm_build_info_promoted
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - '8.17.0'

      - name: helm_pub
        type: HelmPublish
        configuration:
          autoPublishBuildInfo: true
          environmentVariables:
            JFROG_CLI_BUILD_NAME: 'test_build387-helm-publish'
            JFROG_CLI_BUILD_NUMBER: 1
          chartPath: stable/tomcat
          lint: true

          helmVersion: 3
          inputResources:
            - name: git_vishnu
            - name: connecting_resource
          outputResources:
            - name: helm_repo
            - name: ns_buildInfo_helm
          integrations:
            - name: git_v

          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - '10.21.0'
        execution:
          onStart:
            - echo "Preparing for work..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"

      - name: To_promote_build_helm
        type: PromoteBuild
        configuration:
          targetRepository: artifactory/docker-local
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: ns_buildInfo
          inputSteps:
            - name: To_publish_buildInfo
          outputResources:
            - name: ns_promotedInfo

      - name: HelmDeploy
        type: HelmDeploy
        configuration:
          helmVersion: 3
          releaseName: test1
          integrations:
            - name: kube_invalid
          inputResources:
            - name: helm_repo
            - name: connecting_resource
          runtime:
            type: image
            image:
              auto:
                language: dotnetcore
                versions:
                  - '2.1'
        execution:
          onStart:
            - echo "Preparing for work..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"

  - name: test_pipeline_2
    steps:
      - name: build_go
        type: GoBuild
        configuration:
          sourceLocation: golang-example/hello
          repository: test-go-local
          outputLocation: /tmp/dist
          outputFile: hello_sample
          inputResources:
            - name: artifactory_go_example
            - name: connecting_resource
          integrations:
            - name: artifactory_integration
          runtime:
            type: image
            image:
              custom:
                name: jfrog/artifactory/pipelines
                tag: 1.0.0
                registry: artifactory
                sourceRepository: jfrog.io
        execution:
          onStart:
            - go version

      - name: publish_go_binary_test
        type: GoPublishBinary
        configuration:
          environmentVariables:
            JFROG_CLI_BUILD_NAME: 'test_build'
            JFROG_CLI_BUILD_NUMBER: 1
          inputSteps:
            - name: build_go
          targetRepository: artifactory/docker-local
          integrations:
            - name: artifactory_integration
          runtime:
            type: image
            image:
              custom:
                name: jfrog/artifactory/pipelines
                tag: 1.0.0
                registry: artifactory
                sourceRepository: jfrog.io

      - name: publish_build_test
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: publish_go_binary_test
          outputResources:
            - name: go_build_info_publish_test

      - name: publish_go_module_test
        type: GoPublishModule
        execution:
          onStart:
            - go version
        configuration:
          environmentVariables:
            JFROG_CLI_BUILD_NAME: 'test_build'
            JFROG_CLI_BUILD_NUMBER: 1
          sourceLocation: .
          version: v0.0.0
          targetRepository: artifactory/docker-local
          autoPublishBuildInfo: true
          integrations:
            - name: artifactory_integration
          runtime:
            type: image
            image:
              custom:
                name: jfrog/artifactory/pipelines
                tag: 1.0.0
                registry: artifactory
                sourceRepository: jfrog.io
          inputResources:
            - name: artifactory_go_module_resource
          outputResources:
            - name: go_build_info_publish_module_test

      - name: promote_build_go_test_binary
        type: PromoteBuild
        configuration:
          targetRepository: artifactory/docker-local
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: go_build_info_publish_test
          outputResources:
            - name: promoted_go_build_info_go_publish

      - name: promote_build_go_test_module
        type: PromoteBuild
        configuration:
          targetRepository: artifactory/docker-local
          integrations:
            - name: artifactory_integration
          inputResources:
            - name: go_build_info_publish_module_test
          outputResources:
            - name: promoted_go_build_info_go_publish

      - name: go_releaseBundle
        type: CreateReleaseBundle
        configuration:
          releaseBundleName: test1
          releaseBundleVersion: ${run_number}

          inputResources:
            - name: promoted_go_build_info_go_publish
              trigger: false
          outputResources:
            - name: go_ReleaseBundle_1_without
          dryRun: false
          sign: true
        execution:
          onStart:
            - echo "Preparing for work..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"

      - name: go_signReleaseBundle
        type: SignReleaseBundle
        configuration:
          inputResources:
            - name: go_ReleaseBundle_1_without
              trigger: false
          outputResources:
            - name: signed_go_ReleaseBundle_2_without
        execution:
          onStart:
            - echo "Preparing for work..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
