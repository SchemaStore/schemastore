{
  "create": {
    "andClean": [
      "app/src/config.ts",
      "app/src/modes/rest/healthz.controller.ts",
      "app/config/topics.yaml",
      "docker/docker-compose.yml"
    ],
    "files": [
      "app/ci-install.sh",
      "app/plagiarize-install.sh",
      "app/ci-dep-update.sh",
      "app/tsconfig.json",
      "app/src/modes/rest/healthz.controller.ts",
      "app/src/domains/internal/internal-domain.event.handler.factory.ts",
      "app/src/domains/internal/internal-domain.event.handler.providers.ts",
      "app/src/domains/internal/internal-domain.service.providers.ts",
      "app/src/domains/external/external-domain.event.handler.factory.ts",
      "app/src/domains/external/external-domain.event.handler.providers.ts",
      "app/src/domains/external/external-domain.service.providers.ts",
      "app/config/topics.yaml",
      "app/src/modes/shared/jwt/jwt-verifier.ts",
      "app/src/modes/cli/cli.providers.ts",
      "app/src/modes/consumer/consumer.providers.ts",
      "app/src/modes/benchmark/benchmark.providers.ts",
      "app/src/modes/benchmark/benchmark.command.ts",
      "app/src/modes/websocket/websocket.providers.ts",
      "docker/docker-compose.yml",
      "docker/Dockerfile",
      "docker/docker-compose.override.example.yml",
      "k8s/$project/templates/env-from-secret.yaml"
    ]
  },
  "merge": [
    {
      "create": [
        ".name",
        ".version",
        ".description",
        ".author",
        ".contributors"
      ],
      "path": "app/package.json",
      "replace": [
        ".scripts.build",
        ".scripts.clean",
        ".scripts.compile",
        ".scripts.consume",
        ".scripts[\"start:rest\"]",
        ".scripts[\"start:rest:dev\"]",
        ".scripts[\"start:rest:debug\"]",
        ".scripts[\"start:rest:prod\"]",
        ".scripts[\"start:websocket\"]",
        ".scripts[\"start:websocket:dev\"]",
        ".scripts[\"start:websocket:debug\"]",
        ".scripts[\"start:websocket:prod\"]",
        ".scripts[\"start:consumer\"]",
        ".scripts[\"start:consumer:dev\"]",
        ".scripts[\"start:consumer:debug\"]",
        ".scripts[\"start:consumer:prod\"]",
        ".scripts.lint",
        ".scripts.prettier",
        ".scripts[\"prettier:fix\"]",
        ".scripts.test",
        ".scripts[\"test:cucumber\"]",
        ".scripts[\"test:watch\"]",
        ".scripts[\"test:cov\"]",
        ".scripts[\"test:cov:diff\"]",
        ".scripts[\"test:cov:badges\"]",
        ".scripts[\"test:ci\"]",
        ".scripts[\"test:e2e\"]",
        ".scripts[\"env-file-validate\"]",
        ".scripts.localize",
        ".scripts.copy",
        ".husky",
        ".envValidateConfigs",
        ".dependencies[\"@nestjs/common\"]",
        ".dependencies[\"@nestjs/config\"]",
        ".dependencies[\"@nestjs/core\"]",
        ".dependencies[\"@nestjs/platform-express\"]",
        ".dependencies[\"@nestjs/platform-socket.io\"]",
        ".dependencies[\"@nestjs/platform-ws\"]",
        ".dependencies[\"@nestjs/swagger\"]",
        ".dependencies[\"@nestjs/websockets\"]",
        ".dependencies[\"@timerocket/nodejs-common\"]",
        ".dependencies[\"@timerocket/data-model\"]",
        ".dependencies[\"@types/i18n\"]",
        ".dependencies[\"@types/node\"]",
        ".dependencies[\"@types/express\"]",
        ".dependencies[\"@types/joi\"]",
        ".dependencies[\"swagger-ui-express\"]",
        ".dependencies.typescript",
        ".dependencies[\"jwt-decode\"]",
        ".dependencies[\"uuid\"]",
        ".dependencies.rxjs",
        ".dependencies.rimraf",
        ".dependencies[\"reflect-metadata\"]",
        ".dependencies.kafkajs",
        ".dependencies.i18n",
        ".dependencies.express",
        ".dependencies.dotenv",
        ".dependencies.joi",
        ".dependencies.randomstring",
        ".dependencies[\"class-validator\"]",
        ".dependencies[\"class-transformer\"]",
        ".dependencies[\"command-line-args\"]",
        ".devDependencies",
        ".jest",
        ".husky",
        ".i18n",
        ".license"
      ],
      "replaceIf": [
        {
          "condition": "$elasticsearch-enabled",
          "pattern": ".dependencies[\"@elastic/elasticsearch\"]"
        },
        {
          "condition": "$elasticsearch-enabled",
          "pattern": ".dependencies[\"@nestjs/elasticsearch\"]"
        }
      ],
      "type": "jq"
    },
    {
      "path": "k8s/$project/Chart.yaml",
      "replace": [
        "dependencies.(name==microservice)",
        "dependencies.(name==elasticsearch)"
      ],
      "type": "yq"
    },
    {
      "create": [
        "microservice.deployments.rest.autoscaling",
        "microservice.deployments.websocket.autoscaling",
        "microservice.deployments.consumer.autoscaling",
        "microservice.deployments.neural-network-consumer.autoscaling"
      ],
      "path": "k8s/$project/values.yaml",
      "replace": [""],
      "set": {
        "elasticsearch.enabled": "$elasticsearch-enabled",
        "microservice.deployments.consumer.enabled": "$consumer-enabled",
        "microservice.deployments.gpu-consumer.enabled": "$gpu-enabled",
        "microservice.deployments.neural-network-consumer.enabled": "$neural-network-enabled",
        "microservice.deployments.rest.enabled": "$rest-enabled",
        "microservice.deployments.websocket.enabled": "$websocket-enabled",
        "microservice.image.repository": "$gitlabDockerRegistry()",
        "microservice.services.rest.enabled": "$rest-enabled",
        "microservice.services.websocket.enabled": "$websocket-enabled"
      },
      "skip": [
        "microservice.image.tag",
        "microservice.deployments.gpu-consumer.env",
        "microservice.deployments.neural-network-consumer.env"
      ],
      "type": "yq"
    },
    {
      "path": "app/src/modes/rest/rest.module.ts",
      "type": "git"
    },
    {
      "path": "app/src/modes/consumer/consumer.module.ts",
      "type": "git"
    },
    {
      "path": "app/README.md",
      "type": "git"
    },
    {
      "path": "app/src/domains/internal/internal-domain.module.ts",
      "type": "git"
    },
    {
      "path": "app/src/domains/external/external-domain.module.ts",
      "type": "git"
    },
    {
      "path": "app/.gitignore",
      "type": "git"
    }
  ],
  "move": {
    "directories": [
      {
        "names": [
          "src",
          "test",
          "node_modules",
          "features",
          "coverage",
          "dist",
          "example",
          "reports"
        ],
        "to": "app"
      }
    ],
    "files": [
      {
        "names": ["app/src/setup.ts"],
        "to": "app/src/shared"
      },
      {
        "names": [
          ".dockerignore",
          ".prettierrc",
          "nest-cli.json",
          "package.json",
          "tsconfig.json",
          "tsconfig.spec.json",
          "tsconfig.build.json",
          "tslint.json",
          "yarn.lock"
        ],
        "to": "app"
      },
      {
        "names": [
          "docker-compose.yml",
          "docker-compose.override.yml",
          "docker-compose.yml",
          "Dockerfile"
        ],
        "to": "docker"
      },
      {
        "names": ["*.env"],
        "to": "env"
      },
      {
        "names": ["*.sh"],
        "to": "bin"
      }
    ]
  },
  "push": [
    {
      "git": {
        "branch": "plagiarize",
        "commit": {
          "create": true,
          "message": "Plagiarize copy"
        },
        "hooks": {
          "post-push": [
            {
              "api": "gitlab",
              "envVars": {
                "apiKey": "SHARED_CI_ACCESS_TOKEN"
              },
              "remote": "origin",
              "removeSourceBranch": true,
              "targetBranch": "master",
              "type": "create-merge-request"
            }
          ]
        },
        "push": true,
        "remotes": ["origin"],
        "repos": [
          {
            "local": "$local-base-dir/$project",
            "remote": {
              "checkout": "master",
              "defaultName": "origin",
              "url": "$remote-base-url/$project.git"
            }
          }
        ]
      },
      "instances": [
        {
          "project": "interaction-service",
          "service": "interaction"
        },
        {
          "project": "app-service"
        },
        {
          "project": "interpretation-service"
        },
        {
          "project": "job-service"
        },
        {
          "project": "user-service"
        },
        {
          "project": "pii-service"
        }
      ],
      "values": {
        "local-base-dir": "~/Projects/TimeRocket/Assistant/Service",
        "remote-base-url": "git@gitlab.com:timerocket/assistant/private/service"
      }
    }
  ],
  "replace": {
    "files": [
      "known_hosts",
      "app/src/domains/external/example.event.handler.ts",
      "app/src/main.ts",
      "app/src/root.ts",
      "app/src/shared/setup.ts",
      "app/src/shared/message-broker.ts",
      "app/src/shared/database.ts",
      ".dockerignore",
      "app/.prettierrc",
      "app/nest-cli.json",
      "app/tsconfig.spec.json",
      "app/tsconfig.build.json",
      "app/tslint.json",
      "app/src/locale/locales.ts",
      "app/src/example.spec.ts",
      "app/features/example.feature",
      "app/features/.gitignore",
      "app/features/example.feature",
      "app/features/step_definitions/example.ts",
      "app/src/modes/README.md",
      "app/src/modes/websocket/example.html",
      "app/src/modes/websocket/README.md",
      "app/src/modes/shared/jwt/example-jwt-token.ts",
      "app/src/modes/shared/README.md",
      "app/src/modes/cli/cli.module.ts",
      "app/src/modes/websocket/websocket.module.ts",
      "app/src/modes/benchmark/benchmark.module.ts",
      "app/src/modes/cli/consumer.command.ts",
      "env/.gitignore",
      "k8s/skaffold.yaml",
      "k8s/$project/.gitignore",
      "k8s/$project/.helmignore",
      "k8s/$project/charts/.gitkeep",
      "k8s/$project/templates/env-from-configmap.yaml",
      "k8s/$project/templates/_helpers.tpl",
      "k8s/$project/README.md",
      "k8s/README.md",
      ".gitignore",
      ".gitlab-ci.yml",
      "bin/setup-gitlab-project.sh"
    ],
    "strings": {
      "author": "Josh Woodcock <josh.woodcock@timerocket.com>",
      "company": "TimeRocket Inc.",
      "description": "Backend for TimeRocket user support portal",
      "project": "support-user-service",
      "project-short-name": "support-user",
      "short-description": "User Support Service"
    },
    "vars": {
      "consumer-enabled": true,
      "data-volume": false,
      "elasticsearch-enabled": true,
      "gpu-enabled": false,
      "neural-network-enabled": false,
      "rest-enabled": true,
      "websocket-enabled": true
    }
  },
  "repo": {
    "checkout": "master",
    "url": "git@gitlab.com:timerocket/assistant/private/service/support-user-service.git"
  },
  "run": [
    {
      "command": "cd app && chmod +x ./plagiarize-install.sh && ./plagiarize-install.sh",
      "when": "always"
    },
    {
      "command": "cd app && yarn prettier:fix",
      "when": "always"
    },
    {
      "command": "cd app && yarn build > output.txt",
      "onerror": "cd app && cat output.txt && yarn clean",
      "when": {
        "options": {
          "path": "app/dist"
        },
        "type": "if-missing"
      }
    },
    {
      "command": "cp docker/docker-compose.override.example.yml docker/docker-compose.override.yml",
      "parallel": true,
      "when": {
        "options": {
          "path": "docker/docker-compose.override.yml"
        },
        "type": "if-missing"
      }
    },
    {
      "command": "cd k8s/$project && ln -s ../../env env",
      "when": {
        "options": {
          "path": "k8s/$project/env"
        },
        "type": "if-missing"
      }
    },
    {
      "command": "cd app && chmod +x ./ci-dep-update.sh && ./ci-dep-update.sh"
    },
    {
      "command": "cd app && yarn build",
      "when": "always"
    },
    {
      "command": "chmod +x ./bin/setup-gitlab-project.sh\n./bin/setup-gitlab-project.sh\n",
      "when": {
        "options": {
          "path": ".cache/gitlab-project-configured"
        },
        "type": "if-missing"
      }
    },
    {
      "command": "cd k8s/$project && helm dep up",
      "when": "always"
    },
    {
      "command": "echo \"\" > .cache/examples-created"
    }
  ],
  "templates": [
    {
      "configs": [
        {
          "strings": {
            "env-group": "ci",
            "env-name": "ci"
          },
          "vars": {
            "docs-enabled": false,
            "graphite-host": null,
            "graphite-port": null,
            "kafka-host": "kafka"
          }
        },
        {
          "strings": {
            "env-group": "docker",
            "env-name": "docker"
          },
          "vars": {
            "elasticsearch-url": "http://elasticsearch:9200",
            "kafka-topics-config-path": "/var/app/config/topics.yaml"
          }
        },
        {
          "strings": {
            "env-group": "e2e-test",
            "env-name": "e2e-test"
          },
          "vars": {
            "docs-enabled": false,
            "jwt-verify": true
          }
        },
        {
          "strings": {
            "env-group": "minikube",
            "env-name": "minikube"
          },
          "vars": {
            "docs-path": "/support-user",
            "elasticsearch-url": "$kubernetes-elasticsearch-url",
            "kafka-host": "infrastructure-kafka.minikube-infrastructure.svc.cluster.local",
            "kafka-topics-config-path": "/var/app/config/topics.yaml"
          }
        },
        {
          "strings": {
            "env-group": "development",
            "env-name": "development.1"
          },
          "vars": {
            "docs-path": "/support-user",
            "elasticsearch-url": "$kubernetes-elasticsearch-url",
            "graphite-host": "infrastructure-graphite.development-1-infrastructure.svc.cluster.local",
            "graphite-port": "$graphite-port-enabled",
            "jwt-verify": true,
            "kafka-host": "infrastructure-kafka.development-1-infrastructure.svc.cluster.local",
            "kafka-topics-config-path": "/var/app/config/topics.yaml",
            "log-levels": "info,error,debug,warn",
            "metrics-enabled": true
          }
        },
        {
          "strings": {
            "env-group": "production",
            "env-name": "production.1"
          },
          "vars": {
            "docs-path": "/support-user",
            "elasticsearch-url": "$kubernetes-elasticsearch-url",
            "graphite-host": "infrastructure-graphite.production-1-infrastructure.svc.cluster.local",
            "graphite-port": "$graphite-port-enabled",
            "jwt-verify": true,
            "kafka-host": "infrastructure-kafka.production-1-infrastructure.svc.cluster.local",
            "kafka-topics-config-path": "/var/app/config/topics.yaml",
            "log-levels": "info,error",
            "metrics-enabled": true
          }
        }
      ],
      "create": {
        "files": ["env/localhost.secrets.env"]
      },
      "merge": [
        {
          "create": ["SQL_CLIENT"],
          "path": "env/localhost.env",
          "set": {
            "*": "*",
            "CLIENT_ID": "$uuidv4()",
            "DOCS_ENABLED": "$docs-enabled",
            "DOCS_PATH": "$docs-path",
            "ELASTICSEARCH_URL": "$elasticsearch-url",
            "GRAPHITE_HOST": "$graphite-host",
            "GRAPHITE_PORT": "$graphite-port",
            "JWT_VERIFY": "$jwt-verify",
            "KAFKA_HOST": "$kafka-host",
            "KAFKA_TOPICS_CONFIG_PATH": "$kafka-topics-config-path",
            "LOG_LEVELS": "$log-levels",
            "METRICS_ENABLED": "$metrics-enabled"
          },
          "type": "env"
        }
      ],
      "name": "environment",
      "replace": {
        "strings": {
          "env-group": "localhost",
          "env-name": "localhost"
        },
        "values": {
          "graphite-port-enabled": 2003,
          "kubernetes-elasticsearch-url": "http://elasticsearch-master:9200"
        },
        "vars": {
          "docs-enabled": true,
          "docs-path": "",
          "elasticsearch-url": "http://127.0.0.1:9200",
          "graphite-host": null,
          "graphite-port": null,
          "jwt-verify": false,
          "kafka-host": "kafka",
          "kafka-topics-config-path": "",
          "log-levels": "info,debug,error,warn",
          "metrics-enabled": false
        }
      }
    },
    {
      "configs": [
        {
          "strings": {
            "base-domain": "1.production",
            "env-group": "production",
            "env-name": "production.1",
            "env-number": 1
          },
          "vars": {
            "consumer-max-replicas": 20,
            "consumer-min-replicas": 1,
            "gpu-consumer-max-replicas": 1,
            "gpu-consumer-min-replicas": 1,
            "neural-network-consumer-max-replicas": 20,
            "neural-network-consumer-min-replicas": 1,
            "rest-max-replicas": 20,
            "rest-min-replicas": 1,
            "websocket-max-replicas": 20,
            "websocket-min-replicas": 1
          }
        }
      ],
      "merge": [
        {
          "path": "k8s/$project/$env-name.values.yaml",
          "set": {
            "microservice.deployments.consumer.autoscaling.replicas.max": "$consumer-max-replicas",
            "microservice.deployments.consumer.autoscaling.replicas.min": "$consumer-min-replicas",
            "microservice.deployments.gpu-consumer.autoscaling.replicas.max": "$gpu-consumer-max-replicas",
            "microservice.deployments.gpu-consumer.autoscaling.replicas.min": "$gpu-consumer-min-replicas",
            "microservice.deployments.neural-network-consumer.autoscaling.replicas.max": "$neural-network-consumer-max-replicas",
            "microservice.deployments.neural-network-consumer.autoscaling.replicas.min": "$neural-network-consumer-min-replicas",
            "microservice.deployments.rest.autoscaling.replicas.max": "$rest-max-replicas",
            "microservice.deployments.rest.autoscaling.replicas.min": "$rest-min-replicas",
            "microservice.deployments.websocket.autoscaling.replicas.max": "$websocket-max-replicas",
            "microservice.deployments.websocket.autoscaling.replicas.min": "$websocket-min-replicas",
            "microservice.persistentVolumes[0].enabled": "$data-volume"
          },
          "skipIfNotSameFileName": [
            "elasticsearch",
            "microservice.persistentVolumes[0].storage"
          ],
          "type": "yq"
        }
      ],
      "name": "kubernetes-environment",
      "replace": {
        "strings": {
          "base-domain": "1.development",
          "env-group": "development",
          "env-name": "development.1",
          "env-number": 1
        },
        "vars": {
          "consumer-max-replicas": 20,
          "consumer-min-replicas": 1,
          "gpu-consumer-max-replicas": 1,
          "gpu-consumer-min-replicas": 1,
          "neural-network-consumer-max-replicas": 20,
          "neural-network-consumer-min-replicas": 1,
          "rest-max-replicas": 20,
          "rest-min-replicas": 1,
          "websocket-max-replicas": 20,
          "websocket-min-replicas": 1
        }
      }
    }
  ]
}
