[GLOBAL]
pants_version = "2.14.0"
pythonpath = ["%(buildroot)s/pants-plugins"]

backend_packages = [
  "pants.backend.python",
  "pants.backend.python.lint.black",
  "pants.backend.python.lint.flake8",
  "pants.backend.python.lint.docformatter",
  "pants.backend.python.lint.isort",
  "pants.backend.python.typecheck.mypy",
  "pants.backend.plugin_development",
  # a custom plugin
  "project_version",
]

plugins = ["packaging==21.3"]

# a custom plugin's properties should be valid
[project-version]
as_json = true
match_git = false

[python]
enable_resolves = true
interpreter_constraints = ["CPython>=3.9.*,<=3.10.*"]

[python.resolves]
pants-plugins = "pants-plugins/requirements-pants-plugins.lock"
python-default = "requirements/requirements.lock"

[python.resolves_to_interpreter_constraints]
pants-plugins = ["CPython>=3.9,<3.10"]

[python-bootstrap]
search_path = ["<PYENV_LOCAL>", "<PATH>"]

[anonymous-telemetry]
enabled = true
repo_id = "df6470e5-420b-4930-b6e6-638cc06ffe0b"

[source]
root_patterns = [
    "/", "pants-plugins"
]

[flake8]
version = "flake8==5.0.4"
lockfile = "requirements/flake8.lock"

[mypy]
version = "mypy==0.971"
lockfile = "requirements/mypy.lock"
extra_type_stubs = [
    "types-requests==2.28.9",
    "types-python-dateutil==2.8.19",
    "types-setuptools==65.1.0",
]

[black]
version = "black==22.6.0"
lockfile = "requirements/black.lock"

[coverage-py]
report = ["xml", "console"]

[docformatter]
version = "docformatter>=1.4,<1.5"
lockfile = "requirements/docformatter.lock"

[isort]
version = "isort==5.10.1"
lockfile = "requirements/isort.lock"

# testing union type (can be loaded from file or be an object)
[docker]
registries = {"foo" = 5}

[regex-lint]
config = "@from-this-filepath"
