{
  "issues": {
    "exclude": ["abcdef"],
    "exclude-rules": [
      {
        "path": "_test\\.go",
        "linters": ["gocyclo", "errcheck", "dupl", "gosec"]
      },
      {
        "path-except": "_test\\.go",
        "linters": ["forbidigo"]
      },
      {
        "path": "internal/hmac/",
        "text": "weak cryptographic primitive",
        "linters": ["gosec"]
      },
      {
        "linters": ["staticcheck"],
        "text": "SA9003:"
      },
      {
        "linters": ["lll"],
        "source": "^//go:generate "
      }
    ],
    "exclude-use-default": false,
    "exclude-case-sensitive": false,
    "include": [
      "EXC0001",
      "EXC0002",
      "EXC0003",
      "EXC0004",
      "EXC0005",
      "EXC0006",
      "EXC0007",
      "EXC0008",
      "EXC0009",
      "EXC0010",
      "EXC0011",
      "EXC0012",
      "EXC0013",
      "EXC0014",
      "EXC0015"
    ],
    "max-issues-per-linter": 0,
    "max-same-issues": 0,
    "new": true,
    "new-from-rev": "HEAD",
    "new-from-patch": "path/to/patch/file",
    "fix": true
  },
  "linters": {
    "disable-all": true,
    "enable": [
      "asasalint",
      "asciicheck",
      "bidichk",
      "bodyclose",
      "containedctx",
      "contextcheck",
      "cyclop",
      "deadcode",
      "decorder",
      "depguard",
      "dogsled",
      "dupl",
      "dupword",
      "durationcheck",
      "errcheck",
      "errchkjson",
      "errname",
      "errorlint",
      "execinquery",
      "exhaustive",
      "exhaustivestruct",
      "exhaustruct",
      "exportloopref",
      "forbidigo",
      "forcetypeassert",
      "funlen",
      "gci",
      "ginkgolinter",
      "gocheckcompilerdirectives",
      "gochecknoglobals",
      "gochecknoinits",
      "gochecksumtype",
      "gocognit",
      "goconst",
      "gocritic",
      "gocyclo",
      "godot",
      "godox",
      "goerr113",
      "gofmt",
      "gofumpt",
      "goheader",
      "goimports",
      "golint",
      "gomnd",
      "gomoddirectives",
      "gomodguard",
      "goprintffuncname",
      "gosec",
      "gosimple",
      "gosmopolitan",
      "govet",
      "grouper",
      "ifshort",
      "importas",
      "inamedparam",
      "ineffassign",
      "interfacebloat",
      "interfacer",
      "ireturn",
      "lll",
      "loggercheck",
      "maintidx",
      "makezero",
      "maligned",
      "mirror",
      "misspell",
      "musttag",
      "nakedret",
      "nestif",
      "nilerr",
      "nilnil",
      "nlreturn",
      "noctx",
      "nolintlint",
      "nonamedreturns",
      "nosnakecase",
      "nosprintfhostport",
      "paralleltest",
      "perfsprint",
      "prealloc",
      "predeclared",
      "promlinter",
      "protogetter",
      "reassign",
      "revive",
      "rowserrcheck",
      "scopelint",
      "sloglint",
      "sqlclosecheck",
      "staticcheck",
      "structcheck",
      "stylecheck",
      "tagalign",
      "tagliatelle",
      "tenv",
      "testableexamples",
      "testifylint",
      "testpackage",
      "thelper",
      "tparallel",
      "typecheck",
      "unconvert",
      "unparam",
      "unused",
      "usestdlibvars",
      "varcheck",
      "varnamelen",
      "wastedassign",
      "whitespace",
      "wrapcheck",
      "wsl",
      "zerologlint"
    ],
    "enable-all": true,
    "disable": [
      "asasalint",
      "asciicheck",
      "bidichk",
      "bodyclose",
      "containedctx",
      "contextcheck",
      "cyclop",
      "deadcode",
      "decorder",
      "depguard",
      "dogsled",
      "dupl",
      "dupword",
      "durationcheck",
      "errcheck",
      "errchkjson",
      "errname",
      "errorlint",
      "execinquery",
      "exhaustive",
      "exhaustivestruct",
      "exhaustruct",
      "exportloopref",
      "forbidigo",
      "forcetypeassert",
      "funlen",
      "gci",
      "ginkgolinter",
      "gocheckcompilerdirectives",
      "gochecknoglobals",
      "gochecknoinits",
      "gochecksumtype",
      "gocognit",
      "goconst",
      "gocritic",
      "gocyclo",
      "godot",
      "godox",
      "goerr113",
      "gofmt",
      "gofumpt",
      "goheader",
      "goimports",
      "golint",
      "gomnd",
      "gomoddirectives",
      "gomodguard",
      "goprintffuncname",
      "gosec",
      "gosimple",
      "gosmopolitan",
      "govet",
      "grouper",
      "ifshort",
      "importas",
      "inamedparam",
      "ineffassign",
      "interfacebloat",
      "interfacer",
      "ireturn",
      "lll",
      "loggercheck",
      "maintidx",
      "makezero",
      "maligned",
      "mirror",
      "misspell",
      "musttag",
      "nakedret",
      "nestif",
      "nilerr",
      "nilnil",
      "nlreturn",
      "noctx",
      "nolintlint",
      "nonamedreturns",
      "nosnakecase",
      "nosprintfhostport",
      "paralleltest",
      "perfsprint",
      "prealloc",
      "predeclared",
      "promlinter",
      "protogetter",
      "reassign",
      "revive",
      "rowserrcheck",
      "scopelint",
      "sloglint",
      "sqlclosecheck",
      "staticcheck",
      "structcheck",
      "stylecheck",
      "tagalign",
      "tagliatelle",
      "tenv",
      "testableexamples",
      "testifylint",
      "testpackage",
      "thelper",
      "tparallel",
      "typecheck",
      "unconvert",
      "unparam",
      "unused",
      "usestdlibvars",
      "varcheck",
      "varnamelen",
      "wastedassign",
      "whitespace",
      "wrapcheck",
      "wsl",
      "zerologlint"
    ],
    "presets": [
      "bugs",
      "comment",
      "complexity",
      "error",
      "format",
      "import",
      "metalinter",
      "module",
      "performance",
      "sql",
      "style",
      "test",
      "unused"
    ],
    "fast": true
  },
  "linters-settings": {
    "asasalint": {
      "exclude": ["Append", "\\.Wrapf"],
      "use-builtin-exclusions": false,
      "ignore-test": true
    },
    "bidichk": {
      "left-to-right-embedding": false,
      "right-to-left-embedding": false,
      "pop-directional-formatting": false,
      "left-to-right-override": false,
      "right-to-left-override": false,
      "left-to-right-isolate": false,
      "right-to-left-isolate": false,
      "first-strong-isolate": false,
      "pop-directional-isolate": false
    },
    "cyclop": {
      "max-complexity": 10,
      "package-average": 0.5,
      "skip-tests": true
    },
    "decorder": {
      "dec-order": ["type", "const", "var", "func"],
      "ignore-underscore-vars": false,
      "disable-dec-order-check": false,
      "disable-init-func-first-check": false,
      "disable-dec-num-check": false,
      "disable-type-dec-num-check": false,
      "disable-const-dec-num-check": false,
      "disable-var-dec-num-check": false
    },
    "depguard": {
      "rules": {
        "main": {
          "files": ["!**/*_a _file.go"],
          "allow": ["$gostd", "github.com/OpenPeeDeeP"],
          "deny": [
            {
              "pkg": "github.com/sirupsen/logrus",
              "desc": "not allowed"
            },
            {
              "pkg": "github.com/pkg/errors",
              "desc": "Should be replaced by standard lib errors package"
            }
          ]
        }
      }
    },
    "dogsled": {
      "max-blank-identifiers": 3
    },
    "dupl": {
      "threshold": 100
    },
    "dupword": {
      "keywords": ["the", "and", "a"],
      "ignore": ["0C0C"]
    },
    "errcheck": {
      "check-type-assertions": true,
      "check-blank": true,
      "ignore": "fmt:.*,io/ioutil:^Read.*",
      "disable-default-exclusions": true,
      "exclude": "/path/to/file.txt",
      "exclude-functions": [
        "io/ioutil.ReadFile",
        "io.Copy(*bytes.Buffer)",
        "io.Copy(os.Stdout)"
      ]
    },
    "errchkjson": {
      "check-error-free-encoding": true,
      "report-no-exported": false
    },
    "errorlint": {
      "errorf": false,
      "errorf-multi": false,
      "asserts": false,
      "comparison": false
    },
    "exhaustive": {
      "check": ["switch", "map"],
      "check-generated": true,
      "default-signifies-exhaustive": true,
      "ignore-enum-members": "Example.+",
      "ignore-enum-types": "Example.+",
      "package-scope-only": true,
      "explicit-exhaustive-switch": true,
      "explicit-exhaustive-map": true
    },
    "exhaustivestruct": {
      "struct-patterns": ["*.Test", "example.com/package.ExampleStruct"]
    },
    "exhaustruct": {
      "include": [
        ".*\\.Test",
        "example\\.com/package\\.ExampleStruct[\\d]{1,2}"
      ],
      "exclude": ["cobra\\.Command$"]
    },
    "forbidigo": {
      "forbid": [
        "^print.*$",
        {
          "p": "^fmt\\.Print.*$",
          "msg": "Do not commit print statements."
        },
        "fmt\\.Print.*(# Do not commit print statements\\.)?",
        "^spew\\.(ConfigState\\.)?Dump$",
        {
          "p": "^v1.Dump$",
          "pkg": "^example.com/pkg/api/v1$"
        }
      ],
      "exclude-godoc-examples": false,
      "analyze-types": true
    },
    "funlen": {
      "lines": -1,
      "statements": -1,
      "ignore-comments": true
    },
    "gci": {
      "local-prefixes": "github.com/org/project",
      "sections": [
        "standard",
        "default",
        "prefix(github.com/org/project)",
        "blank",
        "dot"
      ],
      "skip-generated": false,
      "custom-order": true
    },
    "ginkgolinter": {
      "suppress-len-assertion": true,
      "suppress-nil-assertion": true,
      "suppress-err-assertion": true,
      "suppress-compare-assertion": true,
      "suppress-async-assertion": true,
      "suppress-type-compare-assertion": true,
      "forbid-focus-container": true,
      "allow-havelen-zero": true
    },
    "gocognit": {
      "min-complexity": 10
    },
    "goconst": {
      "min-len": 2,
      "min-occurrences": 2,
      "ignore-tests": true,
      "match-constant": false,
      "numbers": true,
      "min": 2,
      "max": 2,
      "ignore-calls": false
    },
    "gocritic": {
      "enabled-checks": [
        "nestingReduce",
        "unnamedResult",
        "ruleguard",
        "truncateCmp"
      ],
      "disabled-checks": ["regexpMust"],
      "enabled-tags": [
        "diagnostic",
        "style",
        "performance",
        "experimental",
        "opinionated"
      ],
      "disabled-tags": [
        "diagnostic",
        "style",
        "performance",
        "experimental",
        "opinionated"
      ],
      "settings": {
        "captLocal": {
          "paramsOnly": false
        },
        "elseif": {
          "skipBalanced": false
        },
        "hugeParam": {
          "sizeThreshold": 70
        },
        "nestingReduce": {
          "bodyWidth": 4
        },
        "rangeExprCopy": {
          "sizeThreshold": 516,
          "skipTestFuncs": false
        },
        "rangeValCopy": {
          "sizeThreshold": 32,
          "skipTestFuncs": false
        },
        "ruleguard": {
          "debug": "emptyDecl",
          "failOnError": false,
          "failOn": "dsl",
          "rules": "${configDir}/ruleguard/rules-*.go,${configDir}/myrule1.go",
          "enable": "myGroupName,#myTagName",
          "disable": "myGroupName,#myTagName"
        },
        "tooManyResultsChecker": {
          "maxResults": 10
        },
        "truncateCmp": {
          "skipArchDependent": false
        },
        "underef": {
          "skipRecvDeref": false
        },
        "unnamedResult": {
          "checkExported": true
        }
      }
    },
    "gocyclo": {
      "min-complexity": 10
    },
    "godot": {
      "scope": "toplevel",
      "exclude": ["^fixme:", "^todo:"],
      "period": false,
      "capital": true
    },
    "godox": {
      "keywords": ["NOTE", "OPTIMIZE", "HACK"]
    },
    "gofmt": {
      "simplify": false,
      "rewrite-rules": [
        {
          "pattern": "interface{}",
          "replacement": "any"
        },
        {
          "pattern": "a[b:len(a)]",
          "replacement": "a[b:]"
        }
      ]
    },
    "gofumpt": {
      "lang-version": "1.17",
      "module-path": "github.com/org/project",
      "extra-rules": true
    },
    "goheader": {
      "values": {
        "const": {
          "COMPANY": "MY COMPANY"
        },
        "regexp": {
          "AUTHOR": ".*@mycompany\\.com"
        }
      },
      "template": "# Put here copyright header template for source code files\n# For example:\n# Note: {{ YEAR }} is a builtin value that returns the year relative to the current machine time.\n#\n# {{ AUTHOR }} {{ COMPANY }} {{ YEAR }}\n# SPDX-License-Identifier: Apache-2.0\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at:\n\n#   http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License."
    },
    "goimports": {
      "local-prefixes": "github.com/org/project"
    },
    "golint": {
      "min-confidence": 0.7
    },
    "gomnd": {
      "checks": [
        "argument",
        "case",
        "condition",
        "operation",
        "return",
        "assign"
      ],
      "ignored-numbers": ["0666", "0755", "42"],
      "ignored-files": ["magic1_.+\\.go$"],
      "ignored-functions": ["^math\\.", "^http\\.StatusText$"]
    },
    "gomoddirectives": {
      "replace-local": false,
      "replace-allow-list": ["launchpad.net/gocheck"],
      "retract-allow-no-explanation": false,
      "exclude-forbidden": false
    },
    "gomodguard": {
      "allowed": {
        "modules": ["gopkg.in/yaml.v2"],
        "domains": ["golang.org"]
      },
      "blocked": {
        "modules": [
          {
            "github.com/uudashr/go-module": {
              "recommendations": ["golang.org/x/mod"],
              "reason": "`mod` is the official go.mod parser library."
            }
          }
        ],
        "versions": [
          {
            "github.com/mitchellh/go-homedir": {
              "version": "< 1.1.0",
              "reason": "testing if blocked version constraint works."
            }
          }
        ],
        "local_replace_directives": false
      }
    },
    "gosimple": {
      "go": "1.15",
      "checks": ["all"]
    },
    "gosec": {
      "includes": [
        "G101",
        "G102",
        "G103",
        "G104",
        "G106",
        "G107",
        "G108",
        "G109",
        "G110",
        "G111",
        "G112",
        "G113",
        "G114",
        "G201",
        "G202",
        "G203",
        "G204",
        "G301",
        "G302",
        "G303",
        "G304",
        "G305",
        "G306",
        "G307",
        "G401",
        "G402",
        "G403",
        "G404",
        "G501",
        "G502",
        "G503",
        "G504",
        "G505",
        "G601",
        "G602"
      ],
      "excludes": [
        "G101",
        "G102",
        "G103",
        "G104",
        "G106",
        "G107",
        "G108",
        "G109",
        "G110",
        "G111",
        "G112",
        "G113",
        "G114",
        "G201",
        "G202",
        "G203",
        "G204",
        "G301",
        "G302",
        "G303",
        "G304",
        "G305",
        "G306",
        "G307",
        "G401",
        "G402",
        "G403",
        "G404",
        "G501",
        "G502",
        "G503",
        "G504",
        "G505",
        "G601",
        "G602"
      ],
      "exclude-generated": true,
      "severity": "medium",
      "confidence": "medium",
      "concurrency": 12,
      "config": {
        "global": {
          "nosec": true,
          "#nosec": "#my-custom-nosec",
          "show-ignored": true,
          "audit": true
        },
        "G101": {
          "pattern": "(?i)example",
          "ignore_entropy": false,
          "entropy_threshold": "80.0",
          "per_char_threshold": "3.0",
          "truncate": "32"
        },
        "G104": {
          "fmt": ["Fscanf"]
        },
        "G111": {
          "pattern": "custom\\.Dir\\(\\)"
        },
        "G301": "0750",
        "G302": "0600",
        "G306": "0600"
      }
    },
    "gosmopolitan": {
      "allow-time-local": true,
      "escape-hatches": [
        "github.com/nicksnyder/go-i18n/v2/i18n.Message",
        "example.com/your/project/i18n/markers.Raw",
        "example.com/your/project/i18n/markers.OK",
        "example.com/your/project/i18n/markers.TODO",
        "command-line-arguments.Simple"
      ],
      "ignore-tests": false,
      "watch-for-scripts": [
        "Devanagari",
        "Han",
        "Hangul",
        "Hiragana",
        "Katakana"
      ]
    },
    "govet": {
      "check-shadowing": true,
      "settings": {
        "printf": {
          "funcs": [
            "(github.com/golangci/golangci-lint/pkg/logutils.Log).Infof",
            "(github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf",
            "(github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf",
            "(github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf"
          ]
        },
        "shadow": {
          "strict": true
        },
        "unusedresult": {
          "funcs": ["pkg.MyFunc"],
          "stringmethods": ["MyMethod"]
        }
      },
      "disable-all": true,
      "enable": [
        "appends",
        "asmdecl",
        "assign",
        "atomic",
        "atomicalign",
        "bools",
        "buildtag",
        "cgocall",
        "composites",
        "copylocks",
        "deepequalerrors",
        "defers",
        "directive",
        "errorsas",
        "fieldalignment",
        "findcall",
        "framepointer",
        "httpresponse",
        "ifaceassert",
        "loopclosure",
        "lostcancel",
        "nilfunc",
        "nilness",
        "printf",
        "reflectvaluecompare",
        "shadow",
        "shift",
        "sigchanyzer",
        "slog",
        "sortslice",
        "stdmethods",
        "stringintconv",
        "structtag",
        "testinggoroutine",
        "tests",
        "unmarshal",
        "unreachable",
        "unsafeptr",
        "unusedresult",
        "unusedwrite"
      ],
      "enable-all": true,
      "disable": [
        "appends",
        "asmdecl",
        "assign",
        "atomic",
        "atomicalign",
        "bools",
        "buildtag",
        "cgocall",
        "composites",
        "copylocks",
        "deepequalerrors",
        "defers",
        "directive",
        "errorsas",
        "fieldalignment",
        "findcall",
        "framepointer",
        "httpresponse",
        "ifaceassert",
        "loopclosure",
        "lostcancel",
        "nilfunc",
        "nilness",
        "printf",
        "reflectvaluecompare",
        "shadow",
        "shift",
        "sigchanyzer",
        "slog",
        "sortslice",
        "stdmethods",
        "stringintconv",
        "structtag",
        "testinggoroutine",
        "tests",
        "unmarshal",
        "unreachable",
        "unsafeptr",
        "unusedresult",
        "unusedwrite"
      ]
    },
    "grouper": {
      "const-require-single-const": true,
      "const-require-grouping": true,
      "import-require-single-import": true,
      "import-require-grouping": true,
      "type-require-single-type": true,
      "type-require-grouping": true,
      "var-require-single-var": true,
      "var-require-grouping": true
    },
    "ifshort": {
      "max-decl-lines": 2,
      "max-decl-chars": 40
    },
    "importas": {
      "no-unaliased": true,
      "no-extra-aliases": true,
      "alias": [
        {
          "pkg": "knative.dev/serving/pkg/apis/serving/v1",
          "alias": "servingv1"
        },
        {
          "pkg": "knative.dev/serving/pkg/apis/autoscaling/v1alpha1",
          "alias": "autoscalingv1alpha1"
        },
        {
          "pkg": "knative.dev/serving/pkg/apis/(\\w+)/(v[\\w\\d]+)",
          "alias": "$1$2"
        }
      ]
    },
    "interfacebloat": {
      "max": 5
    },
    "ireturn": {
      "allow": ["anon", "error", "empty", "stdlib", "(or|er)$"],
      "reject": ["github.com\\/user\\/package\\/v4\\.Type"]
    },
    "lll": {
      "line-length": 120,
      "tab-width": 1
    },
    "loggercheck": {
      "kitlog": false,
      "klog": false,
      "logr": false,
      "zap": false,
      "require-string-key": true,
      "no-printf-like": true,
      "rules": [
        "k8s.io/klog/v2.InfoS",
        "(github.com/go-logr/logr.Logger).Error",
        "(*go.uber.org/zap.SugaredLogger).With"
      ]
    },
    "maintidx": {
      "under": 100
    },
    "makezero": {
      "always": true
    },
    "maligned": {
      "suggest-new": true
    },
    "misspell": {
      "locale": "US",
      "ignore-words": ["someword"]
    },
    "musttag": {
      "functions": [
        {
          "name": "github.com/hashicorp/hcl/v2/hclsimple.DecodeFile",
          "tag": "hcl",
          "arg-pos": 2
        }
      ]
    },
    "nakedret": {
      "max-func-lines": 31
    },
    "nestif": {
      "min-complexity": 4
    },
    "nilnil": {
      "checked-types": ["ptr", "func", "iface", "map", "chan"]
    },
    "nlreturn": {
      "block-size": 2
    },
    "nolintlint": {
      "allow-unused": true,
      "allow-no-explanation": [],
      "require-explanation": true,
      "require-specific": true
    },
    "nonamedreturns": {
      "report-error-in-defer": true
    },
    "paralleltest": {
      "ignore-missing": true,
      "ignore-missing-subtests": true
    },
    "prealloc": {
      "simple": false,
      "range-loops": false,
      "for-loops": true
    },
    "predeclared": {
      "ignore": "new,int",
      "q": true
    },
    "promlinter": {
      "strict": true,
      "disabled-linters": [
        "Help",
        "MetricUnits",
        "Counter",
        "HistogramSummaryReserved",
        "MetricTypeInName",
        "ReservedChars",
        "CamelCase",
        "UnitAbbreviations"
      ]
    },
    "reassign": {
      "patterns": [".*"]
    },
    "revive": {
      "max-open-files": 2048,
      "ignore-generated-header": true,
      "severity": "error",
      "enable-all-rules": true,
      "confidence": 0.1,
      "rules": [
        {
          "name": "add-constant",
          "severity": "warning",
          "disabled": false,
          "arguments": [
            {
              "maxLitCount": "3",
              "allowStrs": "\"\"",
              "allowInts": "0,1,2",
              "allowFloats": "0.0,0.,1.0,1.,2.0,2."
            }
          ]
        },
        {
          "name": "argument-limit",
          "severity": "warning",
          "disabled": false,
          "arguments": [4]
        },
        {
          "name": "atomic",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "banned-characters",
          "severity": "warning",
          "disabled": false,
          "arguments": ["Ω", "Σ", "σ", "7"]
        },
        {
          "name": "bare-return",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "blank-imports",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "bool-literal-in-expr",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "call-to-gc",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "cognitive-complexity",
          "severity": "warning",
          "disabled": false,
          "arguments": [7]
        },
        {
          "name": "comment-spacings",
          "severity": "warning",
          "disabled": false,
          "arguments": ["mypragma", "otherpragma"]
        },
        {
          "name": "confusing-naming",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "confusing-results",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "constant-logical-expr",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "context-as-argument",
          "severity": "warning",
          "disabled": false,
          "arguments": [
            {
              "allowTypesBefore": "*testing.T,*github.com/user/repo/testing.Harness"
            }
          ]
        },
        {
          "name": "context-keys-type",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "cyclomatic",
          "severity": "warning",
          "disabled": false,
          "arguments": [3]
        },
        {
          "name": "datarace",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "deep-exit",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "defer",
          "severity": "warning",
          "disabled": false,
          "arguments": [["call-chain", "loop"]]
        },
        {
          "name": "dot-imports",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "duplicated-imports",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "early-return",
          "severity": "warning",
          "disabled": false,
          "arguments": ["preserveScope"]
        },
        {
          "name": "empty-block",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "empty-lines",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "enforce-map-style",
          "severity": "warning",
          "disabled": false,
          "arguments": ["make"]
        },
        {
          "name": "error-naming",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "error-return",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "error-strings",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "errorf",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "exported",
          "severity": "warning",
          "disabled": false,
          "arguments": [
            "preserveScope",
            "checkPrivateReceivers",
            "sayRepetitiveInsteadOfStutters"
          ]
        },
        {
          "name": "file-header",
          "severity": "warning",
          "disabled": false,
          "arguments": [
            "This is the text that must appear at the top of source files."
          ]
        },
        {
          "name": "flag-parameter",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "function-result-limit",
          "severity": "warning",
          "disabled": false,
          "arguments": [2]
        },
        {
          "name": "function-length",
          "severity": "warning",
          "disabled": false,
          "arguments": [10, 0]
        },
        {
          "name": "get-return",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "identical-branches",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "if-return",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "increment-decrement",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "indent-error-flow",
          "severity": "warning",
          "disabled": false,
          "arguments": ["preserveScope"]
        },
        {
          "name": "import-alias-naming",
          "severity": "warning",
          "disabled": false,
          "arguments": ["^[a-z][a-z0-9]{0,}$"]
        },
        {
          "name": "imports-blacklist",
          "severity": "warning",
          "disabled": false,
          "arguments": ["crypto/md5", "crypto/sha1"]
        },
        {
          "name": "import-shadowing",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "line-length-limit",
          "severity": "warning",
          "disabled": false,
          "arguments": [80]
        },
        {
          "name": "max-public-structs",
          "severity": "warning",
          "disabled": false,
          "arguments": [3]
        },
        {
          "name": "modifies-parameter",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "modifies-value-receiver",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "nested-structs",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "optimize-operands-order",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "package-comments",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "range",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "range-val-in-closure",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "range-val-address",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "receiver-naming",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "redundant-import-alias",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "redefines-builtin-id",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "string-of-int",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "string-format",
          "severity": "warning",
          "disabled": false,
          "arguments": [
            [
              "core.WriteError[1].Message",
              "/^([^A-Z]|$)/",
              "must not start with a capital letter"
            ],
            ["fmt.Errorf[0]", "/(^|[^\\.!?])$/", "must not end in punctuation"],
            ["panic", "/^[^\\n]*$/", "must not contain line breaks"]
          ]
        },
        {
          "name": "struct-tag",
          "arguments": ["json,inline", "bson,outline,gnu"],
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "superfluous-else",
          "severity": "warning",
          "disabled": false,
          "arguments": ["preserveScope"]
        },
        {
          "name": "time-equal",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "time-naming",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "var-naming",
          "severity": "warning",
          "disabled": false,
          "arguments": [
            ["ID"],
            ["VM"],
            [
              {
                "upperCaseConst": true
              }
            ]
          ]
        },
        {
          "name": "var-declaration",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "unconditional-recursion",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "unexported-naming",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "unexported-return",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "unhandled-error",
          "severity": "warning",
          "disabled": false,
          "arguments": ["fmt.Printf", "myFunction"]
        },
        {
          "name": "unnecessary-stmt",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "unreachable-code",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "unused-parameter",
          "severity": "warning",
          "disabled": false,
          "arguments": [
            {
              "allowRegex": "^_"
            }
          ]
        },
        {
          "name": "unused-receiver",
          "severity": "warning",
          "disabled": false,
          "arguments": [
            {
              "allowRegex": "^_"
            }
          ]
        },
        {
          "name": "useless-break",
          "severity": "warning",
          "disabled": false
        },
        {
          "name": "waitgroup-by-value",
          "severity": "warning",
          "disabled": false
        }
      ]
    },
    "rowserrcheck": {
      "packages": ["github.com/jmoiron/sqlx"]
    },
    "sloglint": {
      "kv-only": true,
      "attr-only": true,
      "no-raw-keys": true,
      "args-on-sep-lines": true
    },
    "staticcheck": {
      "go": "1.15",
      "checks": ["all"]
    },
    "stylecheck": {
      "go": "1.15",
      "checks": [
        "all",
        "-ST1000",
        "-ST1003",
        "-ST1016",
        "-ST1020",
        "-ST1021",
        "-ST1022"
      ],
      "dot-import-whitelist": ["fmt"],
      "initialisms": [
        "ACL",
        "API",
        "ASCII",
        "CPU",
        "CSS",
        "DNS",
        "EOF",
        "GUID",
        "HTML",
        "HTTP",
        "HTTPS",
        "ID",
        "IP",
        "JSON",
        "QPS",
        "RAM",
        "RPC",
        "SLA",
        "SMTP",
        "SQL",
        "SSH",
        "TCP",
        "TLS",
        "TTL",
        "UDP",
        "UI",
        "GID",
        "UID",
        "UUID",
        "URI",
        "URL",
        "UTF8",
        "VM",
        "XML",
        "XMPP",
        "XSRF",
        "XSS",
        "SIP",
        "RTP",
        "AMQP",
        "DB",
        "TS"
      ],
      "http-status-code-whitelist": ["200", "400", "404", "500"]
    },
    "tagalign": {
      "align": false,
      "sort": false,
      "order": [
        "json",
        "yaml",
        "yml",
        "toml",
        "mapstructure",
        "binding",
        "validate"
      ],
      "strict": true
    },
    "tagliatelle": {
      "case": {
        "use-field-name": true,
        "rules": {
          "json": "camel",
          "yaml": "camel",
          "xml": "camel",
          "bson": "camel",
          "avro": "snake",
          "mapstructure": "kebab",
          "env": "upperSnake",
          "envconfig": "upperSnake"
        }
      }
    },
    "tenv": {
      "all": false
    },
    "testifylint": {
      "enable-all": true,
      "enable": [
        "bool-compare",
        "compares",
        "empty",
        "error-is-as",
        "error-nil",
        "expected-actual",
        "float-compare",
        "len",
        "require-error",
        "suite-dont-use-pkg",
        "suite-extra-assert-call",
        "suite-thelper"
      ],
      "expected-actual": {
        "pattern": "^expected"
      },
      "suite-extra-assert-call": {
        "mode": "require"
      }
    },
    "testpackage": {
      "skip-regexp": "(export|internal)_test\\.go",
      "allow-packages": ["example", "main"]
    },
    "thelper": {
      "test": {
        "first": false,
        "name": false,
        "begin": false
      },
      "benchmark": {
        "first": false,
        "name": false,
        "begin": false
      },
      "tb": {
        "first": false,
        "name": false,
        "begin": false
      },
      "fuzz": {
        "first": false,
        "name": false,
        "begin": false
      }
    },
    "usestdlibvars": {
      "http-method": false,
      "http-status-code": false,
      "time-weekday": true,
      "time-month": true,
      "time-layout": true,
      "crypto-hash": true,
      "default-rpc-path": true,
      "os-dev-null": true,
      "sql-isolation-level": true,
      "tls-signature-scheme": true,
      "constant-kind": true,
      "syslog-priority": true
    },
    "unparam": {
      "check-exported": true
    },
    "unused": {
      "field-writes-are-uses": false,
      "post-statements-are-reads": true,
      "exported-is-used": false,
      "exported-fields-are-used": false,
      "parameters-are-used": false,
      "local-variables-are-used": false,
      "generated-is-used": false
    },
    "varcheck": {
      "exported-fields": true
    },
    "varnamelen": {
      "max-distance": 6,
      "min-name-length": 2,
      "check-receiver": true,
      "check-return": true,
      "check-type-param": true,
      "ignore-type-assert-ok": true,
      "ignore-map-index-ok": true,
      "ignore-chan-recv-ok": true,
      "ignore-names": ["err"],
      "ignore-decls": [
        "c echo.Context",
        "t testing.T",
        "f *foo.Bar",
        "e error",
        "i int",
        "const C",
        "T any",
        "m map[string]int"
      ]
    },
    "whitespace": {
      "multi-if": true,
      "multi-func": true
    },
    "wrapcheck": {
      "ignoreSigs": [
        ".Errorf(",
        "errors.New(",
        "errors.Unwrap(",
        ".Wrap(",
        ".Wrapf(",
        ".WithMessage(",
        ".WithMessagef(",
        ".WithStack("
      ],
      "ignoreSigRegexps": ["\\.New.*Error\\("],
      "ignorePackageGlobs": ["encoding/*", "github.com/pkg/*"],
      "ignoreInterfaceRegexps": ["^(?i)c(?-i)ach(ing|e)"]
    },
    "wsl": {
      "allow-assign-and-anything": false,
      "allow-assign-and-call": true,
      "allow-cuddle-declarations": false,
      "allow-cuddle-with-calls": ["Lock", "RLock"],
      "allow-cuddle-with-rhs": ["Unlock", "RUnlock"],
      "allow-multiline-assign": true,
      "allow-separated-leading-comment": false,
      "allow-trailing-comment": false,
      "error-variable-names": ["err"],
      "force-case-trailing-whitespace": 0,
      "force-err-cuddling": false,
      "force-short-decl-cuddling": false,
      "strict-append": true
    },
    "custom": {
      "example": {
        "path": "/path/to/example.so",
        "description": "This is an example usage of a plugin linter.",
        "original-url": "github.com/golangci/example-linter"
      }
    }
  },
  "output": {
    "format": "json",
    "print-issued-lines": false,
    "print-linter-name": false,
    "uniq-by-line": false,
    "path-prefix": "",
    "sort-results": false
  },
  "run": {
    "concurrency": 4,
    "timeout": "5m",
    "issues-exit-code": 2,
    "tests": false,
    "build-tags": ["mytag"],
    "skip-dirs": ["src/external_libs", "autogenerated_by_my_lib"],
    "skip-dirs-use-default": false,
    "skip-files": [".*\\.my\\.go$", "lib/bad.go"],
    "modules-download-mode": "readonly",
    "allow-parallel-runners": false,
    "go": "1.19"
  },
  "severity": {
    "default-severity": "error",
    "case-sensitive": true,
    "rules": [
      {
        "linters": ["dupl"],
        "severity": "info"
      }
    ]
  }
}
