{
  "contributions": {
    "html": {
      "types-syntax": "typescript",
      "description-markup": "markdown",
      "elements": [
        {
          "name": "ex-component",
          "aliases": ["foo"],
          "source": {
            "module": "example",
            "symbol": "ExComponent"
          },
          "description": "An example component to showcase web-types capabilities",
          "doc-url": "http://example.com/docs/components/ex-component",
          "attributes": [
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": ["string"]
              },
              "default": "\"red\""
            },
            {
              "name": "position",
              "value": {
                "kind": "expression",
                "type": "'top' | 'bottom' | 'left' | 'right'"
              },
              "default": "\"top\""
            },
            {
              "name": "text",
              "value": {
                "kind": "plain",
                "type": "string",
                "required": false
              },
              "default": "Lorem ipsum"
            },
            {
              "name": "active",
              "value": {
                "kind": "expression",
                "required": true,
                "type": "boolean"
              },
              "type": "boolean"
            },
            {
              "name": "reverse",
              "description": "A regular attribute not bound to a component prop",
              "value": {
                "kind": "plain",
                "type": "boolean",
                "required": false
              }
            },
            {
              "name": "marker",
              "description": "A regular attribute not bound to a component prop",
              "value": {
                "kind": "no-value"
              }
            }
          ],
          "events": [
            {
              "name": "init",
              "description": "An event fired when component is initialized",
              "arguments": [
                {
                  "name": "component",
                  "type": {
                    "module": "example",
                    "name": "VComponent"
                  }
                }
              ]
            },
            {
              "name": "colorChanged"
            }
          ],
          "slots": [
            {
              "name": "example",
              "description": "Use this slot in the component if you want to render an example text",
              "doc-url": "http://example.com/docs/components/ex-component#slot.example"
            },
            {
              "name": "cell({key})",
              "pattern": "cell\\([A-Za-z0-9_$]+\\)"
            },
            {
              "name": "scoped-example",
              "description": "This slot allows you to access component's scope",
              "doc-url": "http://example.com/docs/components/ex-component#scoped-slot.scoped-example",
              "vue-properties": [
                {
                  "name": "color",
                  "type": ["string"]
                },
                {
                  "name": "isActive",
                  "type": "boolean"
                }
              ]
            },
            {
              "name": "scoped-pattern",
              "description": "This slot depends on some dynamic information",
              "pattern": {
                "regex": "col-[a-z0-9]",
                "case-sensitive": false
              },
              "vue-properties": [
                {
                  "name": "content",
                  "type": "string"
                }
              ]
            }
          ],
          "vue-model": {
            "event": "colorChanged",
            "prop": "color"
          }
        }
      ],
      "attributes": [
        {
          "name": "v-example-directive",
          "aliases": ["foo"],
          "description": "An example directive located by an offset in the file relative to web-types.json.",
          "source": {
            "file": "./src/directives/example.js",
            "offset": 213
          },
          "value": {
            "kind": "expression",
            "type": "string"
          },
          "vue-argument": {
            "pattern": "[0-9]{3}-[0-9]{3}-[0-9]{3}",
            "description": "Provide phone number",
            "required": true
          },
          "vue-modifiers": [
            {
              "name": "immediate",
              "description": "Don't waste time, do the thing immediately"
            },
            {
              "name": "convert"
            },
            {
              "name": "delay",
              "pattern": {
                "regex": "d[0-9]+",
                "case-sensitive": false
              }
            }
          ]
        },
        {
          "name": "example-attr",
          "description": "An example regular attribute applicable to any tag.",
          "value": {
            "kind": "plain",
            "type": "enum"
          },
          "values": [
            {
              "name": "foo"
            },
            {
              "name": "bar"
            }
          ]
        },
        {
          "name": "Foo",
          "pattern": ".*"
        }
      ],
      "vue-filters": [
        {
          "name": "capitalize",
          "description": "Capitalize",
          "doc-url": "https://www.example.com/docs/filters/capitalize",
          "source": {
            "file": "./src/directives/example.js",
            "offset": 213
          },
          "accepts": "string",
          "returns": "string",
          "arguments": [
            {
              "name": "all-words",
              "type": "boolean"
            }
          ]
        },
        {
          "name": "async",
          "aliases": ["foo"],
          "description": "Resolves promise",
          "accepts": "Promise<T>",
          "returns": "T"
        }
      ]
    }
  },
  "framework": "vue",
  "framework-config": {
    "canonical-names": {
      "/js/properties": "as-is"
    },
    "match-names": {
      "/js/properties": ["kebab-case"]
    },
    "name-variants": {
      "/js/properties": ["kebab-case"]
    }
  },
  "name": "example",
  "version": "1.0.0"
}
