# yaml-language-server: $schema=../../schemas/json/app-config.json
app:
  title: Backstage Example App
  baseUrl: http://localhost:3000
  support:
    url: https://github.com/backstage/backstage/issues
    items:
      - title: Issues
        icon: github
        links:
          - url: https://github.com/backstage/backstage/issues
            title: GitHub Issues
      - title: Discord Chatroom
        icon: chat
        links:
          - url: https://discord.gg/backstage-687207715902193673
            title: '#backstage'

  packageName: example-app

backend:
  auth:
    keys:
      - secret: my-lovely-secret
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  database:
    client: better-sqlite3
    connection: ':memory:'
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  reading:
    allow:
      - host: example.com
      - host: '*.mozilla.org'

proxy:
  endpoints:
    '/circleci/api':
      target: https://circleci.com/api/v1.1
      headers:
        Circle-Token: ${CIRCLECI_AUTH_TOKEN}

    '/jenkins/api':
      target: http://localhost:8080
      headers:
        Authorization: ${JENKINS_BASIC_AUTH_HEADER}

    '/travisci/api':
      target: https://api.travis-ci.com
      changeOrigin: true
      headers:
        Authorization: ${TRAVISCI_AUTH_TOKEN}
        travis-api-version: '3'

    '/newrelic/apm/api':
      target: https://api.newrelic.com/v2
      headers:
        X-Api-Key: ${NEW_RELIC_REST_API_KEY}
      allowedHeaders:
        - link

    '/newrelic/api':
      target: https://api.newrelic.com
      headers:
        X-Api-Key: ${NEW_RELIC_USER_KEY}

    '/pagerduty':
      target: https://api.pagerduty.com
      headers:
        Authorization: Token token=${PAGERDUTY_TOKEN}

    '/buildkite/api':
      target: https://api.buildkite.com/v2/
      headers:
        Authorization: ${BUILDKITE_TOKEN}

    '/sentry/api':
      target: https://sentry.io/api/
      allowedMethods: ['GET']
      headers:
        Authorization: ${SENTRY_TOKEN}

    '/ilert':
      target: https://api.ilert.com
      allowedMethods: ['GET', 'POST', 'PUT']
      allowedHeaders: ['Authorization']
      headers:
        Authorization: ${ILERT_AUTH_HEADER}

    '/airflow':
      target: https://your.airflow.instance.com/api/v1
      headers:
        Authorization: ${AIRFLOW_BASIC_AUTH_HEADER}

    '/gocd':
      target: https://your.gocd.instance.com/go/api
      allowedMethods: ['GET']
      allowedHeaders: ['Authorization']
      headers:
        Authorization: Basic ${GOCD_AUTH_CREDENTIALS}

    '/dynatrace':
      target: https://your.dynatrace.instance.com/api/v2
      headers:
        Authorization: 'Api-Token ${DYNATRACE_ACCESS_TOKEN}'

    '/stackstorm':
      target: https://your.stackstorm.instance.com/api
      headers:
        St2-Api-Key: ${ST2_API_KEY}

    '/puppetdb':
      target: https://your.puppetdb.instance.com

organization:
  name: My Company

techdocs:
  builder: 'local'
  generator:
    runIn: 'docker'
  publisher:
    type: 'local'

dynatrace:
  baseUrl: https://your.dynatrace.instance.com

nomad:
  addr: 0.0.0.0

scorecards:
  jsonDataUrl: https://raw.githubusercontent.com/Oriflame/backstage-plugins/main/plugins/score-card/sample-data/
  wikiLinkTemplate: https://link-to-wiki/{id}

sentry:
  organization: my-company

rollbar:
  organization: my-company
  accountToken: my-rollbar-account-token

lighthouse:
  baseUrl: http://localhost:3003

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters: []

kafka:
  clientId: backstage
  clusters:
    - name: cluster
      dashboardUrl: https://akhq.io/
      brokers:
        - localhost:9092

allure:
  baseUrl: http://localhost:5050/allure-docker-service

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
  gitlab:
    - host: gitlab.com
      token: ${GITLAB_TOKEN}
  bitbucketCloud:
    - username: ${BITBUCKET_USERNAME}
      appPassword: ${BITBUCKET_APP_PASSWORD}
  azure:
    - host: dev.azure.com
      token: ${AZURE_TOKEN}
  awsS3:
    - endpoint: ${AWS_S3_ENDPOINT}
      accessKeyId: ${AWS_ACCESS_KEY_ID}
      secretAccessKey: ${AWS_SECRET_ACCESS_KEY}

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow:
        - Component
        - API
        - Resource
        - System
        - Domain
        - Location

  processors:
    ldapOrg:
      providers:
        - target: ldaps://ds.example.net
          bind:
            dn: uid=ldap-reader-user,ou=people,ou=example,dc=example,dc=net
            secret: ${LDAP_SECRET}
          users:
            dn: ou=people,ou=example,dc=example,dc=net
            options:
              filter: (uid=*)
            map:
              description: l
          groups:
            dn: ou=access,ou=groups,ou=example,dc=example,dc=net
            options:
              filter: (&(objectClass=some-group-class)(!(groupType=email)))

  locations:
    - type: file
      target: ../catalog-model/examples/all.yaml
    - type: file
      target: ../catalog-model/examples/acme-corp.yaml
      rules:
        - allow: [User, Group]
    - type: file
      target: ../../plugins/github-actions/examples/sample.yaml
    - type: file
      target: ../../plugins/techdocs-backend/examples/documented-component/catalog-info.yaml
    - type: file
      target: ../../plugins/adr/examples/component/catalog-info.yaml
    - type: file
      target: ../../plugins/scaffolder-backend/sample-templates/all-templates.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../cypress/e2e-fixture.catalog.info.yaml
scaffolder:
  defaultAuthor:
    name: Scaffolder
    email: scaffolder@backstage.io

auth:
  keyStore:
    provider: firestore
    firestore:
      projectId: my-project
      path: my-sessions

  environment: development
  providers:
    google:
      development:
        clientId: ${AUTH_GOOGLE_CLIENT_ID}
        clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}
    gitlab:
      development:
        clientId: ${AUTH_GITLAB_CLIENT_ID}
        clientSecret: ${AUTH_GITLAB_CLIENT_SECRET}
        audience: ${GITLAB_BASE_URL}
    saml:
      entryPoint: 'http://localhost:7001/'
      issuer: 'passport-saml'
      cert: 'fake-cert-base64'
    okta:
      development:
        clientId: ${AUTH_OKTA_CLIENT_ID}
        clientSecret: ${AUTH_OKTA_CLIENT_SECRET}
        audience: ${AUTH_OKTA_AUDIENCE}
    oauth2:
      development:
        clientId: ${AUTH_OAUTH2_CLIENT_ID}
        clientSecret: ${AUTH_OAUTH2_CLIENT_SECRET}
        authorizationUrl: ${AUTH_OAUTH2_AUTH_URL}
        tokenUrl: ${AUTH_OAUTH2_TOKEN_URL}
    oidc:
      development:
        metadataUrl: ${AUTH_OIDC_METADATA_URL}
        clientId: ${AUTH_OIDC_CLIENT_ID}
        clientSecret: ${AUTH_OIDC_CLIENT_SECRET}
        tokenEndpointAuthMethod: ${AUTH_OIDC_TOKEN_ENDPOINT_AUTH_METHOD}
        tokenSignedResponseAlg: ${AUTH_OIDC_TOKEN_SIGNED_RESPONSE_ALG}
        scope: ${AUTH_OIDC_SCOPE}
        prompt: ${AUTH_OIDC_PROMPT}
    auth0:
      development:
        clientId: ${AUTH_AUTH0_CLIENT_ID}
        clientSecret: ${AUTH_AUTH0_CLIENT_SECRET}
        domain: ${AUTH_AUTH0_DOMAIN}
    microsoft:
      development:
        clientId: ${AUTH_MICROSOFT_CLIENT_ID}
        clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
        tenantId: ${AUTH_MICROSOFT_TENANT_ID}
    onelogin:
      development:
        clientId: ${AUTH_ONELOGIN_CLIENT_ID}
        clientSecret: ${AUTH_ONELOGIN_CLIENT_SECRET}
        issuer: ${AUTH_ONELOGIN_ISSUER}
    bitbucket:
      development:
        clientId: ${AUTH_BITBUCKET_CLIENT_ID}
        clientSecret: ${AUTH_BITBUCKET_CLIENT_SECRET}
    atlassian:
      development:
        clientId: ${AUTH_ATLASSIAN_CLIENT_ID}
        clientSecret: ${AUTH_ATLASSIAN_CLIENT_SECRET}
        scopes: ${AUTH_ATLASSIAN_SCOPES}
    myproxy:
      development: {}
costInsights:
  engineerCost: 200000
  engineerThreshold: 0.5
  products:
    computeEngine:
      name: Compute Engine
      icon: compute
    cloudDataflow:
      name: Cloud Dataflow
      icon: data
    cloudStorage:
      name: Cloud Storage
      icon: storage
    bigQuery:
      name: BigQuery
      icon: search
    events:
      name: Events
      icon: data
  metrics:
    DAU:
      name: Daily Active Users
      default: true
    MSC:
      name: Monthly Subscribers
  currencies:
    engineers:
      label: 'Engineers üõ†'
      unit: 'engineer'
    usd:
      label: 'US Dollars üíµ'
      kind: 'USD'
      unit: 'dollar'
      prefix: '$'
      rate: 1
    carbonOffsetTons:
      label: 'Carbon Offset Tons ‚ôªÔ∏è‚öñÔ∏ès'
      kind: 'CARBON_OFFSET_TONS'
      unit: 'carbon offset ton'
      rate: 3.5
    beers:
      label: 'Beers üç∫'
      kind: 'BEERS'
      unit: 'beer'
      rate: 4.5
    pintsIceCream:
      label: 'Pints of Ice Cream üç¶'
      kind: 'PINTS_OF_ICE_CREAM'
      unit: 'ice cream pint'
      rate: 5.5

pagerDuty:
  eventsBaseUrl: 'https://events.pagerduty.com/v2'

jenkins:
  instances:
    - name: default
      baseUrl: https://jenkins.example.com
      username: backstage-bot
      apiKey: 123456789abcdef0123456789abcedf012

azureDevOps:
  host: dev.azure.com
  token: my-token
  organization: my-company

apacheAirflow:
  baseUrl: https://your.airflow.instance.com

gocd:
  baseUrl: https://your.gocd.instance.com

stackstorm:
  webUrl: https://your.stackstorm.webui.instance.com

permission:
  enabled: true
