solution: /submissions/accepted/sol.py
visualizer: /visualizers/vis.py
random_salt: abcd
generators:
  tree:
    - tree.py
    - lib.py
  graph:
    - graph.py
    - lib.py
  a:
    - a.cpp
    - a.h
  b:
    - b.cpp
  cpy:
    - c.py
    - lib.py

data:
  invalid_inputs:
    visualizer: # empty to disable visualizer
    data:
      not_an_int:
        in: one
      too_many_tokens:
        in: 2 2 3
      leading_whitespace:
        in: ' 2 2'
  invalid_answers:
    visualizer: /path/to/some/other_visualizer
    data:
      leading_whitespace:
        in: 2 2
        ans: ' 4'
  invalid_outputs:
    data:
      just_plain_wrong:
        in: 2 2
        ans: '4'
        out: '4'
  sample:
    testdata.yaml:
      input_validator_flags: '--max_n 10 --unique'
    data:
      '1': tree --n 12 # runs the tree generator introduced above with given arguments

      '2':
        in: 23 foo # generates the test case input file data/2.in with contents "23 foo"
      '3':
        copy: manual_cases/sample/3
      '4':
        in: 1 0
        ans: '1'
        desc: Right identity for addition
        hint: Make sure addition with zero also works
      '5':
        in: |
          10 13
          0 0
          -5 1
        ans: |
          23
          0
          -4
  secret:
    data:
      '01':
        in: '3' # string is written to 01.in.
      '02': greedy.cpp 4 # c++ is compiled, just like validators, and the resulting binary is run with argument `4`.
      '03': dir 5 # directories are OK, just like validators
      '04': tree 5 # keys from the global generators: dictionary may also be used.
      '05':
        generate: tree 6 # same as above, but with different argument
      06-string: tree "a b"
      07-string: |
        tree
        a
        b
      08-random-1: graph {seed}
      10-random-2: graph {seed:2} # Different seed, because of extra `2`
      11-random-3: graph seed={seed:2} # Different seed, because command isn't the same.
      '12': write_in_and_ans.py
      13_no_visualizer:
        generate: large_case_generator.py 1000000
        solution: /generators/gnu_multi_precision.cpp
        visualizer:
        random_salt: '123'
      hard_cases_group:
        testdata.yaml:
          on_reject: break
          accept_score: '25'
          range: 0 25
          grader_flags: min
        data:
          - '': tree empty
          - a: tree a
          - a: tree a
          - b: tree b
          - g: tree g
          - h: tree h
          - i: tree i
          - j: tree j
          - k: tree k
          - numbered_testgroup:
              data:
                - c: tree c
                - d: tree d
          - named_testgroup:
              data:
                e: tree e
                f: tree f
unknown_key: tool_specific_config
