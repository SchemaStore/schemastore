{
  "resources": {
    "cosmos": {
      "connectionString": "{cosmos.secretOutputs.connectionString}",
      "params": {
        "keyVaultName": ""
      },
      "path": "cosmos.module.bicep",
      "type": "azure.bicep.v0"
    },
    "freepdb1": {
      "connectionString": "{oracledatabase.connectionString}/freepdb1",
      "type": "value.v0"
    },
    "integrationservicea": {
      "bindings": {
        "http": {
          "protocol": "tcp",
          "scheme": "http",
          "transport": "http"
        },
        "https": {
          "protocol": "tcp",
          "scheme": "https",
          "transport": "http"
        }
      },
      "env": {
        "ASPNETCORE_FORWARDEDHEADERS_ENABLED": "true",
        "ConnectionStrings__cosmos": "{cosmos.connectionString}",
        "ConnectionStrings__freepdb1": "{freepdb1.connectionString}",
        "ConnectionStrings__kafka": "{kafka.connectionString}",
        "ConnectionStrings__mymongodb": "{mymongodb.connectionString}",
        "ConnectionStrings__mysqldb": "{mysqldb.connectionString}",
        "ConnectionStrings__postgresdb": "{postgresdb.connectionString}",
        "ConnectionStrings__rabbitmq": "{rabbitmq.connectionString}",
        "ConnectionStrings__redis": "{redis.connectionString}",
        "ConnectionStrings__tempdb": "{tempdb.connectionString}",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY": "in_memory",
        "SKIP_RESOURCES": "None"
      },
      "path": "../TestProject.IntegrationServiceA/TestProject.IntegrationServiceA.csproj",
      "type": "project.v0"
    },
    "kafka": {
      "bindings": {
        "tcp": {
          "protocol": "tcp",
          "scheme": "tcp",
          "targetPort": 9092,
          "transport": "tcp"
        }
      },
      "connectionString": "{kafka.bindings.tcp.host}:{kafka.bindings.tcp.port}",
      "env": {
        "KAFKA_ADVERTISED_LISTENERS": "PLAINTEXT://localhost:29092,PLAINTEXT_HOST://localhost:9092"
      },
      "image": "docker.io/confluentinc/confluent-local:7.6.0",
      "type": "container.v0"
    },
    "mongodb": {
      "bindings": {
        "tcp": {
          "protocol": "tcp",
          "scheme": "tcp",
          "targetPort": 27017,
          "transport": "tcp"
        }
      },
      "connectionString": "mongodb://{mongodb.bindings.tcp.host}:{mongodb.bindings.tcp.port}",
      "image": "docker.io/library/mongo:7.0.5",
      "type": "container.v0"
    },
    "mymongodb": {
      "connectionString": "{mongodb.connectionString}/mymongodb",
      "type": "value.v0"
    },
    "mysql": {
      "bindings": {
        "tcp": {
          "protocol": "tcp",
          "scheme": "tcp",
          "targetPort": 3306,
          "transport": "tcp"
        }
      },
      "connectionString": "Server={mysql.bindings.tcp.host};Port={mysql.bindings.tcp.port};User ID=root;Password={mysql-password.value}",
      "env": {
        "MYSQL_DATABASE": "mysqldb",
        "MYSQL_ROOT_PASSWORD": "{mysql-password.value}"
      },
      "image": "docker.io/library/mysql:8.3.0",
      "type": "container.v0"
    },
    "mysql-password": {
      "inputs": {
        "value": {
          "default": {
            "generate": {
              "minLength": 22
            }
          },
          "secret": true,
          "type": "string"
        }
      },
      "type": "parameter.v0",
      "value": "{mysql-password.inputs.value}"
    },
    "mysqldb": {
      "connectionString": "{mysql.connectionString};Database=mysqldb",
      "type": "value.v0"
    },
    "nodeapp": {
      "args": [
        "C:\\Code\\aspire\\tests\\testproject\\TestProject.AppHost\\..\\nodeapp\\app.js"
      ],
      "bindings": {
        "http": {
          "port": 5031,
          "protocol": "tcp",
          "scheme": "http",
          "targetPort": 8000,
          "transport": "http"
        }
      },
      "command": "node",
      "env": {
        "NODE_ENV": "production",
        "PORT": "{nodeapp.bindings.http.targetPort}"
      },
      "type": "executable.v0",
      "workingDirectory": "../nodeapp"
    },
    "npmapp": {
      "args": ["run", "start"],
      "bindings": {
        "http": {
          "port": 5032,
          "protocol": "tcp",
          "scheme": "http",
          "targetPort": 8001,
          "transport": "http"
        }
      },
      "command": "npm",
      "env": {
        "NODE_ENV": "production",
        "PORT": "{npmapp.bindings.http.targetPort}"
      },
      "type": "executable.v0",
      "workingDirectory": "../nodeapp"
    },
    "oracledatabase": {
      "bindings": {
        "tcp": {
          "protocol": "tcp",
          "scheme": "tcp",
          "targetPort": 1521,
          "transport": "tcp"
        }
      },
      "connectionString": "user id=system;password={oracledatabase-password.value};data source={oracledatabase.bindings.tcp.host}:{oracledatabase.bindings.tcp.port}",
      "env": {
        "ORACLE_PWD": "{oracledatabase-password.value}"
      },
      "image": "container-registry.oracle.com/database/free:23.3.0.0",
      "type": "container.v0"
    },
    "oracledatabase-password": {
      "inputs": {
        "value": {
          "default": {
            "generate": {
              "minLength": 22
            }
          },
          "secret": true,
          "type": "string"
        }
      },
      "type": "parameter.v0",
      "value": "{oracledatabase-password.inputs.value}"
    },
    "postgres": {
      "bindings": {
        "tcp": {
          "protocol": "tcp",
          "scheme": "tcp",
          "targetPort": 5432,
          "transport": "tcp"
        }
      },
      "connectionString": "Host={postgres.bindings.tcp.host};Port={postgres.bindings.tcp.port};Username=postgres;Password={postgres-password.value}",
      "env": {
        "POSTGRES_DB": "postgresdb",
        "POSTGRES_HOST_AUTH_METHOD": "scram-sha-256",
        "POSTGRES_INITDB_ARGS": "--auth-host=scram-sha-256 --auth-local=scram-sha-256",
        "POSTGRES_PASSWORD": "{postgres-password.value}",
        "POSTGRES_USER": "postgres"
      },
      "image": "docker.io/library/postgres:16.2",
      "type": "container.v0"
    },
    "postgres-password": {
      "inputs": {
        "value": {
          "default": {
            "generate": {
              "minLength": 22
            }
          },
          "secret": true,
          "type": "string"
        }
      },
      "type": "parameter.v0",
      "value": "{postgres-password.inputs.value}"
    },
    "postgresdb": {
      "connectionString": "{postgres.connectionString};Database=postgresdb",
      "type": "value.v0"
    },
    "rabbitmq": {
      "bindings": {
        "tcp": {
          "protocol": "tcp",
          "scheme": "tcp",
          "targetPort": 5672,
          "transport": "tcp"
        }
      },
      "connectionString": "amqp://guest:{rabbitmq-password.value}@{rabbitmq.bindings.tcp.host}:{rabbitmq.bindings.tcp.port}",
      "env": {
        "RABBITMQ_DEFAULT_PASS": "{rabbitmq-password.value}",
        "RABBITMQ_DEFAULT_USER": "guest"
      },
      "image": "docker.io/library/rabbitmq:3",
      "type": "container.v0"
    },
    "rabbitmq-password": {
      "inputs": {
        "value": {
          "default": {
            "generate": {
              "minLength": 22,
              "special": false
            }
          },
          "secret": true,
          "type": "string"
        }
      },
      "type": "parameter.v0",
      "value": "{rabbitmq-password.inputs.value}"
    },
    "redis": {
      "bindings": {
        "tcp": {
          "protocol": "tcp",
          "scheme": "tcp",
          "targetPort": 6379,
          "transport": "tcp"
        }
      },
      "connectionString": "{redis.bindings.tcp.host}:{redis.bindings.tcp.port}",
      "image": "docker.io/library/redis:7.2.4",
      "type": "container.v0"
    },
    "servicea": {
      "bindings": {
        "http": {
          "protocol": "tcp",
          "scheme": "http",
          "transport": "http"
        },
        "https": {
          "protocol": "tcp",
          "scheme": "https",
          "transport": "http"
        }
      },
      "env": {
        "ASPNETCORE_FORWARDEDHEADERS_ENABLED": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY": "in_memory"
      },
      "path": "../TestProject.ServiceA/TestProject.ServiceA.csproj",
      "type": "project.v0"
    },
    "serviceb": {
      "bindings": {
        "http": {
          "protocol": "tcp",
          "scheme": "http",
          "transport": "http"
        },
        "https": {
          "protocol": "tcp",
          "scheme": "https",
          "transport": "http"
        }
      },
      "env": {
        "ASPNETCORE_FORWARDEDHEADERS_ENABLED": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY": "in_memory"
      },
      "path": "../TestProject.ServiceB/TestProject.ServiceB.csproj",
      "type": "project.v0"
    },
    "servicec": {
      "bindings": {
        "http": {
          "protocol": "tcp",
          "scheme": "http",
          "transport": "http"
        },
        "https": {
          "protocol": "tcp",
          "scheme": "https",
          "transport": "http"
        }
      },
      "env": {
        "ASPNETCORE_FORWARDEDHEADERS_ENABLED": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY": "in_memory"
      },
      "path": "../TestProject.ServiceC/TestProject.ServiceC.csproj",
      "type": "project.v0"
    },
    "sqlserver": {
      "bindings": {
        "tcp": {
          "protocol": "tcp",
          "scheme": "tcp",
          "targetPort": 1433,
          "transport": "tcp"
        }
      },
      "connectionString": "Server={sqlserver.bindings.tcp.host},{sqlserver.bindings.tcp.port};User ID=sa;Password={sqlserver-password.value};TrustServerCertificate=true",
      "env": {
        "ACCEPT_EULA": "Y",
        "MSSQL_SA_PASSWORD": "{sqlserver-password.value}"
      },
      "image": "mcr.microsoft.com/mssql/server:2022-latest",
      "type": "container.v0"
    },
    "sqlserver-password": {
      "inputs": {
        "value": {
          "default": {
            "generate": {
              "minLength": 22,
              "minLower": 1,
              "minNumeric": 1,
              "minUpper": 1
            }
          },
          "secret": true,
          "type": "string"
        }
      },
      "type": "parameter.v0",
      "value": "{sqlserver-password.inputs.value}"
    },
    "tempdb": {
      "connectionString": "{sqlserver.connectionString};Database=tempdb",
      "type": "value.v0"
    },
    "workera": {
      "env": {
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY": "in_memory"
      },
      "path": "../TestProject.WorkerA/TestProject.WorkerA.csproj",
      "type": "project.v0"
    }
  }
}
