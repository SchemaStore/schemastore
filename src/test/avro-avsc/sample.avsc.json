{
  "doc": "This is a user record in a fictitious to-do-list management app. It supports arbitrary grouping and nesting of items, and allows you to add items by email or by tweeting.\n\nNote this app doesn't actually exist. The schema is just a demo for [Avrodoc](https://github.com/ept/avrodoc)!",
  "fields": [
    {
      "doc": "System-assigned numeric user ID. Cannot be changed by the user.",
      "name": "id",
      "type": "int"
    },
    {
      "doc": "The username chosen by the user. Can be changed by the user.",
      "name": "username",
      "type": "string"
    },
    {
      "doc": "The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).",
      "name": "passwordHash",
      "type": "string"
    },
    {
      "doc": "Timestamp (milliseconds since epoch) when the user signed up",
      "name": "signupDate",
      "type": "long"
    },
    {
      "doc": "All email addresses on the user's account",
      "name": "emailAddresses",
      "type": {
        "items": {
          "doc": "Stores details about an email address that a user has associated with their account.",
          "fields": [
            {
              "doc": "The email address, e.g. `foo@example.com`",
              "name": "address",
              "type": "string"
            },
            {
              "default": false,
              "doc": "true if the user has clicked the link in a confirmation email to this address.",
              "name": "verified",
              "type": "boolean"
            },
            {
              "doc": "Timestamp (milliseconds since epoch) when the email address was added to the account.",
              "name": "dateAdded",
              "type": "long"
            },
            {
              "doc": "Timestamp (milliseconds since epoch) when an email sent to this address last bounced. Reset to null when the address no longer bounces.",
              "name": "dateBounced",
              "type": ["null", "long"]
            }
          ],
          "name": "EmailAddress",
          "type": "record"
        },
        "type": "array"
      }
    },
    {
      "doc": "All Twitter accounts that the user has OAuthed",
      "name": "twitterAccounts",
      "type": {
        "items": {
          "doc": "Stores access credentials for one Twitter account, as granted to us by the user by OAuth.",
          "fields": [
            {
              "doc": "Indicator of whether this authorization is currently active, or has been revoked",
              "name": "status",
              "type": {
                "doc": "* `PENDING`: the user has started authorizing, but not yet finished\n* `ACTIVE`: the token should work\n* `DENIED`: the user declined the authorization\n* `EXPIRED`: the token used to work, but now it doesn't\n* `REVOKED`: the user has explicitly revoked the token",
                "name": "OAuthStatus",
                "symbols": [
                  "PENDING",
                  "ACTIVE",
                  "DENIED",
                  "EXPIRED",
                  "REVOKED"
                ],
                "type": "enum"
              }
            },
            {
              "doc": "Twitter's numeric ID for this user",
              "name": "userId",
              "type": "long"
            },
            {
              "doc": "The twitter username for this account (can be changed by the user)",
              "name": "screenName",
              "type": "string"
            },
            {
              "doc": "The OAuth token for this Twitter account",
              "name": "oauthToken",
              "type": "string"
            },
            {
              "doc": "The OAuth secret, used for signing requests on behalf of this Twitter account. `null` whilst the OAuth flow is not yet complete.",
              "name": "oauthTokenSecret",
              "type": ["null", "string"]
            },
            {
              "doc": "Timestamp (milliseconds since epoch) when the user last authorized this Twitter account",
              "name": "dateAuthorized",
              "type": "long"
            }
          ],
          "name": "TwitterAccount",
          "type": "record"
        },
        "type": "array"
      }
    },
    {
      "doc": "The top-level items in the user's to-do list",
      "name": "toDoItems",
      "type": {
        "items": {
          "doc": "A record is one node in a To-Do item tree (every record can contain nested sub-records).",
          "fields": [
            {
              "doc": "User-selected state for this item (e.g. whether or not it is marked as done)",
              "name": "status",
              "type": {
                "doc": "* `HIDDEN`: not currently visible, e.g. because it becomes actionable in future\n* `ACTIONABLE`: appears in the current to-do list\n* `DONE`: marked as done, but still appears in the list\n* `ARCHIVED`: marked as done and no longer visible\n* `DELETED`: not done and removed from list (preserved for undo purposes)",
                "name": "ToDoStatus",
                "symbols": [
                  "HIDDEN",
                  "ACTIONABLE",
                  "DONE",
                  "ARCHIVED",
                  "DELETED"
                ],
                "type": "enum"
              }
            },
            {
              "doc": "One-line summary of the item",
              "name": "title",
              "type": "string"
            },
            {
              "doc": "Detailed description (may contain HTML markup)",
              "name": "description",
              "type": ["null", "string"]
            },
            {
              "doc": "Timestamp (milliseconds since epoch) at which the item should go from `HIDDEN` to `ACTIONABLE` status",
              "name": "snoozeDate",
              "type": ["null", "long"]
            },
            {
              "doc": "List of children of this to-do tree node",
              "name": "subItems",
              "type": {
                "items": "ToDoItem",
                "type": "array"
              }
            }
          ],
          "name": "ToDoItem",
          "type": "record"
        },
        "type": "array"
      }
    }
  ],
  "name": "User",
  "namespace": "com.example.avro",
  "type": "record"
}
